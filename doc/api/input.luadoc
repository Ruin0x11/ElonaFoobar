--- Functions for prompting the player for input.
--  @usage local Input = Elona.require("Input")
module "Input"

--- Prompts the player to select "yes" or "no".
-- @tparam string message a message to display
-- @treturn bool true if "yes" was selected.
-- @usage local result = Input.yes_no("Yes or no?")
--
-- if result then
--    GUI.txt("You chose yes. ")
-- else
--    GUI.txt("You chose no. ")
-- end
function yes_no(message) end

--- Prompts the player to select from a list of choices. Raises an
--- error if no arguments are provided.
-- @treturn[1] num the index of the item chosen, starting from 1
-- @treturn[2] nil if canceled
-- @usage GUI.txt("Which? ")
-- local choices = {"First", "Second", "Third"}
-- local result = Input.prompt_choice(table.unpack(choices))
--
-- if result then
--    GUI.txt("You chose \"" .. choices[result] .. "\". ")
-- else
--    GUI.txt("Never mind. ")
-- end
function prompt_choice(...) end

--- Prompts the player to choose a number. Raises an error if
--- <code>max</code> is less than 0.
-- @tparam string message a message to display
-- @tparam num max the maximum number choosable
-- @tparam[opt] num index the starting index
-- @treturn[1] num the number chosen
-- @treturn[2] nil if canceled, or max < 0
-- @usage local result = Input.prompt_number("Which character to spawn? ", 353)
-- if result then
--    local chara = Chara.create(25, 25, result)
--    if chara then
--       GUI.txt("Spawned " .. chara.name .. ". ")
--    end
-- else
--    GUI.txt("Never mind.")
-- end
function prompt_number(message, max, index) end

--- Prompts the player to enter text.
-- @tparam string message a message to display
-- @tparam bool is_cancelable whether or not the dialog can be canceled
-- @treturn[1] string the text that was input
-- @treturn[1] nil if canceled
-- @usage local result = Input.prompt_text("What text?", true)
--
-- if result then
--    GUI.txt("You typed \"" .. result .. "\". ")
-- else
--    GUI.txt("Never mind. ")
-- end
function prompt_text(message, is_cancelable) end

--- Prompts the player to select a position.
-- @tparam string message a message to display
-- @tparam[opt] LuaPosition pos the initial position to select
-- @treturn[1] LuaPosition the position that was selected
-- @treturn[1] nil if canceled
-- @usage local result = Input.prompt_position("Which position?")
--
-- if result then
--    GUI.txt(result.x .. "," .. result.y)
-- else
--    GUI.txt("Never mind. ")
-- end
function prompt_position(message, pos) end

--- Returns true if any key was pressed. Useful for interrupting
--- actions enqueued by Macro.enqueue.
function any_key_pressed() end
