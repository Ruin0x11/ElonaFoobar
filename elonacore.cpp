#include "ability.hpp"
#include "animation.hpp"
#include "audio.hpp"
#include "autopick.hpp"
#include "buff.hpp"
#include "calc.hpp"
#include "card.hpp"
#include "character.hpp"
#include "class.hpp"
#include "config.hpp"
#include "ctrl_file.hpp"
#include "debug.hpp"
#include "draw.hpp"
#include "elona.hpp"
#include "filesystem.hpp"
#include "fish.hpp"
#include "foobar_save.hpp"
#include "i18n.hpp"
#include "input.hpp"
#include "item.hpp"
#include "item_db.hpp"
#include "item_material.hpp"
#include "log.hpp"
#include "lua.hpp"
#include "macro.hpp"
#include "main.hpp"
#include "map.hpp"
#include "race.hpp"
#include "random.hpp"
#include "snail/application.hpp"
#include "trait.hpp"
#include "variables.hpp"
#include "version.hpp"
#include "wish.hpp"
#include <map>

using namespace elona;


namespace
{

int cs_posbk_x{};
int cs_posbk_y{};
int cs_posbk_w{};
int cs_posbk_h{};



std::string atbuff;



position_t gmes(
    const std::string& text,
    int x_base,
    int y_base,
    int width,
    const snail::color& text_color_base,
    bool shadow)
{
    int font_size = 14;
    font(font_size - en * 2);

    const auto message = text + u8"$end";
    int x = x_base;
    int y = y_base;
    size_t pos = 0;
    snail::color text_color = text_color_base;

    while (message.find(u8"$end", pos) != pos)
    {
        bool wait_to_break_line = false;
        uint8_t first = message[pos];
        size_t byte;
        if (first <= 0x7F)
            byte = 1;
        else if (first >= 0xc2 && first <= 0xdf)
            byte = 2;
        else if (first >= 0xe0 && first <= 0xef)
            byte = 3;
        else if (first >= 0xf0 && first <= 0xf7)
            byte = 4;
        else if (first >= 0xf8 && first <= 0xfb)
            byte = 5;
        else if (first >= 0xfc && first <= 0xfd)
            byte = 6;
        else
            byte = 1;
        std::string m_ = strmid(message, pos, byte);
        pos += byte;
        if (m_ == u8"。" || m_ == u8"、" || m_ == u8"」" || m_ == u8"』"
            || m_ == u8"！" || m_ == u8"？" || m_ == u8"…")
        {
            wait_to_break_line = true;
        }
        else if (m_ == u8"<")
        {
            const auto tag = strmid(message, pos, instr(message, pos, u8">"));
            pos += instr(message, pos, u8">") + 1;
            if (tag == u8"emp1")
            {
                font(font_size - en * 2, snail::font_t::style_t::underline);
                text_color = {50, 50, 255};
            }
            else if (tag == u8"emp2")
            {
                font(font_size - en * 2, snail::font_t::style_t::bold);
                text_color = {40, 130, 40};
            }
            else if (tag == u8"title1")
            {
                font_size = 12;
                font(font_size - en * 2, snail::font_t::style_t::bold);
                text_color = {100, 50, 50};
            }
            else if (tag == u8"def")
            {
                font_size = 14;
                font(font_size - en * 2);
                text_color = text_color_base;
            }
            else if (tag == u8"p")
            {
                y += 24;
                x = x_base;
            }
            else if (tag == u8"br")
            {
                y += 16;
                x = x_base;
            }
            else if (tag == u8"b")
            {
                font(font_size - en * 2, snail::font_t::style_t::bold);
            }
            else if (tag == u8"green")
            {
                text_color = {20, 120, 20};
            }
            else if (tag == u8"red")
            {
                text_color = {120, 20, 20};
            }
            else if (tag == u8"col")
            {
                text_color = text_color_base;
            }
            continue;
        }
        if (m_ == u8"^")
        {
            m_ = strmid(message, pos, 1);
            ++pos;
        }
        if (!wait_to_break_line)
        {
            if (x >= x_base + width)
            {
                x = x_base;
                y += font_size + 2;
            }
        }
        if (shadow)
        {
            color(180, 160, 140);
            elona::pos(x + 1, y + 1);
            mes(m_);
            color(0, 0, 0);
        }
        color(text_color.r, text_color.g, text_color.b);
        elona::pos(x, y);
        mes(m_);
        color(0, 0, 0);
        x += font_size / 2 * (byte == 1 ? 1 : 2);
    }

    return {x_base, y + font_size + 4};
}



int ask_direction_to_close()
{
    int number_of_doors{};
    position_t pos;
    for (int dy = -1; dy <= 1; ++dy)
    {
        for (int dx = -1; dx <= 1; ++dx)
        {
            if (dy == 0 && dx == 0)
                continue;
            int x = cdata[0].position.x + dx;
            int y = cdata[0].position.y + dy;
            cell_featread(x, y);
            if (feat(1) == 20 && map(x, y, 1) == 0)
            {
                ++number_of_doors;
                pos = {x, y};
            }
        }
    }
    if (number_of_doors == 1)
    {
        x = pos.x;
        y = pos.y;
        return 1;
    }

    txt(lang(u8"何を閉める？"s, u8"Which door do you want to close? "s));
    update_screen();
    return ask_direction();
}



void draw_scroll(int x, int y, int width, int height)
{
    int x3 = width + x - width % 8 - 64;
    int y3 = height + y - height % 8 - 64;

    for (int i = 0; i < width / 8; ++i)
    {
        if (i < 8)
        {
            if (i == 0)
            {
                pos(x, y);
                gcopy(7, 0, 0, 64, 48);
                pos(x, y3);
                gcopy(7, 0, 144, 64, 48);
            }
            continue;
        }
        if (i < width / 8 - 8)
        {
            pos(i * 8 + x, y);
            gcopy(7, (i - 8) % 18 * 8 + 64, 0, 8, 48);
            pos(i * 8 + x, y3);
            gcopy(7, (i - 8) % 18 * 8 + 64, 144, 8, 48);
            continue;
        }
        pos(x3, y);
        gcopy(7, 208, 0, 64, 48);
        pos(x3, y3);
        gcopy(7, 208, 144, 64, 48);
        break;
    }

    for (int i = 0; i < height / 8 - 14; ++i)
    {
        for (int j = 0; j < width / 8; ++j)
        {
            if (j == 0)
            {
                pos(x, i * 8 + y + 48);
                gcopy(7, 0, i % 12 * 8 + 48, 64, 8);
                continue;
            }
            if (j < width / 8 - 15)
            {
                pos(j * 8 + x + 56, i * 8 + y + 48);
                gcopy(7, j % 18 * 8 + 64, i % 12 * 8 + 48, 8, 8);
                continue;
            }
            pos(x3, i * 8 + y + 48);
            gcopy(7, 208, i % 12 * 8 + 48, 64, 8);
            break;
        }
    }
}



} // namespace



namespace elona
{


void screen_txtadv();


int prm_518;
int prm_818;
int prm_820;
int prm_853;

int tmp_at_m172;

elona_vector1<int> inhlist_at_m184;
elona_vector1<int> inhlist;

int i_at_m68;
double r_at_m133;


elona_vector2<std::string> rankn;
elona_vector1<int> ranknorma;
elona_vector1<std::string> popostname;
elona_vector3<int> pochart;
elona_vector2<int> podata;
elona_vector2<int> bdref;
int f_at_m14 = 0;
int evproc = 0;
int enc = 0;
int enc2 = 0;
int autoturn = 0;
int firstautoturn = 0;
std::string strhint4;
std::string strhint6;
elona_vector1<int> randcolor;
int plat = 0;
std::string nquestdate;
elona_vector1<std::string> tname;
elona_vector2<int> cardplayer_at_cardcontrol;
int cardplayermax_at_cardcontrol = 0;
int cardholdermax_at_cardcontrol = 0;
int pilex_at_cardcontrol = 0;
int piley_at_cardcontrol = 0;
elona_vector2<int> card_at_cardcontrol;
int cardmax_at_cardcontrol = 0;
int nojoker = 0;
elona_vector1<int> i_at_cardcontrol;
elona_vector1<int> p_at_cardcontrol;
int dx_at_cardcontrol = 0;
int dy_at_cardcontrol = 0;
int c_at_cardcontrol = 0;
elona_vector1<int> fsetrare;
elona_vector1<int> fsetwear;
elona_vector1<int> fsetitem;
elona_vector2<int> encref;
elona_vector2<int> enclist;
elona_vector2<int> encammoref;
elona_vector1<int> p_at_m47;
int enc_at_m48 = 0;
int encp_at_m48 = 0;
int p_at_m48 = 0;
elona_vector2<int> egoenc;
elona_vector2<int> egoref;
elona_vector1<int> egolist;
int maxegominorn = 0;
elona_vector1<std::string> rpdatan;
int i_at_m66 = 0;
int lv_at_m77 = 0;
int exp_at_m77 = 0;
int growth_at_m77 = 0;
int lvchange_at_m77 = 0;
int i_at_m79 = 0;
int cellchara = 0;
int cellfeat = 0;
int tc_at_m81 = 0;
elona_vector2<int> route;
int maxroute = 0;
int dy_at_modfov = 0;
int dx_at_modfov = 0;
int ay_at_modfov = 0;
int ax_at_modfov = 0;
int ty_at_modfov = 0;
int tx_at_modfov = 0;
int sx_at_modfov = 0;
int sy_at_modfov = 0;
int f2_at_modfov = 0;
int f1_at_modfov = 0;
int qy_at_modfov = 0;
int m_at_modfov = 0;
int qx_at_modfov = 0;
int msgy = 0;
int pagebk = 0;
int csprev = 0;
int pagesaved = 0;
int himc_at_ime_control = 0;
int hwnd = 0;
int x2_at_m105 = 0;
int y2_at_m105 = 0;
int curmenu = 0;
int inf_ver = 0;
elona_vector1<int> matval;
elona_vector2<int> matref;
elona_vector2<int> matspot;
elona_vector1<std::string> matname;
elona_vector1<std::string> matdesc;
int matid = 0;
int characreatehack = 0;
elona_vector1<std::string> usertxt;
int p_at_m117 = 0;
int gspdorg = 0;
int gspd = 0;
int f_at_m125 = 0;
int dx_at_m133 = 0;
elona_vector1<int> dy_at_m133;
int f_at_con = 0;
int res_at_con = 0;
int p_at_con = 0;
int dx_at_m136 = 0;
int dy_at_m136 = 0;
int ci_at_m138 = 0;
int p_at_m138 = 0;
int max_at_m138 = 0;
int ti_at_m138 = 0;
elona_vector1<int> list_at_m138;
int f_at_m138 = 0;
int a_at_m138 = 0;
int dmg_at_m141 = 0;
int rtdmg = 0;
std::string ndeathcause;
int catitem = 0;
int rollanatomy = 0;
int i_at_m145 = 0;
std::string url_at_m147;
std::string chatsendurl;
std::string conurl_at_m147;
elona_vector1<std::string> cgiurl3;
std::string votesendurl;
elona_vector1<std::string> cgiurl2;
std::string chatnew;
std::string textreadurl;
std::string chatreadurl;
std::string votereadurl;
int chatturn = 0;
int inf_clockarrowx = 0;
int inf_clockarrowy = 0;
int inf_clocky = 0;
int inf_barh = 0;
int inf_msgh = 0;
int inf_raderx = 0;
int inf_raderw = 0;
int inf_bary = 0;
int inf_radery = 0;
int scposy = 0;
int inf_hpx = 0;
int inf_hpy = 0;
int inf_mpx = 0;
int inf_mpy = 0;
int screendrawhack = 0;
int racount = 0;
int scposval = 0;
elona_vector2<int> fovlist;
int s_p = 0;
int weatherbk = 0;
int evx = 0;
int evy = 0;
int evtiles = 0;
int evscrh = 0;
int evscrw = 0;
int refreshmode = 0;
int r3 = 0;
int refdiff = 0;
int pcnoise = 0;
int traveldone = 0;
elona_vector1<int> fsetincome;
elona_vector1<int> fsetrewardsupply;
elona_vector1<int> fsetperform;
elona_vector1<int> fsetdeliver;
elona_vector1<int> fsetsupply;
elona_vector1<int> fsetmagic;
elona_vector1<int> fsetarmor;
elona_vector1<int> fsetweapon;
elona_vector1<int> fsetplantartifact;
elona_vector1<int> fsetplantunknown;
elona_vector1<int> fsetremain;
elona_vector1<int> fsetbarrel;
elona_vector1<int> fsetcollect;
elona_vector1<int> isetdeed;
elona_vector1<int> isetthrowpotionminor;
elona_vector1<int> isetthrowpotionmajor;
elona_vector1<int> isetthrowpotiongreater;
elona_vector1<int> isethire;
elona_vector1<int> isetgiftminor;
elona_vector1<int> isetgiftmajor;
elona_vector1<int> isetgiftgrand;
elona_vector1<int> isethirerole;
elona_vector1<int> isetcrop;
elona_vector1<int> isetgod;
elona_vector1<int> asettown;
elona_vector1<int> moneybox;
elona_vector1<int> isetbook;
elona_vector1<int> rpsourcelist;
int cibk = 0;
int fdmax = 0;
elona_vector2<int> fdlist;
int nutrition = 0;
int cieat = 0;
int tile_trap = 0;
int tile_doorclosed4 = 0;
int tile_dooropen = 0;
int tile_downlocked = 0;
int tile_re = 0;
int tile_plant = 0;
int tile_board = 0;
int tile_votebox = 0;
int tile_townboard = 0;
elona_vector2<int> cellobjdata;
elona_vector1<int> tile_room;
int tile_pot = 0;
int rdroomnum = 0;
elona_vector1<int> roomexist;
int tx_at_m168 = 0;
int ty_at_m168 = 0;
int dir_at_m168 = 0;
int dest_at_m168 = 0;
int dir2_at_m168 = 0;
int rdhiddenpath = 0;
int rdpos = 0;
elona_vector1<int> roomwidth;
int cr = 0;
elona_vector1<int> roomheight;
elona_vector1<int> roomx;
elona_vector1<int> roomy;
int roomdoor = 0;
int roomsum = 0;
int rdroomsizemax = 0;
int rdroomsizemin = 0;
int x_at_m169 = 0;
int y_at_m169 = 0;
int rdroomupstair = 0;
int rdroomdownstair = 0;
int dx_at_m170 = 0;
int dy_at_m170 = 0;
int p_at_m170 = 0;
int rdroomentrance = 0;
int rdtry = 0;
elona_vector1<int> rdval;
int rdtunnel = 0;
int rdextraroom = 0;
int _mclass = 0;
int _bold = 0;
int rx = 0;
int rw = 0;
int ry = 0;
int rh = 0;
int rdsize = 0;
int rdsecond = 0;
std::string midbk;
int tlocinitx = 0;
int tlocinity = 0;
int sold = 0;
elona_vector1<int> income;
int rankorg = 0;
int rankcur = 0;
int renewmulti = 0;
int usermapid = 0;
int n_at_m174 = 0;
std::string s_at_m174;
int prodtype = 0;
int atxthrough = 0;
std::string atxbg;
std::string atxbgbk;
elona_vector1<int> atxpic;
elona_vector1<std::string> atxinfon;
elona_vector1<int> atxid;
int txtadvmsgfix = 0;
elona_vector1<int> mattile;
int atxap = 0;
int atxlv = 0;
int txtadvscreenupdate = 0;
int dbg_skipevent = 0;
elona_vector2<int> rpdata;
int rpid = 0;
elona_vector2<std::string> rfnameorg;
elona_vector1<int> rpref;
int rpmode = 0;
elona_vector1<int> rppage;
int rpresult = 0;
int cansee = 0;
int kdx = 0;
int kdy = 0;
elona_vector1<std::string> headtemp;
std::string username;
int mousex = 0;
int mousey = 0;
int findlocmode = 0;
int tgloc = 0;
int tglocx = 0;
int tglocy = 0;
int dump_return = 0;
int questteleport = 0;
int refx = 0;
int refy = 0;
int csskill = 0;
int attackvar = 0;
std::string fileext;
std::string filedsc;
int lv = 0;
int lenhead = 0;
int lensum = 0;
elona_vector1<std::string> filebuff;
elona_vector1<std::string> filetemp;
int lensum_at_m188 = 0;
elona_vector1<std::string> filebuff_at_m188;
elona_vector1<int> p_at_m188;
int len_at_m188 = 0;
int lenhead_at_m188 = 0;
elona_vector1<std::string> filetemp_at_m188;
elona_vector1<std::string> txtbuff;
int initunid = 0;
int cun = 0;
elona_vector1<int> unaiactsubfreq;
elona_vector1<int> bmpbuff;
std::string usertitle;
std::string dbm;
int dbg_exitshowroom = 0;
int dbg_freemove = 0;
int movx = 0;
int movy = 0;
int digx = 0;
int digy = 0;
int npccostmp = 0;
int noeffect = 0;
int inumbk = 0;
int dirsub = 0;
int ri = 0;
int attackitem = 0;
int extraattack = 0;
int j_at_m193 = 0;
int p_at_m193 = 0;
int chatpicloaded = 0;
elona_vector2<std::string> actor;
int rewardfix = 0;
int blockedbychara = 0;
int ct = 0;


void netload(const std::string& prm_194)
{
    int res_at_m0 = 0;
    std::string estr_at_m0;
    netrequest(prm_194);
    while (1)
    {
        netexec(res_at_m0);
        if (res_at_m0)
        {
            break;
        }
        await(50);
    }
    if (res_at_m0 > 0)
    {
        return;
    }
    neterror(estr_at_m0);
    dialog(u8"エラー:"s + estr_at_m0);
    return;
}



int zentohan(const std::string& prm_209, std::string& prm_210, int prm_211)
{
    return LCMapStringA(
        GetUserDefaultLCID(), 4194304, prm_209, -1, prm_210, prm_211);
}



std::string lang(const std::string& prm_246, const std::string& prm_247)
{
    if (jp)
    {
        return prm_246;
    }
    else
    {
        return prm_247;
    }
}



std::string ranktitle(int prm_265)
{
    int p_at_m6 = 0;
    p_at_m6 = gdata((prm_265 + 120)) / 100;
    if (p_at_m6 == 1)
    {
        return rankn(0, prm_265);
    }
    if (p_at_m6 <= 5)
    {
        return rankn(1, prm_265);
    }
    if (p_at_m6 <= 10)
    {
        return rankn(2, prm_265);
    }
    if (p_at_m6 <= 80)
    {
        return rankn(p_at_m6 / 15 + 3, prm_265);
    }
    return rankn(9, prm_265);
}



void initialize_rankn()
{
    SDIM4(rankn, 30, 11, 9);
    if (jp)
    {
        rankn(0, 0) = u8"アリーナのチャンピオン"s;
        rankn(1, 0) = u8"アリーナの超エリート闘士"s;
        rankn(2, 0) = u8"アリーナのスター闘士"s;
        rankn(3, 0) = u8"アリーナのエリート闘士"s;
        rankn(4, 0) = u8"アリーナの熟練闘士"s;
        rankn(5, 0) = u8"アリーナの中堅闘士"s;
        rankn(6, 0) = u8"アリーナの期待の星"s;
        rankn(7, 0) = u8"アリーナのダークホース"s;
        rankn(8, 0) = u8"アリーナの下級闘士"s;
        rankn(9, 0) = u8"アリーナの無名の闘士"s;
        rankn(10, 0) = u8"アリーナ"s;
        rankn(0, 1) = u8"全てのペットの王"s;
        rankn(1, 1) = u8"超エリートペット使い"s;
        rankn(2, 1) = u8"ペットの王子"s;
        rankn(3, 1) = u8"ペットの憧れの的"s;
        rankn(4, 1) = u8"ペット使いのエリート"s;
        rankn(5, 1) = u8"名の知れたペット使い"s;
        rankn(6, 1) = u8"ペットの母"s;
        rankn(7, 1) = u8"なかなかのペット使い"s;
        rankn(8, 1) = u8"駆け出しのペット使い"s;
        rankn(9, 1) = u8"無名のペット使い"s;
        rankn(10, 1) = u8"ペットアリーナ"s;
        rankn(0, 2) = u8"ネフィアを統べる者"s;
        rankn(1, 2) = u8"迷宮の覇者"s;
        rankn(2, 2) = u8"ダンジョンの主"s;
        rankn(3, 2) = u8"高名な探検者"s;
        rankn(4, 2) = u8"子供達の憧れの的"s;
        rankn(5, 2) = u8"ダンジョン案内人"s;
        rankn(6, 2) = u8"名の知れた遺跡荒らし"s;
        rankn(7, 2) = u8"探検者"s;
        rankn(8, 2) = u8"ちんけな遺跡荒らし"s;
        rankn(9, 2) = u8"観光客"s;
        rankn(10, 2) = u8"クローラー"s;
        rankn(0, 3) = u8"ティリス最大の博物館"s;
        rankn(1, 3) = u8"超有名な博物館"s;
        rankn(2, 3) = u8"大人気の博物館"s;
        rankn(3, 3) = u8"有名な博物館"s;
        rankn(4, 3) = u8"来客の絶えない博物館"s;
        rankn(5, 3) = u8"ちょっと人気のある博物館"s;
        rankn(6, 3) = u8"名の知れた博物館"s;
        rankn(7, 3) = u8"まあまあの博物館"s;
        rankn(8, 3) = u8"来客の少ない博物館"s;
        rankn(9, 3) = u8"無名の博物館"s;
        rankn(10, 3) = u8"博物館"s;
        rankn(0, 4) = u8"ティリスの楽園"s;
        rankn(1, 4) = u8"超セレブな家"s;
        rankn(2, 4) = u8"ティリス有数の家"s;
        rankn(3, 4) = u8"とても住みたくなる家"s;
        rankn(4, 4) = u8"主婦の憧れの家"s;
        rankn(5, 4) = u8"ちょっと人目をひく家"s;
        rankn(6, 4) = u8"まあまあの家"s;
        rankn(7, 4) = u8"少しみすぼらしい家"s;
        rankn(8, 4) = u8"貧困にあえぐ家"s;
        rankn(9, 4) = u8"乞食の家"s;
        rankn(10, 4) = u8"ホーム"s;
        rankn(0, 5) = u8"ティリス最大の店"s;
        rankn(1, 5) = u8"王様が来る店"s;
        rankn(2, 5) = u8"大繁盛している店"s;
        rankn(3, 5) = u8"セレブが来る店"s;
        rankn(4, 5) = u8"来客の絶えない店"s;
        rankn(5, 5) = u8"マダムの来る店"s;
        rankn(6, 5) = u8"リピーターのいる店"s;
        rankn(7, 5) = u8"人が増えてきた売店"s;
        rankn(8, 5) = u8"ほとんど売れない売店"s;
        rankn(9, 5) = u8"無名の売店"s;
        rankn(10, 5) = u8"店"s;
        rankn(0, 6) = u8"ボス"s;
        rankn(1, 6) = u8"王様のアドバイザー"s;
        rankn(2, 6) = u8"エリートコンサルター"s;
        rankn(3, 6) = u8"ご意見番"s;
        rankn(4, 6) = u8"有権者の鑑"s;
        rankn(5, 6) = u8"マダム好みの有権者"s;
        rankn(6, 6) = u8"名の知れた有権者"s;
        rankn(7, 6) = u8"普通の有権者"s;
        rankn(8, 6) = u8"無関心な有権者"s;
        rankn(9, 6) = u8"ぎりぎり有権者"s;
        rankn(10, 6) = u8"コミュニティ"s;
        rankn(0, 8) = u8"グランドマスター"s;
        rankn(1, 8) = u8"マスター"s;
        rankn(2, 8) = u8"ギルドの重役"s;
        rankn(3, 8) = u8"ギルドの重役候補"s;
        rankn(4, 8) = u8"アダプト"s;
        rankn(5, 8) = u8"エキスパート"s;
        rankn(6, 8) = u8"ジャーニーマン"s;
        rankn(7, 8) = u8"ギルドの正式メンバー"s;
        rankn(8, 8) = u8"ギルドのメンバー候補"s;
        rankn(9, 8) = u8"見習い"s;
        rankn(10, 8) = u8"ギルド"s;
    }
    else
    {
        rankn(0, 0) = u8"Arena champion"s;
        rankn(1, 0) = u8"Super elite gladiator"s;
        rankn(2, 0) = u8"Star gladiator"s;
        rankn(3, 0) = u8"Elite gladiator"s;
        rankn(4, 0) = u8"Veteran gladiator"s;
        rankn(5, 0) = u8"Popular gladiator"s;
        rankn(6, 0) = u8"New hope"s;
        rankn(7, 0) = u8"Darkhorse"s;
        rankn(8, 0) = u8"Low class fighter"s;
        rankn(9, 0) = u8"Unknown fighter"s;
        rankn(10, 0) = u8"Arena"s;
        rankn(0, 1) = u8"King of tamer"s;
        rankn(1, 1) = u8"Super elite tamer"s;
        rankn(2, 1) = u8"Prince of animals"s;
        rankn(3, 1) = u8"Chief of animals"s;
        rankn(4, 1) = u8"Elite tamer"s;
        rankn(5, 1) = u8"Notorious tamer"s;
        rankn(6, 1) = u8"New hope"s;
        rankn(7, 1) = u8"Average tamer"s;
        rankn(8, 1) = u8"Petty tamer"s;
        rankn(9, 1) = u8"Unknown tamer"s;
        rankn(10, 1) = u8"Pet Arena"s;
        rankn(0, 2) = u8"King of Nefia"s;
        rankn(1, 2) = u8"Champion of labyrinth"s;
        rankn(2, 2) = u8"Dungeon master"s;
        rankn(3, 2) = u8"Famous adventurer"s;
        rankn(4, 2) = u8"Children's star"s;
        rankn(5, 2) = u8"Guide of Nefia"s;
        rankn(6, 2) = u8"Notorious tomb robber"s;
        rankn(7, 2) = u8"Tomb robber"s;
        rankn(8, 2) = u8"Famous tourist"s;
        rankn(9, 2) = u8"Tourist"s;
        rankn(10, 2) = u8"Crawler"s;
        rankn(0, 3) = u8"Tyris' greatest museum"s;
        rankn(1, 3) = u8"Royal museum"s;
        rankn(2, 3) = u8"Great museum"s;
        rankn(3, 3) = u8"Top museum"s;
        rankn(4, 3) = u8"Great museum"s;
        rankn(5, 3) = u8"Good museum"s;
        rankn(6, 3) = u8"Average museum"s;
        rankn(7, 3) = u8"Small museum"s;
        rankn(8, 3) = u8"Unknown museum"s;
        rankn(9, 3) = u8"Unknown Ruin"s;
        rankn(10, 3) = u8"Museum"s;
        rankn(0, 4) = u8"Heaven of Tyris"s;
        rankn(1, 4) = u8"Royal mansion"s;
        rankn(2, 4) = u8"Celebrity mansion"s;
        rankn(3, 4) = u8"Dream mansion"s;
        rankn(4, 4) = u8"Cozy mansion"s;
        rankn(5, 4) = u8"Attractive house"s;
        rankn(6, 4) = u8"Average house"s;
        rankn(7, 4) = u8"Poor house"s;
        rankn(8, 4) = u8"Peasant's shack"s;
        rankn(9, 4) = u8"Beggar's shack"s;
        rankn(10, 4) = u8"Home"s;
        rankn(0, 5) = u8"Tyris' greatest mall"s;
        rankn(1, 5) = u8"Royal mall"s;
        rankn(2, 5) = u8"Prosperous mall"s;
        rankn(3, 5) = u8"Celebrity shop"s;
        rankn(4, 5) = u8"Prosperous shop"s;
        rankn(5, 5) = u8"Popular shop"s;
        rankn(6, 5) = u8"Average shop"s;
        rankn(7, 5) = u8"Small shop"s;
        rankn(8, 5) = u8"Souvenir shop "s;
        rankn(9, 5) = u8"Unknown shop"s;
        rankn(10, 5) = u8"Shop"s;
        rankn(0, 6) = u8"Boss"s;
        rankn(1, 6) = u8"King's advisor"s;
        rankn(2, 6) = u8"Elite consultant"s;
        rankn(3, 6) = u8"Famous consultant"s;
        rankn(4, 6) = u8"Model voter"s;
        rankn(5, 6) = u8"Nice voter"s;
        rankn(6, 6) = u8"Infamous voter"s;
        rankn(7, 6) = u8"Average voter"s;
        rankn(8, 6) = u8"Indifferent voter"s;
        rankn(9, 6) = u8"Almost voter"s;
        rankn(10, 6) = u8"Community"s;
        rankn(0, 8) = u8"Grand master"s;
        rankn(1, 8) = u8"Master"s;
        rankn(2, 8) = u8"Adept"s;
        rankn(3, 8) = u8"Expert"s;
        rankn(4, 8) = u8"Journeyman"s;
        rankn(5, 8) = u8"Senior"s;
        rankn(6, 8) = u8"Apprentice"s;
        rankn(7, 8) = u8"Official member"s;
        rankn(8, 8) = u8"Candidate"s;
        rankn(9, 8) = u8"Thug"s;
        rankn(10, 8) = u8"Guild"s;
    }
    DIM2(ranknorma, 9);
    ranknorma(0) = 20;
    ranknorma(1) = 60;
    ranknorma(2) = 45;
    ranknorma(6) = 30;
    return;
}



std::string guildname()
{
    std::string s_at_m7;
    s_at_m7 = lang(u8"なし"s, u8"None"s);
    if (gdata_belongs_to_mages_guild != 0)
    {
        s_at_m7 = lang(u8"魔術士ギルド"s, u8"Mages Guild"s);
    }
    if (gdata_belongs_to_fighters_guild != 0)
    {
        s_at_m7 = lang(u8"戦士ギルド"s, u8"Fighters Guild"s);
    }
    if (gdata_belongs_to_thieves_guild != 0)
    {
        s_at_m7 = lang(u8"盗賊ギルド"s, u8"Thieves Guild"s);
    }
    return s_at_m7;
}



void initialize_post_data()
{
    SDIM3(popostname, 20, 7);
    popostname(1) = lang(u8"市長"s, u8"mayor"s);
    popostname(2) = lang(u8"村長"s, u8"chief"s);
    popostname(3) = lang(u8"司祭"s, u8"priest"s);
    popostname(4) = lang(u8"守衛長"s, u8"guard master"s);
    popostname(5) = lang(u8"徴税官"s, u8"tax master"s);
    popostname(6) = lang(u8"建設主任"s, u8"head architect"s);
    DIM4(pochart, 10, 10, 10);
    pochart(0, 0, 0) = 2;
    pochart(0, 1, 0) = 3;
    pochart(1, 1, 0) = 4;
    pochart(0, 2, 0) = 5;
    pochart(1, 2, 0) = 6;
    DIM3(podata, 300, 20);
    return;
}



void initialize_building_daga()
{
    DIM4(bddata, 40, 20, 10);
    DIM3(bdref, 10, 7);
    SDIM3(bdrefn, 20, 7);
    bdref(0, 1) = 0;
    bdref(1, 1) = 1500;
    bdref(0, 2) = 1;
    bdref(1, 2) = 2500;
    bdref(0, 3) = 2;
    bdref(1, 3) = 2500;
    bdref(0, 4) = 3;
    bdref(1, 4) = 2500;
    bdref(0, 5) = 4;
    bdref(1, 5) = 2500;
    bdref(0, 6) = 5;
    bdref(1, 6) = 2500;
    bdrefn(1) = lang(u8"炭鉱"s, u8"Mine"s);
    bdrefn(2) = lang(u8"畑"s, u8"Crop"s);
    bdrefn(3) = lang(u8"アトリエ"s, u8"Art Atelier"s);
    bdrefn(4) = lang(u8"寺院"s, u8"Temple"s);
    bdrefn(5) = lang(u8"盗賊の隠れ家"s, u8"Smuggler's Hideout"s);
    bdrefn(6) = lang(u8"灯台"s, u8"Light House"s);
    return;
}



int randskill()
{
    return rnd(40) + 150;
}



int randattb()
{
    return rnd(8) + 10;
}



void clear_trait_data()
{
    DIM2(traitref, 10);
    SDIM3(traitrefn, 80, 9);
    SDIM3(traitrefn2, 20, 6);
    return;
}



void gain_race_feat()
{
    if (cdatan(2, 0) == u8"dwarf"s)
    {
        trait(152) = 2;
        trait(155) = 1;
    }
    if (cdatan(2, 0) == u8"elea"s)
    {
        trait(168) = 1;
        trait(156) = 1;
    }
    if (cdatan(2, 0) == u8"eulderna"s)
    {
        trait(153) = 1;
    }
    if (cdatan(2, 0) == u8"lich"s)
    {
        trait(151) = 1;
        trait(155) = 2;
        trait(152) = 1;
    }
    if (cdatan(2, 0) == u8"golem"s)
    {
        trait(157) = 1;
        trait(152) = 2;
    }
    if (cdatan(2, 0) == u8"yerles"s)
    {
        trait(154) = 1;
    }
    if (cdatan(2, 0) == u8"juere"s)
    {
        trait(158) = 1;
        trait(159) = 1;
    }
    if (cdatan(2, 0) == u8"goblin"s)
    {
        trait(155) = 1;
        trait(159) = 1;
    }
    if (cdatan(2, 0) == u8"mutant"s)
    {
        trait(0) = 1;
    }
    if (cdatan(2, 0) == u8"fairy"s)
    {
        trait(160) = 1;
        trait(161) = 1;
    }
    return;
}



int iequiploc(int ci)
{
    switch (the_item_db[inv[ci].id]->category)
    {
    case 12000: return 1;
    case 34000: return 2;
    case 20000: return 3;
    case 16000: return 4;
    case 10000: return 5;
    case 14000: return 5;
    case 32000: return 6;
    case 22000: return 7;
    case 18000: return 9;
    case 24000: return 10;
    case 25000: return 11;
    case 19000: return 8;
    default: return 0;
    }
}



void setunid(int prm_282, int prm_283)
{
    cdata[prm_282].cnpc_id = prm_283;
    cdata[prm_282].image = 825 + prm_283;
    cdata[prm_282].image += 0;
    return;
}



int getunid(int prm_284)
{
    f_at_m14 = 0;
    for (int cnt = 0, cnt_end = (usernpcmax); cnt < cnt_end; ++cnt)
    {
        if (cdatan(5, prm_284) == userdatan(0, cnt))
        {
            setunid(prm_284, cnt);
            f_at_m14 = 1;
            break;
        }
    }
    if (f_at_m14 == 0)
    {
        cdata[prm_284].image = 1;
        cdata[prm_284].cnpc_id = usernpcmax;
        cdatan(0, prm_284) = lang(u8"残りカス"s, u8"a garbage"s);
    }
    return f_at_m14;
}



int findunid(const std::string& prm_285)
{
    f_at_m14 = 0;
    for (int cnt = 0, cnt_end = (usernpcmax); cnt < cnt_end; ++cnt)
    {
        if (prm_285 == userdatan(0, cnt))
        {
            f_at_m14 = 1 + cnt;
            break;
        }
    }
    return f_at_m14;
}



int evid()
{
    if (evnum <= 0)
    {
        return -1;
    }
    return evlist(evnum - 1);
}



int evfind(int prm_288)
{
    int f_at_m17 = 0;
    f_at_m17 = 0;
    for (int cnt = 0, cnt_end = (evnum); cnt < cnt_end; ++cnt)
    {
        if (evlist(cnt) == prm_288)
        {
            f_at_m17 = 1;
        }
    }
    return f_at_m17;
}



void evadd(int prm_289, int prm_290, int prm_291)
{
    if (evproc)
    {
        evlist(evnum) = evlist(evnum - 1);
        evdata1(evnum) = evdata1(evnum - 1);
        evdata2(evnum) = evdata2(evnum - 1);
        evlist(evnum - 1) = prm_289;
        evdata1(evnum - 1) = prm_290;
        evdata2(evnum - 1) = prm_291;
    }
    else
    {
        evlist(evnum) = prm_289;
        evdata1(evnum) = prm_290;
        evdata2(evnum) = prm_291;
    }
    ++evnum;
    return;
}



int roundmargin(int x, int y)
{
    if (x > y)
        return x - rnd(x - y);
    else if (x < y)
        return x + rnd(y - x);
    else
        return x;
}



void auto_turn(int delay)
{
    if (cc != 0)
        return;

    autoturn = 1;
    if (config::instance().autoturn == 0)
    {
        await(delay);
        ++scrturn;
    }
    if (config::instance().autoturn != 2 || firstautoturn == 1)
    {
        screenupdate = -1;
        update_screen();
    }
    if (config::instance().autoturn == 0)
    {
        redraw();
    }
}



void text_set()
{
    if (jp)
    {
        strhint1 = u8"ｶｰｿﾙ [選択]  "s;
        strhint2 =
            ""s + key_pageup + u8","s + key_pagedown + u8" [ページ切替]  "s;
        strhint3 = u8"Shift,Esc [閉じる]  "s;
        strhint3b = u8"Shift,Esc [戻る]  "s;
        strhint4 = u8"決定、"s;
        strhint5 = ""s + key_identify + u8" [既知の情報]  "s;
        strhint5b = ""s + key_mode + u8" [情報切替]  "s;
        strhint6 = u8"p [ポートレイト変更]  "s;
        strhint7 = u8"0〜9 [ショートカット]  "s;
    }
    else
    {
        strhint1 = u8"Cursor [Select]  "s;
        strhint2 = ""s + key_pageup + u8","s + key_pagedown + u8" [Page]  "s;
        strhint3 = u8"Shift,Esc [Close]  "s;
        strhint3b = u8"Shift,Esc [Back]  "s;
        strhint4 = u8"Enter,"s;
        strhint5 = ""s + key_identify + u8" [Known info]  "s;
        strhint5b = ""s + key_mode + u8" [Mode]  "s;
        strhint6 = u8"p [Portrait]  "s;
        strhint7 = u8"0~9 [Shortcut]  "s;
    }
    SDIM4(_melee, 20, 3, 8);
    if (jp)
    {
        _melee(0, 0) = u8"殴って"s;
        _melee(1, 0) = u8"殴られた。"s;
        _melee(2, 0) = u8"手"s;
    }
    else
    {
        _melee(0, 0) = u8"punch"s;
        _melee(1, 0) = u8"punch"s;
        _melee(2, 0) = u8"hand"s;
    }
    if (jp)
    {
        _melee(0, 3) = u8"噛み付いて"s;
        _melee(1, 3) = u8"噛み付かれた。"s;
        _melee(2, 3) = u8"牙"s;
    }
    else
    {
        _melee(0, 3) = u8"bite"s;
        _melee(1, 3) = u8"bite"s;
        _melee(2, 3) = u8"fang"s;
    }
    if (jp)
    {
        _melee(0, 4) = u8"睨んで"s;
        _melee(1, 4) = u8"睨まれた。"s;
        _melee(2, 4) = u8"眼"s;
    }
    else
    {
        _melee(0, 4) = u8"gaze"s;
        _melee(1, 4) = u8"gaze"s;
        _melee(2, 4) = u8"eye"s;
    }
    if (jp)
    {
        _melee(0, 1) = u8"引っ掻き"s;
        _melee(1, 1) = u8"引っ掻かれた。"s;
        _melee(2, 1) = u8"爪"s;
    }
    else
    {
        _melee(0, 1) = u8"claw"s;
        _melee(1, 1) = u8"claw"s;
        _melee(2, 1) = u8"claw"s;
    }
    if (jp)
    {
        _melee(0, 5) = u8"刺し"s;
        _melee(1, 5) = u8"刺された。"s;
        _melee(2, 5) = u8"針"s;
    }
    else
    {
        _melee(0, 5) = u8"sting"s;
        _melee(1, 5) = u8"sting"s;
        _melee(2, 5) = u8"needle"s;
    }
    if (jp)
    {
        _melee(0, 6) = u8"触って"s;
        _melee(1, 6) = u8"触られた。"s;
        _melee(2, 6) = u8"手"s;
    }
    else
    {
        _melee(0, 6) = u8"touch"s;
        _melee(1, 6) = u8"touch"s;
        _melee(2, 6) = u8"hand"s;
    }
    if (jp)
    {
        _melee(0, 7) = u8"胞子を撒き散らし"s;
        _melee(1, 7) = u8"胞子を飛ばされた。"s;
        _melee(2, 7) = u8"胞子"s;
    }
    else
    {
        _melee(0, 7) = u8"attack"s;
        _melee(1, 7) = u8"attack"s;
        _melee(2, 7) = u8"spore"s;
    }
    randcolor(0) = 0;
    randcolor(1) = 4;
    randcolor(2) = 2;
    randcolor(3) = 5;
    randcolor(4) = 6;
    _randcolor(0) = 0;
    _randcolor(1) = 2;
    _randcolor(2) = 4;
    _randcolor(3) = 5;
    _randcolor(4) = 6;
    _randcolor(5) = 3;
    homepage = lang(
        u8"http://homepage3.nifty.com/rfish/index.html"s,
        u8"http://homepage3.nifty.com/rfish/index_e.html"s);
    strblank = lang("", u8" "s);
}



std::string elename(int prm_348)
{
    if (efid == 614)
    {
        return lang(u8"飢えた"s, u8"starving"s);
    }
    if (efid == 613)
    {
        return lang(u8"腐った"s, u8"rotten"s);
    }
    if (efid == 617)
    {
        return lang(u8"恐ろしい"s, u8"fearful"s);
    }
    if (efid == 618)
    {
        return lang(u8"柔らかい"s, u8"silky"s);
    }
    if (prm_348 == 50)
    {
        return lang(u8"燃える"s, u8"burning"s);
    }
    if (prm_348 == 51)
    {
        return lang(u8"冷たい"s, u8"icy"s);
    }
    if (prm_348 == 52)
    {
        return lang(u8"放電する"s, u8"electric"s);
    }
    if (prm_348 == 54)
    {
        return lang(u8"霊的な"s, u8"psychic"s);
    }
    if (prm_348 == 58)
    {
        return lang(u8"痺れる"s, u8"numb"s);
    }
    if (prm_348 == 57)
    {
        return lang(u8"震える"s, u8"shivering"s);
    }
    if (prm_348 == 55)
    {
        return lang(u8"毒の"s, u8"poisonous"s);
    }
    if (prm_348 == 56)
    {
        return lang(u8"地獄の"s, u8"infernal"s);
    }
    if (prm_348 == 59)
    {
        return lang(u8"混沌の"s, u8"chaotic"s);
    }
    if (prm_348 == 53)
    {
        return lang(u8"暗黒の"s, u8"gloomy"s);
    }
    if (prm_348 == 61)
    {
        return lang(u8"出血の"s, u8"cut"s);
    }
    if (prm_348 == 62)
    {
        return lang(u8"エーテルの"s, u8"ether"s);
    }
    return u8"?"s;
}



std::string txttargetlevel(int cc, int tc)
{
    int x = cdata[cc].level;
    int y = cdata[tc].level;
    if (x * 20 < y)
    {
        return lang(
            u8"相手が巨人だとすれば、あなたは蟻のフン以下だ。",
            u8"If "s + he(tc)
                + u8" is a giant, you are less than a dropping of an ant.");
    }
    else if (x * 10 < y)
    {
        return lang(
            u8"絶対に勝てない相手だ。",
            cnven(he(tc)) + u8" can mince you with " + his(tc)
                + u8" eyes closed.");
    }
    else if (x * 5 < y)
    {
        return lang(
            u8"確実に殺されるだろう。",
            u8"You will get killed, a hundred percent sure.");
    }
    else if (x * 3 < y)
    {
        return lang(
            u8"奇跡が起きなければ殺されるだろう。",
            u8"You will get killed unless miracles happen.");
    }
    else if (x * 2 < y)
    {
        return lang(
            u8"少なくとも、あなたの倍は強そうだ。",
            cnven(he(tc)) + u8" " + is(tc)
                + u8" at least twice stronger than you.");
    }
    else if (x * 3 / 2 < y)
    {
        return lang(
            u8"相手はかなり強そうだ。", u8"The opponent looks quite strong.");
    }
    else if (x < y)
    {
        return lang(u8"勝てない相手ではない。", u8"Won't be an easy fight.");
    }
    else if (x / 3 * 2 < y)
    {
        return lang(u8"たぶん勝てそうだ。", u8"You will probably win.");
    }
    else if (x / 2 < y)
    {
        return lang(
            u8"負ける気はしない。",
            cnven(he(tc)) + u8" " + is(tc) + u8" an easy opponent.");
    }
    else if (x / 3 < y)
    {
        return lang(
            u8"目隠ししていても勝てそうだ。",
            u8"You bet you can beat "s + him(tc) + u8" with your eyes closed.");
    }
    else
    {
        return lang(
            u8"目隠しして座っていても勝てる。",
            u8"You can absolutely beat "s + him(tc)
                + u8" with your eyes closed and arms crossed.");
    }
}



std::string mapfile(int prm_365)
{
    if (adata(16, prm_365) == 5)
    {
        return u8"vernis"s;
    }
    if (adata(16, prm_365) == 11)
    {
        return u8"kapul"s;
    }
    if (adata(16, prm_365) == 12)
    {
        return u8"yowyn"s;
    }
    if (adata(16, prm_365) == 14)
    {
        return u8"rogueden"s;
    }
    if (adata(16, prm_365) == 15)
    {
        return u8"palmia"s;
    }
    if (adata(16, prm_365) == 33)
    {
        return u8"noyel"s;
    }
    if (adata(16, prm_365) == 36)
    {
        return u8"lumiest"s;
    }
    return u8"vernis"s;
}



void initialize_picfood()
{
    DIM3(picfood, 10, 9);
    picfood(0, 8) = 230;
    picfood(1, 8) = 230;
    picfood(2, 8) = 230;
    picfood(3, 8) = 190;
    picfood(4, 8) = 229;
    picfood(5, 8) = 190;
    picfood(6, 8) = 342;
    picfood(7, 8) = 168;
    picfood(8, 8) = 347;
    picfood(9, 8) = 194;
    picfood(0, 1) = 230;
    picfood(1, 1) = 230;
    picfood(2, 1) = 230;
    picfood(3, 1) = 195;
    picfood(4, 1) = 227;
    picfood(5, 1) = 167;
    picfood(6, 1) = 167;
    picfood(7, 1) = 194;
    picfood(8, 1) = 229;
    picfood(9, 1) = 227;
    picfood(0, 2) = 230;
    picfood(1, 2) = 230;
    picfood(2, 2) = 230;
    picfood(3, 2) = 229;
    picfood(4, 2) = 342;
    picfood(5, 2) = 194;
    picfood(6, 2) = 229;
    picfood(7, 2) = 342;
    picfood(8, 2) = 229;
    picfood(9, 2) = 194;
    picfood(0, 3) = 230;
    picfood(1, 3) = 230;
    picfood(2, 3) = 230;
    picfood(3, 3) = 229;
    picfood(4, 3) = 346;
    picfood(5, 3) = 346;
    picfood(6, 3) = 345;
    picfood(7, 3) = 345;
    picfood(8, 3) = 347;
    picfood(9, 3) = 346;
    picfood(0, 4) = 230;
    picfood(1, 4) = 230;
    picfood(2, 4) = 230;
    picfood(3, 4) = 108;
    picfood(4, 4) = 346;
    picfood(5, 4) = 110;
    picfood(6, 4) = 346;
    picfood(7, 4) = 347;
    picfood(8, 4) = 347;
    picfood(9, 4) = 347;
    picfood(0, 5) = 230;
    picfood(1, 5) = 230;
    picfood(2, 5) = 229;
    picfood(3, 5) = 343;
    picfood(4, 5) = 344;
    picfood(5, 5) = 344;
    picfood(6, 5) = 343;
    picfood(7, 5) = 343;
    picfood(8, 5) = 344;
    picfood(9, 5) = 343;
    picfood(0, 6) = 230;
    picfood(1, 6) = 230;
    picfood(2, 6) = 230;
    picfood(3, 6) = 228;
    picfood(4, 6) = 342;
    picfood(5, 6) = 342;
    picfood(6, 6) = 228;
    picfood(7, 6) = 341;
    picfood(8, 6) = 228;
    picfood(9, 6) = 228;
    picfood(0, 7) = 230;
    picfood(1, 7) = 230;
    picfood(2, 7) = 110;
    picfood(3, 7) = 108;
    picfood(4, 7) = 110;
    picfood(5, 7) = 112;
    picfood(6, 7) = 114;
    picfood(7, 7) = 113;
    picfood(8, 7) = 115;
    picfood(9, 7) = 111;
    return;
}



void set_quest_data(int val0)
{
    randomize(qdata(0, rq) + 1);
    s(6) = "";
    s(5) = lang(
        u8"金貨"s + qdata(6, rq) + u8"枚"s,
        ""s + qdata(6, rq) + u8" gold pieces"s);
    if (qdata(7, rq) != 0)
    {
        if (qdata(7, rq) < 10000)
        {
            s(5) += lang(u8"と"s, u8" and "s)
                + i18n::_(u8"ui", u8"reward", u8"_"s + qdata(7, rq));
        }
        else
        {
            s(5) += lang(u8"と"s, u8" and "s) + fltname(qdata(7, rq));
        }
    }
    if (qdata(9, rq) == -1)
    {
        nquestdate = lang(u8"即時"s, u8"-"s);
    }
    else
    {
        nquestdate = ""s + qdata(9, rq) + lang(u8"日"s, u8"d"s);
    }
    if (qdata(3, rq) == 1006)
    {
        s = u8"%HARVEST"s;
        parse_quest_board_text(val0);
        s(10) = ""s + cnvweight(qdata(12, rq));
        s(11) = mapname(qdata(1, rq));
        s(4) = lang(
            ""s + s(10) + u8"の作物の納入"s,
            u8"Gather harvests weight "s + s(10) + u8"."s);
        if (gdata_executing_immediate_quest == rq)
        {
            s(4) += lang(u8"(現在"s, u8" (Now "s) + cnvweight(qdata(13, rq))
                + u8")"s;
        }
        s(6) = s(4);
    }
    if (qdata(3, rq) == 1009)
    {
        s = u8"%PARTY"s;
        parse_quest_board_text(val0);
        s(10) = ""s + qdata(12, rq) + lang(u8"ポイント"s, u8" points"s);
        s(11) = mapname(qdata(1, rq));
        s(4) = lang(""s + s(10) + u8"の獲得"s, u8"Gather "s + s(10) + u8"."s);
        if (gdata_executing_immediate_quest == rq)
        {
            s(4) += lang(u8"(現在"s, u8" (Now "s) + qdata(13, rq) + u8")"s;
        }
        s(6) = s(4);
    }
    if (qdata(3, rq) == 1007)
    {
        s = u8"%ESCORT,"s + qdata(4, rq);
        parse_quest_board_text(val0);
        s(11) = ""s + mapname(qdata(12, rq));
        s(4) = lang(
            u8"クライアントを"s + s(11),
            u8"Escort the client to "s + s(11) + u8"."s);
        s(6) = s(4) + lang(u8"まで護衛"s, ""s);
    }
    if (qdata(3, rq) == 1001)
    {
        s = u8"%HUNT"s;
        parse_quest_board_text(val0);
        s(4) = lang(u8"全ての敵の殲滅"s, u8"Eliminate monsters."s);
        s(6) = s(4);
    }
    if (qdata(3, rq) == 1004)
    {
        s = u8"%SUPPLY"s;
        parse_quest_board_text(val0);
        s(4) = cnvarticle(cnvitemname(qdata(11, rq)));
        s(6) =
            lang(s(4) + u8"の納入"s, u8"Give "s + s(4) + u8" to the client."s);
    }
    if (qdata(3, rq) == 1002)
    {
        s = u8"%DELIVER,"s + qdata(12, rq);
        parse_quest_board_text(val0);
        s(10) = cnvarticle(cnvitemname(qdata(11, rq)));
        s(11) = ""s + mapname(qdata(1, qdata(10, rq)));
        s(12) = ""s + qname(qdata(10, rq));
        if (iorgweight(qdata(11, rq)) > 50000)
        {
            s(10) += lang(u8"(凄く重い)"s, u8"(Heavy!)"s);
        }
        s(4) = lang(
            ""s + s(11) + u8"に住む"s + s(12) + u8"に"s + s(10),
            u8"Deliver "s + s(10) + u8" to "s + s(12) + u8" who lives in "s
                + s(11) + u8"."s);
        s(6) = s(4) + lang(u8"を配達"s, ""s);
    }
    if (qdata(3, rq) == 1003)
    {
        s = u8"%COOK,"s + qdata(12, rq);
        if (rnd(6) == 0)
        {
            s = u8"%COOK,GENERAL"s;
        }
        parse_quest_board_text(val0);
        s(4) = cnvarticle(foodname(qdata(12, rq), ""s, qdata(13, rq)));
        s(6) =
            lang(s(4) + u8"の納入"s, u8"Give "s + s(4) + u8" to the client."s);
    }
    if (qdata(3, rq) == 1008)
    {
        s = u8"%CONQUER"s;
        parse_quest_board_text(val0);
        s(4) = refchara_str(qdata(12, rq), 2);
        if (qdata(12, rq) == 343)
        {
            s(4) = lang(u8"正体不明の存在"s, u8"unknown monster"s);
        }
        s(10) = ""s + qdata(5, rq) * 10 / 6;
        s(6) = lang(s(4) + u8"の討伐"s, u8"Slay "s + s(4) + u8"."s);
    }
    if (qdata(3, rq) == 1010)
    {
        s = u8"%HUNTEX"s;
        parse_quest_board_text(val0);
        s(4) = refchara_str(qdata(12, rq), 2);
        s(10) = ""s + qdata(5, rq) * 3 / 2;
        s(6) = lang(u8"全ての敵の殲滅"s, u8"Eliminate monsters"s);
    }
    if (qdata(3, rq) == 1011)
    {
        s = u8"%COLLECT"s;
        parse_quest_board_text(val0);
        s(10) = cnvarticle(cnvitemname(qdata(11, rq)));
        s(11) = ""s + mapname(qdata(1, rq));
        if (gdata_current_map == qdata(1, rq)
            && gdata_current_dungeon_level == 1)
        {
            s(12) = ""s + cdatan(0, qdata(10, rq));
        }
        else
        {
            s(12) = lang(s(11) + u8"に住む人物"s, u8"the target in "s + s(11));
        }
        if (iorgweight(qdata(11, rq)) > 50000)
        {
            s(10) += lang(u8"(凄く重い)"s, u8"(Heavy!)"s);
        }
        s(4) = lang(
            u8"依頼人のために"s + s(12) + u8"から"s + s(10),
            u8"Acquire "s + s(10) + u8" from "s + s(12)
                + u8" for the client."s);
        s(6) = s(4) + lang(u8"を調達"s, ""s);
    }
    replace_tags_in_quest_text();
    if (val0 == 1)
    {
        buff = lang(_kimi(3) + u8"に頼みたいことがある"s + _nda(), ""s) + buff;
        if (qdata(9, rq) != -1)
        {
            buff += lang(
                u8"期限は残り"s + qdata(9, rq) + u8"日"s + _da(),
                u8" You have "s + qdata(9, rq)
                    + u8" days to perform the task. "s);
        }
        buff += lang(u8"依頼を受けてくれるの"s + _kana(1), u8"How about it?"s);
    }
    if (val0 == 2)
    {
        if (qdata(8, rq) == 3)
        {
            buff += u8"@QC["s + lang(u8"依頼 完了"s, u8"Complete"s) + u8"]"s
                + s(3) + u8"\n"s;
        }
        else
        {
            buff += u8"@QL["s + lang(u8"依頼"s, u8"Job"s) + u8"] "s + s(3)
                + u8"\n"s;
        }
        buff += lang(u8"依頼: "s, u8"Client  : "s) + qname(rq) + u8"\n"s;
        buff += lang(u8"場所: "s, u8"Location: "s) + mapname(qdata(1, rq))
            + u8"\n"s;
        buff += lang(u8"期限: "s, u8"Deadline: "s);
        if (qdata(9, rq) != -1)
        {
            buff += lang(u8"残り"s, ""s);
        }
        buff += nquestdate + u8"\n"s;
        s(5) = lang(u8"報酬: "s, u8"Reward  : "s) + s(5);
        talk_conv(s(5), 40 - en * 10);
        buff += s(5) + u8"\n"s;
        if (qdata(8, rq) == 3)
        {
            s(4) = lang(
                u8"内容: あとは報告するだけだ。"s,
                u8"Detail  : Report to the client."s);
        }
        else
        {
            s(4) = lang(u8"内容: "s, u8"Detail  : "s) + s(6);
        }
        talk_conv(s(4), 40 - en * 10);
        buff += s(4) + u8"\n"s;
    }
    if (val0 == 3)
    {
        buff = lang(
            u8"依頼を無事終わらせたよう"s + _dana() + _thanks(2),
            u8"You've done well. Thanks. Here's your reward."s);
        if (elona::stoi(s(5)) != 0)
        {
            txt(lang(u8"報酬の"s + s(5) + u8"を受けとって"s + _kure(), ""s));
        }
        if (qdata(3, rq) == 1006)
        {
            if (qdata(12, rq) * 125 / 100 < qdata(13, rq))
            {
                buff += lang(
                    u8"予想以上にいい働きだったから、幾らか色を付けておいた"s
                        + _yo(),
                    u8"I've added some extra coins since you worked really hard."s);
            }
        }
        if (qdata(3, rq) == 1009)
        {
            if (qdata(12, rq) * 150 / 100 < qdata(13, rq))
            {
                buff += lang(
                    u8"予想以上の盛り上がりだったから、おまけをあげる"s + _yo(),
                    u8"The party was terrific! I'll give you these tickets as an extra bonus."s);
            }
        }
    }
    randomize();
    return;
}



void replace_tags_in_quest_text()
{
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        await();
        p(0) = instr(buff, 0, u8"{"s);
        p(1) = instr(buff, p, u8"}"s);
        p(2) = buff(0).size();
        if (p == -1)
        {
            break;
        }
        s(0) = strmid(buff, p + 1, p(1) - 1);
        s(1) = strmid(buff, 0, p);
        s(2) = strmid(buff, p + p(1) + 1, p(2) - p(1) - p);
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (s == u8"client"s)
            {
                s = s(12);
                break;
            }
            if (s == u8"map"s)
            {
                s = s(11);
                break;
            }
            if (s == u8"ref"s)
            {
                s = s(10);
                break;
            }
            if (s == u8"you"s)
            {
                s = _kimi(3);
                break;
            }
            if (s == u8"me"s)
            {
                s = _ore(3);
                break;
            }
            if (s == u8"reward"s)
            {
                s = s(5);
                break;
            }
            if (s == u8"objective"s)
            {
                s = s(4);
                break;
            }
            if (s == u8"deadline"s)
            {
                s = nquestdate;
                break;
            }
            if (s == u8"player"s)
            {
                s = cdatan(0, 0);
                break;
            }
            if (s == u8"aka"s)
            {
                s = cdatan(1, 0);
                break;
            }
            if (s == u8"npc"s)
            {
                s = cdatan(0, tc);
                break;
            }
            if (s == u8"ある"s)
            {
                s = _aru(3);
                break;
            }
            if (s == u8"う"s)
            {
                s = _u(3);
                break;
            }
            if (s == u8"か"s)
            {
                s = _ka(3);
                break;
            }
            if (s == u8"が"s)
            {
                s = _ga(3);
                break;
            }
            if (s == u8"かな"s)
            {
                s = _kana(3);
                break;
            }
            if (s == u8"だ"s)
            {
                s = _da(3);
                break;
            }
            if (s == u8"よ"s)
            {
                s = _yo(3);
                break;
            }
            if (s == u8"た"s)
            {
                s = _ta(3);
                break;
            }
            if (s == u8"だな"s)
            {
                s = _dana(3);
                break;
            }
            if (s == u8"だろ"s)
            {
                s = _daro(3);
                break;
            }
            if (s == u8"たのむ"s)
            {
                s = _tanomu(3);
                break;
            }
            if (s == u8"る"s)
            {
                s = _ru(3);
                break;
            }
            if (s == u8"のだ"s)
            {
                s = _nda(3);
                break;
            }
            if (s == u8"な"s)
            {
                s = _na(3);
                break;
            }
            if (s == u8"くれ"s)
            {
                s = _kure(3);
                break;
            }
            s = u8"Unknown Code"s;
        }
        buff = s(1) + s + s(2);
    }
    return;
}



void addnews2(const std::string& prm_401, int prm_402)
{
    std::string n_at_m36;
    n_at_m36 = prm_401;
    if (prm_402)
    {
        txtef(13);
        txt(u8"[News] "s + n_at_m36);
    }
    talk_conv(n_at_m36, 38 - en * 5);
    newsbuff += n_at_m36 + u8"\n"s;
    return;
}



void addnewstopic(const std::string& prm_403, const std::string& prm_404)
{
    addnews2(
        prm_403 + u8" "s + gdata_year + u8"/"s + gdata_month + u8"/"s
        + gdata_day + u8" h"s + gdata_hour + ""s + u8" "s + prm_404);
    return;
}



void addnews(int news_type, int adventurer, int fame, const std::string& valn)
{
    switch (news_type)
    {
    case 0: addnews2(valn); break;
    case 1:
        addnewstopic(u8"@01"s, lang(u8"アイテム発見"s, u8"Discovery"s));
        addnews2(
            lang(
                cdatan(1, adventurer) + u8"は"s
                    + mapname(cdata[adventurer].current_map) + u8"にて"s + valn
                    + u8"を入手した。"s,
                cdatan(1, adventurer) + u8" has discovered "s + valn + u8" in "s
                    + mapname(cdata[adventurer].current_map) + u8"."s),
            1);
        break;
    case 2:
        addnewstopic(u8"@02"s, lang(u8"新たなる力"s, u8"Growth"s));
        addnews2(
            lang(
                cdatan(1, adventurer) + u8"は経験をつみ、レベル"s
                    + cdata[adventurer].level + u8"になった。"s,
                cdatan(1, adventurer)
                    + u8" has gained experience and achieved level "s
                    + cdata[adventurer].level + u8"."s),
            1);
        break;
    case 3:
        addnewstopic(
            u8"@02"s, lang(u8"怪我からの復帰"s, u8"Recovery from injury"s));
        addnews2(
            lang(
                cdatan(1, adventurer) + u8"は怪我から回復した。"s,
                cdatan(1, adventurer) + u8" has fully recovered from injury."s),
            1);
        break;
    case 4:
        addnewstopic(u8"@03"s, lang(u8"クエストの達成"s, u8"Accomplishment"s));
        addnews2(
            lang(
                cdatan(1, adventurer) + u8"はクエストを達成し、"s + fame
                    + u8"の名声を手にした。"s,
                cdatan(1, adventurer) + u8" has finished a quest and gained "s
                    + fame + u8" fame."s),
            1);
        break;
    case 5:
        addnewstopic(u8"@04"s, lang(u8"引退"s, u8"Retirement"s));
        addnews2(
            lang(
                cdatan(1, adventurer)
                    + u8"は自分の力の限界を悟り、ノースティリスから去っていった。"s,
                cdatan(1, adventurer)
                    + u8" realizes the limitations and leaves North Tyris."s),
            1);
        break;
    }
    newsbuff += u8"\n"s;
}



void finish_elona()
{
    int ieopen = 0;
    int ie_event = 0;
    int ie = 0;
    if (ieopen)
    {
        delcom(ie_event);
        delcom(ie);
    }
    if (config::instance().autonumlock)
    {
        keybd_event(144);
        keybd_event(144, 0, 2);
    }
    if (mutex_handle != 0)
    {
        CloseHandle(mutex_handle);
    }
    end();
    return;
}



void load_pcc_part(int cc, int body_part, const char* body_part_str)
{
    const auto filepath = filesystem::dir::graphic()
        / (u8"pcc_"s + body_part_str + (pcc(body_part, cc) % 1000) + u8".bmp");
    if (!fs::exists(filepath))
        return;

    pos(128, 0);
    picload(filepath, 1);
    boxf(256, 0, 384, 198);
    gmode(4, -1, -1, 256);
    pget(128, 0);
    pos(256, 0);
    gcopy(10 + cc, 128, 0, 128, 198);
    pos(256, 0);
    gfini(128, 198);
    gfdec2(
        c_col(0, pcc(body_part, cc) / 1000),
        c_col(1, pcc(body_part, cc) / 1000),
        c_col(2, pcc(body_part, cc) / 1000));
    gmode(2);
    pos(0, 0);
    gcopy(10 + cc, 256, 0, 128, 198);
}



void set_pcc_depending_on_equipments(int cc, int ci)
{
    int item_appearance = the_item_db[inv[ci].id]->appearance;
    if (item_appearance == 0)
    {
        item_appearance = 1;
    }
    switch (iequiploc(ci))
    {
    case 3: pcc(4, cc) = item_appearance + inv[ci].color * 1000; break;
    case 4: pcc(2, cc) = item_appearance + inv[ci].color * 1000; break;
    case 7: pcc(8, cc) = item_appearance + inv[ci].color * 1000; break;
    case 8: pcc(5, cc) = item_appearance + inv[ci].color * 1000; break;
    case 9: pcc(3, cc) = item_appearance + inv[ci].color * 1000; break;
    default: break;
    }
}



void create_pcpic(int cc, bool prm_410)
{
    buffer(10 + cc, 384, 198);
    boxf();

    if (pcc(15, cc) == 0)
    {
        pcc(15, cc) = cdata[cc].sex + 1;
        pcc(14, cc) = cdata[cc].sex + 7;
        pcc(1, cc) = 2 + rnd(21) * 1000;
        pcc(9, cc) = 1 + rnd(21) * 1000;
        pcc(7, cc) = 1 + rnd(21) * 1000;
        pcc(16, cc) = 1;
    }

    if (prm_410)
    {
        pcc(4, cc) = 0;
        pcc(2, cc) = 0;
        pcc(6, cc) = 0;
        pcc(3, cc) = 0;
        pcc(8, cc) = 0;
        pcc(5, cc) = 0;
        for (int i = 0; i < 30; ++i)
        {
            if (cdata_body_part(cc, i) % 10000 != 0)
            {
                set_pcc_depending_on_equipments(
                    cc, cdata_body_part(cc, i) % 10000 - 1);
            }
        }
    }

    pcc(10, cc) = pcc(1, cc) / 1000 * 1000 + pcc(10, cc) % 1000;
    pcc(14, cc) = pcc(15, cc) / 1000 * 1000 + pcc(14, cc) % 1000;
    if (prm_410)
    {
        if (pcc(24, cc) == 0)
        {
            load_pcc_part(cc, 4, u8"mantle_");
        }
    }
    load_pcc_part(cc, 1, u8"hairbk_");
    if (cc == 0 && gdata_mount != 0 && pcc(16, cc) != 0)
    {
        load_pcc_part(cc, 16, u8"ridebk_");
    }
    else
    {
        load_pcc_part(cc, 15, u8"body_");
    }
    load_pcc_part(cc, 14, u8"eye_");
    if (cc != 0 || gdata_mount == 0 || pcc(16, cc) == 0)
    {
        load_pcc_part(cc, 7, u8"pants_");
    }
    load_pcc_part(cc, 9, u8"cloth_");
    if (prm_410)
    {
        if (pcc(20, cc) == 0)
        {
            load_pcc_part(cc, 2, u8"chest_");
        }
        if ((cc != 0 || gdata_mount == 0 || pcc(16, cc) == 0)
            && pcc(21, cc) == 0)
        {
            load_pcc_part(cc, 3, u8"leg_");
        }
        if (pcc(22, cc) == 0)
        {
            load_pcc_part(cc, 5, u8"belt_");
        }
        if (pcc(23, cc) == 0)
        {
            load_pcc_part(cc, 8, u8"glove_");
        }
    }
    if (cc == 0)
    {
        if (gdata_mount != 0)
        {
            load_pcc_part(cc, 16, u8"ride_");
        }
    }
    if (prm_410)
    {
        if (pcc(24, cc) == 0)
        {
            load_pcc_part(cc, 4, u8"mantlebk_");
        }
    }
    load_pcc_part(cc, 1, u8"hair_");
    load_pcc_part(cc, 10, u8"subhair_");
    load_pcc_part(cc, 11, u8"etc_");
    load_pcc_part(cc, 12, u8"etc_");
    load_pcc_part(cc, 13, u8"etc_");

    gsel(0);
}



void addefmap(int x, int y, int efmap0, int efmap1, int efmap2, int efmap3)
{
    efmap(0, x, y) = efmap0;
    efmap(1, x, y) = efmap1;
    efmap(2, x, y) = efmap2;
    efmap(3, x, y) = efmap3;
}



void initialize_map_chip()
{
    DIM3(chipm, 8, 825);
    if (mdata(2) == 0)
    {
        chipm(5, 233) = 0;
        chipm(6, 233) = 0;
        for (int cnt = 26; cnt < 33; ++cnt)
        {
            chipm(0, cnt) = 4;
        }
        chipm(0, 568) = 4;
        chipm(0, 569) = 4;
        chipm(0, 570) = 4;
        for (int cnt = 99; cnt < 132; ++cnt)
        {
            chipm(0, cnt) = 7;
        }
        for (int cnt = 165; cnt < 198; ++cnt)
        {
            chipm(0, cnt) = 8;
        }
        for (int cnt = 198; cnt < 231; ++cnt)
        {
            chipm(0, cnt) = 4;
        }
        for (int cnt = 594; cnt < 599; ++cnt)
        {
            chipm(0, cnt) = 7;
        }
        for (int cnt = 599; cnt < 604; ++cnt)
        {
            chipm(0, cnt) = 8;
        }
        for (int cnt = 107; cnt < 119; ++cnt)
        {
            chipm(1, cnt) = 9;
        }
        for (int cnt = 173; cnt < 185; ++cnt)
        {
            chipm(1, cnt) = 9;
        }
        for (int cnt = 206; cnt < 218; ++cnt)
        {
            chipm(1, cnt) = 9;
        }
        chipm(0, 604) = 10;
        for (int cnt = 605; cnt < 617; ++cnt)
        {
            chipm(0, cnt) = 10;
            chipm(1, cnt) = 9;
        }
        for (int cnt = 396; cnt < 825; ++cnt)
        {
            chipm(7, cnt) = 5;
        }
        for (int cnt = 264; cnt < 297; ++cnt)
        {
            chipm(7, cnt) = 4;
        }
        chipm(5, 135) = 8;
        chipm(5, 137) = 16;
        chipm(5, 140) = 6;
        chipm(5, 145) = 16;
        chipm(5, 149) = 16;
    }
    if (mdata(2) == 1)
    {
        for (int cnt = 396; cnt < 825; ++cnt)
        {
            chipm(7, cnt) = 5;
        }
        chipm(5, 233) = 56;
        chipm(6, 233) = 48;
        chipm(7, 594) = 4;
        chipm(7, 628) = 4;
        chipm(7, 637) = 4;
        chipm(7, 641) = 4;
        chipm(7, 733) = 4;
        for (int cnt = 45; cnt < 61; ++cnt)
        {
            chipm(0, cnt) = 4;
        }
        chipm(0, 82) = 4;
        chipm(0, 83) = 4;
        chipm(0, 84) = 4;
        for (int cnt = 462; cnt < 528; ++cnt)
        {
            chipm(2, cnt) = 1;
            chipm(2, cnt - 66) = 1;
        }
        for (int cnt = 462; cnt < 495; ++cnt)
        {
            chipm(2, cnt) = 2;
            chipm(2, cnt - 66) = 2;
        }
        chipm(0, 29) = 1;
        chipm(0, 30) = 2;
        chipm(0, 31) = 2;
        chipm(0, 464) = 6;
        chipm(3, 550) = 2;
        chipm(2, 550) = 1;
        chipm(0, 165) = 3;
        chipm(3, 165) = 3;
        chipm(0, 168) = 3;
        chipm(3, 168) = 3;
        chipm(0, 171) = 3;
        chipm(1, 171) = 5;
        chipm(3, 171) = 3;
        chipm(0, 594) = 3;
        chipm(3, 594) = 3;
    }
    if (mdata(2) == 2)
    {
        for (int cnt = 0; cnt < 11; ++cnt)
        {
            int cnt2 = cnt;
            for (int cnt = 0; cnt < 13; ++cnt)
            {
                chipm(0, cnt2 * 33 + cnt + 20) = 4;
            }
        }
        for (int cnt = 33; cnt < 66; ++cnt)
        {
            chipm(0, cnt) = 4;
        }
        for (int cnt = 396; cnt < 825; ++cnt)
        {
            chipm(7, cnt) = 5;
        }
        chipm(5, 233) = 56;
        chipm(6, 233) = 48;
        chipm(7, 594) = 4;
        for (int cnt = 462; cnt < 528; ++cnt)
        {
            chipm(2, cnt) = 1;
            chipm(2, cnt - 66) = 1;
        }
        for (int cnt = 462; cnt < 495; ++cnt)
        {
            chipm(2, cnt) = 2;
            chipm(2, cnt - 66) = 2;
        }
        chipm(3, 550) = 2;
        chipm(2, 550) = 1;
        chipm(0, 165) = 3;
        chipm(3, 165) = 3;
        chipm(0, 168) = 3;
        chipm(3, 168) = 3;
        chipm(0, 171) = 3;
        chipm(1, 171) = 5;
        chipm(3, 171) = 3;
        chipm(0, 594) = 3;
        chipm(3, 594) = 3;
        chipm(2, 476) = 0;
        chipm(2, 509) = 0;
    }
    return;
}



void initialize_item_chip()
{
    DIM3(mefsubref, 6, 6);
    mefsubref(0, 1) = 144;
    mefsubref(1, 1) = 624;
    mefsubref(0, 2) = 272;
    mefsubref(1, 2) = 624;
    mefsubref(2, 2) = 1;
    mefsubref(0, 3) = 304;
    mefsubref(1, 3) = 624;
    mefsubref(2, 3) = 1;
    mefsubref(0, 4) = 368;
    mefsubref(1, 4) = 624;
    mefsubref(0, 5) = 464;
    mefsubref(1, 5) = 624;
    SDIM3(tname, 16, 11);
    tname(1) = lang(u8"日干し岩"s, u8"a dryrock"s);
    tname(2) = lang(u8"畑"s, u8"a field"s);
    DIM3(chipc, 6, 925);
    DIM3(chipi, 8, 825);
    for (int cnt = 0; cnt < 825; ++cnt)
    {
        chipc(0, cnt) = cnt % 33 * inf_tiles;
        chipc(1, cnt) = cnt / 33 * inf_tiles;
        chipc(2, cnt) = inf_tiles;
        chipc(3, cnt) = inf_tiles;
        chipc(4, cnt) = 16;
        chipi(0, cnt) = cnt % 33 * inf_tiles;
        chipi(1, cnt) = cnt / 33 * inf_tiles;
        chipi(2, cnt) = inf_tiles;
        chipi(3, cnt) = inf_tiles;
        chipi(4, cnt) = 0;
        chipi(5, cnt) = 8;
        chipi(6, cnt) = 40;
    }
    for (int cnt = 825; cnt < 925; ++cnt)
    {
        chipc(0, cnt) = cnt % 33 * inf_tiles;
        chipc(1, cnt) = cnt / 33 * inf_tiles;
        chipc(2, cnt) = inf_tiles;
        chipc(3, cnt) = inf_tiles;
        chipc(4, cnt) = 16;
    }
    chipi(4, 24) = 16;
    chipi(4, 30) = 16;
    chipi(4, 72) = 22;
    chipi(4, 73) = 22;
    chipi(4, 74) = 22;
    chipi(4, 75) = 22;
    chipi(4, 76) = 22;
    chipi(5, 76) = 28;
    chipi(4, 78) = 22;
    chipi(4, 80) = 22;
    chipi(4, 85) = 8;
    chipi(5, 85) = 8;
    chipi(6, 85) = 150;
    chipi(4, 87) = 22;
    chipi(4, 88) = 22;
    chipi(4, 91) = 22;
    chipi(4, 95) = 22;
    chipi(4, 96) = 22;
    chipi(5, 96) = 18;
    chipi(4, 97) = 22;
    chipi(4, 99) = 22;
    chipi(4, 98) = 22;
    chipi(4, 100) = 22;
    chipi(4, 102) = 22;
    chipi(4, 103) = 22;
    chipi(4, 104) = 22;
    chipi(4, 107) = 22;
    chipi(4, 116) = 22;
    chipi(4, 117) = 22;
    chipi(4, 123) = 12;
    chipi(4, 125) = 12;
    chipi(4, 130) = 12;
    chipi(4, 132) = 22;
    chipi(4, 134) = 12;
    chipi(4, 136) = 12;
    chipi(4, 137) = 22;
    chipi(4, 138) = 22;
    chipi(4, 139) = 22;
    chipi(4, 142) = 22;
    chipi(5, 142) = 36;
    chipi(4, 143) = 22;
    chipi(5, 143) = 36;
    chipi(4, 145) = 22;
    chipi(4, 146) = 22;
    chipi(4, 147) = 22;
    chipi(4, 150) = 22;
    chipi(5, 150) = 8;
    chipi(6, 150) = 70;
    chipi(4, 151) = 22;
    chipi(4, 156) = 8;
    chipi(5, 156) = 20;
    chipi(6, 156) = 150;
    chipi(4, 158) = 8;
    chipi(5, 158) = 24;
    chipi(6, 158) = 150;
    chipi(4, 159) = 8;
    chipi(5, 159) = 24;
    chipi(6, 159) = 150;
    chipi(4, 160) = 22;
    chipi(4, 163) = 22;
    chipi(5, 163) = 16;
    chipi(4, 164) = 22;
    chipi(4, 118) = 22;
    chipi(4, 166) = 22;
    chipi(4, 197) = 22;
    chipi(5, 197) = 24;
    chipi(4, 232) = 22;
    chipi(4, 248) = 22;
    chipi(4, 234) = 22;
    chipi(5, 234) = 24;
    chipi(4, 235) = 22;
    chipi(5, 235) = 36;
    chipi(4, 236) = 22;
    chipi(4, 242) = 22;
    chipi(5, 242) = 8;
    chipi(6, 242) = 250;
    chipi(4, 259) = 8;
    chipi(5, 259) = 12;
    chipi(4, 260) = 22;
    chipi(5, 260) = 22;
    chipi(4, 262) = 22;
    chipi(4, 263) = 22;
    chipi(4, 264) = 22;
    chipi(4, 266) = 22;
    chipi(5, 266) = 24;
    chipi(4, 270) = 22;
    chipi(4, 272) = 22;
    chipi(5, 272) = 34;
    chipi(4, 273) = 22;
    chipi(4, 276) = 22;
    chipi(4, 277) = 8;
    chipi(4, 278) = 22;
    chipi(4, 279) = 22;
    chipi(4, 281) = 22;
    chipi(5, 281) = 40;
    chipi(4, 282) = 22;
    chipi(4, 285) = 22;
    chipi(4, 286) = 22;
    chipi(4, 288) = 22;
    chipi(5, 288) = 18;
    chipi(4, 291) = 22;
    chipi(4, 292) = 22;
    chipi(5, 292) = 32;
    chipi(4, 293) = 22;
    chipi(4, 295) = 22;
    chipi(4, 296) = 22;
    chipi(4, 299) = 22;
    chipi(5, 299) = 8;
    chipi(6, 299) = 250;
    chipi(4, 300) = 22;
    chipi(4, 320) = 22;
    chipi(4, 321) = 22;
    chipi(4, 325) = 22;
    chipi(4, 327) = 22;
    chipi(4, 331) = 22;
    chipi(4, 332) = 22;
    chipi(4, 348) = 22;
    chipi(4, 353) = 48;
    chipi(5, 354) = 8;
    chipi(6, 354) = 20;
    chipi(4, 360) = 0;
    chipi(5, 360) = 2;
    chipi(6, 360) = 1;
    chipi(4, 364) = 22;
    chipi(5, 364) = 8;
    chipi(6, 364) = 250;
    chipi(4, 367) = 22;
    chipi(4, 368) = 22;
    chipi(4, 370) = 8;
    chipi(4, 372) = 22;
    chipi(4, 373) = 22;
    chipi(4, 375) = 22;
    chipi(4, 376) = 22;
    chipi(4, 377) = 22;
    chipi(4, 395) = 22;
    chipi(4, 378) = 48;
    chipi(4, 379) = 48;
    chipi(4, 380) = 8;
    chipi(4, 381) = 22;
    chipi(4, 382) = 48;
    chipi(4, 384) = 22;
    chipi(4, 442) = 8;
    chipi(5, 442) = 24;
    chipi(6, 442) = 100;
    chipi(4, 507) = 22;
    chipi(4, 508) = 22;
    chipi(4, 506) = 22;
    chipi(4, 510) = 22;
    chipi(4, 511) = 22;
    chipi(5, 511) = 28;
    chipi(4, 512) = 22;
    chipi(4, 513) = 22;
    chipi(4, 541) = 22;
    chipi(5, 541) = 36;
    chipi(4, 543) = 22;
    chipi(4, 544) = 48;
    chipi(4, 545) = 0;
    chipi(5, 545) = 0;
    chipi(6, 545) = 0;
    chipi(4, 627) = 22;
    chipi(4, 637) = 22;
    chipi(4, 639) = 48;
    chipi(4, 640) = 22;
    chipi(5, 640) = 34;
    chipi(4, 641) = 22;
    chipi(4, 642) = 22;
    chipi(4, 643) = 22;
    chipi(4, 644) = 32;
    chipi(4, 646) = 22;
    chipi(4, 647) = 22;
    chipi(4, 648) = 22;
    chipi(4, 650) = 22;
    chipi(4, 651) = 48;
    chipi(4, 652) = 48;
    chipi(4, 653) = 32;
    chipi(4, 655) = 22;
    chipi(4, 659) = 22;
    chipi(4, 662) = 22;
    chipi(6, 664) = 0;
    chipi(6, 665) = 0;
    chipi(6, 667) = 0;
    chipi(4, 668) = 8;
    chipi(4, 669) = 8;
    chipi(4, 672) = 38;
    chipi(4, 674) = 22;
    chipi(5, 674) = 24;
    chipi(4, 675) = 16;
    chipi(4, 676) = 40;
    chipi(4, 677) = 16;
    chipi(5, 677) = 8;
    chipi(6, 677) = 50;
    chipi(6, 679) = 1;
    chipi(3, 523) = inf_tiles * 2;
    chipi(4, 523) = inf_tiles + 16;
    chipi(5, 523) = 40;
    chipi(6, 523) = 6;
    chipi(3, 524) = inf_tiles * 2;
    chipi(4, 524) = inf_tiles + 16;
    chipi(5, 524) = 65;
    chipi(3, 525) = inf_tiles * 2;
    chipi(4, 525) = inf_tiles + 20;
    chipi(3, 526) = inf_tiles * 2;
    chipi(4, 526) = inf_tiles + 20;
    chipi(3, 527) = inf_tiles * 2;
    chipi(4, 527) = inf_tiles + 20;
    chipi(3, 531) = inf_tiles * 2;
    chipi(4, 531) = inf_tiles + 16;
    chipi(5, 531) = 40;
    chipi(3, 563) = inf_tiles * 2;
    chipi(4, 563) = inf_tiles + 15;
    chipi(3, 566) = inf_tiles * 2;
    chipi(4, 566) = inf_tiles + 12;
    chipi(3, 567) = inf_tiles * 2;
    chipi(4, 567) = inf_tiles + 12;
    chipi(3, 568) = inf_tiles * 2;
    chipi(4, 568) = inf_tiles + 12;
    chipi(3, 569) = inf_tiles * 2;
    chipi(4, 569) = inf_tiles + 12;
    chipi(5, 569) = 70;
    chipi(6, 569) = 6;
    chipi(3, 570) = inf_tiles * 2;
    chipi(4, 570) = inf_tiles + 20;
    chipi(3, 571) = inf_tiles * 2;
    chipi(4, 571) = inf_tiles + 20;
    chipi(5, 571) = 64;
    chipi(3, 572) = inf_tiles * 2;
    chipi(4, 572) = inf_tiles + 20;
    chipi(3, 573) = inf_tiles * 2;
    chipi(4, 573) = inf_tiles + 20;
    chipi(3, 574) = inf_tiles * 2;
    chipi(4, 574) = inf_tiles + 20;
    chipi(3, 575) = inf_tiles * 2;
    chipi(4, 575) = inf_tiles + 20;
    chipi(3, 576) = inf_tiles * 2;
    chipi(4, 576) = inf_tiles + 20;
    chipi(3, 577) = inf_tiles * 2;
    chipi(4, 577) = inf_tiles + 20;
    chipi(5, 577) = 48;
    chipi(6, 577) = 6;
    chipi(3, 578) = inf_tiles * 2;
    chipi(4, 578) = inf_tiles + 20;
    chipi(3, 579) = inf_tiles * 2;
    chipi(4, 579) = inf_tiles + 20;
    chipi(3, 580) = inf_tiles * 2;
    chipi(4, 580) = inf_tiles + 20;
    chipi(5, 580) = 40;
    chipi(6, 580) = 6;
    chipi(3, 581) = inf_tiles * 2;
    chipi(4, 581) = inf_tiles + 20;
    chipi(3, 582) = inf_tiles * 2;
    chipi(4, 582) = inf_tiles + 20;
    chipi(3, 583) = inf_tiles * 2;
    chipi(4, 583) = inf_tiles + 20;
    chipi(5, 583) = 44;
    chipi(6, 583) = 6;
    chipi(3, 584) = inf_tiles * 2;
    chipi(4, 584) = inf_tiles + 20;
    chipi(5, 584) = 40;
    chipi(6, 584) = 6;
    chipi(3, 585) = inf_tiles * 2;
    chipi(4, 585) = inf_tiles + 20;
    chipi(3, 586) = inf_tiles * 2;
    chipi(4, 586) = inf_tiles + 20;
    chipi(5, 586) = 44;
    chipi(6, 586) = 6;
    chipi(3, 587) = inf_tiles * 2;
    chipi(4, 587) = inf_tiles + 20;
    chipi(3, 588) = inf_tiles * 2;
    chipi(4, 588) = inf_tiles + 20;
    chipi(3, 589) = inf_tiles * 2;
    chipi(4, 589) = inf_tiles + 20;
    chipi(3, 590) = inf_tiles * 2;
    chipi(4, 590) = inf_tiles + 20;
    chipi(3, 591) = inf_tiles * 2;
    chipi(4, 591) = inf_tiles + 20;
    chipi(3, 592) = inf_tiles * 2;
    chipi(4, 592) = inf_tiles + 20;
    chipi(3, 593) = inf_tiles * 2;
    chipi(4, 593) = inf_tiles + 20;
    chipi(3, 680) = inf_tiles * 2;
    chipi(4, 680) = inf_tiles + 16;
    chipi(3, 681) = inf_tiles * 2;
    chipi(4, 681) = inf_tiles + 16;
    chipi(3, 682) = inf_tiles * 2;
    chipi(4, 682) = inf_tiles + 16;
    chipi(3, 683) = inf_tiles * 2;
    chipi(4, 683) = inf_tiles + 22;
    chipi(5, 683) = 50;
    chipi(3, 685) = inf_tiles * 2;
    chipi(4, 685) = inf_tiles + 52;
    chipi(5, 685) = 50;
    chipi(6, 685) = 18;
    chipi(3, 684) = inf_tiles * 2;
    chipi(4, 684) = inf_tiles + 52;
    chipi(5, 684) = 50;
    chipi(6, 684) = 18;
    chipi(3, 686) = inf_tiles * 2;
    chipi(4, 686) = inf_tiles + 16;
    chipi(3, 687) = inf_tiles * 2;
    chipi(4, 687) = inf_tiles + 16;
    chipi(3, 688) = inf_tiles * 2;
    chipi(4, 688) = inf_tiles + 16;
    chipi(3, 689) = inf_tiles * 2;
    chipi(4, 689) = inf_tiles + 16;
    chipi(3, 690) = inf_tiles * 2;
    chipi(4, 690) = inf_tiles + 16;
    chipi(3, 691) = inf_tiles * 2;
    chipi(4, 691) = inf_tiles + 16;
    chipi(5, 691) = 48;
    chipi(3, 692) = inf_tiles * 2;
    chipi(4, 692) = inf_tiles + 16;
    chipi(7, 19) = 2;
    chipi(7, 24) = 3;
    chipi(7, 27) = 3;
    chipi(7, 30) = 2;
    chipi(7, 349) = 3;
    chipi(7, 355) = 3;
    chipc(4, 176) = 8;
    chipc(4, 225) = 29;
    chipc(4, 230) = 12;
    chipc(4, 256) = 16;
    chipc(4, 277) = 29;
    chipc(3, 201) = inf_tiles * 2;
    chipc(4, 201) = inf_tiles + 16;
    chipc(3, 228) = inf_tiles * 2;
    chipc(4, 228) = inf_tiles + 8;
    chipc(3, 231) = inf_tiles * 2;
    chipc(4, 231) = inf_tiles + 16;
    chipc(3, 232) = inf_tiles * 2;
    chipc(4, 232) = inf_tiles + 16;
    chipc(3, 233) = inf_tiles * 2;
    chipc(4, 233) = inf_tiles + 8;
    chipc(3, 297) = inf_tiles * 2;
    chipc(4, 297) = inf_tiles + 16;
    chipc(3, 235) = inf_tiles * 2;
    chipc(4, 235) = inf_tiles + 16;
    chipc(3, 280) = inf_tiles * 2;
    chipc(4, 280) = inf_tiles + 32;
    chipc(3, 338) = inf_tiles * 2;
    chipc(4, 338) = inf_tiles + 32;
    chipc(3, 339) = inf_tiles * 2;
    chipc(4, 339) = inf_tiles + 16;
    chipc(3, 341) = inf_tiles * 2;
    chipc(4, 341) = inf_tiles + 16;
    chipc(3, 342) = inf_tiles * 2;
    chipc(4, 342) = inf_tiles + 12;
    chipc(3, 343) = inf_tiles * 2;
    chipc(4, 343) = inf_tiles + 16;
    chipc(3, 349) = inf_tiles * 2;
    chipc(4, 349) = inf_tiles + 8;
    chipc(3, 351) = inf_tiles * 2;
    chipc(4, 351) = inf_tiles + 8;
    chipc(3, 389) = inf_tiles * 2;
    chipc(4, 389) = inf_tiles + 16;
    chipc(3, 391) = inf_tiles * 2;
    chipc(4, 391) = inf_tiles + 16;
    chipc(3, 393) = inf_tiles * 2;
    chipc(4, 393) = inf_tiles + 16;
    chipc(3, 398) = inf_tiles * 2;
    chipc(4, 398) = inf_tiles + 16;
    chipc(3, 404) = inf_tiles * 2;
    chipc(4, 404) = inf_tiles + 16;
    chipc(3, 405) = inf_tiles * 2;
    chipc(4, 405) = inf_tiles + 16;
    chipc(3, 408) = inf_tiles * 2;
    chipc(4, 408) = inf_tiles + 16;
    chipc(3, 413) = inf_tiles * 2;
    chipc(4, 413) = inf_tiles + 16;
    chipc(3, 429) = inf_tiles * 2;
    chipc(4, 429) = inf_tiles + 8;
    chipc(3, 430) = inf_tiles * 2;
    chipc(4, 430) = inf_tiles + 8;
    chipc(3, 432) = inf_tiles * 2;
    chipc(4, 432) = inf_tiles + 8;
    chipc(3, 433) = inf_tiles * 2;
    chipc(4, 433) = inf_tiles + 8;
    chipc(3, 439) = inf_tiles * 2;
    chipc(4, 439) = inf_tiles + 8;
    chipc(3, 442) = inf_tiles * 2;
    chipc(4, 442) = inf_tiles + 8;
    chipc(3, 447) = inf_tiles * 2;
    chipc(4, 447) = inf_tiles + 16;
    DIM3(deco, 3, 300);
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        deco(0, 1 + cnt * 16) = 0;
        deco(1, 1 + cnt * 16) = 1;
        deco(0, 2 + cnt * 16) = 1;
        deco(1, 2 + cnt * 16) = 2;
        deco(0, 4 + cnt * 16) = 1;
        deco(1, 4 + cnt * 16) = 0;
        deco(0, 6 + cnt * 16) = -1;
        deco(1, 6 + cnt * 16) = 21;
        deco(0, 7 + cnt * 16) = -1;
        deco(1, 7 + cnt * 16) = 30;
        deco(0, 8 + cnt * 16) = 2;
        deco(1, 8 + cnt * 16) = 1;
        deco(0, 9 + cnt * 16) = -1;
        deco(1, 9 + cnt * 16) = 20;
        deco(0, 10 + cnt * 16) = 2;
        deco(1, 10 + cnt * 16) = 2;
        deco(0, 11 + cnt * 16) = -1;
        deco(1, 11 + cnt * 16) = 33;
        deco(0, 12 + cnt * 16) = 2;
        deco(1, 12 + cnt * 16) = 0;
        deco(0, 13 + cnt * 16) = -1;
        deco(1, 13 + cnt * 16) = 32;
        deco(0, 14 + cnt * 16) = -1;
        deco(1, 14 + cnt * 16) = 31;
        deco(0, 15 + cnt * 16) = 3;
        deco(1, 15 + cnt * 16) = 1;
        deco(0, 16 + cnt * 16) = -1;
        deco(1, 16 + cnt * 16) = -1;
        deco(0, 19 + cnt * 16) = 0;
        deco(1, 19 + cnt * 16) = 2;
    }
    deco(2, 49) = 2;
    deco(2, 52) = 2;
    deco(2, 53) = 2;
    deco(2, 97) = 2;
    deco(2, 113) = 2;
    deco(2, 117) = 2;
    deco(2, 164) = 2;
    deco(2, 180) = 2;
    deco(2, 181) = 2;
    deco(2, 145) = 4;
    deco(2, 162) = 4;
    deco(2, 194) = 4;
    deco(2, 195) = 4;
    deco(2, 209) = 4;
    deco(2, 226) = 4;
    deco(2, 243) = 4;
    deco(2, 84) = 3;
    deco(2, 104) = 3;
    deco(2, 196) = 3;
    deco(2, 200) = 3;
    deco(2, 204) = 3;
    deco(2, 212) = 3;
    deco(2, 220) = 3;
    deco(2, 232) = 3;
    deco(2, 236) = 3;
    deco(2, 24) = 1;
    deco(2, 50) = 1;
    deco(2, 56) = 1;
    deco(2, 58) = 1;
    deco(2, 82) = 1;
    deco(2, 114) = 1;
    deco(2, 122) = 1;
    deco(2, 152) = 1;
    deco(2, 184) = 1;
    deco(2, 186) = 1;
    deco(2, 178) = 8;
    deco(2, 241) = 10;
    deco(2, 242) = 8;
    deco(2, 244) = 7;
    deco(0, 16) = -1;
    deco(1, 16) = 1;
    deco(0, 32) = -1;
    deco(1, 32) = 2;
    deco(0, 64) = -1;
    deco(1, 64) = 3;
    deco(0, 128) = -1;
    deco(1, 128) = 4;
    deco(0, 48) = -1;
    deco(1, 48) = 5;
    deco(0, 192) = -1;
    deco(1, 192) = 6;
    deco(0, 96) = -1;
    deco(1, 96) = 7;
    deco(0, 144) = -1;
    deco(1, 144) = 8;
    deco(0, 80) = -1;
    deco(1, 80) = 9;
    deco(0, 160) = -1;
    deco(1, 160) = 10;
    deco(0, 91) = 0;
    deco(1, 91) = 1;
    deco(0, 93) = 0;
    deco(1, 93) = 1;
    deco(0, 21) = 0;
    deco(1, 21) = 0;
    deco(0, 85) = 0;
    deco(1, 85) = 0;
    deco(0, 213) = 0;
    deco(1, 213) = 0;
    deco(0, 149) = 0;
    deco(1, 149) = 0;
    initialize_map_chip();
    return;
}



void cardplayerinit(int prm_417, int prm_418)
{
    DIM3(cardplayer_at_cardcontrol, 100, prm_417);
    cardplayermax_at_cardcontrol = prm_417;
    cardholdermax_at_cardcontrol = prm_418;
    return;
}



void cardplayeradd(int prm_419, int prm_420, int prm_421)
{
    cardplayer_at_cardcontrol(1, prm_419) = prm_420;
    cardplayer_at_cardcontrol(2, prm_419) = prm_421;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        cardplayer_at_cardcontrol(10 + cnt, prm_419) = -1;
    }
    return;
}



void initcard(int prm_422, int prm_423, int)
{
    pilex_at_cardcontrol = prm_422;
    piley_at_cardcontrol = prm_423;
    DIM3(card_at_cardcontrol, 6, 53);
    cardmax_at_cardcontrol = 53;
    if (nojoker == 1)
    {
        cardmax_at_cardcontrol = 52;
    }
    for (int cnt = 0, cnt_end = (cardmax_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        card_at_cardcontrol(0, cnt) = cnt % 13 + 1;
        card_at_cardcontrol(1, cnt) = cnt / 13;
        card_at_cardcontrol(2, cnt) = 1;
        if (cnt == 52)
        {
            card_at_cardcontrol(1, cnt) = 4;
        }
        card_at_cardcontrol(5, cnt) = -1;
    }
    for (int cnt = 0; cnt < 200; ++cnt)
    {
        i_at_cardcontrol(0) = rnd(cardmax_at_cardcontrol);
        i_at_cardcontrol(1) = rnd(cardmax_at_cardcontrol);
        p_at_cardcontrol(0) = card_at_cardcontrol(0, i_at_cardcontrol);
        p_at_cardcontrol(1) = card_at_cardcontrol(1, i_at_cardcontrol);
        card_at_cardcontrol(0, i_at_cardcontrol) =
            card_at_cardcontrol(0, i_at_cardcontrol(1));
        card_at_cardcontrol(1, i_at_cardcontrol) =
            card_at_cardcontrol(1, i_at_cardcontrol(1));
        card_at_cardcontrol(0, i_at_cardcontrol(1)) = p_at_cardcontrol;
        card_at_cardcontrol(1, i_at_cardcontrol(1)) = p_at_cardcontrol(1);
    }
    return;
}



void showcard2(int prm_425, int prm_426)
{
    elona_vector1<int> col_at_cardcontrol;
    std::string s_at_cardcontrol;
    int tx_at_cardcontrol = 0;
    font(43 - en * 2, snail::font_t::style_t::bold);
    gmode(2, 64, 96);
    pos(card_at_cardcontrol(3, prm_425), card_at_cardcontrol(4, prm_425));
    if (card_at_cardcontrol(2, prm_425) == 1)
    {
        gcopy(3, 736, 216, 64, 96);
    }
    else
    {
        gcopy(3, 672, 216, 64, 96);
        if (prm_426 == 0)
        {
            gmode(4, inf_tiles, inf_tiles, 220);
            if (card_at_cardcontrol(1, prm_425) == 0)
            {
                pos(card_at_cardcontrol(3, prm_425) + 32,
                    card_at_cardcontrol(4, prm_425) + 36);
                grotate(5, 144, 240, 0, 64, 104);
                col_at_cardcontrol(0) = 140;
                col_at_cardcontrol(1) = 140;
                col_at_cardcontrol(2) = 255;
            }
            if (card_at_cardcontrol(1, prm_425) == 1)
            {
                pos(card_at_cardcontrol(3, prm_425) + 32,
                    card_at_cardcontrol(4, prm_425) + 40);
                grotate(5, 1104, 288, 0, 64, 104);
                col_at_cardcontrol(0) = 255;
                col_at_cardcontrol(1) = 140;
                col_at_cardcontrol(2) = 140;
            }
            if (card_at_cardcontrol(1, prm_425) == 2)
            {
                pos(card_at_cardcontrol(3, prm_425) + 32,
                    card_at_cardcontrol(4, prm_425) + 50);
                grotate(5, 480, 336, 0, 64, 84);
                col_at_cardcontrol(0) = 240;
                col_at_cardcontrol(1) = 240;
                col_at_cardcontrol(2) = 240;
            }
            if (card_at_cardcontrol(1, prm_425) == 3)
            {
                pos(card_at_cardcontrol(3, prm_425) + 28,
                    card_at_cardcontrol(4, prm_425) + 48);
                grotate(5, 1200, 288, 0, 64, 80);
                col_at_cardcontrol(0) = 140;
                col_at_cardcontrol(1) = 255;
                col_at_cardcontrol(2) = 140;
            }
            if (card_at_cardcontrol(1, prm_425) == 4)
            {
                pos(card_at_cardcontrol(3, prm_425) + 28,
                    card_at_cardcontrol(4, prm_425) + 44);
                grotate(5, 1296, 336, 0, 72, 86);
                col_at_cardcontrol(0) = 250;
                col_at_cardcontrol(1) = 250;
                col_at_cardcontrol(2) = 105;
            }
            gmode(2);
            s_at_cardcontrol = std::to_string(card_at_cardcontrol(0, prm_425));
            tx_at_cardcontrol = 2;
            if (card_at_cardcontrol(0, prm_425) == 1)
            {
                s_at_cardcontrol = u8"A"s;
                tx_at_cardcontrol = 3;
            }
            if (card_at_cardcontrol(0, prm_425) == 11)
            {
                s_at_cardcontrol = u8"J"s;
                tx_at_cardcontrol = 13;
            }
            if (card_at_cardcontrol(0, prm_425) == 12)
            {
                s_at_cardcontrol = u8"Q"s;
                tx_at_cardcontrol = 14;
            }
            if (card_at_cardcontrol(0, prm_425) == 13)
            {
                s_at_cardcontrol = u8"K"s;
                tx_at_cardcontrol = 14;
            }
            if (card_at_cardcontrol(1, prm_425) == 4)
            {
                s_at_cardcontrol = u8"Jo"s;
                tx_at_cardcontrol = -12;
            }
            pos(card_at_cardcontrol(3, prm_425) + 18
                    - (card_at_cardcontrol(0, prm_425) >= 10) * 12
                    + tx_at_cardcontrol,
                card_at_cardcontrol(4, prm_425) + 28);
            color(10, 10, 10);
            bmes(
                s_at_cardcontrol,
                col_at_cardcontrol(0),
                col_at_cardcontrol(1),
                col_at_cardcontrol(2));
            color(0, 0, 0);
        }
        else
        {
            font(12 - en * 2);
        }
    }
    return;
}



void showcardpile()
{
    int pilestack_at_cardcontrol = 0;
    pos(pilex_at_cardcontrol - 8, piley_at_cardcontrol - 8);
    gcopy(3, 528, 216, 80, 112);
    pilestack_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardmax_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        if (card_at_cardcontrol(5, cnt) == -1)
        {
            ++pilestack_at_cardcontrol;
            if (pilestack_at_cardcontrol > 7)
            {
                continue;
            }
            card_at_cardcontrol(3, cnt) =
                pilex_at_cardcontrol - pilestack_at_cardcontrol;
            card_at_cardcontrol(4, cnt) =
                piley_at_cardcontrol - pilestack_at_cardcontrol;
            showcard2(cnt);
        }
    }
    font(16 - en * 2, snail::font_t::style_t::bold);
    color(10, 10, 10);
    pos(pilex_at_cardcontrol + 8, piley_at_cardcontrol + 70);
    bmes(u8"X "s + pilestack_at_cardcontrol, 240, 240, 240);
    color(0, 0, 0);
    return;
}



void showcard()
{
    showcardpile();
    for (int cnt = 0, cnt_end = (cardmax_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        if (card_at_cardcontrol(5, cnt) == -1
            || card_at_cardcontrol(5, cnt) == -2)
        {
            continue;
        }
        showcard2(cnt);
    }
    return;
}



int servecard(int prm_427)
{
    int cardid_at_cardcontrol = 0;
    cardid_at_cardcontrol = -1;
    for (int cnt = 0, cnt_end = (cardmax_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        if (card_at_cardcontrol(5, cnt) == -1)
        {
            cardid_at_cardcontrol = cnt;
            break;
        }
    }
    if (cardid_at_cardcontrol == -1)
    {
        return 0;
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (cardplayer_at_cardcontrol(10 + cnt, prm_427) == -1)
        {
            p_at_cardcontrol = cnt;
            break;
        }
    }
    dx_at_cardcontrol = pilex_at_cardcontrol
        - cardplayer_at_cardcontrol(1, prm_427) - p_at_cardcontrol * 88;
    dy_at_cardcontrol =
        piley_at_cardcontrol - cardplayer_at_cardcontrol(2, prm_427);
    card_at_cardcontrol(5, cardid_at_cardcontrol) = prm_427;
    cardplayer_at_cardcontrol(10 + p_at_cardcontrol, prm_427) =
        cardid_at_cardcontrol;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (cnt != 0)
        {
            pos(card_at_cardcontrol(3, cardid_at_cardcontrol),
                card_at_cardcontrol(4, cardid_at_cardcontrol));
            gcopy(3, 608, 216, 64, 96);
        }
        card_at_cardcontrol(3, cardid_at_cardcontrol) =
            pilex_at_cardcontrol - dx_at_cardcontrol / 10 * cnt;
        if (cnt == 9)
        {
            card_at_cardcontrol(3, cardid_at_cardcontrol) =
                pilex_at_cardcontrol - dx_at_cardcontrol;
        }
        card_at_cardcontrol(4, cardid_at_cardcontrol) =
            piley_at_cardcontrol - dy_at_cardcontrol / 10 * cnt;
        if (cnt == 9)
        {
            card_at_cardcontrol(4, cardid_at_cardcontrol) =
                piley_at_cardcontrol - dy_at_cardcontrol;
        }
        gmode(0);
        gsel(3);
        pos(608, 216);
        gcopy(
            0,
            card_at_cardcontrol(3, cardid_at_cardcontrol),
            card_at_cardcontrol(4, cardid_at_cardcontrol),
            64,
            96);
        gsel(0);
        gmode(2);
        showcard2(cardid_at_cardcontrol);
        showcardpile();
        await(10);
        redraw();
    }
    return cardid_at_cardcontrol;
}



void showcardholder()
{
    for (int cnt = 0, cnt_end = (cardplayermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        p_at_cardcontrol = cnt;
        for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol);
             cnt < cnt_end;
             ++cnt)
        {
            dx_at_cardcontrol =
                cardplayer_at_cardcontrol(1, p_at_cardcontrol) + cnt * 88;
            dy_at_cardcontrol = cardplayer_at_cardcontrol(2, p_at_cardcontrol);
            pos(dx_at_cardcontrol - 8, dy_at_cardcontrol - 8);
            gcopy(3, 528, 216, 80, 112);
        }
    }
    return;
}



int opencard2(int prm_428, int prm_429)
{
    if (prm_429 == 1)
    {
        if (card_at_cardcontrol(2, prm_428) == 0)
        {
            return prm_428;
        }
    }
    snd(71);
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (prm_429 == 0)
        {
            pos(card_at_cardcontrol(3, prm_428) - 8,
                card_at_cardcontrol(4, prm_428) - 8);
            gcopy(3, 528, 216, 80, 112);
            gmode(2, 64, 96);
        }
        else
        {
            pos(card_at_cardcontrol(3, prm_428),
                card_at_cardcontrol(4, prm_428));
            gcopy(
                4,
                card_at_cardcontrol(3, prm_428) - wx - 4,
                card_at_cardcontrol(4, prm_428) - wy - 4,
                80,
                112);
            gmode(2, 64, 96);
        }
        pos(card_at_cardcontrol(3, prm_428) + 32,
            card_at_cardcontrol(4, prm_428) + 48);
        grotate(3, 736, 216, 0, 64 - cnt * 14, 96);
        await(10);
        redraw();
    }
    card_at_cardcontrol(2, prm_428) = 0;
    showcard2(prm_428, prm_429);
    redraw();
    return prm_428;
}



int trashcard(int prm_430)
{
    for (int cnt = 0; cnt < 21; ++cnt)
    {
        pos(card_at_cardcontrol(3, prm_430) - 8,
            card_at_cardcontrol(4, prm_430) - 8);
        gcopy(3, 528, 216, 80, 112);
        gmode(2, 64, 96);
        if (cnt == 20)
        {
            redraw();
            break;
        }
        pos(card_at_cardcontrol(3, prm_430) + 32,
            card_at_cardcontrol(4, prm_430) + 48);
        grotate(3, 736, 216, 0.015 * cnt * cnt, 64 - cnt * 3, 96 - cnt * 4);
        await(10);
        redraw();
    }
    for (int cnt = 0, cnt_end = (cardplayermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        p_at_cardcontrol = cnt;
        for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol);
             cnt < cnt_end;
             ++cnt)
        {
            if (cardplayer_at_cardcontrol(10 + cnt, p_at_cardcontrol)
                == prm_430)
            {
                cardplayer_at_cardcontrol(10 + cnt, p_at_cardcontrol) = -1;
            }
        }
    }
    return prm_430;
}



int cpscore(int prm_431)
{
    int ace_at_cardcontrol = 0;
    i_at_cardcontrol = 0;
    ace_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        c_at_cardcontrol = cardplayer_at_cardcontrol(10 + cnt, prm_431);
        if (c_at_cardcontrol == -1)
        {
            break;
        }
        c_at_cardcontrol = card_at_cardcontrol(0, c_at_cardcontrol);
        if (c_at_cardcontrol >= 10)
        {
            c_at_cardcontrol = 10;
        }
        if (c_at_cardcontrol == 1)
        {
            ++ace_at_cardcontrol;
            c_at_cardcontrol = 11;
        }
        i_at_cardcontrol += c_at_cardcontrol;
    }
    for (int cnt = 0, cnt_end = (ace_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        if (i_at_cardcontrol > 21)
        {
            i_at_cardcontrol -= 10;
        }
    }
    return i_at_cardcontrol;
}



int lastcard(int prm_432)
{
    c_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        if (cardplayer_at_cardcontrol(10 + cnt, prm_432) == -1)
        {
            break;
        }
        c_at_cardcontrol = cardplayer_at_cardcontrol(10 + cnt, prm_432);
    }
    return c_at_cardcontrol;
}



int cpblackcard(int prm_433)
{
    c_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        c_at_cardcontrol = cardplayer_at_cardcontrol(10 + cnt, prm_433);
        if (card_at_cardcontrol(2, c_at_cardcontrol) == 1)
        {
            break;
        }
    }
    return c_at_cardcontrol;
}



int cpcardnum(int prm_434)
{
    c_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardholdermax_at_cardcontrol); cnt < cnt_end;
         ++cnt)
    {
        if (cardplayer_at_cardcontrol(10 + cnt, prm_434) != -1)
        {
            ++c_at_cardcontrol;
        }
    }
    return c_at_cardcontrol;
}



int pileremain()
{
    p_at_cardcontrol = 0;
    for (int cnt = 0, cnt_end = (cardmax_at_cardcontrol); cnt < cnt_end; ++cnt)
    {
        if (card_at_cardcontrol(5, cnt) == -1)
        {
            ++p_at_cardcontrol;
        }
    }
    return p_at_cardcontrol;
}



void csvsort(
    elona_vector1<std::string>& prm_435,
    std::string prm_436,
    int prm_437)
{
    elona_vector1<int> p_at_m40;
    p_at_m40(0) = 0;
    for (int cnt = 0; cnt < 40; ++cnt)
    {
        prm_435(cnt) = "";
        getstr(prm_435(cnt), prm_436, p_at_m40(0), prm_437);
        if (strsize == 0)
        {
            break;
        }
        p_at_m40(0) += strsize;
    }
    return;
}



void load_random_name_table()
{
    std::vector<std::string> lines;
    range::copy(
        fileutil::read_by_line{filesystem::dir::data()
                               / lang(u8"ndata.csv", u8"ndata-e.csv")},
        std::back_inserter(lines));

    SDIM3(randn1, 30, 20);
    SDIM4(rnlist, 20, 15, lines.size());

    for (size_t i = 0; i < lines.size(); ++i)
    {
        csvsort(randn1, lines[i], 44);
        for (size_t j = 0; j < 15; ++j)
        {
            rnlist(j, i) = randn1(j);
        }
    }
}



void load_random_title_table()
{
    std::vector<std::string> lines;
    range::copy(
        fileutil::read_by_line{filesystem::dir::data() / u8"name.csv"},
        std::back_inserter(lines));

    SDIM3(rn1, 15, lines.size());
    SDIM3(rn2, 15, lines.size());

    for (size_t i = 0; i < lines.size(); ++i)
    {
        csvsort(randn1, lines[i], 44);
        rn1(i) = lang(randn1(0), randn1(1));
        rn2(i) = lang(randn1(2), randn1(3));
    }
}



void getinheritance(int prm_440, elona_vector1<int>& prm_441, int& prm_442)
{
    int p_at_m42 = 0;
    int f_at_m42 = 0;
    randomize(inv[prm_440].turn + 1);
    DIM2(prm_441, 15);
    prm_442 = 0;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        p_at_m42 = rnd(15);
        if (inv[prm_440].enchantments[p_at_m42].id == 0)
        {
            continue;
        }
        f_at_m42 = 0;
        for (int cnt = 0, cnt_end = (prm_442 + 1); cnt < cnt_end; ++cnt)
        {
            if (p_at_m42 == prm_441(cnt))
            {
                f_at_m42 = 1;
                break;
            }
        }
        if (f_at_m42 == 1)
        {
            continue;
        }
        if (rnd(4) > prm_442 || inv[prm_440].enchantments[p_at_m42].power < 0)
        {
            prm_441(prm_442) = p_at_m42;
            ++prm_442;
        }
    }
    randomize();
    return;
}



void flt(int level, int quality)
{
    filtermax = 0;
    fltselect = 0;
    flttypemajor = 0;
    flttypeminor = 0;
    fltnrace = "";
    objlv = level == 0 ? calcobjlv(gdata_current_dungeon_level) : level;
    fixlv = quality == 0 ? calcfixlv(2) : quality;
}



void fltn(const std::string& prm_447)
{
    std::string s2_at_m44;
    int p_at_m44 = 0;
    s2_at_m44 = prm_447;
    p_at_m44 = 0;
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        getstr(filtern(cnt), s2_at_m44, p_at_m44, 47);
        if (strsize == 0)
        {
            break;
        }
        filtern(cnt) = u8"/"s + filtern(cnt) + u8"/"s;
        p_at_m44 += strsize;
        ++filtermax;
    }
    return;
}



int discsetmc()
{
    return rnd(40);
}



int fltsetdungeon()
{
    if (rnd(20) == 0)
    {
        return fsetrare(rnd(length(fsetrare)));
    }
    if (rnd(3) == 0)
    {
        return fsetwear(rnd(length(fsetwear)));
    }
    return fsetitem(rnd(length(fsetitem)));
}



int randomele()
{
    int p_at_m45 = 0;
    int i_at_m45 = 0;
    p_at_m45 = rnd(11) + 50;
    if (p_at_m45 != 1)
    {
        for (int cnt = 0, cnt_end = (the_ability_db[p_at_m45]->sdataref4);
             cnt < cnt_end;
             ++cnt)
        {
            i_at_m45 = rnd(11) + 50;
            if (the_ability_db[i_at_m45]->sdataref4
                < the_ability_db[p_at_m45]->sdataref4)
            {
                if (rnd(2) == 0)
                {
                    p_at_m45 = i_at_m45;
                }
            }
        }
    }
    return p_at_m45;
}



void putenclv(int prm_448)
{
    for (int cnt = 0, cnt_end = (std::abs(prm_448) + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt > 4)
        {
            s += u8"+"s;
            break;
        }
        s += lang(u8"*"s, u8"#"s);
    }
    return;
}



int encflt(int prm_449, int prm_450)
{
    if (prm_450 == 2)
    {
        if ((prm_449 >= 12000 && prm_449 < 24000) == 0)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    if (prm_450 == 1)
    {
        if ((prm_449 >= 30000 && prm_449 < 50000) == 0)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    if (prm_450 == 3)
    {
        if ((prm_449 >= 12000 && prm_449 < 24000) == 1 || prm_449 == 10000)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (prm_449 == prm_450)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}



void initialize_enchantment_data()
{
    DIM3(encref, 8, 62);
    DIM3(enclist, 2, 62);
    DIM3(encammoref, 3, 6);
    SDIM2(ammoname, 6);
    encammoref(0, 0) = 30;
    encammoref(1, 0) = 70;
    encammoref(2, 0) = 1;
    encammoref(0, 1) = 5;
    encammoref(1, 1) = 15;
    encammoref(2, 1) = 10;
    encammoref(0, 3) = 20;
    encammoref(1, 3) = 35;
    encammoref(2, 3) = 2;
    encammoref(0, 2) = 15;
    encammoref(1, 2) = 30;
    encammoref(2, 2) = 2;
    encammoref(0, 4) = 2;
    encammoref(1, 4) = 5;
    encammoref(2, 4) = 25;
    encammoref(0, 5) = 2;
    encammoref(1, 5) = 5;
    encammoref(2, 5) = 15;
    ammoname(0) = lang(u8"連射弾"s, u8"rapid ammo"s);
    ammoname(1) = lang(u8"炸裂弾"s, u8"explosive ammo"s);
    ammoname(2) = lang(u8"貫通弾"s, u8"piercing ammo"s);
    ammoname(3) = lang(u8"魔弾"s, u8"magic ammo"s);
    ammoname(4) = lang(u8"時止弾"s, u8"time stop ammo"s);
    ammoname(5) = lang(u8"バースト"s, u8"burst ammo"s);
    encref(0, 21) = -1;
    encref(1, 21) = 50;
    encref(2, 21) = 75;
    encref(3, 21) = 0;
    encref(0, 45) = -1;
    encref(1, 45) = 50;
    encref(2, 45) = 100;
    encref(3, 45) = 0;
    encref(0, 46) = -1;
    encref(1, 46) = 50;
    encref(2, 46) = 100;
    encref(3, 46) = 0;
    encref(0, 47) = -1;
    encref(1, 47) = 50;
    encref(2, 47) = 50;
    encref(3, 47) = 0;
    encref(0, 56) = 0;
    encref(1, 56) = 200;
    encref(2, 56) = 30;
    encref(3, 56) = 0;
    encref(0, 59) = 0;
    encref(1, 59) = 200;
    encref(2, 59) = 30;
    encref(3, 59) = 0;
    encref(0, 3) = 0;
    encref(1, 3) = 120;
    encref(2, 3) = 4500;
    encref(3, 3) = 0;
    encref(0, 6) = 0;
    encref(1, 6) = 120;
    encref(2, 6) = 4500;
    encref(3, 6) = 0;
    encref(0, 7) = 1;
    encref(1, 7) = 120;
    encref(2, 7) = 300;
    encref(3, 7) = 10000;
    encref(4, 7) = 24000;
    encref(0, 9) = 1;
    encref(1, 9) = 120;
    encref(2, 9) = 50000;
    encref(3, 9) = 25000;
    encref(0, 23) = 1;
    encref(1, 23) = 120;
    encref(2, 23) = 400;
    encref(3, 23) = 0;
    encref(0, 1) = 1;
    encref(1, 1) = 120;
    encref(2, 1) = 3000;
    encref(3, 1) = 0;
    encref(0, 22) = 1;
    encref(1, 22) = 150;
    encref(2, 22) = 150;
    encref(3, 22) = 0;
    encref(0, 25) = 1;
    encref(1, 25) = 120;
    encref(2, 25) = 400;
    encref(3, 25) = 0;
    encref(0, 2) = 2;
    encref(1, 2) = 150;
    encref(2, 2) = 2500;
    encref(3, 2) = 0;
    encref(0, 24) = 2;
    encref(1, 24) = 120;
    encref(2, 24) = 300;
    encref(3, 24) = 0;
    encref(0, 26) = 1;
    encref(1, 26) = 120;
    encref(2, 26) = 600;
    encref(3, 26) = 0;
    encref(0, 27) = 1;
    encref(1, 27) = 120;
    encref(2, 27) = 600;
    encref(3, 27) = 0;
    encref(0, 28) = 2;
    encref(1, 28) = 120;
    encref(2, 28) = 500;
    encref(3, 28) = 0;
    encref(0, 29) = 3;
    encref(1, 29) = 200;
    encref(2, 29) = 25;
    encref(3, 29) = 18000;
    encref(0, 30) = 3;
    encref(1, 30) = 200;
    encref(2, 30) = 25;
    encref(3, 30) = 20000;
    encref(0, 31) = 2;
    encref(1, 31) = 200;
    encref(2, 31) = 40;
    encref(3, 31) = 32000;
    encref(0, 48) = 1;
    encref(1, 48) = 120;
    encref(2, 48) = 300;
    encref(3, 48) = 0;
    encref(0, 50) = 3;
    encref(1, 50) = 180;
    encref(2, 50) = 150;
    encref(3, 50) = 32000;
    encref(4, 50) = 34000;
    encref(0, 51) = 3;
    encref(1, 51) = 180;
    encref(2, 51) = 150;
    encref(3, 51) = 32000;
    encref(4, 51) = 34000;
    encref(0, 32) = 1;
    encref(1, 32) = 130;
    encref(2, 32) = 250;
    encref(3, 32) = 0;
    encref(0, 55) = 3;
    encref(1, 55) = 130;
    encref(2, 55) = 40;
    encref(3, 55) = 19000;
    encref(4, 55) = 34000;
    encref(0, 33) = 3;
    encref(1, 33) = 160;
    encref(2, 33) = 200;
    encref(3, 33) = 0;
    encref(0, 34) = 3;
    encref(1, 34) = 170;
    encref(2, 34) = 250;
    encref(3, 34) = 10000;
    encref(0, 57) = 2;
    encref(1, 57) = 170;
    encref(2, 57) = 200;
    encref(3, 57) = 10000;
    encref(4, 57) = 24000;
    encref(0, 58) = 2;
    encref(1, 58) = 170;
    encref(2, 58) = 200;
    encref(3, 58) = 10000;
    encref(4, 58) = 24000;
    encref(0, 52) = 1;
    encref(1, 52) = 140;
    encref(2, 52) = 750;
    encref(3, 52) = 14000;
    encref(0, 53) = 2;
    encref(1, 53) = 160;
    encref(2, 53) = 500;
    encref(3, 53) = 14000;
    encref(0, 54) = 3;
    encref(1, 54) = 180;
    encref(2, 54) = 250;
    encref(3, 54) = 14000;
    encref(4, 54) = 16000;
    encref(0, 35) = 2;
    encref(1, 35) = 170;
    encref(2, 35) = 100;
    encref(3, 35) = 12000;
    encref(4, 35) = 32000;
    encref(0, 44) = 99;
    encref(1, 44) = 300;
    encref(2, 44) = 10000;
    encref(3, 44) = 10000;
    encref(4, 44) = 34000;
    encref(0, 42) = 99;
    encref(1, 42) = 300;
    encref(2, 42) = 2000;
    encref(3, 42) = 0;
    encref(0, 36) = 99;
    encref(1, 36) = 450;
    encref(2, 36) = 1000;
    encref(3, 36) = 10000;
    encref(4, 36) = 24000;
    encref(0, 38) = 99;
    encref(1, 38) = 450;
    encref(2, 38) = 1000;
    encref(3, 38) = 10000;
    encref(4, 38) = 24000;
    encref(0, 37) = 99;
    encref(1, 37) = 100;
    encref(2, 37) = 1000;
    encref(3, 37) = 10000;
    encref(4, 37) = 24000;
    encref(0, 39) = 99;
    encref(1, 39) = 500;
    encref(2, 39) = 500;
    encref(3, 39) = 10000;
    encref(4, 39) = 22000;
    encref(0, 40) = 99;
    encref(1, 40) = 550;
    encref(2, 40) = 500;
    encref(3, 40) = 10000;
    encref(4, 40) = 24000;
    encref(0, 41) = 99;
    encref(1, 41) = 300;
    encref(2, 41) = 1500;
    encref(3, 41) = 0;
    encref(0, 43) = 99;
    encref(1, 43) = 150;
    encref(2, 43) = 2000;
    encref(3, 43) = 0;
    encref(0, 8) = 99;
    encref(1, 8) = 300;
    encref(2, 8) = 15000;
    encref(3, 8) = 0;
    encref(0, 49) = 100;
    encref(1, 49) = 120;
    encref(2, 49) = 300;
    encref(3, 49) = 60000;
    encref(0, 60) = 100;
    encref(1, 60) = 120;
    encref(2, 60) = 300;
    encref(3, 60) = 60000;
    encref(0, 61) = 2;
    encref(1, 61) = 170;
    encref(2, 61) = 150;
    encref(3, 61) = 10000;
    encref(4, 61) = 24000;
    DIM3(encprocref, 6, 26);
    encprocref(0, 0) = 450;
    encprocref(1, 0) = 2000;
    encprocref(2, 0) = 1000;
    encprocref(3, 0) = 10000;
    encprocref(4, 0) = 24000;
    encprocref(5, 0) = 10;
    encprocref(0, 1) = 620;
    encprocref(1, 1) = 2000;
    encprocref(2, 1) = 6000;
    encprocref(3, 1) = 24000;
    encprocref(4, 1) = 0;
    encprocref(5, 1) = 50;
    encprocref(0, 2) = 452;
    encprocref(1, 2) = 2000;
    encprocref(2, 2) = 1000;
    encprocref(3, 2) = 10000;
    encprocref(4, 2) = 24000;
    encprocref(5, 2) = 10;
    encprocref(0, 3) = 434;
    encprocref(1, 3) = 2000;
    encprocref(2, 3) = 800;
    encprocref(3, 3) = 10000;
    encprocref(4, 3) = 24000;
    encprocref(5, 3) = 12;
    encprocref(0, 4) = 433;
    encprocref(1, 4) = 2000;
    encprocref(2, 4) = 600;
    encprocref(3, 4) = 10000;
    encprocref(4, 4) = 24000;
    encprocref(5, 4) = 12;
    encprocref(0, 5) = 625;
    encprocref(1, 5) = 3000;
    encprocref(2, 5) = 400;
    encprocref(3, 5) = 10000;
    encprocref(4, 5) = 24000;
    encprocref(5, 5) = 2;
    encprocref(0, 6) = 627;
    encprocref(1, 6) = 3000;
    encprocref(2, 6) = 1000;
    encprocref(3, 6) = 10000;
    encprocref(4, 6) = 24000;
    encprocref(5, 6) = 50;
    encprocref(0, 7) = 619;
    encprocref(1, 7) = 2000;
    encprocref(2, 7) = 4000;
    encprocref(3, 7) = 24000;
    encprocref(4, 7) = 0;
    encprocref(5, 7) = 50;
    encprocref(0, 8) = 604;
    encprocref(1, 8) = 2000;
    encprocref(2, 8) = 1000;
    encprocref(3, 8) = 10000;
    encprocref(4, 8) = 24000;
    encprocref(5, 8) = 15;
    encprocref(0, 9) = 609;
    encprocref(1, 9) = 2000;
    encprocref(2, 9) = 1000;
    encprocref(3, 9) = 10000;
    encprocref(4, 9) = 24000;
    encprocref(5, 9) = 15;
    encprocref(0, 10) = 608;
    encprocref(1, 10) = 2000;
    encprocref(2, 10) = 1000;
    encprocref(3, 10) = 10000;
    encprocref(4, 10) = 24000;
    encprocref(5, 10) = 15;
    encprocref(0, 11) = 453;
    encprocref(1, 11) = 3000;
    encprocref(2, 11) = 1000;
    encprocref(3, 11) = 10000;
    encprocref(4, 11) = 24000;
    encprocref(5, 11) = 4;
    encprocref(0, 12) = 451;
    encprocref(1, 12) = 3000;
    encprocref(2, 12) = 1000;
    encprocref(3, 12) = 10000;
    encprocref(4, 12) = 24000;
    encprocref(5, 12) = 4;
    encprocref(0, 13) = 448;
    encprocref(1, 13) = 3000;
    encprocref(2, 13) = 1000;
    encprocref(3, 13) = 10000;
    encprocref(4, 13) = 24000;
    encprocref(5, 13) = 4;
    encprocref(0, 14) = 446;
    encprocref(1, 14) = 3000;
    encprocref(2, 14) = 400;
    encprocref(3, 14) = 10000;
    encprocref(4, 14) = 24000;
    encprocref(5, 14) = 1;
    encprocref(0, 15) = 444;
    encprocref(1, 15) = 3000;
    encprocref(2, 15) = 1000;
    encprocref(3, 15) = 10000;
    encprocref(4, 15) = 24000;
    encprocref(5, 15) = 3;
    encprocref(0, 16) = 442;
    encprocref(1, 16) = 3000;
    encprocref(2, 16) = 1000;
    encprocref(3, 16) = 10000;
    encprocref(4, 16) = 24000;
    encprocref(5, 16) = 2;
    encprocref(0, 17) = 443;
    encprocref(1, 17) = 2000;
    encprocref(2, 17) = 800;
    encprocref(3, 17) = 10000;
    encprocref(4, 17) = 24000;
    encprocref(5, 17) = 10;
    encprocref(0, 18) = 436;
    encprocref(1, 18) = 2000;
    encprocref(2, 18) = 1000;
    encprocref(3, 18) = 10000;
    encprocref(4, 18) = 24000;
    encprocref(5, 18) = 10;
    encprocref(0, 19) = 421;
    encprocref(1, 19) = 2000;
    encprocref(2, 19) = 1000;
    encprocref(3, 19) = 10000;
    encprocref(4, 19) = 24000;
    encprocref(5, 19) = 15;
    encprocref(0, 20) = 422;
    encprocref(1, 20) = 2000;
    encprocref(2, 20) = 1000;
    encprocref(3, 20) = 10000;
    encprocref(4, 20) = 24000;
    encprocref(5, 20) = 15;
    encprocref(0, 21) = 423;
    encprocref(1, 21) = 2000;
    encprocref(2, 21) = 1000;
    encprocref(3, 21) = 10000;
    encprocref(4, 21) = 24000;
    encprocref(5, 21) = 15;
    encprocref(0, 22) = 419;
    encprocref(1, 22) = 2000;
    encprocref(2, 22) = 1000;
    encprocref(3, 22) = 10000;
    encprocref(4, 22) = 24000;
    encprocref(5, 22) = 15;
    encprocref(0, 23) = 404;
    encprocref(1, 23) = 3000;
    encprocref(2, 23) = 800;
    encprocref(3, 23) = 10000;
    encprocref(4, 23) = 24000;
    encprocref(5, 23) = 2;
    encprocref(0, 24) = 655;
    encprocref(1, 24) = 2000;
    encprocref(2, 24) = 200;
    encprocref(3, 24) = 10000;
    encprocref(4, 24) = 24000;
    encprocref(5, 24) = 90;
    encprocref(0, 25) = 658;
    encprocref(1, 25) = 2000;
    encprocref(2, 25) = 1000;
    encprocref(3, 25) = 10000;
    encprocref(4, 25) = 0;
    encprocref(5, 25) = 100;
    return;
}



int randomenc(int prm_451)
{
    int sum_at_m47 = 0;
    int max_at_m47 = 0;
    int i_at_m47 = 0;
    sum_at_m47 = 0;
    max_at_m47 = 0;
    for (int cnt = 0; cnt < 62; ++cnt)
    {
        if (encref(0, cnt) > prm_451)
        {
            continue;
        }
        if (prm_451 >= 0)
        {
            if (encref(0, cnt) < 0)
            {
                continue;
            }
        }
        if (encref(3, cnt) != 0)
        {
            if (encflt(reftype, encref(3, cnt)) == 0)
            {
                if (encref(4, cnt) == 0)
                {
                    continue;
                }
                else if (encflt(reftype, encref(4, cnt)) == 0)
                {
                    continue;
                }
            }
        }
        sum_at_m47 += encref(2, cnt);
        enclist(0, max_at_m47) = cnt;
        enclist(1, max_at_m47) = sum_at_m47;
        ++max_at_m47;
    }
    if (max_at_m47 == 0)
    {
        return 0;
    }
    i_at_m47 = 0;
    exrand_rnd(p_at_m47, sum_at_m47);
    for (int cnt = 0, cnt_end = (max_at_m47); cnt < cnt_end; ++cnt)
    {
        if (p_at_m47 < enclist(1, cnt))
        {
            i_at_m47 = enclist(0, cnt);
            break;
        }
    }
    return i_at_m47;
}



int randomenclv(int prm_452)
{
    int enclv_at_m47 = 0;
    enclv_at_m47 = clamp(prm_452, 0, 4);
    enclv_at_m47 = rnd(enclv_at_m47 + 1);
    return enclv_at_m47;
}



int randomencp(int prm_453)
{
    int encp_at_m47 = 0;
    encp_at_m47 = rnd(rnd(500 + (trait(163) != 0) * 50) + 1) + 1;
    if (prm_453 != 0)
    {
        encp_at_m47 = encp_at_m47 * prm_453 / 100;
    }
    return encp_at_m47;
}



void sortenc(int prm_454)
{
    int f_at_m47 = 0;
    int cnt2_at_m47 = 0;
    while (1)
    {
        f_at_m47 = 0;
        for (int cnt = 0; cnt < 14; ++cnt)
        {
            cnt2_at_m47 = cnt + 1;
            if (inv[prm_454].enchantments[cnt].id
                < inv[prm_454].enchantments[cnt2_at_m47].id)
            {
                p_at_m47(0) = inv[prm_454].enchantments[cnt].id;
                p_at_m47(1) = inv[prm_454].enchantments[cnt].power;
                inv[prm_454].enchantments[cnt].id =
                    inv[prm_454].enchantments[cnt2_at_m47].id;
                inv[prm_454].enchantments[cnt2_at_m47].id = p_at_m47;
                inv[prm_454].enchantments[cnt].power =
                    inv[prm_454].enchantments[cnt2_at_m47].power;
                inv[prm_454].enchantments[cnt2_at_m47].power = p_at_m47(1);
                f_at_m47 = 1;
            }
        }
        if (f_at_m47 == 0)
        {
            break;
        }
    }
    return;
}



void encremove(int prm_455, int prm_456, int prm_457)
{
    if (prm_456 == 0)
    {
        return;
    }
    if (prm_456 >= 10000)
    {
        enc_at_m48 = prm_456 / 10000;
    }
    else
    {
        enc_at_m48 = prm_456;
    }
    enc_at_m48 = prm_456;
    encp_at_m48 = prm_457;
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        if (inv[prm_455].enchantments[cnt].id == enc_at_m48)
        {
            inv[prm_455].enchantments[cnt].power -= encp_at_m48;
            if (inv[prm_455].enchantments[cnt].power == 0)
            {
                inv[prm_455].enchantments[cnt].id = 0;
            }
            break;
        }
    }
    if (prm_456 < 10000)
    {
        p_at_m48 = prm_456;
    }
    else
    {
        p_at_m48 = prm_456 / 10000;
    }
    inv[prm_455].value = inv[prm_455].value * 100 / encref(1, p_at_m48);
    sortenc(prm_455);
    return;
}



int encadd(
    int prm_458,
    int prm_459,
    int prm_460,
    int prm_461,
    int prm_462,
    int prm_463,
    int prm_464)
{
    int sum_at_m48 = 0;
    int max_at_m48 = 0;
    int i_at_m48 = 0;
    if (prm_459 == 0)
    {
        return 0;
    }
    if (prm_459 >= 10000)
    {
        enc_at_m48 = prm_459 / 10000;
    }
    else
    {
        enc_at_m48 = prm_459;
    }
    if (prm_464 == 0)
    {
        if (encref(3, enc_at_m48) != 0)
        {
            if (encflt(reftype, encref(3, enc_at_m48)) == 0)
            {
                if (encref(4, enc_at_m48) == 0)
                {
                    return 0;
                }
                else if (encflt(reftype, encref(4, enc_at_m48)) == 0)
                {
                    return 0;
                }
            }
        }
        else if (reftype == 25000)
        {
            if (prm_462 == 0)
            {
                return 0;
            }
        }
    }
    enc_at_m48 = prm_459;
    encp_at_m48 = prm_460;
    if (enc_at_m48 < 20)
    {
        if (enc_at_m48 == 1)
        {
            enc_at_m48 = rnd(10) + 10;
            enc_at_m48 += 10000;
            if (prm_461 != 0)
            {
                if (rnd(100) < prm_461)
                {
                    encp_at_m48 = prm_460 * -2;
                }
            }
        }
        if (enc_at_m48 == 2)
        {
            enc_at_m48 = randomele();
            enc_at_m48 += 20000;
            if (prm_461 != 0)
            {
                if (rnd(100) < prm_461)
                {
                    encp_at_m48 = prm_460 * -2;
                }
            }
        }
        if (enc_at_m48 == 3)
        {
            enc_at_m48 = rnd(40) + 150;
            enc_at_m48 += 30000;
            if (prm_461 != 0)
            {
                if (rnd(100) < prm_461)
                {
                    encp_at_m48 = prm_460 * -2;
                }
            }
        }
        if (enc_at_m48 == 6)
        {
            enc_at_m48 = rnd(10) + 10;
            enc_at_m48 += 60000;
        }
        if (enc_at_m48 == 7)
        {
            enc_at_m48 = randomele();
            enc_at_m48 += 70000;
        }
        if (enc_at_m48 == 8)
        {
            sum_at_m48 = 0;
            max_at_m48 = 0;
            for (int cnt = 0; cnt < 26; ++cnt)
            {
                if (encprocref(3, cnt) != 0)
                {
                    if (encflt(reftype, encprocref(3, cnt)) == 0)
                    {
                        if (encprocref(4, cnt) == 0)
                        {
                            continue;
                        }
                        else if (encflt(reftype, encprocref(4, cnt)) == 0)
                        {
                            continue;
                        }
                    }
                }
                sum_at_m48 += encprocref(2, cnt);
                enclist(0, max_at_m48) = cnt;
                enclist(1, max_at_m48) = sum_at_m48;
                ++max_at_m48;
            }
            if (max_at_m48 == 0)
            {
                return 0;
            }
            i_at_m48 = 0;
            exrand_rnd(p_at_m48, sum_at_m48);
            for (int cnt = 0, cnt_end = (max_at_m48); cnt < cnt_end; ++cnt)
            {
                if (p_at_m48 < enclist(1, cnt))
                {
                    i_at_m48 = enclist(0, cnt);
                    break;
                }
            }
            enc_at_m48 = 80000 + i_at_m48;
        }
        if (enc_at_m48 == 9)
        {
            enc_at_m48 = rnd(rnd(6) + 1);
            encp_at_m48 =
                clamp(encp_at_m48, 0, 500) * encammoref(1, enc_at_m48) / 500
                + encammoref(0, enc_at_m48);
            enc_at_m48 += 90000;
            encp_at_m48 += encp_at_m48 * 1000;
        }
    }
    i_at_m48 = -1;
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        if (inv[prm_458].enchantments[cnt].id == enc_at_m48)
        {
            i_at_m48 = cnt;
            continue;
        }
        if (i_at_m48 == -1)
        {
            if (inv[prm_458].enchantments[cnt].id == 0)
            {
                i_at_m48 = cnt;
            }
        }
    }
    if (i_at_m48 == -1)
    {
        return 0;
    }
    if (inv[prm_458].enchantments[i_at_m48].id == enc_at_m48)
    {
        if (reftype == 25000)
        {
            return 0;
        }
        if (!prm_462)
        {
            encp_at_m48 /= 2;
        }
    }
    if (prm_463)
    {
        rtval(0) = enc_at_m48;
        rtval(1) = encp_at_m48;
        return 0;
    }
    if (inv[prm_458].enchantments[i_at_m48].id == enc_at_m48)
    {
        encp_at_m48 += inv[prm_458].enchantments[i_at_m48].power;
    }
    inv[prm_458].enchantments[i_at_m48].id = enc_at_m48;
    inv[prm_458].enchantments[i_at_m48].power = encp_at_m48;
    if (prm_459 < 10000)
    {
        p_at_m48 = prm_459;
    }
    else
    {
        p_at_m48 = prm_459 / 10000;
    }
    if (inv[prm_458].value * encref(1, p_at_m48) / 100 > 0)
    {
        inv[prm_458].value = inv[prm_458].value * encref(1, p_at_m48) / 100;
    }
    sortenc(prm_458);
    return 1;
}



void egoadd(int prm_465, int prm_466)
{
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (egoenc(cnt * 2, prm_466) == 0)
        {
            break;
        }
        encadd(
            prm_465,
            egoenc(cnt * 2, prm_466),
            randomencp(egoenc(cnt * 2 + 1, prm_466)));
    }
    return;
}



void initialize_ego_data()
{
    SDIM1(egoname);
    DIM3(egoenc, 20, 11);
    DIM3(egoref, 2, 11);
    DIM2(egolist, 11);
    egoname(1) = lang(u8"静寂の"s, u8"of silence"s);
    egoref(0, 1) = 0;
    egoref(1, 1) = 1;
    p = 1;
    egoenc(0, p) = 30157;
    egoenc(1, p) = 100;
    egoenc(2, p) = 22;
    egoenc(3, p) = 100;
    egoname(6) = lang(u8"耐盲目の"s, u8"of resist blind"s);
    egoref(0, 6) = 1;
    egoref(1, 6) = 1;
    p = 6;
    egoenc(0, p) = 23;
    egoenc(1, p) = 100;
    egoname(8) = lang(u8"耐混乱の"s, u8"of resist confusion"s);
    egoref(0, 8) = 1;
    egoref(1, 8) = 1;
    p = 8;
    egoenc(0, p) = 25;
    egoenc(1, p) = 100;
    egoname(0) = lang(u8"烈火の"s, u8"of fire"s);
    egoref(0, 0) = 1;
    egoref(1, 0) = 3;
    p = 0;
    egoenc(0, p) = 20050;
    egoenc(1, p) = 150;
    egoenc(2, p) = 70050;
    egoenc(3, p) = 150;
    egoname(2) = lang(u8"氷結の"s, u8"of cold"s);
    egoref(0, 2) = 1;
    egoref(1, 2) = 3;
    p = 2;
    egoenc(0, p) = 20051;
    egoenc(1, p) = 150;
    egoenc(2, p) = 70051;
    egoenc(3, p) = 150;
    egoname(3) = lang(u8"稲妻の"s, u8"of lightning"s);
    egoref(0, 3) = 1;
    egoref(1, 3) = 3;
    p = 3;
    egoenc(0, p) = 20052;
    egoenc(1, p) = 150;
    egoenc(2, p) = 70052;
    egoenc(3, p) = 150;
    egoname(5) = lang(u8"癒し手の"s, u8"of healing"s);
    egoref(0, 5) = 1;
    egoref(1, 5) = 1;
    p = 5;
    egoenc(0, p) = 30154;
    egoenc(1, p) = 100;
    egoname(7) = lang(u8"耐麻痺の"s, u8"of resist paralysis"s);
    egoref(0, 7) = 2;
    egoref(1, 7) = 1;
    p = 7;
    egoenc(0, p) = 24;
    egoenc(1, p) = 100;
    egoname(9) = lang(u8"耐恐怖の"s, u8"of resist fear"s);
    egoref(0, 9) = 0;
    egoref(1, 9) = 1;
    p = 9;
    egoenc(0, p) = 26;
    egoenc(1, p) = 100;
    egoname(10) = lang(u8"睡眠防止の"s, u8"of resist sleep"s);
    egoref(0, 10) = 0;
    egoref(1, 10) = 1;
    p = 10;
    egoenc(0, p) = 27;
    egoenc(1, p) = 100;
    egoname(4) = lang(u8"防衛者の"s, u8"of defender"s);
    egoref(0, 4) = 3;
    egoref(1, 4) = 10000;
    p = 4;
    egoenc(0, p) = 20050;
    egoenc(1, p) = 100;
    egoenc(2, p) = 20051;
    egoenc(3, p) = 100;
    egoenc(4, p) = 20052;
    egoenc(5, p) = 100;
    egominorn(0) = lang(u8"唄う"s, u8"singing"s);
    egominorn(1) = lang(u8"召使の"s, u8"servant's"s);
    egominorn(2) = lang(u8"従者の"s, u8"follower's"s);
    egominorn(3) = lang(u8"呻く"s, u8"howling"s);
    egominorn(4) = lang(u8"輝く"s, u8"glowing"s);
    egominorn(5) = lang(u8"異彩の"s, u8"conspicuous"s);
    egominorn(6) = lang(u8"魔力を帯びた"s, u8"magical"s);
    egominorn(7) = lang(u8"闇を砕く"s, u8"enchanted"s);
    egominorn(8) = lang(u8"強力な"s, u8"mighty"s);
    egominorn(9) = lang(u8"頼れる"s, u8"trustworthy"s);
    maxegominorn = length(egominorn);
    return;
}



void add_enchantments_depending_on_ego()
{
    for (int cnt = 0, cnt_end = (rnd(rnd(5) + 1) + 1); cnt < cnt_end; ++cnt)
    {
        encadd(ci, randomenc(randomenclv(egolv)), randomencp(), 8);
    }
    inv[ci].subname = 20000 + rnd(maxegominorn);
    return;
}



void add_enchantment_by_fixed_ego()
{
    p = 0;
    for (int cnt = 0; cnt < 11; ++cnt)
    {
        if (egoref(0, cnt) != egolv)
        {
            continue;
        }
        if (egoref(1, cnt) != 0)
        {
            if (encflt(reftype, egoref(1, cnt)) == 0)
            {
                continue;
            }
        }
        egolist(p) = cnt;
        ++p;
    }
    if (p == 0)
    {
        return;
    }
    p = egolist(rnd(p));
    inv[ci].subname = 10000 + p;
    egoadd(ci, p);
    if (rnd(2) == 0)
    {
        encadd(ci, randomenc(randomenclv(egolv)), randomencp(), 20);
    }
    if (rnd(4) == 0)
    {
        encadd(ci, randomenc(randomenclv(egolv)), randomencp(), 25);
    }
    return;
}



void add_enchantments()
{
    if (reftype == 25000)
    {
        inv[ci].count = -1;
    }
    if (fixlv <= 2)
    {
        return;
    }
    if (fixlv == 6)
    {
        egolv = 4;
    }
    else
    {
        egolv = rnd(clamp(rnd(objlv / 10 + 3), 0, 4) + 1);
        inv[ci].value = inv[ci].value * 3;
        inv[ci].difficulty_of_identification =
            50 + rnd((std::abs((fixlv - 2)) * 100 + 100));
    }
    if (reftypeminor == 10006)
    {
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (rnd(10) == 0)
            {
                encadd(ci, 34, randomencp());
            }
            if (rnd(10) == 0)
            {
                encadd(ci, 10016, randomencp());
            }
            if (rnd(10) == 0)
            {
                encadd(ci, 30172, randomencp());
                break;
            }
            if (rnd(10) == 0)
            {
                encadd(ci, 10003, randomencp());
                break;
            }
            if (rnd(10) == 0)
            {
                encadd(ci, 30164, randomencp());
                break;
            }
        }
    }
    if (fixlv < 4)
    {
        if (rnd(2))
        {
            add_enchantments_depending_on_ego();
        }
        else
        {
            add_enchantment_by_fixed_ego();
        }
    }
    if (fixlv == 4 || fixlv == 5)
    {
        inv[ci].subname = 40000 + rnd(30000);
        if (fixlv == 5 || (fixlv == 4 && rnd(10) == 0))
        {
            encadd(ci, randomenc(99), randomencp());
        }
        if (rnd(100) == 0 || 0)
        {
            if (reftype == 24000 || reftype == 10000)
            {
                ibitmod(10, ci, 1);
                inv[ci].param1 = 1;
                return;
            }
        }
        if (fixlv == 4)
        {
            p = rnd(rnd(rnd(10) + 1) + 3) + 3;
        }
        if (fixlv == 5)
        {
            p = rnd(rnd(rnd(10) + 1) + 3) + 6;
        }
        if (p > 11)
        {
            if (reftype == 10000 || reftype == 24000)
            {
                if (rnd(10) == 0)
                {
                    ibitmod(15, ci, 1);
                    encadd(ci, randomenc(99), randomencp());
                    inv[ci].curse_state = curse_state_t::blessed;
                }
            }
        }
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            encadd(
                ci,
                randomenc(randomenclv(egolv)),
                randomencp() + (fixlv == 5) * 100 + (ibit(15, ci) == 1) * 100,
                20 - (fixlv == 5) * 10 - (ibit(15, ci) == 1) * 20);
        }
    }
    if (fixlv == 6)
    {
        for (int cnt = 0, cnt_end = (rnd(3)); cnt < cnt_end; ++cnt)
        {
            encadd(ci, randomenc(randomenclv(egolv)), randomencp(), 10);
        }
    }
    if (is_cursed(inv[ci].curse_state))
    {
        encadd(
            ci,
            randomenc(randomenclv(egolv)),
            clamp(randomencp(), 250, 10000)
                * (125 + (inv[ci].curse_state == curse_state_t::doomed) * 25)
                / 100);
        for (int cnt = 0,
                 cnt_end = cnt
                 + (1 + (inv[ci].curse_state == curse_state_t::doomed)
                    + rnd(2));
             cnt < cnt_end;
             ++cnt)
        {
            if (rnd(3) == 0)
            {
                encadd(ci, 2, randomencp() * 3 / 2, 100);
                continue;
            }
            if (rnd(3) == 0)
            {
                encadd(ci, 1, randomencp() * 5 / 2, 100);
                continue;
            }
            encadd(ci, randomenc(-1), randomencp());
        }
    }
    return;
}



void initialize_item_material()
{
    determine_item_material();
    apply_item_material();
    return;
}



void determine_item_material()
{
    int mtlv = 0;
    if (cm)
    {
        mtlv = cdata[rc].level / 15 + 1;
    }
    else
    {
        mtlv = rnd((objlv + 1)) / 10 + 1;
    }
    if (inv[ci].id == 630)
    {
        mtlv = rnd(mtlv + 1);
        if (rnd(3))
        {
            inv[ci].material = 1000;
        }
        else
        {
            inv[ci].material = 1001;
        }
    }
    p = rnd(100);
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (p < 5)
        {
            p = 3;
            break;
        }
        if (p < 25)
        {
            p = 2;
            break;
        }
        if (p < 55)
        {
            p = 1;
            break;
        }
        p = 0;
    }
    if (mode == 1)
    {
        mtlv = 0;
        p = 0;
    }
    if (mtlv >= 5)
    {
        mtlv = 4;
    }
    mtlv = clamp(rnd(mtlv + 1) + objfix, 0, 4);
    objfix = 0;
    if (reftype == 60000)
    {
        if (rnd(2) == 0)
        {
            inv[ci].material = 1000;
        }
        else
        {
            inv[ci].material = 1001;
        }
    }
    if (inv[ci].material == 1000)
    {
        if (rnd(10) != 0)
        {
            inv[ci].material = the_item_material_db.lookup_metal(p, mtlv);
        }
        else
        {
            inv[ci].material = the_item_material_db.lookup_leather(p, mtlv);
        }
    }
    if (inv[ci].material == 1001)
    {
        if (rnd(10) != 0)
        {
            inv[ci].material = the_item_material_db.lookup_leather(p, mtlv);
        }
        else
        {
            inv[ci].material = the_item_material_db.lookup_metal(p, mtlv);
        }
    }
    if (rnd(25) == 0)
    {
        inv[ci].material = 35;
    }
    return;
}



void change_item_material()
{
    int originalvalue = 0;
    inv[ci].color = 0;
    p = inv[ci].material;
    reftype = the_item_db[inv[ci].id]->category;
    fixlv = inv[ci].quality;
    for (auto e : the_item_material_db[p]->enchantments)
    {
        encremove(ci, e.id, e.power);
    }
    originalvalue = inv[ci].value * 100 / the_item_material_db[p]->value;
    dbid = inv[ci].id;
    access_item_db(10);
    inv[ci].value = originalvalue;
    if (fixmaterial != 0)
    {
        inv[ci].material = fixmaterial;
        fixmaterial = 0;
    }
    else
    {
        determine_item_material();
    }
    apply_item_material();
    label_1583();
    refresh_character(cc);
    return;
}



void apply_item_material()
{
    if (reftype == 60000)
    {
        if (inv[ci].material == 3 || inv[ci].material == 16
            || inv[ci].material == 21 || inv[ci].material == 2)
        {
            inv[ci].material = 43;
        }
    }
    p = inv[ci].material;
    inv[ci].weight = inv[ci].weight * the_item_material_db[p]->weight / 100;
    if (reftype == 60000)
    {
        inv[ci].value += the_item_material_db[p]->value * 2;
    }
    else
    {
        inv[ci].value = inv[ci].value * the_item_material_db[p]->value / 100;
    }
    if (inv[ci].color == 0)
    {
        inv[ci].color = the_item_material_db[p]->color;
    }
    p(1) = 120;
    p(2) = 80;
    if (fixlv == 1)
    {
        p(1) = 150;
        p(2) = 80;
    }
    if (fixlv == 3)
    {
        p(1) = 100;
        p(2) = 70;
    }
    if (fixlv >= 4)
    {
        p(1) = 80;
        p(2) = 70;
    }
    if (inv[ci].hit_bonus != 0)
    {
        inv[ci].hit_bonus = the_item_material_db[p]->hit_bonus
            * inv[ci].hit_bonus * 9 / (p(1) - rnd(30));
    }
    if (inv[ci].damage_bonus != 0)
    {
        inv[ci].damage_bonus = the_item_material_db[p]->damage_bonus
            * inv[ci].damage_bonus * 5 / (p(1) - rnd(30));
    }
    if (inv[ci].dv != 0)
    {
        inv[ci].dv =
            the_item_material_db[p]->dv * inv[ci].dv * 7 / (p(1) - rnd(30));
    }
    if (inv[ci].pv != 0)
    {
        inv[ci].pv =
            the_item_material_db[p]->pv * inv[ci].pv * 9 / (p(1) - rnd(30));
    }
    if (inv[ci].dice_y != 0)
    {
        inv[ci].dice_y =
            inv[ci].dice_y * the_item_material_db[p]->dice_y / (p(1) + rnd(25));
    }
    set_material_specific_attributes();
    return;
}



void set_material_specific_attributes()
{
    p = inv[ci].material;
    for (auto e : the_item_material_db[p]->enchantments)
    {
        encadd(ci, e.id, e.power, 0, 1);
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (the_item_material_db[p]->fireproof)
        {
            ibitmod(1, ci, 1);
        }
        if (the_item_material_db[p]->acidproof)
        {
            ibitmod(2, ci, 1);
        }
    }
    return;
}



std::string rpname(int prm_516)
{
    std::string s_at_m62;
    s_at_m62 = u8"?????"s;
    if (rpdatan(prm_516) != ""s)
    {
        return rpdatan(prm_516);
    }
    if (prm_516 >= 400)
    {
        return ioriginalnameref(prm_516 - 400);
    }
    return s_at_m62;
}



void colorres(int)
{
    color(0, 0, 0);
    if (i_at_m66 == 50)
    {
        color(150, 0, 0);
    }
    if (i_at_m66 == 51)
    {
        color(0, 0, 150);
    }
    if (i_at_m66 == 52)
    {
        color(150, 150, 0);
    }
    if (i_at_m66 == 59)
    {
        color(150, 0, 150);
    }
    if (i_at_m66 == 53)
    {
        color(100, 80, 80);
    }
    if (i_at_m66 == 55)
    {
        color(0, 150, 0);
    }
    if (i_at_m66 == 60)
    {
        color(150, 100, 100);
    }
    if (i_at_m66 == 57)
    {
        color(50, 100, 150);
    }
    if (i_at_m66 == 58)
    {
        color(100, 150, 50);
    }
    if (i_at_m66 == 54)
    {
        color(150, 100, 50);
    }
    if (i_at_m66 == 56)
    {
        color(150, 50, 0);
    }
    return;
}



void equipinfo(int prm_529, int prm_530, int prm_531)
{
    int p_at_m66 = 0;
    std::string s_at_m66;
    if (inv[prm_529].identification_state
        != identification_state_t::completely_identified)
    {
        return;
    }
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        p_at_m66 = inv[prm_529].enchantments[cnt].id;
        if (p_at_m66 == 0)
        {
            break;
        }
        i_at_m66 = p_at_m66 / 10000;
        if (i_at_m66 != 2)
        {
            continue;
        }
        i_at_m66 = p_at_m66 % 10000;
        pos(prm_530 + (i_at_m66 - 50) * 20, prm_531);
        p_at_m66 = std::abs(inv[prm_529].enchantments[cnt].power / 2 / 50) + 1;
        if (p_at_m66 > 5)
        {
            s_at_m66 = u8"+"s;
        }
        else
        {
            s_at_m66 = ""s + p_at_m66;
        }
        if (jp)
        {
            colorres();
            if (inv[prm_529].enchantments[cnt].power >= 0)
            {
                mes(u8"●"s);
            }
            else
            {
                mes(u8"▼"s);
            }
            pos(prm_530 + (i_at_m66 - 50) * 20 + 5, prm_531 + 1);
            mes(s_at_m66);
            pos(prm_530 + (i_at_m66 - 50) * 20 + 4, prm_531);
            color(255, 255, 255);
            mes(s_at_m66);
            color(0, 0, 0);
        }
        else
        {
            color(80, 60, 40);
            pos(prm_530 + (i_at_m66 - 50) * 20 + 5, prm_531);
            mes(""s + p_at_m66);
            color(0, 0, 0);
            colorres();
            pos(prm_530 + (i_at_m66 - 50) * 20 + 4, prm_531);
            mes(""s + p_at_m66);
            color(0, 0, 0);
        }
    }
    return;
}



void csvstr2(elona_vector1<std::string>& prm_532, const std::string& prm_533)
{
    std::string word_at_m67;
    int p_at_m67 = 0;
    int i_at_m67 = 0;
    word_at_m67 = prm_533;
    p_at_m67 = 0;
    i_at_m67 = word_at_m67.size();
    for (int cnt = 0; cnt < 40; ++cnt)
    {
        prm_532(cnt) = "";
        getstr(prm_532(cnt), word_at_m67, clamp(p_at_m67, 0, i_at_m67), 44);
        if (strsize > i_at_m67)
        {
            break;
        }
        p_at_m67 += strsize;
    }
    return;
}



int cargocheck()
{
    if (the_item_db[inv[ci].id]->is_cargo == 0)
    {
        return 1;
    }
    if (mdata(6) != 1 && mdata(6) != 5 && mdata(6) != 3 && mdata(6) != 4
        && mdata(6) != 6 && mdata(6) != 2)
    {
        ++msgdup;
        txt(lang(
            u8"荷車の荷物は街か野外でしか操作できない。"s,
            u8"You can only use cargo items on the surface."s));
        snd(27);
        return 0;
    }
    else
    {
        return 1;
    }
}



void rndshuffle(elona_vector1<int>& prm_534)
{
    int p_at_m68 = 0;
    int r_at_m68 = 0;
    p_at_m68 = length(prm_534);
    for (int cnt = 0, cnt_end = (p_at_m68); cnt < cnt_end; ++cnt)
    {
        r_at_m68 = rnd(p_at_m68);
        --p_at_m68;
        i_at_m68 = prm_534(r_at_m68);
        prm_534(r_at_m68) = prm_534(p_at_m68);
        prm_534(p_at_m68) = i_at_m68;
    }
    return;
}



int dist(int x1, int y1, int x2, int y2)
{
    const auto dx = x1 - x2;
    const auto dy = y1 - y2;
    return int(std::sqrt(dx * dx + dy * dy));
}



int winposy(int prm_539, int prm_540)
{
    if (prm_540 == 0)
    {
        return ((inf_screenh + 1) * inf_tiles - prm_539) / 2 + 8;
    }
    return (windowh - prm_539) / 2;
}



void cutname(std::string& prm_541, int prm_542)
{
    int len_at_m71 = 0;
    elona_vector1<std::string> buf_at_m71;
    int p_at_m71 = 0;
    if (strlen_u(prm_541) > size_t(prm_542))
    {
        len_at_m71 = zentohan(prm_541, buf_at_m71, 0);
        SDIM2(buf_at_m71, len_at_m71);
        zentohan(prm_541, prm_541, len_at_m71);
        if (strlen_u(prm_541) > size_t(prm_542))
        {
            len_at_m71 = 0;
            while (1)
            {
                if (len_at_m71 >= prm_542)
                {
                    break;
                }
                p_at_m71 = prm_541[len_at_m71];
                if ((p_at_m71 >= 129 && p_at_m71 <= 159)
                    || (p_at_m71 >= 224 && p_at_m71 <= 252))
                {
                    p_at_m71 = 2;
                }
                else
                {
                    p_at_m71 = 1;
                }
                len_at_m71 += p_at_m71;
            }
            prm_541 = strmid(prm_541, 0, len_at_m71) + u8".."s;
        }
    }
    return;
}



void cs_listbk()
{
    if (cs_bk == -1)
        return;
    pos(cs_posbk_x, cs_posbk_y);
    gcopy(3, 264, 96, cs_posbk_w, cs_posbk_h);
}



void cs_list(
    bool is_selected,
    const std::string& text,
    int x,
    int y,
    int x_offset,
    int color_mode,
    int ci)
{
    if (is_selected)
    {
        const auto width =
            clamp(int(strlen_u(text)) * 7 + 32 + x_offset, 10, 480);

        gsel(3);
        pos(264, 96);
        gcopy(0, x, y, width, 19);
        gsel(0);

        boxf(x, y, x + width, y + 19, {127, 191, 255, 63});
        pos(x + width - 20, y + 4);
        gcopy(3, 48, 360, 16, 16);

        cs_posbk_x = x;
        cs_posbk_y = y;
        cs_posbk_w = width;
        cs_posbk_h = 19;
    }

    switch (color_mode)
    {
    case 0: color(10, 10, 10); break;
    case 1:
        color(0, 0, 0);
        if (inv[ci].identification_state
            == identification_state_t::completely_identified)
        {
            switch (inv[ci].curse_state)
            {
            case curse_state_t::doomed: color(100, 10, 100); break;
            case curse_state_t::cursed: color(150, 10, 10); break;
            case curse_state_t::none: color(10, 40, 120); break;
            case curse_state_t::blessed: color(10, 110, 30); break;
            }
        }
        if (ibit(13, ci))
        {
            color(120, 80, 0);
        }
        break;
    case 2: color(240, 240, 240); break;
    case 3: color(160, 10, 10); break;
    case 4: color(128, 128, 128); break;
    default: break;
    }

    pos(x + 4 + x_offset, y + 3);
    mes(text);
    color(0, 0, 0);
}



void go_hostile()
{
    for (int cc = ELONA_MAX_PARTY_CHARACTERS; cc < ELONA_MAX_CHARACTERS; ++cc)
    {
        if (cdata[cc].character_role == 14 || cdata[cc].character_role == 16
            || cdata[cc].character_role == 1010)
        {
            cdata[cc].relationship = -3;
            cdata[cc].hate = 80;
            cdata[cc].emotion_icon = 218;
        }
    }
}



void modify_karma(int cc, int delta)
{
    if (trait(162) && delta < 0)
    {
        delta = delta * 75 / 100;
        if (delta == 0)
            return;
    }
    if (trait(169) && delta < 0)
    {
        delta = delta * 150 / 100;
    }

    if (delta >= 0)
    {
        txtef(5);
    }
    else
    {
        txtef(8);
    }
    txt(lang(u8"カルマ変動("s + delta + u8") ", u8"Karma("s + delta + u8")"));
    if (delta > 0)
    {
        if (cdata[cc].karma < -30 && cdata[cc].karma + delta >= -30)
        {
            txtef(2);
            txt(lang(
                u8"あなたの罪は軽くなった。",
                u8"You are no longer a criminal"));
        }
    }
    else if (delta < 0)
    {
        if (cdata[cc].karma >= -30 && cdata[cc].karma + delta < -30)
        {
            txtef(8);
            txt(lang(u8"あなたは今や罪人だ。", u8"You are a criminal now."));
            go_hostile();
        }
    }

    cdata[cc].karma += delta;

    int max = 20;
    if (trait(162))
    {
        max -= 20;
    }
    if (trait(169))
    {
        max += 20;
    }
    cdata[cc].karma = clamp(cdata[cc].karma, -100, max);
}



void modrank(int prm_552, int prm_553, int prm_554)
{
    elona_vector1<int> p_at_m75;
    int orgrank_at_m75 = 0;
    int i_at_m75 = 0;
    std::string s_at_m75;
    p_at_m75 = 120 + prm_552;
    p_at_m75(1) = gdata(p_at_m75) / 100;
    orgrank_at_m75 = gdata(p_at_m75);
    i_at_m75 = prm_553;
    if (prm_553 > 0)
    {
        i_at_m75 = prm_553 * (p_at_m75(1) + 20) * (p_at_m75(1) + 20) / 2500;
        gdata(140 + prm_552) = ranknorma(prm_552);
        if (gdata(p_at_m75) == 100)
        {
            return;
        }
        if (prm_554 != 0)
        {
            if (i_at_m75 / 100 > prm_554)
            {
                i_at_m75 = prm_554 * 100;
            }
        }
    }
    gdata(p_at_m75) -= i_at_m75;
    if (gdata(p_at_m75) >= 10000)
    {
        gdata(p_at_m75) = 10000;
    }
    if (gdata(p_at_m75) < 100)
    {
        gdata(p_at_m75) = 100;
    }
    if (orgrank_at_m75 / 100 != gdata(p_at_m75) / 100)
    {
        i_at_m75 = gdata(p_at_m75) / 100 - orgrank_at_m75 / 100;
        if (i_at_m75 < 0)
        {
            txtef(2);
        }
        else
        {
            txtef(8);
        }
        s_at_m75 = u8" "s + orgrank_at_m75 / 100 + lang(u8"位 → "s, u8" -> "s)
            + gdata(p_at_m75) / 100 + lang(u8"位 "s, ""s);
        txt(lang(u8"ランク変動"s, u8"Ranking Change "s) + u8"("s
            + rankn(10, prm_552) + s_at_m75 + u8") "s + lang(u8"《"s, u8"<"s)
            + ranktitle(prm_552) + lang(u8"》"s, u8">"s));
    }
    else if (i_at_m75 > 0)
    {
        txtef(2);
        txt(lang(
            u8"着実に次のランクに近づいている。"s,
            u8"You are one step closer to the next rank."s));
    }
    return;
}



void modify_potential(int cc, int id, int delta)
{
    sdata.get(id, cc).potential =
        clamp(sdata.get(id, cc).potential + delta, 2, 400);
}



void skillgain(int cc, int id, int initial_level, int stock)
{
    if (id >= 400)
    {
        if (cc == 0)
        {
            spell(id - 400) += stock;
            modify_potential(cc, id, 1);
        }
    }
    if (sdata.get(id, cc).original_level != 0)
    {
        if (id < 400)
        {
            modify_potential(cc, id, 20);
        }
        return;
    }
    int lv = sdata.get(id, cc).original_level + initial_level;
    if (lv < 1)
    {
        lv = 1;
    }
    if (id >= 400)
    {
        modify_potential(cc, id, 200);
    }
    else
    {
        modify_potential(cc, id, 50);
    }
    sdata.get(id, cc).original_level = clamp(lv, 0, 2000);
    refresh_character(cc);
}



int skillmod(int id, int cc, int experience)
{
    lv_at_m77 = sdata.get(id, cc).original_level;
    exp_at_m77 = sdata.get(id, cc).experience + experience;
    growth_at_m77 = sdata.get(id, cc).potential;
    if (growth_at_m77 == 0)
    {
        return 0;
    }
    if (exp_at_m77 >= 1000)
    {
        lvchange_at_m77 = exp_at_m77 / 1000;
        lv_at_m77 += lvchange_at_m77;
        exp_at_m77 = exp_at_m77 % 1000;
        for (int cnt = 0, cnt_end = (lvchange_at_m77); cnt < cnt_end; ++cnt)
        {
            growth_at_m77 = growth_at_m77 * 0.9;
            if (growth_at_m77 < 1)
            {
                growth_at_m77 = 1;
            }
        }
        sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
        sdata.get(id, cc).experience = exp_at_m77;
        sdata.get(id, cc).potential = growth_at_m77;
        if (is_in_fov(cc))
        {
            if (cc == 0 || cc < 16)
            {
                snd(61);
                txtef(2);
            }
            txt(txtskillchange(id, cc, true));
        }
        refresh_character(cc);
        return 1;
    }
    if (exp_at_m77 < 0)
    {
        lvchange_at_m77 = -exp_at_m77 / 1000 + 1;
        exp_at_m77 = 1000 + exp_at_m77 % 1000;
        if (lv_at_m77 - lvchange_at_m77 < 1)
        {
            lvchange_at_m77 = lv_at_m77 - 1;
            if (lv_at_m77 == 1)
            {
                if (lvchange_at_m77 == 0)
                {
                    exp_at_m77 = 0;
                }
            }
        }
        lv_at_m77 -= lvchange_at_m77;
        for (int cnt = 0, cnt_end = (lvchange_at_m77); cnt < cnt_end; ++cnt)
        {
            growth_at_m77 = int(growth_at_m77 * 1.1) + 1;
            if (growth_at_m77 > 400)
            {
                growth_at_m77 = 400;
            }
        }
        sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
        sdata.get(id, cc).experience = exp_at_m77;
        sdata.get(id, cc).potential = growth_at_m77;
        if (cc == 0 || cc < 16)
        {
            if (is_in_fov(cc))
            {
                if (lvchange_at_m77 != 0)
                {
                    txtef(3);
                    txt(txtskillchange(id, cc, false));
                }
            }
        }
        refresh_character(cc);
        return 1;
    }
    sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
    sdata.get(id, cc).experience = exp_at_m77;
    sdata.get(id, cc).potential = growth_at_m77;
    return 0;
}



int skillexp(int id, int cc, int experience, int prm_572, int prm_573)
{
    int exp2_at_m77 = 0;
    if (sdata.get(id, cc).original_level == 0)
    {
        return 0;
    }
    if (experience == 0)
    {
        return 0;
    }
    if (the_ability_db[id]->related_basic_attribute != 0)
    {
        skillexp(
            the_ability_db[id]->related_basic_attribute,
            cc,
            experience / (2 + prm_572));
    }
    lv_at_m77 = sdata.get(id, cc).original_level;
    growth_at_m77 = sdata.get(id, cc).potential;
    if (growth_at_m77 == 0)
    {
        return 0;
    }
    if (experience > 0)
    {
        exp_at_m77 = experience * growth_at_m77 / (100 + lv_at_m77 * 15);
        if (id >= 10)
        {
            if (id <= 19)
            {
                if (cdata[cc].growth_buffs[id - 10] > 0)
                {
                    exp_at_m77 = exp_at_m77
                        * (100 + cdata[cc].growth_buffs[id - 10]) / 100;
                }
            }
        }
        if (exp_at_m77 == 0)
        {
            if (rnd(lv_at_m77 / 10 + 1) == 0)
            {
                exp_at_m77 = 1;
            }
            else
            {
                return 0;
            }
        }
    }
    else
    {
        exp_at_m77 = experience;
    }
    if (gdata_current_map == 35)
    {
        exp_at_m77 /= 5;
    }
    if (exp_at_m77 > 0)
    {
        if (id >= 100)
        {
            if (prm_573 != 1000)
            {
                exp2_at_m77 = rnd(cdata[cc].required_experience * exp_at_m77
                                      / 1000 / (cdata[cc].level + prm_573)
                                  + 1)
                    + rnd(2);
                cdata[cc].experience += exp2_at_m77;
                if (cc == 0)
                {
                    gdata_sleep_experience += exp2_at_m77;
                }
            }
        }
    }
    exp_at_m77 += sdata.get(id, cc).experience;
    if (exp_at_m77 >= 1000)
    {
        lvchange_at_m77 = exp_at_m77 / 1000;
        exp_at_m77 = exp_at_m77 % 1000;
        lv_at_m77 += lvchange_at_m77;
        for (int cnt = 0, cnt_end = (lvchange_at_m77); cnt < cnt_end; ++cnt)
        {
            growth_at_m77 = growth_at_m77 * 0.9;
            if (growth_at_m77 < 1)
            {
                growth_at_m77 = 1;
            }
        }
        sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
        sdata.get(id, cc).experience = exp_at_m77;
        sdata.get(id, cc).potential = growth_at_m77;
        if (is_in_fov(cc))
        {
            if (cc == 0 || cc < 16)
            {
                snd(61);
                txtef(2);
                msgalert = 1;
            }
            txt(txtskillchange(id, cc, true));
        }
        refresh_character(cc);
        return 1;
    }
    if (exp_at_m77 < 0)
    {
        lvchange_at_m77 = -exp_at_m77 / 1000 + 1;
        exp_at_m77 = 1000 + exp_at_m77 % 1000;
        if (lv_at_m77 - lvchange_at_m77 < 1)
        {
            lvchange_at_m77 = lv_at_m77 - 1;
            if (lv_at_m77 == 1)
            {
                if (lvchange_at_m77 == 0)
                {
                    exp_at_m77 = 0;
                }
            }
        }
        lv_at_m77 -= lvchange_at_m77;
        for (int cnt = 0, cnt_end = (lvchange_at_m77); cnt < cnt_end; ++cnt)
        {
            growth_at_m77 = int(growth_at_m77 * 1.1) + 1;
            if (growth_at_m77 > 400)
            {
                growth_at_m77 = 400;
            }
        }
        sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
        sdata.get(id, cc).experience = exp_at_m77;
        sdata.get(id, cc).potential = growth_at_m77;
        if (is_in_fov(cc))
        {
            if (cc == 0 || cc < 16)
            {
                if (lvchange_at_m77 != 0)
                {
                    msgalert = 1;
                    txtef(3);
                    txt(txtskillchange(id, cc, false));
                }
            }
        }
        refresh_character(cc);
        return 1;
    }
    sdata.get(id, cc).original_level = clamp(lv_at_m77, 0, 2000);
    sdata.get(id, cc).experience = exp_at_m77;
    sdata.get(id, cc).potential = growth_at_m77;
    return 0;
}



int getworker(int map_id, int prm_579)
{
    int ret = -1;
    for (int i = 1; i < 16; ++i)
    {
        if (prm_579 != 0 && i != prm_579)
            continue;
        if (cdata[i].current_map == map_id)
        {
            ret = i;
            break;
        }
    }
    return ret;
}



void removeworker(int map_id)
{
    for (int i = 1; i < 16; ++i)
    {
        if (cdata[i].current_map == map_id)
        {
            cdata[i].current_map = 0;
        }
    }
}



void delmef(int prm_581)
{
    if (mef(0, prm_581) == 7)
    {
        evadd(21, mef(2, prm_581), mef(3, prm_581));
    }
    map(mef(2, prm_581), mef(3, prm_581), 8) = 0;
    mef(0, prm_581) = 0;
    i_at_m79 = 199;
    for (int cnt = 0, cnt_end = (200 - prm_581); cnt < cnt_end; ++cnt)
    {
        if (mef(0, i_at_m79) != 0)
        {
            for (int cnt = 0; cnt < 9; ++cnt)
            {
                mef(cnt, prm_581) = mef(cnt, i_at_m79);
            }
            map(mef(2, i_at_m79), mef(3, i_at_m79), 8) = prm_581 + 1;
            mef(0, i_at_m79) = 0;
            break;
        }
        --i_at_m79;
    }
    return;
}



void addmef(
    int prm_582,
    int prm_583,
    int prm_584,
    int prm_585,
    int prm_586,
    int prm_587,
    int prm_588,
    int prm_589,
    int prm_590,
    int prm_591)
{
    int p_at_m79 = 0;
    p_at_m79 = map(prm_582, prm_583, 0);
    if (prm_584 == 5)
    {
        if (chipm(0, p_at_m79) == 3)
        {
            return;
        }
    }
    if (map(prm_582, prm_583, 8) != 0)
    {
        i_at_m79 = map(prm_582, prm_583, 8) - 1;
    }
    else
    {
        i_at_m79 = -1;
        for (int cnt = 0; cnt < 200; ++cnt)
        {
            if (mef(0, cnt) == 0)
            {
                i_at_m79 = cnt;
                break;
            }
        }
        if (i_at_m79 == -1)
        {
            i_at_m79 = rnd(200);
            map(mef(2, i_at_m79), mef(3, i_at_m79), 8) = 0;
        }
    }
    mef(0, i_at_m79) = prm_584;
    mef(1, i_at_m79) = prm_585 + prm_591 * 10000;
    mef(2, i_at_m79) = prm_582;
    mef(3, i_at_m79) = prm_583;
    mef(4, i_at_m79) = prm_586;
    mef(5, i_at_m79) = prm_587;
    mef(6, i_at_m79) = prm_588;
    mef(7, i_at_m79) = prm_589;
    mef(8, i_at_m79) = prm_590;
    map(prm_582, prm_583, 8) = i_at_m79 + 1;
    return;
}



void cell_featset(
    int prm_592,
    int prm_593,
    int prm_594,
    int prm_595,
    int prm_596,
    int prm_597)
{
    elona_vector1<int> feat_at_m80;
    if (prm_594 != -1)
    {
        feat_at_m80 = prm_594;
    }
    else
    {
        feat_at_m80 = map(prm_592, prm_593, 6) % 1000;
    }
    if (prm_595 != -1)
    {
        feat_at_m80(1) = prm_595;
    }
    else
    {
        feat_at_m80(1) = map(prm_592, prm_593, 6) / 1000 % 100;
    }
    if (prm_596 != -1)
    {
        feat_at_m80(2) = prm_596;
    }
    else
    {
        feat_at_m80(2) = map(prm_592, prm_593, 6) / 100000 % 100;
    }
    if (prm_597 != -1)
    {
        feat_at_m80(3) = prm_597;
    }
    else
    {
        feat_at_m80(3) = map(prm_592, prm_593, 6) / 10000000;
    }
    map(prm_592, prm_593, 6) = feat_at_m80 + feat_at_m80(1) * 1000
        + feat_at_m80(2) * 100000 + feat_at_m80(3) * 10000000;
    return;
}



int cell_featread(int prm_598, int prm_599, int)
{
    feat(0) = map(prm_598, prm_599, 6) % 1000;
    feat(1) = map(prm_598, prm_599, 6) / 1000 % 100;
    feat(2) = map(prm_598, prm_599, 6) / 100000 % 100;
    feat(3) = map(prm_598, prm_599, 6) / 10000000;
    return 0;
}



void cell_featclear(int prm_601, int prm_602)
{
    map(prm_601, prm_602, 6) = 0;
    return;
}



void cell_check(int prm_603, int prm_604)
{
    cellaccess = 1;
    cellchara = -1;
    cellfeat = -1;
    if (prm_603 < 0 || prm_603 >= mdata(0) || prm_604 < 0
        || prm_604 >= mdata(1))
    {
        cellaccess = 0;
        return;
    }
    if (map(prm_603, prm_604, 1) != 0)
    {
        cellchara = map(prm_603, prm_604, 1) - 1;
        cellaccess = 0;
    }
    if (map(prm_603, prm_604, 6) != 0)
    {
        cellfeat = map(prm_603, prm_604, 6) / 1000 % 100;
        if (chipm(7, map(prm_603, prm_604, 6) % 1000) & 4)
        {
            cellaccess = 0;
        }
    }
    if (chipm(7, map(prm_603, prm_604, 0)) & 4)
    {
        cellaccess = 0;
    }
    return;
}



void cell_swap(int prm_605, int prm_606, int prm_607, int prm_608)
{
    int x2_at_m81 = 0;
    int y2_at_m81 = 0;
    if (gdata_mount != 0)
    {
        if (gdata_mount == prm_605 || gdata_mount == prm_606)
        {
            return;
        }
    }
    tc_at_m81 = prm_606;
    if (tc_at_m81 == -1)
    {
        if (map(prm_607, prm_608, 1) != 0)
        {
            tc_at_m81 = map(prm_607, prm_608, 1) - 1;
        }
    }
    if (tc_at_m81 != -1)
    {
        map(cdata[prm_605].position.x, cdata[prm_605].position.y, 1) =
            tc_at_m81 + 1;
        x2_at_m81 = cdata[tc_at_m81].position.x;
        y2_at_m81 = cdata[tc_at_m81].position.y;
        cdata[tc_at_m81].position.x = cdata[prm_605].position.x;
        cdata[tc_at_m81].position.y = cdata[prm_605].position.y;
    }
    else
    {
        map(cdata[prm_605].position.x, cdata[prm_605].position.y, 1) = 0;
        x2_at_m81 = prm_607;
        y2_at_m81 = prm_608;
    }
    map(x2_at_m81, y2_at_m81, 1) = prm_605 + 1;
    cdata[prm_605].position.x = x2_at_m81;
    cdata[prm_605].position.y = y2_at_m81;
    if (prm_605 == 0 || tc_at_m81 == 0)
    {
        if (gdata_mount)
        {
            cdata[gdata_mount].position.x = cdata[0].position.x;
            cdata[gdata_mount].position.y = cdata[0].position.y;
        }
    }
    return;
}



void cell_movechara(int cc, int x, int y)
{
    if (map(x, y, 1) != 0)
    {
        if (map(x, y, 1) - 1 == cc)
        {
            return;
        }
        cell_swap(cc, tc_at_m81);
    }
    else
    {
        map(cdata[cc].position.x, cdata[cc].position.y, 1) = 0;
        cdata[cc].position = {x, y};
        map(x, y, 1) = cc + 1;
    }
}



int route_info(int& prm_612, int& prm_613, int prm_614)
{
    if (route(0, prm_614 % maxroute) == 1)
    {
        prm_612 += route(1, prm_614 % maxroute);
    }
    else
    {
        prm_613 += route(1, prm_614 % maxroute);
    }
    if (prm_614 % maxroute % 2 == 0)
    {
        if (route(0, (prm_614 + 1) % maxroute) != route(0, prm_614 % maxroute))
        {
            return -1;
        }
    }
    if (prm_614 >= maxroute)
    {
        if (prm_612 < scx || prm_613 < scy || prm_612 >= scx + inf_screenw
            || prm_613 >= scy + inf_screenh)
        {
            return 0;
        }
        if (prm_612 < 0 || prm_613 < 0 || prm_612 >= mdata(0)
            || prm_613 >= mdata(1))
        {
            return 0;
        }
        if (chipm(7, map(prm_612, prm_613, 0)) & 1)
        {
            return 0;
        }
        if (map(prm_612, prm_613, 6) != 0)
        {
            cell_featread(prm_612, prm_613);
            if (chipm(7, feat) & 1)
            {
                return 0;
            }
        }
    }
    if (route(1, prm_614 % maxroute) == 0)
    {
        return -1;
    }
    return 1;
}



int breath_list()
{
    int breathw = 0;
    DIM3(breathlist, 2, 100);
    maxbreath = 0;
    breathw = 1;
    dx = cdata[cc].position.x;
    dy = cdata[cc].position.y;
    for (int cnt = 0,
             cnt_end = cnt + (the_ability_db[efid]->sdataref3 % 1000 + 1);
         cnt < cnt_end;
         ++cnt)
    {
        if (route(0, cnt % maxroute) == 1)
        {
            dx += route(1, cnt % maxroute);
        }
        else
        {
            dy += route(1, cnt % maxroute);
        }
        if (cnt < 6)
        {
            if (cnt % 3 == 1)
            {
                breathw += 2;
            }
        }
        else
        {
            breathw -= 2;
            if (breathw < 3)
            {
                breathw = 3;
            }
        }
        for (int cnt = 0, cnt_end = (breathw); cnt < cnt_end; ++cnt)
        {
            ty = cnt - breathw / 2 + dy;
            for (int cnt = 0, cnt_end = (breathw); cnt < cnt_end; ++cnt)
            {
                tx = cnt - breathw / 2 + dx;
                if (tx < scx || ty < scy || tx >= scx + inf_screenw
                    || ty >= scy + inf_screenh)
                {
                    continue;
                }
                if (tx < 0 || ty < 0 || tx >= mdata(0) || ty >= mdata(1))
                {
                    continue;
                }
                if (chipm(7, map(tx, ty, 0)) & 1)
                {
                    continue;
                }
                if (maxbreath >= 100)
                {
                    break;
                }
                p = 0;
                for (int cnt = 0, cnt_end = (maxbreath); cnt < cnt_end; ++cnt)
                {
                    if (breathlist(0, cnt) == tx)
                    {
                        if (breathlist(1, cnt) == ty)
                        {
                            p = 1;
                            break;
                        }
                    }
                }
                if (p == 1)
                {
                    continue;
                }
                breathlist(0, maxbreath) = tx;
                breathlist(1, maxbreath) = ty;
                ++maxbreath;
            }
        }
    }
    return 1;
}



void draw_emo(int cc, int x, int y)
{
    gmode(2, 16, 16);
    pos(x + 16, y);
    gcopy(3, 32 + cdata[cc].emotion_icon % 100 * 16, 608);
}



void chara_preparepic(int prm_618, int prm_619)
{
    int p_at_m83 = 0;
    if (prm_619 == 0)
    {
        p_at_m83 = prm_618 / 1000;
    }
    else
    {
        p_at_m83 = prm_619;
    }
    gsel(5);
    boxf(0, 960, chipc(2, prm_618), chipc(3, prm_618) + 960);
    pos(0, 960);
    set_color_mod(
        255 - c_col(0, p_at_m83),
        255 - c_col(1, p_at_m83),
        255 - c_col(2, p_at_m83));
    gcopy(
        5,
        chipc(0, prm_618),
        chipc(1, prm_618),
        chipc(2, prm_618),
        chipc(3, prm_618));
    set_color_mod(255, 255, 255);
    gfini(chipc(2, prm_618), chipc(3, prm_618));
    gfdec2(c_col(0, p_at_m83), c_col(1, p_at_m83), c_col(2, p_at_m83));
    gsel(0);
    return;
}



int cell_itemlist(int prm_625, int prm_626)
{
    listmax = 0;
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number > 0)
        {
            if (inv[cnt].position.x == prm_625
                && inv[cnt].position.y == prm_626)
            {
                list(0, listmax) = cnt;
                ++listmax;
            }
        }
    }
    return rtval;
}



// Returns pair of number of items and the last item on the cell.
std::pair<int, int> cell_itemoncell(const position_t& pos)
{
    int number{};
    int item{};

    for (const auto& ci : items(-1))
    {
        if (inv[ci].number > 0 && inv[ci].position == pos)
        {
            ++number;
            item = ci;
        }
    }

    return std::make_pair(number, item);
}



int fov_los(int prm_629, int prm_630, int prm_631, int prm_632)
{
    dy_at_modfov = prm_632 - prm_630;
    dx_at_modfov = prm_631 - prm_629;
    ay_at_modfov = std::abs(dy_at_modfov);
    ax_at_modfov = std::abs(dx_at_modfov);
    if (ax_at_modfov < 2 && ay_at_modfov < 2)
    {
        return 1;
    }
    if (dx_at_modfov == 0)
    {
        if (dy_at_modfov > 0)
        {
            ty_at_modfov = prm_630 + 1;
            while (1)
            {
                if (ty_at_modfov >= prm_632)
                {
                    break;
                }
                if (chipm(7, map(prm_629, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(prm_629, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                ++ty_at_modfov;
            }
        }
        else
        {
            ty_at_modfov = prm_630 - 1;
            while (1)
            {
                if (ty_at_modfov <= prm_632)
                {
                    break;
                }
                if (chipm(7, map(prm_629, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(prm_629, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                --ty_at_modfov;
            }
        }
        return 1;
    }
    if (dy_at_modfov == 0)
    {
        if (dx_at_modfov > 0)
        {
            tx_at_modfov = prm_629 + 1;
            while (1)
            {
                if (tx_at_modfov >= prm_631)
                {
                    break;
                }
                if (chipm(7, map(tx_at_modfov, prm_630, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, prm_630, 6) % 1000) & 1)
                {
                    return 0;
                }
                ++tx_at_modfov;
            }
        }
        else
        {
            tx_at_modfov = prm_629 - 1;
            while (1)
            {
                if (tx_at_modfov <= prm_631)
                {
                    break;
                }
                if (chipm(7, map(tx_at_modfov, prm_630, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, prm_630, 6) % 1000) & 1)
                {
                    return 0;
                }
                --tx_at_modfov;
            }
        }
        return 1;
    }
    if (dx_at_modfov < 0)
    {
        sx_at_modfov = -1;
    }
    else
    {
        sx_at_modfov = 1;
    }
    if (dy_at_modfov < 0)
    {
        sy_at_modfov = -1;
    }
    else
    {
        sy_at_modfov = 1;
    }
    if (ax_at_modfov == 1)
    {
        if (ay_at_modfov == 2)
        {
            if ((chipm(7, map(prm_629, prm_630 + sy_at_modfov, 0)) & 1) == 0)
            {
                if ((chipm(7, map(prm_629, (prm_630 + sy_at_modfov), 6) % 1000)
                     & 1)
                    == 0)
                {
                    return 1;
                }
            }
        }
    }
    else if (ay_at_modfov == 1)
    {
        if (ax_at_modfov == 2)
        {
            if ((chipm(7, map(prm_629 + sx_at_modfov, prm_630, 0)) & 1) == 0)
            {
                if ((chipm(7, map((prm_629 + sx_at_modfov), prm_630, 6) % 1000)
                     & 1)
                    == 0)
                {
                    return 1;
                }
            }
        }
    }
    f2_at_modfov = ax_at_modfov * ay_at_modfov;
    f1_at_modfov = f2_at_modfov << 1;
    if (ax_at_modfov >= ay_at_modfov)
    {
        qy_at_modfov = ay_at_modfov * ay_at_modfov;
        m_at_modfov = qy_at_modfov << 1;
        tx_at_modfov = prm_629 + sx_at_modfov;
        if (qy_at_modfov == f2_at_modfov)
        {
            ty_at_modfov = prm_630 + sy_at_modfov;
            qy_at_modfov -= f1_at_modfov;
        }
        else
        {
            ty_at_modfov = prm_630;
        }
        while (1)
        {
            if (prm_631 - tx_at_modfov == 0)
            {
                break;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
            {
                return 0;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
            {
                return 0;
            }
            qy_at_modfov += m_at_modfov;
            if (qy_at_modfov < f2_at_modfov)
            {
                tx_at_modfov += sx_at_modfov;
            }
            else if (qy_at_modfov > f2_at_modfov)
            {
                ty_at_modfov += sy_at_modfov;
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                qy_at_modfov -= f1_at_modfov;
                tx_at_modfov += sx_at_modfov;
            }
            else
            {
                ty_at_modfov += sy_at_modfov;
                qy_at_modfov -= f1_at_modfov;
                tx_at_modfov += sx_at_modfov;
            }
        }
    }
    else
    {
        qx_at_modfov = ax_at_modfov * ax_at_modfov;
        m_at_modfov = qx_at_modfov << 1;
        ty_at_modfov = prm_630 + sy_at_modfov;
        if (qx_at_modfov == f2_at_modfov)
        {
            tx_at_modfov = prm_629 + sx_at_modfov;
            qx_at_modfov -= f1_at_modfov;
        }
        else
        {
            tx_at_modfov = prm_629;
        }
        while (1)
        {
            if (prm_632 - ty_at_modfov == 0)
            {
                break;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
            {
                return 0;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
            {
                return 0;
            }
            qx_at_modfov += m_at_modfov;
            if (qx_at_modfov < f2_at_modfov)
            {
                ty_at_modfov += sy_at_modfov;
            }
            else if (qx_at_modfov > f2_at_modfov)
            {
                tx_at_modfov += sx_at_modfov;
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                qx_at_modfov -= f1_at_modfov;
                ty_at_modfov += sy_at_modfov;
            }
            else
            {
                tx_at_modfov += sx_at_modfov;
                qx_at_modfov -= f1_at_modfov;
                ty_at_modfov += sy_at_modfov;
            }
        }
    }
    return 1;
}



int get_route(int prm_633, int prm_634, int prm_635, int prm_636)
{
    int p_at_modfov = 0;
    DIM3(route, 2, 100);
    dy_at_modfov = prm_636 - prm_634;
    dx_at_modfov = prm_635 - prm_633;
    if (prm_636 == prm_634)
    {
        if (prm_635 == prm_633)
        {
            route(0, 0) = 2;
            route(1, 0) = 0;
            maxroute = 1;
            return 1;
        }
    }
    ay_at_modfov = std::abs(dy_at_modfov);
    ax_at_modfov = std::abs(dx_at_modfov);
    p_at_modfov = 0;
    if (dx_at_modfov == 0)
    {
        if (dy_at_modfov > 0)
        {
            ty_at_modfov = prm_634 + 1;
            route(0, p_at_modfov) = 2;
            route(1, p_at_modfov) = 1;
            ++p_at_modfov;
            while (1)
            {
                if (ty_at_modfov >= prm_636)
                {
                    break;
                }
                if (chipm(7, map(prm_633, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(prm_633, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                ++ty_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = 1;
                ++p_at_modfov;
            }
        }
        else
        {
            ty_at_modfov = prm_634 - 1;
            route(0, p_at_modfov) = 2;
            route(1, p_at_modfov) = -1;
            ++p_at_modfov;
            while (1)
            {
                if (ty_at_modfov <= prm_636)
                {
                    break;
                }
                if (chipm(7, map(prm_633, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(prm_633, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                --ty_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = -1;
                ++p_at_modfov;
            }
        }
        maxroute = p_at_modfov;
        return 1;
    }
    if (dy_at_modfov == 0)
    {
        if (dx_at_modfov > 0)
        {
            tx_at_modfov = prm_633 + 1;
            route(0, p_at_modfov) = 1;
            route(1, p_at_modfov) = 1;
            ++p_at_modfov;
            while (1)
            {
                if (tx_at_modfov >= prm_635)
                {
                    break;
                }
                if (chipm(7, map(tx_at_modfov, prm_634, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, prm_634, 6) % 1000) & 1)
                {
                    return 0;
                }
                ++tx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = 1;
                ++p_at_modfov;
            }
        }
        else
        {
            tx_at_modfov = prm_633 - 1;
            route(0, p_at_modfov) = 1;
            route(1, p_at_modfov) = -1;
            ++p_at_modfov;
            while (1)
            {
                if (tx_at_modfov <= prm_635)
                {
                    break;
                }
                if (chipm(7, map(tx_at_modfov, prm_634, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, prm_634, 6) % 1000) & 1)
                {
                    return 0;
                }
                --tx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = -1;
                ++p_at_modfov;
            }
        }
        maxroute = p_at_modfov;
        return 1;
    }
    if (dx_at_modfov < 0)
    {
        sx_at_modfov = -1;
    }
    else
    {
        sx_at_modfov = 1;
    }
    if (dy_at_modfov < 0)
    {
        sy_at_modfov = -1;
    }
    else
    {
        sy_at_modfov = 1;
    }
    if (ax_at_modfov == 1)
    {
        if (ay_at_modfov == 2)
        {
            if ((chipm(7, map(prm_633, prm_634 + sy_at_modfov, 0)) & 1) == 0)
            {
                if ((chipm(7, map(prm_633, (prm_634 + sy_at_modfov), 6) % 1000)
                     & 1)
                    == 0)
                {
                    p_at_modfov = 0;
                    route(0, p_at_modfov) = 2;
                    route(1, p_at_modfov) = sy_at_modfov;
                    ++p_at_modfov;
                    route(0, p_at_modfov) = 2;
                    route(1, p_at_modfov) = 0;
                    ++p_at_modfov;
                    route(0, p_at_modfov) = 1;
                    route(1, p_at_modfov) = sx_at_modfov;
                    ++p_at_modfov;
                    maxroute = p_at_modfov;
                    return 1;
                }
            }
        }
    }
    else if (ay_at_modfov == 1)
    {
        if (ax_at_modfov == 2)
        {
            if ((chipm(7, map(prm_633 + sx_at_modfov, prm_634, 0)) & 1) == 0)
            {
                if ((chipm(7, map((prm_633 + sx_at_modfov), prm_634, 6) % 1000)
                     & 1)
                    == 0)
                {
                    route(0, p_at_modfov) = 1;
                    route(1, p_at_modfov) = sx_at_modfov;
                    ++p_at_modfov;
                    route(0, p_at_modfov) = 1;
                    route(1, p_at_modfov) = 0;
                    ++p_at_modfov;
                    route(0, p_at_modfov) = 2;
                    route(1, p_at_modfov) = sy_at_modfov;
                    ++p_at_modfov;
                    maxroute = p_at_modfov;
                    return 1;
                }
            }
        }
    }
    f2_at_modfov = ax_at_modfov * ay_at_modfov;
    f1_at_modfov = f2_at_modfov << 1;
    if (ax_at_modfov >= ay_at_modfov)
    {
        qy_at_modfov = ay_at_modfov * ay_at_modfov;
        m_at_modfov = qy_at_modfov << 1;
        tx_at_modfov = prm_633 + sx_at_modfov;
        route(0, p_at_modfov) = 1;
        route(1, p_at_modfov) = sx_at_modfov;
        ++p_at_modfov;
        if (qy_at_modfov == f2_at_modfov)
        {
            ty_at_modfov = prm_634 + sy_at_modfov;
            route(0, p_at_modfov) = 2;
            route(1, p_at_modfov) = sy_at_modfov;
            ++p_at_modfov;
            qy_at_modfov -= f1_at_modfov;
        }
        else
        {
            ty_at_modfov = prm_634;
        }
        while (1)
        {
            if (prm_635 - tx_at_modfov == 0)
            {
                break;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
            {
                return 0;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
            {
                return 0;
            }
            qy_at_modfov += m_at_modfov;
            if (qy_at_modfov < f2_at_modfov)
            {
                tx_at_modfov += sx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = sx_at_modfov;
                ++p_at_modfov;
            }
            else if (qy_at_modfov > f2_at_modfov)
            {
                ty_at_modfov += sy_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = sy_at_modfov;
                ++p_at_modfov;
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                qy_at_modfov -= f1_at_modfov;
                tx_at_modfov += sx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = sx_at_modfov;
                ++p_at_modfov;
            }
            else
            {
                ty_at_modfov += sy_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = sy_at_modfov;
                ++p_at_modfov;
                qy_at_modfov -= f1_at_modfov;
                tx_at_modfov += sx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = sx_at_modfov;
                ++p_at_modfov;
            }
        }
    }
    else
    {
        qx_at_modfov = ax_at_modfov * ax_at_modfov;
        m_at_modfov = qx_at_modfov << 1;
        ty_at_modfov = prm_634 + sy_at_modfov;
        route(0, p_at_modfov) = 2;
        route(1, p_at_modfov) = sy_at_modfov;
        ++p_at_modfov;
        if (qx_at_modfov == f2_at_modfov)
        {
            tx_at_modfov = prm_633 + sx_at_modfov;
            route(0, p_at_modfov) = 1;
            route(1, p_at_modfov) = sx_at_modfov;
            ++p_at_modfov;
            qx_at_modfov -= f1_at_modfov;
        }
        else
        {
            tx_at_modfov = prm_633;
        }
        while (1)
        {
            if (prm_636 - ty_at_modfov == 0)
            {
                break;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
            {
                return 0;
            }
            if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
            {
                return 0;
            }
            qx_at_modfov += m_at_modfov;
            if (qx_at_modfov < f2_at_modfov)
            {
                ty_at_modfov += sy_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = sy_at_modfov;
                ++p_at_modfov;
            }
            else if (qx_at_modfov > f2_at_modfov)
            {
                tx_at_modfov += sx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = sx_at_modfov;
                ++p_at_modfov;
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 0)) & 1)
                {
                    return 0;
                }
                if (chipm(7, map(tx_at_modfov, ty_at_modfov, 6) % 1000) & 1)
                {
                    return 0;
                }
                qx_at_modfov -= f1_at_modfov;
                ty_at_modfov += sy_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = sy_at_modfov;
                ++p_at_modfov;
            }
            else
            {
                tx_at_modfov += sx_at_modfov;
                route(0, p_at_modfov) = 1;
                route(1, p_at_modfov) = sx_at_modfov;
                ++p_at_modfov;
                qx_at_modfov -= f1_at_modfov;
                ty_at_modfov += sy_at_modfov;
                route(0, p_at_modfov) = 2;
                route(1, p_at_modfov) = sy_at_modfov;
                ++p_at_modfov;
            }
        }
    }
    maxroute = p_at_modfov;
    return 1;
}



void display_customkey(const std::string& key, int x, int y)
{
    gsel(3);
    gmode(0);
    font(15 - en * 2);
    pos(624, 30);
    gcopy(3, 0, 30, 24, 18);
    pos(629, 31);
    color(50, 60, 80);
    bmes(key, 250, 240, 230);
    color(0, 0, 0);
    gmode(2, inf_tiles, inf_tiles);
    gsel(0);
    pos(x, y);
    gcopy(3, 624, 30, 24, 18);
}



void display_key(int x, int y, int nth)
{
    pos(x, y);
    gcopy(3, nth * 24 + 72, 30, 24, 18);
}



void cursor_check()
{
    if (key == key_north)
    {
        snd(5);
        --cs;
        if (cs < 0)
        {
            cs = keyrange - 1;
            if (cs < 0)
            {
                cs = 0;
            }
        }
    }
    if (key == key_south)
    {
        snd(5);
        ++cs;
        if (cs >= keyrange)
        {
            cs = 0;
        }
    }
    if (key == key_west)
    {
        key = key_pagedown;
    }
    if (key == key_east)
    {
        key = key_pageup;
    }
    if (cs >= keyrange)
    {
        cs_bk = -1;
        cs = keyrange - 1;
        if (cs < 0)
        {
            cs = 0;
        }
    }
    if (key == key_enter)
    {
        key = key_list(cs);
    }
    return;
}



void lenfix(std::string& prm_644, int prm_645)
{
    int p_at_m89 = 0;
    p_at_m89 = prm_645 - strlen_u(prm_644);
    if (p_at_m89 < 1)
    {
        p_at_m89 = 1;
    }
    for (int cnt = 0, cnt_end = (p_at_m89); cnt < cnt_end; ++cnt)
    {
        prm_644 += u8" "s;
    }
    return;
}



void showscroll(const std::string& title, int x, int y, int width, int height)
{
    if (windowshadow != 0)
    {
        gmode(6, -1, -1, 80);
        draw_scroll(x + 3, y + 3, width, height);
        windowshadow = 0;
        gmode(2);
    }
    draw_scroll(x, y, width, height);

    if (title.empty())
        return;

    pos(x + 40, y + height - 67 - height % 8);
    gcopy(3, 96, 360, 24, 16);
    color(194, 173, 161);
    line(
        x + 60,
        y + height - 68 - height % 8,
        x + width - 40,
        y + height - 68 - height % 8);
    color(224, 213, 191);
    line(
        x + 60,
        y + height - 69 - height % 8,
        x + width - 40,
        y + height - 69 - height % 8);
    font(12 + sizefix - en * 2);
    color(0, 0, 0);
    pos(x + 68, y + height - 63 - height % 8);
    mes(s);
    if (pagesize != 0)
    {
        s = u8"Page."s + (page + 1) + u8"/"s + (pagemax + 1);
        font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
        pos(x + width - strlen_u(s) * 7 - 40, y + height - 63 - height % 8);
        mes(s);
    }
}



void window(
    int prm_650,
    int prm_651,
    int prm_652,
    int prm_653,
    int,
    int prm_655)
{
    int dx_at_m92 = 0;
    int dy_at_m92 = 0;
    int x3_at_m92 = 0;
    int y3_at_m92 = 0;
    int p_at_m92 = 0;
    int cnt2_at_m92 = 0;
    if (prm_655 == -1)
    {
        gmode(6, -1, -1, 80);
    }
    else
    {
        gmode(2);
    }
    dx_at_m92 = 0;
    dy_at_m92 = 48;
    x3_at_m92 = prm_652 + prm_650 - prm_652 % 8 - 64;
    y3_at_m92 = prm_653 + prm_651 - prm_653 % 8 - 64;
    if (y3_at_m92 < prm_651 + 14)
    {
        y3_at_m92 = prm_651 + 14;
    }
    for (int cnt = 0, cnt_end = (prm_652 / 8); cnt < cnt_end; ++cnt)
    {
        if (cnt < 8)
        {
            if (cnt == 0)
            {
                pos(prm_650, prm_651);
                gcopy(3, dx_at_m92, dy_at_m92, 64, 48);
                pos(prm_650, y3_at_m92);
                gcopy(3, dx_at_m92, dy_at_m92 + 144, 64, 48);
            }
            continue;
        }
        if (cnt < prm_652 / 8 - 8)
        {
            pos(cnt * 8 + prm_650, prm_651);
            gcopy(3, (cnt - 8) % 18 * 8 + dx_at_m92 + 36, dy_at_m92, 8, 48);
            pos(cnt * 8 + prm_650, y3_at_m92);
            gcopy(
                3, (cnt - 8) % 18 * 8 + dx_at_m92 + 54, dy_at_m92 + 144, 8, 48);
            continue;
        }
        pos(x3_at_m92, prm_651);
        gcopy(3, dx_at_m92 + 208, dy_at_m92, 56, 48);
        pos(x3_at_m92, y3_at_m92);
        gcopy(3, dx_at_m92 + 208, dy_at_m92 + 144, 56, 48);
        break;
    }
    p_at_m92 = prm_653 / 8 - 14;
    if (p_at_m92 < 0)
    {
        p_at_m92 = 0;
    }
    for (int cnt = 0, cnt_end = (p_at_m92); cnt < cnt_end; ++cnt)
    {
        cnt2_at_m92 = cnt;
        for (int cnt = 0, cnt_end = (prm_652 / 8); cnt < cnt_end; ++cnt)
        {
            if (cnt == 0)
            {
                pos(prm_650, cnt2_at_m92 * 8 + prm_651 + 48);
                gcopy(
                    3, dx_at_m92, cnt2_at_m92 % 12 * 8 + dy_at_m92 + 48, 64, 8);
                continue;
            }
            if (cnt < prm_652 / 8 - 15)
            {
                pos(cnt * 8 + prm_650 + 56, cnt2_at_m92 * 8 + prm_651 + 48);
                gcopy(
                    3,
                    cnt % 18 * 8 + dx_at_m92 + 64,
                    cnt2_at_m92 % 12 * 8 + dy_at_m92 + 48,
                    8,
                    8);
                continue;
            }
            pos(x3_at_m92, cnt2_at_m92 * 8 + prm_651 + 48);
            gcopy(
                3,
                dx_at_m92 + 208,
                cnt2_at_m92 % 12 * 8 + dy_at_m92 + 48,
                56,
                8);
            break;
        }
    }
    gmode(2);
    return;
}



void window2(
    int prm_656,
    int prm_657,
    int prm_658,
    int prm_659,
    int prm_660,
    int prm_661)
{
    int dx_at_m93 = 0;
    int dy_at_m93 = 0;
    int x2_at_m93 = 0;
    int y2_at_m93 = 0;
    int x3_at_m93 = 0;
    int y3_at_m93 = 0;
    int p_at_m93 = 0;
    dx_at_m93 = 0;
    dy_at_m93 = 240;
    x2_at_m93 = prm_658;
    y2_at_m93 = prm_659;
    if (x2_at_m93 < 32)
    {
        x2_at_m93 = 32;
    }
    if (y2_at_m93 < 24)
    {
        y2_at_m93 = 24;
    }
    x3_at_m93 = prm_656 + x2_at_m93 / 16 * 16 - 16;
    y3_at_m93 = prm_657 + y2_at_m93 / 16 * 16 - 16;
    if (prm_661 == 0)
    {
        pos(prm_656 + 4, prm_657 + 4);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 6, y2_at_m93 - 8);
    }
    if (prm_661 == 1)
    {
        pos(prm_656 + 4, prm_657 + 4);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 6, y2_at_m93 - 8);
        pos(prm_656 + 4, prm_657 + 4);
        gfini(x2_at_m93 - 4, y2_at_m93 - 4);
        gfdec2(195, 205, 195);
    }
    if (prm_661 == 2)
    {
        pos(prm_656 + 4, prm_657 + 4);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 6, y2_at_m93 - 8);
        pos(prm_656 + 4, prm_657 + 4);
        gfini(x2_at_m93 - 4, y2_at_m93 - 4);
        gfdec2(210, 215, 205);
    }
    if (prm_661 == 3)
    {
        pos(prm_656 + 4, prm_657 + 4);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 6, y2_at_m93 - 8);
        pos(prm_656 + 4, prm_657 + 4);
        gfini(x2_at_m93 - 4, y2_at_m93 - 4);
        gfdec2(10, 13, 16);
    }
    if (prm_661 == 4)
    {
        pos(prm_656 + 4, prm_657 + 4);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 6, y2_at_m93 - 8);
        pos(prm_656 + 4, prm_657 + 4);
        gfini(x2_at_m93 - 4, y2_at_m93 - 4);
        gfdec2(195, 205, 195);
    }
    if (prm_661 == 6)
    {
        pos(prm_656 + x2_at_m93 / 2, prm_657 + y2_at_m93 / 2);
        gmode(4, 228, 144, 180);
        grotate(3, 24, 72, 0, x2_at_m93 - 4, y2_at_m93 - 4);
    }
    gmode(2, 16, 16);
    for (int cnt = 0, cnt_end = (x2_at_m93 / 16 - 2); cnt < cnt_end; ++cnt)
    {
        pos(cnt * 16 + prm_656 + 16, prm_657);
        gcopy(3, prm_660 * 48 + dx_at_m93 + 16, dy_at_m93);
        pos(cnt * 16 + prm_656 + 16, prm_657 + y2_at_m93 - 16);
        gcopy(3, prm_660 * 48 + dx_at_m93 + 16, dy_at_m93 + 32);
    }
    pos(x3_at_m93, prm_657);
    gcopy(3, prm_660 * 48 + dx_at_m93 + 16, dy_at_m93, x2_at_m93 % 16, 16);
    pos(x3_at_m93, prm_657 + y2_at_m93 - 16);
    gcopy(3, prm_660 * 48 + dx_at_m93 + 16, dy_at_m93 + 32, x2_at_m93 % 16, 16);
    p_at_m93 = y2_at_m93 / 16 - 2;
    if (p_at_m93 < 0)
    {
        p_at_m93 = 0;
    }
    for (int cnt = 0, cnt_end = (p_at_m93); cnt < cnt_end; ++cnt)
    {
        pos(prm_656, cnt * 16 + prm_657 + 16);
        gcopy(3, prm_660 * 48 + dx_at_m93, dy_at_m93 + 16);
        pos(prm_656 + x2_at_m93 - 16, cnt * 16 + prm_657 + 16);
        gcopy(3, prm_660 * 48 + dx_at_m93 + 32, dy_at_m93 + 16);
    }
    pos(prm_656, y3_at_m93);
    gcopy(3, prm_660 * 48 + dx_at_m93, dy_at_m93 + 16, 16, y2_at_m93 % 16);
    pos(prm_656 + x2_at_m93 - 16, y3_at_m93);
    gcopy(3, prm_660 * 48 + dx_at_m93 + 32, dy_at_m93 + 16, 16, y2_at_m93 % 16);
    pos(prm_656, prm_657);
    gcopy(3, prm_660 * 48 + dx_at_m93, dy_at_m93);
    pos(prm_656, prm_657 + y2_at_m93 - 16);
    gcopy(3, prm_660 * 48 + dx_at_m93, dy_at_m93 + 32);
    pos(prm_656 + x2_at_m93 - 16, prm_657);
    gcopy(3, prm_660 * 48 + dx_at_m93 + 32, dy_at_m93);
    pos(prm_656 + x2_at_m93 - 16, prm_657 + y2_at_m93 - 16);
    gcopy(3, prm_660 * 48 + dx_at_m93 + 32, dy_at_m93 + 32);
    if (prm_661 == 5)
    {
        pos(prm_656 + 2, prm_657 + 2);
        gzoom(3, 24, 72, 228, 144, x2_at_m93 - 4, y2_at_m93 - 5);
        pos(prm_656 + 2, prm_657 + 2);
        gfini(x2_at_m93 - 4, y2_at_m93 - 4);
        gfdec2(195, 205, 195);
    }
    return;
}



void display_window2(
    int prm_662,
    int prm_663,
    int prm_664,
    int prm_665,
    int prm_666,
    int prm_667)
{
    gmode(2);
    pos(prm_662, prm_663);
    gcopy(prm_666, 0, 0, prm_664, prm_665);
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    if (s != ""s)
    {
        pos(prm_662 + prm_664 - strlen_u(s) * 7 - 140,
            prm_663 + prm_665 - 24 - prm_665 % 8 + prm_667);
        mes(s);
    }
    if (pagesize != 0)
    {
        s = u8"Page."s + (page + 1) + u8"/"s + (pagemax + 1);
        pos(prm_662 + prm_664 - strlen_u(s) * 7 - 40,
            prm_663 + prm_665 - 24 - prm_665 % 8 + prm_667);
        mes(s);
    }
    return;
}



void display_window(
    int prm_668,
    int prm_669,
    int prm_670,
    int prm_671,
    int prm_672,
    int prm_673)
{
    if (windowshadow == 1)
    {
        window(prm_668 + 4, prm_669 + 4, prm_670, prm_671 - prm_671 % 8, 0, -1);
        windowshadow = 0;
    }
    window(prm_668, prm_669, prm_670, prm_671 - prm_671 % 8, 0, 0);
    if (s != ""s)
    {
        window2(
            prm_668 + 34,
            prm_669 - 4,
            45 * prm_670 / 100 + clamp(int(strlen_u(s) * 8 - 120), 0, 200),
            32,
            1,
            1);
    }
    gmode(2);
    pos(prm_668 + 30 + prm_672, prm_669 + prm_671 - 47 - prm_671 % 8);
    gcopy(3, 96, 360, 24, 16);
    color(194, 170, 146);
    line(
        prm_668 + 50 + prm_672,
        prm_669 + prm_671 - 48 - prm_671 % 8,
        prm_668 + prm_670 - 40,
        prm_669 + prm_671 - 48 - prm_671 % 8);
    color(234, 220, 188);
    line(
        prm_668 + 50 + prm_672,
        prm_669 + prm_671 - 49 - prm_671 % 8,
        prm_668 + prm_670 - 40,
        prm_669 + prm_671 - 49 - prm_671 % 8);
    font(15 + en - en * 2);
    color(0, 0, 0);
    pos(prm_668 + 45 * prm_670 / 200 + 34 - strlen_u(s) * 4
            + clamp(int(s(0).size() * 8 - 120), 0, 200) / 2,
        prm_669 + 4 + vfix);
    color(20, 10, 0);
    bmes(s, 255, 255, 255);
    font(12 + sizefix - en * 2);
    color(0, 0, 0);
    pos(prm_668 + 58 + prm_672, prm_669 + prm_671 - 43 - prm_671 % 8);
    mes(s(1));
    if (pagesize != 0)
    {
        s = u8"Page."s + (page + 1) + u8"/"s + (pagemax + 1);
        font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
        pos(prm_668 + prm_670 - strlen_u(s) * 7 - 40 - prm_673,
            prm_669 + prm_671 - 65 - prm_671 % 8);
        mes(s);
    }
    wx = prm_668;
    wy = prm_669;
    ww = prm_670;
    wh = prm_671;
    return;
}



void display_note(const std::string& prm_674, int prm_675)
{
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    pos(wx + ww - strlen_u(prm_674) * 7 - 140 - prm_675, wy + wh - 65 - wh % 8);
    mes(prm_674);
    return;
}



void display_topic(const std::string& prm_676, int prm_677, int prm_678, int)
{
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    pos(prm_677, prm_678 + 7);
    gcopy(3, 120, 360, 24, 16);
    pos(prm_677 + 26, prm_678 + 8);
    mes(prm_676);
    line(
        prm_677 + 22,
        prm_678 + 21,
        prm_677 + strlen_u(prm_676) * 7 + 36,
        prm_678 + 21);
    return;
}



void display_msg(int prm_680, int prm_681)
{
    msgkeep = prm_681;
    msgy = prm_680;
    return;
}



int roll(int x, int y, int z)
{
    if (x < 1)
        x = 1;
    if (y < 1)
        y = 1;
    int ret = 0;
    for (int i = 0; i < x; ++i)
    {
        ret += rnd(y) + 1;
    }
    return ret + z;
}



int roll_max(int x, int y, int z)
{
    return x * y + z;
}



void page_save()
{
    pagebk = page;
    csprev = cs;
    pagesaved = 1;
    return;
}



void page_load()
{
    if (pagesaved == 1)
    {
        page = pagebk;
        cs = csprev;
        pagesaved = 0;
    }
    return;
}



void fileadd(const fs::path& filepath, int prm_693)
{
    const auto mark_a = prm_693 ? '#' : '*';
    const auto mark_b = prm_693 ? '*' : '#';

    const auto filename = filesystem::to_utf8_path(filepath.filename());
    notesel(filemod);
    const auto pos = filemod(0).find(filename);
    if (pos != std::string::npos)
    {
        if (filemod(0)[pos - 1] == mark_b)
        {
            filemod(0)[pos - 1] = mark_a;
        }
        noteunsel();
        return;
    }
    ELONA_LOG("fileadd(" << mark_a << "): " << filename);
    noteadd(mark_a + filename);
    noteunsel();
}



void arrayfile_read(const std::string& fmode_str, const fs::path& filepath)
{
    std::vector<std::string> lines;
    if (fs::exists(filepath))
    {
        range::copy(
            fileutil::read_by_line{filepath}, std::back_inserter(lines));
    }

    if (fmode_str == u8"qname"s)
    {
        lines.resize(500);
        auto itr = std::begin(lines);
        for (int i = 0; i < 500; ++i)
        {
            qname(i) = *itr;
            ++itr;
        }
    }
    else if (fmode_str == u8"gdatan"s)
    {
        lines.resize(50);
        auto itr = std::begin(lines);
        for (int i = 0; i < 50; ++i)
        {
            gdatan(i) = *itr;
            ++itr;
        }
    }
    else if (fmode_str == u8"mdatan"s)
    {
        lines.resize(2);
        auto itr = std::begin(lines);
        for (int i = 0; i < 2; ++i)
        {
            mdatan(i) = *itr;
            ++itr;
        }
    }
    else if (fmode_str == u8"cdatan1"s)
    {
        if (lines.size() <= 57 * 10 / 2)
            lines.resize(57 * 10 / 2);
        else
            lines.resize(57 * 10);
        auto itr = std::begin(lines);
        for (int i = 0; i < 57; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                if (lines.size() <= 57 * 10 / 2 && j >= 10 / 2)
                    break;
                cdatan(j, i) = *itr;
                ++itr;
            }
        }
    }
    else if (fmode_str == u8"cdatan2"s)
    {
        if (lines.size() <= 188 * 10 / 2)
            lines.resize(188 * 10 / 2);
        else
            lines.resize(188 * 10);
        auto itr = std::begin(lines);
        for (int i = ELONA_MAX_PARTY_CHARACTERS; i < ELONA_MAX_CHARACTERS; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                if (lines.size() <= 188 * 10 / 2 && j >= 10 / 2)
                    break;
                cdatan(j, i) = *itr;
                ++itr;
            }
        }
    }
    else if (fmode_str == u8"cdatan3"s)
    {
        if (lines.size() <= 10 / 2)
            lines.resize(10 / 2);
        else
            lines.resize(10);
        auto itr = std::begin(lines);
        for (int j = 0; j < 10; ++j)
        {
            if (lines.size() < 10 / 2 && j >= 10 / 2)
                break;
            cdatan(j, tg) = *itr;
            ++itr;
        }
    }
}



void arrayfile_write(const std::string& fmode_str, const fs::path& filepath)
{
    std::ofstream out{filepath.native(), std::ios::binary};
    if (!out)
    {
        throw std::runtime_error(
            u8"Error: fail to write "
            + filesystem::make_preferred_path_in_utf8(filepath));
    }

    if (fmode_str == u8"qname"s)
    {
        for (int i = 0; i < 500; ++i)
        {
            out << qname(i) << std::endl;
        }
    }
    else if (fmode_str == u8"gdatan"s)
    {
        for (int i = 0; i < 50; ++i)
        {
            out << gdatan(i) << std::endl;
        }
    }
    else if (fmode_str == u8"mdatan"s)
    {
        for (int i = 0; i < 2; ++i)
        {
            out << mdatan(i) << std::endl;
        }
    }
    else if (fmode_str == u8"cdatan1"s)
    {
        for (int i = 0; i < 57; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                out << cdatan(j, i) << std::endl;
            }
        }
    }
    else if (fmode_str == u8"cdatan2"s)
    {
        for (int i = ELONA_MAX_PARTY_CHARACTERS; i < ELONA_MAX_CHARACTERS; ++i)
        {
            for (int j = 0; j < 10; ++j)
            {
                out << cdatan(j, i) << std::endl;
            }
        }
    }
    else if (fmode_str == u8"cdatan3"s)
    {
        for (int j = 0; j < 10; ++j)
        {
            out << cdatan(j, tg) << std::endl;
        }
    }

    if (elona_export == 0)
    {
        fileadd(filepath);
    }
}



void arrayfile(
    bool fread,
    const std::string& fmode_str,
    const fs::path& filepath)
{
    if (!fread)
    {
        arrayfile_write(fmode_str, filepath);
    }
    else
    {
        arrayfile_read(fmode_str, filepath);
    }

    elona_export = 0;
}



std::string cnv_str(
    std::string& prm_696,
    const std::string& prm_697,
    const std::string& prm_698)
{
    std::string s3_at_m100;
    int p_at_m100 = 0;
    while (1)
    {
        s3_at_m100 = strutil::to_lower(prm_696);
        p_at_m100 = instr(s3_at_m100, 0, prm_697);
        if (p_at_m100 == -1)
        {
            break;
        }
        prm_696 = strmid(prm_696, 0, p_at_m100) + lang(prm_698, prm_698)
            + strmid(prm_696, (p_at_m100 + prm_697.size()), 300);
    }
    return prm_696;
}



void fix_input_chat(std::string& str)
{
    cnv_str(str, u8" "s, u8"+"s);
    cnv_str(str, u8"%"s, u8"per"s);
    cnv_str(str, u8"&"s, u8"and"s);
    str = strutil::remove_str(str, u8"<");
    str = strutil::remove_str(str, u8">");
}



void fix_input_chat2(std::string& str)
{
    cnv_str(str, u8"fucking"s, u8"nyoro~n"s);
    cnv_str(str, u8"fuck"s, u8"nyou talk funny"s);
}



void cnv_filestr(std::string& str)
{
    cnv_str(str, u8"\""s, u8"_"s);
    cnv_str(str, u8"\\"s, u8"_"s);
    cnv_str(str, u8"<"s, u8"_"s);
    cnv_str(str, u8">"s, u8"_"s);
    cnv_str(str, u8"/"s, u8"_"s);
    cnv_str(str, u8"?"s, u8"_"s);
    cnv_str(str, u8"|"s, u8"_"s);
    cnv_str(str, u8"*"s, u8"_"s);
}



void imeset(int prm_709)
{
    himc_at_ime_control = ImmGetContext(hwnd);
    ImmSetOpenStatus(himc_at_ime_control, prm_709);
    ImmReleaseContext(hwnd, himc_at_ime_control);
    return;
}



int imeget()
{
    int imesw_at_ime_control = 0;
    himc_at_ime_control = ImmGetContext(hwnd);
    imesw_at_ime_control = ImmGetOpenStatus(himc_at_ime_control);
    ImmReleaseContext(hwnd, himc_at_ime_control);
    return imesw_at_ime_control;
}



void boxl(int x1, int y1, int x2, int y2)
{
    pos(x1, y2);
    line(x1, y1);
    line(x2, y1);
    line(x2, y2);
    line(x1, y2);
}



std::string fixtxt(const std::string& prm_724, int prm_725)
{
    std::string m_at_m104;
    m_at_m104 = ""s + prm_724;
    if (strlen_u(prm_724) < size_t(prm_725))
    {
        while (1)
        {
            if (strlen_u(m_at_m104) >= size_t(prm_725))
            {
                break;
            }
            m_at_m104 += u8" "s;
        }
    }
    else
    {
        m_at_m104 = ""s + strmid(prm_724, 0, prm_725);
    }
    return ""s + m_at_m104;
}



void windowanime(
    int prm_726,
    int prm_727,
    int prm_728,
    int prm_729,
    int prm_730,
    int prm_731)
{
    int cenx_at_m105 = 0;
    int ceny_at_m105 = 0;
    if (nowindowanime)
    {
        nowindowanime = 0;
        return;
    }
    if (config::instance().windowanime == 0)
    {
        return;
    }
    gsel(prm_731);
    gmode(0);
    pos(0, 0);
    gcopy(0, prm_726, prm_727, prm_728, prm_729);
    gsel(0);
    gmode(0);
    x2_at_m105 = prm_728 / 2;
    y2_at_m105 = prm_729 / 2;
    cenx_at_m105 = prm_726 + x2_at_m105;
    ceny_at_m105 = prm_727 + y2_at_m105;
    for (int cnt = 1, cnt_end = cnt + (prm_730 - 1); cnt < cnt_end; ++cnt)
    {
        color(30, 30, 30);
        boxl(
            cenx_at_m105 - x2_at_m105 / prm_730 * cnt,
            ceny_at_m105 - y2_at_m105 / prm_730 * cnt,
            cenx_at_m105 + x2_at_m105 / prm_730 * cnt,
            ceny_at_m105 + y2_at_m105 / prm_730 * cnt);
        color(240, 240, 240);
        boxl(
            cenx_at_m105 - x2_at_m105 / prm_730 * cnt - 1,
            ceny_at_m105 - y2_at_m105 / prm_730 * cnt - 1,
            cenx_at_m105 + x2_at_m105 / prm_730 * cnt - 1,
            ceny_at_m105 + y2_at_m105 / prm_730 * cnt - 1);
        color(0, 0, 0);
        redraw();
        if (cnt != prm_730 - 1)
        {
            await(15);
        }
        pos(prm_726, prm_727);
        gcopy(prm_731, 0, 0, prm_728, prm_729);
    }
    gmode(2);
    return;
}



void windowanimecorner(
    int prm_732,
    int prm_733,
    int prm_734,
    int prm_735,
    int prm_736,
    int prm_737)
{
    if (config::instance().windowanime == 0)
    {
        return;
    }
    gsel(prm_737);
    gmode(0);
    pos(0, 0);
    gcopy(0, prm_732, prm_733, prm_734, prm_735);
    gsel(0);
    gmode(0);
    x2_at_m105 = prm_734 - prm_732;
    y2_at_m105 = prm_735 - prm_733;
    for (int cnt = 1, cnt_end = cnt + (prm_736); cnt < cnt_end; ++cnt)
    {
        color(30, 30, 30);
        boxl(
            prm_732 + prm_734,
            prm_733 + prm_735,
            prm_732 + prm_734 - (prm_734 - prm_732) / prm_736 * cnt,
            prm_733 + prm_735 - (prm_735 - prm_733) / prm_736 * cnt);
        color(240, 240, 240);
        boxl(
            prm_732 + prm_734 - 1,
            prm_733 + prm_735 - 1,
            prm_732 + prm_734 - (prm_734 - prm_732) / prm_736 * cnt - 1,
            prm_733 + prm_735 - (prm_735 - prm_733) / prm_736 * cnt - 1);
        color(0, 0, 0);
        redraw();
        if (cnt != prm_736)
        {
            await(15);
        }
        pos(prm_732, prm_733);
        gcopy(prm_737, 0, 0, prm_734, prm_735);
    }
    gmode(2);
    return;
}



void showtitle(const std::string&, const std::string& prm_739, int prm_740, int)
{
    int x_at_m106 = 0;
    int y_at_m106 = 0;
    font(12 + sizefix - en * 2);
    if (mode != 1)
    {
        x_at_m106 = prm_740 - 10;
        y_at_m106 = 0;
    }
    else
    {
        x_at_m106 = 240;
        y_at_m106 = windowh - 16;
    }
    for (int cnt = 0, cnt_end = ((windoww - x_at_m106 - 8) / 192 + 1);
         cnt < cnt_end;
         ++cnt)
    {
        pos(x_at_m106 + 8 + cnt * 192, y_at_m106);
        gcopy(3, 496, 581, 192, 18);
    }
    gmode(2);
    pos(x_at_m106, y_at_m106 + (mode != 1));
    gcopy(3, 96, 360, 24, 16);
    pos(x_at_m106 + 32, y_at_m106 + 1 + jp);
    bmes(prm_739, 250, 250, 250);
    return;
}



void drawmenu(int prm_742)
{
    int y_at_m107 = 0;
    elona_vector1<int> x_at_m107;
    y_at_m107 = 34;
    if (prm_742 == 0)
    {
        x_at_m107(0) = windoww - 260;
        x_at_m107(1) = 240;
        p(0) = 9;
        p(1) = 10;
        p(2) = 11;
        p(3) = 12;
        s(0) = lang(u8"情報"s, u8"Chara"s);
        s(1) = lang(u8"装備"s, u8"Wear"s);
        s(2) = lang(u8"特徴"s, u8"Feat"s);
        s(3) = lang(u8"ﾏﾃﾘｱﾙ"s, u8"Material"s);
        s(4) = "";
    }
    if (prm_742 == 1)
    {
        x_at_m107(0) = windoww - 160;
        x_at_m107(1) = 140;
        p(0) = 13;
        p(1) = 14;
        s(0) = lang(u8"魔法"s, u8"Spell"s);
        s(1) = lang(u8"技能"s, u8"Skill"s);
        s(2) = "";
    }
    if (prm_742 == 2)
    {
        x_at_m107(0) = windoww - 210;
        x_at_m107(1) = 190;
        p(0) = 15;
        p(1) = 3;
        p(2) = 16;
        s(0) = lang(u8"ログ"s, u8"Log"s);
        s(1) = lang(u8"日誌"s, u8"Journal"s);
        s(2) = lang(u8"チャット"s, u8"Chat"s);
        s(3) = "";
    }
    if (prm_742 == 3)
    {
        x_at_m107(0) = windoww - 210;
        x_at_m107(1) = 190;
        p(0) = 19;
        p(1) = 20;
        p(2) = 21;
        s(0) = lang(u8"チャート"s, u8"Chart"s);
        s(1) = lang(u8"街情報"s, u8"City"s);
        s(2) = lang(u8"法律"s, u8"Law"s);
        s(3) = "";
    }
    if (menucycle == 0)
    {
        return;
    }
    font(12 + sizefix - en * 2);
    window2(x_at_m107, y_at_m107, x_at_m107(1), 22, 5, 5);
    pos(x_at_m107 - 28, y_at_m107 - 8);
    gcopy(3, 64, 288, 50, 32);
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        if (s(cnt) == ""s)
        {
            break;
        }
        pos(x_at_m107 + cnt * 50 + 20, y_at_m107 - 24);
        gcopy(3, 288 + p(cnt) * 48, 48, 48, 48);
        if (curmenu == cnt)
        {
            gmode(5, -1, -1, 70);
            pos(x_at_m107 + cnt * 50 + 20, y_at_m107 - 24);
            gcopy(3, 288 + p(cnt) * 48, 48, 48, 48);
            gmode(2);
        }
        pos(x_at_m107 + cnt * 50 + 46 - strlen_u(s(cnt)) * 3, y_at_m107 + 7);
        if (curmenu == cnt)
        {
            bmes(s(cnt), 255, 255, 255);
        }
        else
        {
            bmes(s(cnt), 165, 165, 165);
        }
    }
    pos(x_at_m107 + x_at_m107(1) - 150, y_at_m107 + 28);
    bmes(
        ""s + key_prev + u8","s + key_next + u8",Tab "s
            + lang(u8"[メニュー切替]"s, u8"[Change]"s),
        255,
        255,
        255);
    return;
}



void fillbg(int prm_743, int prm_744, int prm_745, int prm_746, int prm_747)
{
    int cnt2_at_m108 = 0;
    gmode(0);
    for (int cnt = 0, cnt_end = (inf_ver / prm_747 + 1); cnt < cnt_end; ++cnt)
    {
        cnt2_at_m108 = cnt;
        for (int cnt = 0, cnt_end = (windoww / prm_746 + 1); cnt < cnt_end;
             ++cnt)
        {
            pos(windoww - (cnt + 1) * prm_746,
                inf_ver - (cnt2_at_m108 + 1) * prm_747);
            gcopy(prm_743, prm_744, prm_745, prm_746, prm_747);
        }
    }
    gmode(2);
    return;
}



int direction(int x1, int y1, int x2, int y2)
{
    if (std::abs(x1 - x2) > std::abs(y1 - y2))
    {
        return x1 > x2 ? 1 : 2;
    }
    else
    {
        return y1 > y2 ? 3 : 0;
    }
}



void initialize_craft_material_data()
{
    DIM2(matval, 4);
    DIM3(matref, 5, 400);
    DIM3(matspot, 5, 400);
    SDIM3(matname, 40, 400);
    SDIM3(matdesc, 80, 400);

    matref(0, 0) = 0;
    matref(1, 0) = 1;
    matref(2, 0) = 240;
    matname(0) = lang(u8"クズ"s, u8"Garbage"s);
    matdesc(0) = lang(u8"何の価値もないクズ"s, u8"Just garbage."s);
    matspot(0, 0) = 18;

    matref(0, 1) = 1;
    matref(1, 1) = 80;
    matref(2, 1) = 434;
    matname(1) = lang(u8"カジノチップ"s, u8"Casino chip"s);
    matdesc(1) = lang(u8"カジノで使うチップ"s, u8"Chips used in casinos."s);
    matspot(0, 1) = 18;

    matref(0, 40) = 1;
    matref(1, 40) = 200;
    matref(2, 40) = 437;
    matname(40) = lang(u8"100Yen硬貨"s, u8"100 Yen coin"s);
    matdesc(40) = lang(u8"異国のお金"s, u8"Foreign money."s);
    matspot(0, 40) = 18;

    matref(0, 41) = 1;
    matref(1, 41) = 1000;
    matref(2, 41) = 437;
    matname(41) = lang(u8"500Yen硬貨"s, u8"500 Yen coin"s);
    matdesc(41) = lang(u8"異国のお金"s, u8"Foreign money."s);
    matspot(0, 41) = 18;

    matref(0, 43) = 1;
    matref(1, 43) = 20;
    matref(2, 43) = 470;
    matname(43) = lang(u8"紙"s, u8"Paper"s);
    matdesc(43) = lang(u8"白紙"s, u8"Blank paper."s);
    matspot(0, 43) = 18;

    matref(0, 2) = 1;
    matref(1, 2) = 10;
    matref(2, 2) = 239;
    matname(2) = lang(u8"炭"s, u8"Charcoal"s);
    matdesc(2) = lang(u8"良質な炭"s, u8"This is good quality charcoal."s);
    matspot(0, 2) = 18;

    matref(0, 3) = 1;
    matref(1, 3) = 10;
    matref(2, 3) = 239;
    matname(3) = lang(u8"流木"s, u8"Driftwood"s);
    matdesc(3) = lang(u8"あまり質の良くない木材"s, u8"Common driftwood."s);
    matspot(0, 3) = 18;

    matref(0, 48) = 1;
    matref(1, 48) = 10;
    matref(2, 48) = 209;
    matname(48) = lang(u8"石ころ"s, u8"Pebble"s);
    matdesc(48) =
        lang(u8"どこにでも落ちている"s, u8"These are around everywhere."s);
    matspot(0, 48) = 18;

    matref(0, 6) = 1;
    matref(1, 6) = 70;
    matref(2, 6) = 239;
    matname(6) = lang(u8"杖"s, u8"Stick"s);
    matdesc(6) = lang(u8"杖"s, u8"A specially shaped piece of wood."s);
    matspot(0, 6) = 18;

    matref(0, 45) = 3;
    matref(1, 45) = 20;
    matref(2, 45) = 155;
    matname(45) = lang(u8"布きれ"s, u8"Cloth"s);
    matdesc(45) = lang(u8"ただの布きれ"s, u8"A piece of cloth."s);
    matspot(0, 45) = 18;

    matref(0, 38) = 4;
    matref(1, 38) = 30;
    matref(2, 38) = 8;
    matname(38) = lang(u8"わめく狂人"s, u8"Yelling madman"s);
    matdesc(38) = lang(u8"黙らない"s, u8"It never shuts up."s);
    matspot(0, 38) = 18;

    matref(0, 30) = 10;
    matref(1, 30) = 150;
    matref(2, 30) = 7;
    matname(30) = lang(u8"マジックマス"s, u8"Magic mass"s);
    matdesc(30) = lang(u8"謎の魔力の塊"s, u8"Unknown magical mass."s);
    matspot(0, 30) = 18;

    matref(0, 23) = 12;
    matref(1, 23) = 20;
    matref(2, 23) = 7;
    matname(23) = lang(u8"電気"s, u8"Electricity"s);
    matdesc(23) = lang(u8"放電している"s, u8"It is discharging."s);
    matspot(0, 23) = 18;

    matref(0, 44) = 25;
    matref(1, 44) = 150;
    matref(2, 44) = 7;
    matname(44) = lang(u8"生成機械"s, u8"Generator"s);
    matdesc(44) =
        lang(u8"何かを生み出す機械"s, u8"This machine generates something."s);
    matspot(0, 44) = 18;

    matref(0, 50) = 1;
    matref(1, 50) = 30;
    matref(2, 50) = 209;
    matname(50) = lang(u8"魔力の結晶"s, u8"Magic fragment"s);
    matdesc(50) = lang(u8"魔力が込められている"s, u8"This is magical."s);
    matspot(0, 50) = 9;

    matref(0, 46) = 2;
    matref(1, 46) = 20;
    matref(2, 46) = 239;
    matname(46) = lang(u8"枝"s, u8"Branch"s);
    matdesc(46) = lang(u8"枝"s, u8"Broken off of a tree."s);
    matspot(0, 46) = 10;

    matref(0, 33) = 4;
    matref(1, 33) = 20;
    matref(2, 33) = 155;
    matname(33) = lang(u8"革"s, u8"Leather"s);
    matdesc(33) = lang(u8"なめした皮"s, u8"A tanned hide."s);
    matspot(0, 33) = 10;

    matref(0, 53) = 6;
    matref(1, 53) = 20;
    matref(2, 53) = 202;
    matname(53) = lang(u8"ツル"s, u8"Vein"s);
    matdesc(53) = lang(u8"ツル"s, u8"Vein."s);
    matspot(0, 53) = 10;

    matref(0, 47) = 10;
    matref(1, 47) = 20;
    matref(2, 47) = 239;
    matname(47) = lang(u8"頑丈な枝"s, u8"Thick wood"s);
    matdesc(47) =
        lang(u8"なかなか折れない"s, u8"This doesn't break down easily."s);
    matspot(0, 47) = 10;

    matref(0, 37) = 12;
    matref(1, 37) = 60;
    matref(2, 37) = 471;
    matname(37) = lang(u8"曲がった杖"s, u8"Curved stick"s);
    matdesc(37) = lang(u8"杖の役割を果たさない"s, u8"Almost unusable."s);
    matspot(0, 37) = 10;

    matref(0, 54) = 1;
    matref(1, 54) = 50;
    matref(2, 54) = 354;
    matname(54) = lang(u8"接着剤"s, u8"Adhesive"s);
    matdesc(54) = lang(u8"ネトネトしている"s, u8"It's sticky."s);
    matspot(0, 54) = 12;

    matref(0, 49) = 5;
    matref(1, 49) = 50;
    matref(2, 49) = 150;
    matname(49) = lang(u8"記憶の欠片"s, u8"Memory fragment"s);
    matdesc(49) =
        lang(u8"思い出が残っている"s, u8" Reminds you of something."s);
    matspot(0, 49) = 12;

    matref(0, 35) = 8;
    matref(1, 35) = 40;
    matref(2, 35) = 470;
    matname(35) = lang(u8"魔法の紙"s, u8"Magic paper"s);
    matdesc(35) = lang(u8"魔力を秘めた紙"s, u8"Magical paper."s);
    matspot(0, 35) = 12;

    matref(0, 36) = 8;
    matref(1, 36) = 40;
    matref(2, 36) = 354;
    matname(36) = lang(u8"魔法のインク"s, u8"Magic ink"s);
    matdesc(36) = lang(u8"魔力を秘めたインク"s, u8"Wizards love to use it."s);
    matspot(0, 36) = 12;

    matref(0, 12) = 1;
    matref(1, 12) = 10;
    matref(2, 12) = 354;
    matname(12) = lang(u8"海水"s, u8"Seawater"s);
    matdesc(12) = lang(u8"しょっぱい水"s, u8"Very salty."s);
    matspot(0, 12) = 13;

    matref(0, 5) = 1;
    matref(1, 5) = 10;
    matref(2, 5) = 354;
    matname(5) = lang(u8"水滴"s, u8"Waterdrop"s);
    matdesc(5) = lang(u8"水滴"s, u8"A drop of water."s);
    matspot(0, 5) = 13;

    matref(0, 10) = 4;
    matref(1, 10) = 50;
    matref(2, 10) = 354;
    matname(10) = lang(u8"天使の涙"s, u8"Angel's tear"s);
    matdesc(10) = lang(u8"不思議な輝きを放つ涙"s, u8"Hard to gather."s);
    matspot(0, 10) = 13;

    matref(0, 25) = 4;
    matref(1, 25) = 20;
    matref(2, 25) = 354;
    matname(25) = lang(u8"お湯"s, u8"Hot water"s);
    matdesc(25) =
        lang(u8"なぜか冷めない"s, u8"Somehow it's not cooling down."s);
    matspot(0, 25) = 13;

    matref(0, 11) = 8;
    matref(1, 11) = 30;
    matref(2, 11) = 354;
    matname(11) = lang(u8"魔女の涙"s, u8"Witch's tear"s);
    matdesc(11) = lang(u8"決して乾かない涙"s, u8"Never dries up."s);
    matspot(0, 11) = 13;

    matref(0, 20) = 12;
    matref(1, 20) = 15;
    matref(2, 20) = 7;
    matname(20) = lang(u8"雪"s, u8"Snow"s);
    matdesc(20) = lang(u8"なぜか溶けない"s, u8"It won't melt somehow."s);
    matspot(0, 20) = 13;

    matref(0, 7) = 1;
    matref(1, 7) = 40;
    matref(2, 7) = 209;
    matname(7) = lang(u8"ミスリルの欠片"s, u8"Mithril fragment"s);
    matdesc(7) = lang(u8"ミスリルを含んだ鉱石の欠片"s, u8"Contains mithril."s);
    matspot(0, 7) = 14;

    matref(0, 9) = 1;
    matref(1, 9) = 10;
    matref(2, 9) = 209;
    matname(9) = lang(u8"鉄の欠片"s, u8"Iron fragment"s);
    matdesc(9) = lang(u8"鉄分を含んだ鉱石の欠片"s, u8"Contains iron."s);
    matspot(0, 9) = 14;

    matref(0, 26) = 5;
    matref(1, 26) = 10;
    matref(2, 26) = 209;
    matname(26) = lang(u8"火炎石"s, u8"Fire stone"s);
    matdesc(26) = lang(u8"熱を帯びた石"s, u8"This is hot."s);
    matspot(0, 26) = 14;

    matref(0, 27) = 5;
    matref(1, 27) = 10;
    matref(2, 27) = 209;
    matname(27) = lang(u8"冷凍石"s, u8"Ice stone"s);
    matdesc(27) = lang(u8"冷たい石"s, u8"This is cool."s);
    matspot(0, 27) = 14;

    matref(0, 28) = 5;
    matref(1, 28) = 10;
    matref(2, 28) = 209;
    matname(28) = lang(u8"帯電石"s, u8"Discharging stone"s);
    matdesc(28) = lang(u8"電気を帯びた石"s, u8"It's electrified."s);
    matspot(0, 28) = 14;

    matref(0, 52) = 8;
    matref(1, 52) = 50;
    matref(2, 52) = 209;
    matname(52) = lang(u8"上等な石"s, u8"Fine stone"s);
    matdesc(52) = lang(u8"状態の良い石"s, u8"A good quality stone."s);
    matspot(0, 52) = 14;

    matref(0, 8) = 10;
    matref(1, 8) = 40;
    matref(2, 8) = 209;
    matname(8) = lang(u8"エーテルの欠片"s, u8"Ether fragment"s);
    matdesc(8) = lang(u8"エーテルを含んだ鉱石の欠片"s, u8"Contains ether."s);
    matspot(0, 8) = 14;

    matref(0, 22) = 20;
    matref(1, 22) = 100;
    matref(2, 22) = 209;
    matname(22) = lang(u8"元素の欠片"s, u8"Element fragment"s);
    matdesc(22) = lang(u8"元素の力を宿した石"s, u8"Elemental."s);
    matspot(0, 22) = 14;

    matref(0, 51) = 40;
    matref(1, 51) = 200;
    matref(2, 51) = 209;
    matname(51) = lang(u8"混沌の石"s, u8"Chaos stone"s);
    matdesc(51) = lang(u8"混沌の力が封じられた石"s, u8"Chaotic."s);
    matspot(0, 51) = 14;

    matref(0, 13) = 1;
    matref(1, 13) = 10;
    matref(2, 13) = 170;
    matname(13) = lang(u8"唸る草"s, u8"Howling weed"s);
    matdesc(13) = lang(u8"変な音を出す草"s, u8"It's making a whining sound."s);
    matspot(0, 13) = 15;

    matref(0, 14) = 1;
    matref(1, 14) = 20;
    matref(2, 14) = 170;
    matname(14) = lang(u8"赤い草"s, u8"Red weed"s);
    matdesc(14) = lang(u8"ほんのり赤い草"s, u8"A faintly reddish weed."s);
    matspot(0, 14) = 15;

    matref(0, 15) = 1;
    matref(1, 15) = 20;
    matref(2, 15) = 170;
    matname(15) = lang(u8"青い草"s, u8"Blue weed"s);
    matdesc(15) = lang(u8"ほんのり青い草"s, u8"A faintly blueish weed."s);
    matspot(0, 15) = 15;

    matref(0, 16) = 1;
    matref(1, 16) = 10;
    matref(2, 16) = 170;
    matname(16) = lang(u8"呪いの草"s, u8"Curse weed"s);
    matdesc(16) = lang(u8"呪われた草"s, u8"A cursed weed."s);
    matspot(0, 16) = 15;

    matref(0, 42) = 3;
    matref(1, 42) = 20;
    matref(2, 42) = 170;
    matname(42) = lang(u8"薬草"s, u8"Medicinal weed"s);
    matdesc(42) = lang(u8"少し傷を癒す"s, u8"Slightly cures wounds."s);
    matspot(0, 42) = 15;

    matref(0, 29) = 7;
    matref(1, 29) = 50;
    matref(2, 29) = 170;
    matname(29) = lang(u8"浮き草"s, u8"Floating weed"s);
    matdesc(29) = lang(u8"とても軽い草"s, u8"Very light."s);
    matspot(0, 29) = 15;

    matref(0, 17) = 12;
    matref(1, 17) = 20;
    matref(2, 17) = 170;
    matname(17) = lang(u8"聖なる草"s, u8"Holy weed"s);
    matdesc(17) = lang(u8"祝福された草"s, u8"It's blessed."s);
    matspot(0, 17) = 15;

    matref(0, 24) = 15;
    matref(1, 24) = 40;
    matref(2, 24) = 8;
    matname(24) = lang(u8"黒い霧"s, u8"Black mist"s);
    matdesc(24) = lang(u8"真っ黒な霧"s, u8"It's as black as coal."s);
    matspot(0, 24) = 15;

    matref(0, 34) = 25;
    matref(1, 34) = 200;
    matref(2, 34) = 354;
    matname(34) = lang(u8"世界樹の樹液"s, u8"Sap of Yaggdrasil"s);
    matdesc(34) = lang(u8"どんな傷も癒す樹液"s, u8"It's pretty rare."s);
    matspot(0, 34) = 15;

    matspot(1, 34) = 10;
    matref(0, 4) = 1;
    matref(1, 4) = 10;
    matref(2, 4) = 436;
    matname(4) = lang(u8"鳥の羽"s, u8"Bird's feather"s);
    matdesc(4) = lang(u8"普通の鳥の羽"s, u8"A piece of Feather."s);
    matspot(0, 4) = 16;

    matref(0, 18) = 1;
    matref(1, 18) = 80;
    matref(2, 18) = 301;
    matname(18) = lang(u8"ウサギの尻尾"s, u8"Rabbit's tail"s);
    matdesc(18) = lang(u8"幸運を呼ぶ尻尾"s, u8"Scut."s);
    matspot(0, 18) = 16;

    matref(0, 31) = 1;
    matref(1, 31) = 20;
    matref(2, 31) = 304;
    matname(31) = lang(u8"ヒトの遺伝子"s, u8"Human gene"s);
    matdesc(31) = lang(u8"普通の遺伝子"s, u8"It's common."s);
    matspot(0, 31) = 16;

    matref(0, 39) = 3;
    matref(1, 39) = 20;
    matref(2, 39) = 301;
    matname(39) = lang(u8"クマの尻尾"s, u8"Bear's tail"s);
    matdesc(39) = lang(u8"とても短い"s, u8"Very short."s);
    matspot(0, 39) = 16;

    matref(0, 19) = 5;
    matref(1, 19) = 15;
    matref(2, 19) = 304;
    matname(19) = lang(u8"トロールの遺伝子"s, u8"Troll gene"s);
    matdesc(19) = lang(u8"再生する遺伝子"s, u8"It's regenerating."s);
    matspot(0, 19) = 16;

    matref(0, 32) = 8;
    matref(1, 32) = 40;
    matref(2, 32) = 304;
    matname(32) = lang(u8"魔女の瞳"s, u8"Witch's eye"s);
    matdesc(32) = lang(u8"まだ動いている"s, u8"These eyes are still moving."s);
    matspot(0, 32) = 16;

    matref(0, 21) = 15;
    matref(1, 21) = 45;
    matref(2, 21) = 209;
    matname(21) = lang(u8"フェアリーダスト"s, u8"Fairy dust"s);
    matdesc(21) = lang(u8"妖精の燐粉"s, u8"Fairies leave it."s);
    matspot(0, 21) = 16;
}



int prodcheck()
{
    int f_at_m110 = 0;
    elona_vector1<int> j_at_m110;
    f_at_m110 = 1;
    if (matval(1) > sdata(matval, 0))
    {
        f_at_m110 = -1;
    }
    for (int cnt = 0; cnt < 6; ++cnt)
    {
        j_at_m110(0) = matneed(cnt * 2);
        j_at_m110(1) = matneed(cnt * 2 + 1);
        if (j_at_m110 == -1)
        {
            break;
        }
        if (mat(j_at_m110) < j_at_m110(1))
        {
            f_at_m110 = -1;
        }
    }
    return f_at_m110;
}



int get_required_craft_materials()
{
    matneed(0) = -1;
    matneed(1) = -1;
    matneed(2) = -1;
    matneed(3) = -1;
    matneed(4) = -1;
    matneed(5) = -1;
    matneed(6) = -1;
    matneed(7) = -1;
    matneed(8) = -1;
    matneed(9) = -1;
    if (matid == 502)
    {
        matval(0) = 179;
        matval(1) = 40;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 2;
        matneed(2) = 44;
        matneed(3) = 2;
        matneed(4) = 51;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 501)
    {
        matval(0) = 179;
        matval(1) = 13;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 2;
        matneed(2) = 44;
        matneed(3) = 1;
        return 1;
    }
    if (matid == 500)
    {
        matval(0) = 179;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 2;
        matneed(2) = 38;
        matneed(3) = 1;
        return 1;
    }
    if (matid == 455)
    {
        matval(0) = 177;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 45;
        matneed(1) = 4;
        matneed(2) = 53;
        matneed(3) = 2;
        matneed(4) = 7;
        matneed(5) = 3;
        return 1;
    }
    if (matid == 411)
    {
        matval(0) = 179;
        matval(1) = 5;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 4;
        matneed(2) = 36;
        matneed(3) = 1;
        matneed(4) = 23;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 408)
    {
        matval(0) = 176;
        matval(1) = 11;
        matval(2) = 100;
        matneed(0) = 47;
        matneed(1) = 3;
        matneed(2) = 52;
        matneed(3) = 2;
        matneed(4) = 21;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 407)
    {
        matval(0) = 178;
        matval(1) = 14;
        matval(2) = 100;
        matneed(0) = 25;
        matneed(1) = 4;
        matneed(2) = 20;
        matneed(3) = 3;
        matneed(4) = 42;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 405)
    {
        matval(0) = 176;
        matval(1) = 15;
        matval(2) = 100;
        matneed(0) = 48;
        matneed(1) = 8;
        matneed(2) = 9;
        matneed(3) = 5;
        matneed(4) = 52;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 403)
    {
        matval(0) = 176;
        matval(1) = 12;
        matval(2) = 100;
        matneed(0) = 47;
        matneed(1) = 5;
        matneed(2) = 16;
        matneed(3) = 2;
        matneed(4) = 10;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 402)
    {
        matval(0) = 177;
        matval(1) = 5;
        matval(2) = 100;
        matneed(0) = 53;
        matneed(1) = 7;
        matneed(2) = 45;
        matneed(3) = 4;
        return 1;
    }
    if (matid == 401)
    {
        matval(0) = 179;
        matval(1) = 14;
        matval(2) = 100;
        matneed(0) = 3;
        matneed(1) = 8;
        matneed(2) = 53;
        matneed(3) = 4;
        matneed(4) = 21;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 400)
    {
        matval(0) = 176;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 3;
        matneed(1) = 6;
        matneed(2) = 46;
        matneed(3) = 4;
        matneed(4) = 2;
        matneed(5) = 4;
        return 1;
    }
    if (matid == 399)
    {
        matval(0) = 177;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 45;
        matneed(1) = 5;
        matneed(2) = 33;
        matneed(3) = 2;
        matneed(4) = 20;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 395)
    {
        matval(0) = 179;
        matval(1) = 30;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 5;
        matneed(2) = 30;
        matneed(3) = 1;
        matneed(4) = 44;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 390)
    {
        matval(0) = 179;
        matval(1) = 25;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 1;
        matneed(2) = 36;
        matneed(3) = 2;
        matneed(4) = 30;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 389)
    {
        matval(0) = 179;
        matval(1) = 25;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 2;
        matneed(2) = 36;
        matneed(3) = 2;
        matneed(4) = 17;
        matneed(5) = 4;
        return 1;
    }
    if (matid == 388)
    {
        matval(0) = 179;
        matval(1) = 15;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 1;
        matneed(2) = 17;
        matneed(3) = 2;
        matneed(4) = 23;
        matneed(5) = 3;
        return 1;
    }
    if (matid == 384)
    {
        matval(0) = 179;
        matval(1) = 15;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 2;
        matneed(2) = 17;
        matneed(3) = 4;
        matneed(4) = 16;
        matneed(5) = 4;
        return 1;
    }
    if (matid == 362)
    {
        matval(0) = 179;
        matval(1) = 18;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 1;
        matneed(2) = 49;
        matneed(3) = 2;
        matneed(4) = 30;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 287)
    {
        matval(0) = 178;
        matval(1) = 45;
        matval(2) = 100;
        matneed(0) = 34;
        matneed(1) = 2;
        matneed(2) = 10;
        matneed(3) = 5;
        matneed(4) = 25;
        matneed(5) = 4;
        return 1;
    }
    if (matid == 286)
    {
        matval(0) = 178;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 25;
        matneed(1) = 4;
        matneed(2) = 14;
        matneed(3) = 4;
        return 1;
    }
    if (matid == 285)
    {
        matval(0) = 178;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 25;
        matneed(1) = 4;
        matneed(2) = 15;
        matneed(3) = 4;
        return 1;
    }
    if (matid == 253)
    {
        matval(0) = 178;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 5;
        matneed(1) = 4;
        return 1;
    }
    if (matid == 245)
    {
        matval(0) = 179;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 2;
        matneed(2) = 2;
        matneed(3) = 2;
        matneed(4) = 4;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 242)
    {
        matval(0) = 179;
        matval(1) = 10;
        matval(2) = 100;
        matneed(0) = 35;
        matneed(1) = 1;
        matneed(2) = 36;
        matneed(3) = 1;
        matneed(4) = 23;
        matneed(5) = 3;
        return 1;
    }
    if (matid == 236)
    {
        matval(0) = 179;
        matval(1) = 4;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 3;
        matneed(2) = 13;
        matneed(3) = 2;
        matneed(4) = 2;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 209)
    {
        matval(0) = 179;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 4;
        matneed(2) = 17;
        matneed(3) = 2;
        matneed(4) = 16;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 175)
    {
        matval(0) = 176;
        matval(1) = 17;
        matval(2) = 100;
        matneed(0) = 37;
        matneed(1) = 1;
        matneed(2) = 28;
        matneed(3) = 5;
        matneed(4) = 54;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 123)
    {
        matval(0) = 176;
        matval(1) = 14;
        matval(2) = 100;
        matneed(0) = 37;
        matneed(1) = 1;
        matneed(2) = 26;
        matneed(3) = 5;
        matneed(4) = 50;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 122)
    {
        matval(0) = 176;
        matval(1) = 14;
        matval(2) = 100;
        matneed(0) = 37;
        matneed(1) = 1;
        matneed(2) = 27;
        matneed(3) = 5;
        matneed(4) = 20;
        matneed(5) = 5;
        return 1;
    }
    if (matid == 120)
    {
        matval(0) = 176;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 6;
        matneed(1) = 1;
        matneed(2) = 9;
        matneed(3) = 4;
        matneed(4) = 50;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 119)
    {
        matval(0) = 176;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 6;
        matneed(1) = 1;
        matneed(2) = 14;
        matneed(3) = 4;
        matneed(4) = 54;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 76)
    {
        matval(0) = 178;
        matval(1) = 40;
        matval(2) = 100;
        matneed(0) = 34;
        matneed(1) = 2;
        matneed(2) = 5;
        matneed(3) = 5;
        matneed(4) = 42;
        matneed(5) = 4;
        return 1;
    }
    if (matid == 75)
    {
        matval(0) = 178;
        matval(1) = 30;
        matval(2) = 100;
        matneed(0) = 34;
        matneed(1) = 1;
        matneed(2) = 25;
        matneed(3) = 4;
        matneed(4) = 14;
        matneed(5) = 5;
        return 1;
    }
    if (matid == 74)
    {
        matval(0) = 178;
        matval(1) = 25;
        matval(2) = 100;
        matneed(0) = 15;
        matneed(1) = 3;
        matneed(2) = 25;
        matneed(3) = 4;
        matneed(4) = 42;
        matneed(5) = 3;
        return 1;
    }
    if (matid == 72)
    {
        matval(0) = 178;
        matval(1) = 20;
        matval(2) = 100;
        matneed(0) = 10;
        matneed(1) = 1;
        matneed(2) = 5;
        matneed(3) = 4;
        matneed(4) = 42;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 71)
    {
        matval(0) = 178;
        matval(1) = 15;
        matval(2) = 100;
        matneed(0) = 25;
        matneed(1) = 3;
        matneed(2) = 42;
        matneed(3) = 2;
        return 1;
    }
    if (matid == 70)
    {
        matval(0) = 178;
        matval(1) = 10;
        matval(2) = 100;
        matneed(0) = 25;
        matneed(1) = 3;
        matneed(2) = 14;
        matneed(3) = 1;
        matneed(4) = 15;
        matneed(5) = 1;
        return 1;
    }
    if (matid == 69)
    {
        matval(0) = 178;
        matval(1) = 5;
        matval(2) = 100;
        matneed(0) = 5;
        matneed(1) = 3;
        matneed(2) = 15;
        matneed(3) = 2;
        return 1;
    }
    if (matid == 68)
    {
        matval(0) = 178;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 5;
        matneed(1) = 3;
        matneed(2) = 14;
        matneed(3) = 1;
        return 1;
    }
    if (matid == 66)
    {
        matval(0) = 177;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 33;
        matneed(1) = 4;
        matneed(2) = 39;
        matneed(3) = 5;
        matneed(4) = 18;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 65)
    {
        matval(0) = 177;
        matval(1) = 10;
        matval(2) = 100;
        matneed(0) = 33;
        matneed(1) = 5;
        matneed(2) = 54;
        matneed(3) = 3;
        matneed(4) = 31;
        matneed(5) = 6;
        return 1;
    }
    if (matid == 19)
    {
        matval(0) = 176;
        matval(1) = 5;
        matval(2) = 100;
        matneed(0) = 6;
        matneed(1) = 1;
        matneed(2) = 4;
        matneed(3) = 4;
        matneed(4) = 29;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 18)
    {
        matval(0) = 176;
        matval(1) = 8;
        matval(2) = 100;
        matneed(0) = 6;
        matneed(1) = 1;
        matneed(2) = 32;
        matneed(3) = 2;
        matneed(4) = 49;
        matneed(5) = 2;
        return 1;
    }
    if (matid == 16)
    {
        matval(0) = 179;
        matval(1) = 7;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 3;
        matneed(2) = 2;
        matneed(3) = 2;
        matneed(4) = 4;
        matneed(5) = 3;
        return 1;
    }
    if (matid == 14)
    {
        matval(0) = 179;
        matval(1) = 1;
        matval(2) = 100;
        matneed(0) = 43;
        matneed(1) = 2;
        matneed(2) = 49;
        matneed(3) = 1;
        return 1;
    }
    if (matid == 8)
    {
        matval(0) = 177;
        matval(1) = 4;
        matval(2) = 100;
        matneed(0) = 45;
        matneed(1) = 6;
        matneed(2) = 53;
        matneed(3) = 3;
        matneed(4) = 50;
        matneed(5) = 2;
        return 1;
    }
    return -1;
}



void fixaiact(int prm_753)
{
    // FIXME: DRY
    for (auto&& action : cdata[prm_753].normal_actions)
    {
        if (action == 464 || action == 441 || action == 660 || action == 657)
        {
            action = -1;
        }
    }
    for (auto&& action : cdata[prm_753].special_actions)
    {
        if (action == 464 || action == 441 || action == 660 || action == 657)
        {
            action = -1;
        }
    }
    int i_at_m112 = cdata[prm_753].ai_heal;
    if (i_at_m112 == 464 || i_at_m112 == 441 || i_at_m112 == 660
        || i_at_m112 == 657)
    {
        cdata[prm_753].ai_heal = 0;
    }
    return;
}



int eleinfo(int prm_754, int prm_755)
{
    if (prm_754 == 50)
    {
        if (prm_755 == 0)
        {
            return 3;
        }
        else
        {
            return 108;
        }
    }
    if (prm_754 == 51)
    {
        if (prm_755 == 0)
        {
            return 12;
        }
        else
        {
            return 106;
        }
    }
    if (prm_754 == 52)
    {
        if (prm_755 == 0)
        {
            return 5;
        }
        else
        {
            return 107;
        }
    }
    if (prm_754 == 59)
    {
        if (prm_755 == 0)
        {
            return 8;
        }
        else
        {
            return 114;
        }
    }
    if (prm_754 == 53)
    {
        if (prm_755 == 0)
        {
            return 4;
        }
        else
        {
            return 115;
        }
    }
    if (prm_754 == 58)
    {
        if (prm_755 == 0)
        {
            return 9;
        }
        else
        {
            return 111;
        }
    }
    if (prm_754 == 57)
    {
        if (prm_755 == 0)
        {
            return 11;
        }
        else
        {
            return 112;
        }
    }
    if (prm_754 == 54)
    {
        if (prm_755 == 0)
        {
            return 10;
        }
        else
        {
            return 113;
        }
    }
    if (prm_754 == 55)
    {
        if (prm_755 == 0)
        {
            return 2;
        }
        else
        {
            return 110;
        }
    }
    if (prm_754 == 56)
    {
        if (prm_755 == 0)
        {
            return 7;
        }
        else
        {
            return 109;
        }
    }
    if (prm_754 == 63)
    {
        if (prm_755 == 0)
        {
            return 2;
        }
        else
        {
            return 110;
        }
    }
    return 0;
}



int characreate(int prm_756, int prm_757, int prm_758, int prm_759)
{
    characreatehack = -1;
    if (prm_758 == -3)
    {
        cxinit = -1;
        cyinit = -1;
    }
    else
    {
        cxinit = prm_758;
        cyinit = prm_759;
    }
    if (prm_757 == 0)
    {
        dbid = -1;
    }
    else
    {
        dbid = prm_757;
    }
    rc = prm_756;
    int stat = do_create_character();
    initlv = 0;
    voidlv = 0;
    characreatehack = 0;
    if (stat == 1)
    {
        if (rc == 56)
        {
            cdata[rc].state = 0;
            --npcmemory(1, cdata[rc].id);
            lua::on_chara_creation(rc); // TODO handle deserialization separately from creation from scratch
            return 1;
        }
        if (rc != 0)
        {
            if (prm_758 != -1)
            {
                place_character();
            }
        }
    }
    else
    {
        rc = 56;
        return 0;
    }
    lua::on_chara_creation(rc); // TODO correct?
    return 1;
}



int relationbetween(int c1, int c2)
{
    (void)c2;
    if (cdata[c1].relationship >= -2)
    {
        if (cdata[c1].relationship <= -3)
        {
            return -3;
        }
    }
    else if (cdata[c1].relationship >= -2)
    {
        return -3;
    }
    return 0;
}



void rowactend(int cc)
{
    cdata[cc].continuous_action_id = 0;
    cdata[cc].continuous_action_turn = 0;
    cdata[cc].continuous_action_item = 0;
}



int customtalk(int cc, int talk_type)
{
    std::vector<std::string> talk_file_buffer;

    bool use_external_file = false;

    if (cdata[cc].has_custom_talk())
    {
        const auto filepath =
            filesystem::dir::user() / u8"talk" / cdatan(4, cc);
        if (!fs::exists(filepath))
            return 0;
        range::copy(
            fileutil::read_by_line{filepath},
            std::back_inserter(talk_file_buffer));
        use_external_file = true;
    }
    else if (cdata[cc].id == 343)
    {
        talk_file_buffer = strutil::split_lines(usertxt(cdata[cc].cnpc_id));
        use_external_file = true;
    }

    if (use_external_file)
    {
        std::string tag;
        switch (talk_type)
        {
        case 101: tag = u8"%txtAggro"s; break;
        case 103: tag = u8"%txtKilled"s; break;
        case 102: tag = u8"%txtDead"s; break;
        case 104: tag = u8"%txtWelcome"s; break;
        case 100: tag = u8"%txtCalm"s; break;
        case 106: tag = u8"%txtDialog"s; break;
        default: assert(0);
        }

        tag += u8"," + lang(u8"JP"s, u8"EN"s);
        const auto start_text = range::find_if(
            talk_file_buffer,
            [&](const auto& line) { return strutil::contains(line, tag); });
        if (start_text == std::end(talk_file_buffer))
        {
            throw std::runtime_error(u8"Error: fail to load custom talk");
        }
        const auto end_text = std::find_if(
            std::next(start_text),
            std::cend(talk_file_buffer),
            [](const auto& line) { return strutil::contains(line, u8"%"); });
        if (end_text == std::end(talk_file_buffer))
        {
            throw std::runtime_error(u8"Error: fail to load custom talk");
        }

        // Example:
        // %txtDialog,EN                              <- start_text
        // Elona Foobar is one of the Elona variants.
        // Elona is one of the rogue-like games.
        // %END                                       <- end_text
        const auto number_of_lines_plus_1 = std::distance(start_text, end_text);
        if (number_of_lines_plus_1 == 1)
        {
            throw std::runtime_error(u8"Error: fail to load custom talk");
        }
        else
        {
            std::vector<std::string> lines;
            std::copy(
                std::next(start_text), end_text, std::back_inserter(lines));
            const auto line = lines[rnd(int(lines.size()))];
            if (!line.empty())
            {
                if (talk_type == 106)
                {
                    buff = line;
                }
                else
                {
                    txtef(9);
                    txt(line);
                }
            }
        }
        return 1;
    }

    if (talk_type == 106)
        return 0;

    if (cdata[cc].can_talk != 0)
    {
        dbid = cdata[cc].id;
        dbmode = talk_type;
        access_character_info();
        return 1;
    }
    return 0;
}



int findchara(int prm_766)
{
    p_at_m117 = 0;
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state != 2)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
        }
        if (cdata[cnt].id == prm_766)
        {
            p_at_m117 = cnt;
            break;
        }
    }
    return p_at_m117;
}



int findally(int prm_767)
{
    p_at_m117 = -1;
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cdata[cnt].id == prm_767)
        {
            p_at_m117 = cnt;
            break;
        }
    }
    return p_at_m117;
}



int implevel(int impression)
{
    if (impression < 10)
        return 0;
    if (impression < 25)
        return 1;
    if (impression < 40)
        return 2;
    if (impression < 75)
        return 3;
    if (impression < 100)
        return 4;
    if (impression < 150)
        return 5;
    if (impression < 200)
        return 6;
    if (impression < 300)
        return 7;
    else
        return 8;
}



void modimp(int cc, int delta)
{
    int level1 = implevel(cdata[cc].impression);
    if (delta >= 0)
    {
        delta = delta * 100 / (50 + level1 * level1 * level1);
        if (delta == 0)
        {
            if (level1 < rnd(10))
            {
                delta = 1;
            }
        }
    }
    cdata[cc].impression += delta;
    int level2 = implevel(cdata[cc].impression);
    if (level1 > level2)
    {
        txtef(8);
        txt(lang(
            cdatan(0, cc) + u8"との関係が<"s
                + i18n::_(u8"ui", u8"impression", u8"_"s + level2)
                + u8">になった…"s,
            u8"Your relation with "s + cdatan(0, cc) + u8" becomes <"s
                + i18n::_(u8"ui", u8"impression", u8"_"s + level2)
                + u8">..."s));
    }
    else if (level2 > level1)
    {
        if (cdata[cc].relationship != -3)
        {
            txtef(2);
            txt(lang(
                cdatan(0, cc) + u8"との関係が<"s
                    + i18n::_(u8"ui", u8"impression", u8"_"s + level2)
                    + u8">になった！"s,
                u8"Your relation with "s + cdatan(0, cc) + u8" becomes <"s
                    + i18n::_(u8"ui", u8"impression", u8"_"s + level2)
                    + u8">!"s));
        }
    }
}



void put_questtarget()
{
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state == 1)
        {
            cdata[cnt].is_quest_target() = true;
            cdata[cnt].relationship = -3;
        }
    }
    return;
}



int exist_questtarget()
{
    int f_at_m119 = 0;
    f_at_m119 = 0;
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state == 1)
        {
            if (cdata[cnt].is_quest_target() == 1)
            {
                ++f_at_m119;
            }
        }
    }
    return f_at_m119;
}



void check_quest()
{
    int p_at_m119 = 0;
    if (gdata_current_map == 5)
    {
        if (gdata_current_dungeon_level == 3)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_putit_attacks < 2)
                {
                    gdata_putit_attacks = 2;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
        if (gdata_current_dungeon_level == 4)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_thieves_hideout < 2)
                {
                    gdata_thieves_hideout = 2;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
        if (gdata_current_dungeon_level == 5)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_nightmare < 3)
                {
                    gdata_nightmare = 3;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
    }
    if (gdata_current_map == 12)
    {
        if (gdata_current_dungeon_level == 3)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_cat_house < 2)
                {
                    gdata_cat_house = 2;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
        if (gdata_current_dungeon_level == 4)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_defense_line < 3)
                {
                    gdata_defense_line = 3;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
    }
    if (gdata_current_map == 36)
    {
        if (gdata_current_dungeon_level == 20)
        {
            if (exist_questtarget() == 0)
            {
                if (gdata_sewer_sweeping < 2)
                {
                    gdata_sewer_sweeping = 2;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
    }
    if (gdata_executing_immediate_quest_type == 0)
    {
        return;
    }
    if (gdata(73) != 3)
    {
        if (gdata(71) == 1)
        {
            p_at_m119 = 0;
            for (int cnt = ELONA_MAX_PARTY_CHARACTERS;
                 cnt < ELONA_MAX_CHARACTERS;
                 ++cnt)
            {
                if (cdata[cnt].state == 1)
                {
                    ++p_at_m119;
                }
            }
            if (p_at_m119 == 0)
            {
                evadd(8);
            }
            else
            {
                txtef(4);
                txt(lang(
                    u8"[殲滅依頼]残り"s + p_at_m119 + u8"体"s + u8"] "s,
                    ""s + p_at_m119 + u8" more to go."s));
            }
        }
        if (gdata_executing_immediate_quest_type == 1008)
        {
            if (findchara(qdata(12, gdata_executing_immediate_quest)) == 0)
            {
                evadd(8);
            }
        }
    }
    return;
}



void refreshspeed(int cc)
{
    if (cdata[cc].speed_correction_value == 0)
    {
        cdata[cc].current_speed = sdata(18, cc);
    }
    else
    {
        cdata[cc].current_speed = sdata(18, cc)
            * clamp((100 - cdata[cc].speed_correction_value), 0, 100) / 100;
    }
    if (cdata[cc].current_speed < 10)
    {
        cdata[cc].current_speed = 10;
    }
    cdata[cc].speed_percentage_in_next_turn = 0;

    if (cc != 0 && gdata_mount != cc)
        return;

    if (gdata_mount != 0)
    {
        cdata[0].current_speed = sdata(18, gdata_mount) * 100
            / clamp((100 + sdata(18, gdata_mount)
                     - sdata(10, gdata_mount) * 3 / 2 - sdata(301, 0) * 2
                     - (cdata[gdata_mount].is_suitable_for_mount() == 1) * 50),
                    100,
                    1000);
        if (cdata[gdata_mount].is_unsuitable_for_mount())
        {
            cdata[0].current_speed /= 10;
        }
        if (gdata_mount == cc)
        {
            cdata[cc].current_speed =
                clamp(sdata(10, cc) + sdata(301, 0), 10, sdata(18, cc));
            return;
        }
    }

    gspdorg = sdata.get(18, 0).original_level;

    if (gdata_mount == 0)
    {
        int n = cdata[0].nutrition / 1000 * 1000;
        if (n < 1000)
        {
            cdata[0].speed_percentage_in_next_turn -= 30;
        }
        if (n < 2000)
        {
            cdata[0].speed_percentage_in_next_turn -= 10;
        }
        if (cdata[0].sp < 0)
        {
            cdata[0].speed_percentage_in_next_turn -= 30;
        }
        if (cdata[0].sp < 25)
        {
            cdata[0].speed_percentage_in_next_turn -= 20;
        }
        if (cdata[0].sp < 50)
        {
            cdata[0].speed_percentage_in_next_turn -= 10;
        }
    }
    if (cdata[0].inventory_weight_type >= 3)
    {
        cdata[0].speed_percentage_in_next_turn -= 50;
    }
    if (cdata[0].inventory_weight_type == 2)
    {
        cdata[0].speed_percentage_in_next_turn -= 30;
    }
    if (cdata[0].inventory_weight_type == 1)
    {
        cdata[0].speed_percentage_in_next_turn -= 10;
    }
    if (mdata(6) == 1 || mdata(6) == 4)
    {
        if (gdata_cargo_weight > gdata_current_cart_limit)
        {
            cdata[0].speed_percentage_in_next_turn -=
                25 + 25 * (gdata_cargo_weight / (gdata_current_cart_limit + 1));
        }
    }
    gspd = cdata[0].current_speed * (100 + cdata[0].speed_percentage) / 100;
    if (gspd < 10)
    {
        gspd = 10;
    }
}



void ride_begin(int mount)
{
    txt(lang(
        name(mount) + u8"に騎乗した("s + name(mount) + u8"の速度: "s
            + cdata[mount].current_speed + u8"→"s,
        u8"You ride "s + name(mount) + u8". ("s + name(mount) + u8"'s speed: "s
            + cdata[mount].current_speed + u8"->"s));
    cdata[mount].is_ridden() = true;
    map(cdata[mount].position.x, cdata[mount].position.y, 1) = 0;
    gdata_mount = mount;
    create_pcpic(0, true);
    rowactend(gdata_mount);
    refreshspeed(gdata_mount);
    txt(""s + cdata[mount].current_speed + u8") "s);
    if (cdata[gdata_mount].is_suitable_for_mount())
    {
        txt(lang(
            u8"この生物は乗馬用にちょうどいい！"s, u8"You feel comfortable."s));
    }
    else if (cdata[gdata_mount].is_unsuitable_for_mount())
    {
        txt(lang(
            u8"この生物はあなたを乗せるには非力すぎる。"s,
            u8"This creature is too weak to carry you."s));
    }
}



void ride_end()
{
    int mount = gdata_mount;
    cdata[mount].is_ridden() = false;
    rowactend(mount);
    gdata_mount = 0;
    create_pcpic(0, true);
    refreshspeed(mount);
}



void chara_vanquish(int cc)
{
    if (cc == gdata_mount)
    {
        ride_end();
    }
    else if (cdata[cc].state == 1 || cdata[cc].state == 10)
    {
        map(cdata[cc].position.x, cdata[cc].position.y, 1) = 0;
    }
    cdata[cc].state = 0;
    cdata[cc].character_role = 0;
    check_quest();
}



void turn_aggro(int cc, int tc, int hate)
{
    if (tc < 16)
    {
        cdata[cc].relationship = -3;
    }
    cdata[cc].hate = hate;
    cdata[cc].emotion_icon = 218;
    cdata[cc].enemy_id = tc;
}



void make_sound(
    int prm_777,
    int prm_778,
    int prm_779,
    int prm_780,
    int prm_781,
    int prm_782)
{
    for (int cnt = 1; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (dist(prm_777, prm_778, cdata[cnt].position.x, cdata[cnt].position.y)
            < prm_779)
        {
            if (rnd(prm_780) == 0)
            {
                if (cdata[cnt].sleep != 0)
                {
                    cdata[cnt].sleep = 0;
                    if (is_in_fov(cnt))
                    {
                        txt(lang(
                            name(cnt) + u8"は物音に気付き目を覚ました。"s,
                            name(cnt) + u8" notice"s + _s(cnt)
                                + u8" the sound and wake"s + _s(cnt)
                                + u8" up."s));
                    }
                    cdata[cnt].emotion_icon = 221;
                    if (prm_781)
                    {
                        if (rnd(500) == 0)
                        {
                            if (is_in_fov(cnt))
                            {
                                txtef(9);
                                txt(lang(
                                    name(cnt) + u8"はキレた。"s,
                                    name(cnt)
                                        + u8" can no longer put up with it."s));
                                txt(lang(
                                    u8"「もう我慢できない」"s,
                                    u8"\"That's it.\""s));
                            }
                            turn_aggro(cnt, prm_782, 80);
                        }
                    }
                }
            }
        }
    }
    return;
}



int get_freechara()
{
    f_at_m125 = -1;
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            f_at_m125 = cnt;
            break;
        }
    }
    return f_at_m125;
}



int get_freeally()
{
    f_at_m125 = 0;
    for (int cnt = 1, cnt_end = cnt + (clamp(sdata(17, 0) / 5 + 1, 2, 15));
         cnt < cnt_end;
         ++cnt)
    {
        if (cdata[cnt].state != 0)
        {
            continue;
        }
        f_at_m125 = cnt;
        break;
    }
    return f_at_m125;
}



void del_chara(int prm_783)
{
    for (const auto& cnt : items(prm_783))
    {
        inv[cnt].number = 0;
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        cdatan(cnt, prm_783) = "";
    }
    sdata.clear(prm_783);
    cdata(prm_783).clear();
    return;
}



int relocate_chara(int prm_784, int prm_785, int prm_786)
{
    int tc_at_m125 = 0;
    int x_at_m125 = 0;
    int y_at_m125 = 0;
    int p1_at_m125 = 0;
    int p2_at_m125 = 0;
    int p3_at_m125 = 0;
    int hp_at_m125 = 0;
    int p_at_m125 = 0;
    int invrangecc_at_m125 = 0;
    int cnt2_at_m125 = 0;
    tc_at_m125 = prm_785;
    if (prm_784 == gdata_mount)
    {
        ride_end();
        cdata[prm_784].position.x = cdata[0].position.x;
        cdata[prm_784].position.y = cdata[0].position.y;
    }
    if (tc_at_m125 == -1)
    {
        f_at_m125 = 0;
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].state == 0)
            {
                f_at_m125 = 1;
                tc_at_m125 = cnt;
                break;
            }
        }
        if (f_at_m125 == 0)
        {
            for (int cnt = 0;; ++cnt)
            {
                tc_at_m125 = ELONA_MAX_PARTY_CHARACTERS
                    + rnd(ELONA_MAX_OTHER_CHARACTERS);
                if (cdata[cnt].state == 1)
                {
                    if (cdata[cnt].character_role == 0)
                    {
                        break;
                    }
                }
            }
            chara_vanquish(tc_at_m125);
        }
    }
    if (prm_786 == 1)
    {
        x_at_m125 = cdata[tc_at_m125].position.x;
        y_at_m125 = cdata[tc_at_m125].position.y;
    }
    p1_at_m125 = cdata[tc_at_m125].relationship;
    p2_at_m125 = cdata[tc_at_m125].hate;
    p3_at_m125 = cdata[tc_at_m125].state;
    hp_at_m125 = cdata[tc_at_m125].hp;
    cdata[prm_784].item_which_will_be_used = 0;
    cdata[prm_784].is_livestock() = false;
    const auto tmp = inv_getheader(prm_784);
    const auto invhead = tmp.first;
    const auto invrange = tmp.second;
    p_at_m125 = invhead;
    invrangecc_at_m125 = invrange;
    for (const auto& cnt : items(tc_at_m125))
    {
        cnt2_at_m125 = cnt;
        if (cnt == invrangecc_at_m125)
        {
            break;
        }
        if (cc == prm_784)
        {
            if (ci == p_at_m125)
            {
                ci = cnt2_at_m125;
            }
        }
        inv(cnt2_at_m125) = inv(p_at_m125);
        inv(p_at_m125).clear();
        inv[cnt].body_part = 0;
        ++p_at_m125;
    }
    sdata.copy(tc_at_m125, prm_784);
    sdata.clear(prm_784);
    cdata(tc_at_m125) = cdata(prm_784);
    cdata(prm_784).clear();
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        cdatan(cnt, tc_at_m125) = cdatan(cnt, prm_784);
        cdatan(cnt, prm_784) = "";
    }
    {
        for (int i = 0; i < 30; ++i)
        {
            cdata_body_part(tc_at_m125, i) =
                cdata_body_part(tc_at_m125, i) / 10000 * 10000;
        }
    }
    if (prm_786 == 1)
    {
        cdata[tc_at_m125].state = 1;
        cdata[tc_at_m125].position.x = x_at_m125;
        cdata[tc_at_m125].position.y = y_at_m125;
        cdata[tc_at_m125].relationship = p1_at_m125;
        cdata[tc_at_m125].hate = p2_at_m125;
        cdata[tc_at_m125].hp = hp_at_m125;
        cdata[tc_at_m125].state = p3_at_m125;
        map(cdata[tc_at_m125].position.x, cdata[tc_at_m125].position.y, 1) =
            tc_at_m125 + 1;
    }
    else
    {
        if (prm_784 != 56)
        {
            map(cdata[tc_at_m125].position.x, cdata[tc_at_m125].position.y, 1) =
                tc_at_m125 + 1;
        }
        else
        {
            rc = tc_at_m125;
            cdata[tc_at_m125].state = 1;
            cxinit = cdata[0].position.x;
            cyinit = cdata[0].position.y;
            place_character();
        }
        cdata[tc_at_m125].enemy_id = 0;
        cdata[tc_at_m125].hate = 0;
    }
    if (tc_at_m125 < 16)
    {
        for (int cnt = 50; cnt < 61; ++cnt)
        {
            p_at_m125 = 100;
            if (sdata.get(cnt, tc_at_m125).original_level >= 500
                || sdata.get(cnt, tc_at_m125).original_level <= 100)
            {
                p_at_m125 = sdata.get(cnt, tc_at_m125).original_level;
            }
            if (p_at_m125 > 500)
            {
                p_at_m125 = 500;
            }
            sdata.get(cnt, tc_at_m125).original_level = p_at_m125;
            sdata.get(cnt, tc_at_m125).experience = 0;
            sdata.get(cnt, tc_at_m125).potential = 0;
        }
    }
    rc = tc_at_m125;
    wear_most_valuable_equipment_for_all_body_parts();
    refresh_character(tc_at_m125);
    return prm_784;
}



void hostileaction(int prm_787, int prm_788)
{
    if (prm_787 >= 16 || prm_788 == 0)
    {
        return;
    }
    if (cdata[prm_788].relationship != -3)
    {
        cdata[prm_788].emotion_icon = 418;
    }
    if (cdata[prm_788].relationship == 10)
    {
        txtef(8);
        txt(lang(
            name(prm_788) + u8"は嫌な顔をした。"s,
            name(prm_788) + u8" glares at you."s));
    }
    else
    {
        if (cdata[prm_788].relationship == 0)
        {
            modify_karma(0, -2);
        }
        if (cdata[prm_788].id == 202)
        {
            if (gdata_released_fire_giant == 0)
            {
                txtef(8);
                txt(lang(
                    name(prm_788) + u8"は嫌な顔をした。"s,
                    name(prm_788) + u8" glares at you."s));
                return;
            }
        }
        if (cdata[prm_788].relationship > -2)
        {
            txtef(8);
            txt(lang(
                name(prm_788) + u8"は嫌な顔をした。"s,
                name(prm_788) + u8" glares at you."s));
            cdata[prm_788].relationship = -2;
        }
        else
        {
            if (cdata[prm_788].relationship != -3)
            {
                txtef(8);
                txt(lang(
                    name(prm_788) + u8"は激怒した。"s,
                    name(prm_788) + u8" gets furious!"s));
            }
            cdata[prm_788].relationship = -3;
            cdata[prm_788].hate = 80;
            cdata[prm_788].enemy_id = prm_787;
        }
        customtalk(prm_788, 101);
    }
    if (cdata[prm_788].is_livestock() == 1)
    {
        if (rnd(50) == 0)
        {
            txtef(3);
            txt(lang(u8"家畜は興奮した！"s, u8"Animals get excited!"s));
            for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                if (cdata[cnt].is_livestock() == 1)
                {
                    cdata[cnt].enemy_id = 0;
                    cdata[cnt].hate = 20;
                    cdata[cnt].emotion_icon = 318;
                }
            }
        }
    }
    rowactend(prm_788);
    return;
}



void rowact_check(int prm_789)
{
    if (cdata[prm_789].continuous_action_id != 0)
    {
        if (cdata[prm_789].continuous_action_id != 3)
        {
            cdata[prm_789].stops_continuous_action_if_damaged = 1;
        }
    }
    return;
}



void rowact_item(int prm_790)
{
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cdata[cnt].continuous_action_turn <= 0)
        {
            continue;
        }
        if (cdata[cnt].continuous_action_id == 1
            || cdata[cnt].continuous_action_id == 2)
        {
            if (cdata[cnt].continuous_action_item == prm_790)
            {
                rowactend(cnt);
                txt(lang(
                    name(cnt) + u8"は行動を中断した。"s,
                    name(cnt) + u8" cancel"s + _s(cnt) + u8" "s + his(cnt)
                        + u8" action."s));
            }
        }
    }
    return;
}



void wake_up()
{
    if (gdata_hour >= 7 && gdata_hour <= 22)
    {
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].sleep > 0)
            {
                if (rnd(10))
                {
                    cdata[cnt].sleep = 0;
                }
            }
        }
    }
    return;
}



void incognitobegin()
{
    for (int cnt = 16; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cdata[cnt].character_role == 1010)
        {
            continue;
        }
        if (cdata[cnt].character_role == 16)
        {
            continue;
        }
        if (cdata[cnt].original_relationship >= -2)
        {
            if (cdata[cnt].relationship <= -2)
            {
                cdata[cnt].hate = 0;
                cdata[cnt].relationship = cdata[cnt].original_relationship;
                cdata[cnt].emotion_icon = 221;
            }
        }
    }
    return;
}



void incognitoend()
{
    for (int cnt = 16; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cdata[cnt].character_role == 14)
        {
            if (cdata[0].karma < -30)
            {
                cdata[cnt].relationship = -3;
                cdata[cnt].hate = 80;
                cdata[cnt].emotion_icon = 218;
            }
        }
    }
    return;
}



void cell_setchara(int cc, int x, int y)
{
    map(x, y, 1) = cc + 1;
    cdata[cc].position = position_t{x, y};
}



void cell_removechara(int x, int y)
{
    map(x, y, 1) = 0;
}



int cell_findspace(int prm_796, int prm_797, int prm_798)
{
    int f_at_m130 = 0;
    int dy_at_m130 = 0;
    int dx_at_m130 = 0;
    f_at_m130 = 0;
    for (int cnt = 0, cnt_end = (prm_798 * 2 + 1); cnt < cnt_end; ++cnt)
    {
        dy_at_m130 = prm_797 + cnt - 1;
        if (dy_at_m130 < 0 || dy_at_m130 >= mdata(1))
        {
            continue;
        }
        for (int cnt = 0, cnt_end = (prm_798 * 2 + 1); cnt < cnt_end; ++cnt)
        {
            dx_at_m130 = prm_796 + cnt - 1;
            if (dx_at_m130 < 0 || dx_at_m130 >= mdata(0))
            {
                continue;
            }
            if (map(dx_at_m130, dy_at_m130, 1) != 0)
            {
                continue;
            }
            if (chipm(7, map(dx_at_m130, dy_at_m130, 0)) & 4)
            {
                continue;
            }
            if (chipm(7, map(dx_at_m130, dy_at_m130, 6) % 1000) & 4)
            {
                continue;
            }
            rtval(0) = dx_at_m130;
            rtval(1) = dy_at_m130;
            f_at_m130 = 1;
        }
        if (f_at_m130)
        {
            break;
        }
    }
    return f_at_m130;
}



int findbuff(int prm_799, int prm_800)
{
    int f_at_m131 = 0;
    f_at_m131 = -1;
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[prm_799].buffs[cnt].id == 0)
        {
            break;
        }
        if (cdata[prm_799].buffs[cnt].id == prm_800)
        {
            f_at_m131 = cnt;
            break;
        }
    }
    return f_at_m131;
}



int addbuff(int prm_801, int prm_802, int prm_803, int prm_804)
{
    int p_at_m132 = 0;
    int fixeddur_at_m132 = 0;
    int f_at_m132 = 0;
    if (prm_804 <= 0)
    {
        return 0;
    }
    p_at_m132 = -1;
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[prm_801].buffs[cnt].id == prm_802)
        {
            if (cdata[prm_801].buffs[cnt].turns < prm_804)
            {
                p_at_m132 = cnt;
                break;
            }
            else
            {
                p_at_m132 = -2;
                break;
            }
        }
        if (cdata[prm_801].buffs[cnt].id == 0)
        {
            p_at_m132 = cnt;
            break;
        }
    }
    if (p_at_m132 == -1)
    {
        p_at_m132 = rnd(16);
    }
    if (p_at_m132 == -2)
    {
        if (is_in_fov(prm_801))
        {
            txt(lang(
                u8"しかし、効果はなかった。"s,
                u8"But it produces no effect."s));
            return 0;
        }
    }
    fixeddur_at_m132 = prm_804;
    if (the_buff_db[prm_802]->type == buff_data::type_t::hex)
    {
        f_at_m132 = 0;
        if (sdata(60, prm_801) / 2 > rnd(prm_803 * 2 + 100))
        {
            f_at_m132 = 1;
        }
        if (prm_803 * 3 < sdata(60, prm_801))
        {
            f_at_m132 = 1;
        }
        if (prm_803 / 3 > sdata(60, prm_801))
        {
            f_at_m132 = 0;
        }
        if (cdata[prm_801].quality > 3)
        {
            if (rnd(4))
            {
                f_at_m132 = 1;
            }
            else
            {
                fixeddur_at_m132 = prm_804 / 5 + 1;
            }
        }
        if (cdata[prm_801].quality >= 4)
        {
            if (prm_802 == 16)
            {
                f_at_m132 = 1;
            }
        }
        if (findbuff(prm_801, 10) != -1)
        {
            if (cdata[prm_801].buffs[findbuff(prm_801, 10)].power + 50
                    > prm_803 * 5 / 2
                || rnd(cdata[prm_801].buffs[findbuff(prm_801, 10)].power + 50)
                    > rnd(prm_803 + 1))
            {
                txt(lang(
                    u8"ホーリーヴェイルが呪いを防いだ。"s,
                    u8"The holy veil repels the hex."s));
                return 0;
            }
        }
        if (f_at_m132 == 1)
        {
            if (is_in_fov(prm_801))
            {
                txt(lang(
                    name(prm_801) + u8"は抵抗した。"s,
                    name(prm_801) + u8" resist"s + _s(prm_801)
                        + u8" the hex."s));
            }
            return 0;
        }
        if (cc == 0)
        {
            hostileaction(0, prm_801);
        }
    }
    if (the_buff_db[prm_802]->type != buff_data::type_t::food
        && is_in_fov(prm_801))
    {
        txt(lang(
            name(prm_801)
                + i18n::_(u8"buff", std::to_string(prm_802), u8"message_0"),
            name(prm_801) + u8" "s
                + i18n::_(u8"buff", std::to_string(prm_802), u8"message_0")
                + _s(prm_801)
                + i18n::_(u8"buff", std::to_string(prm_802), u8"message_1")));
    }
    cdata[prm_801].buffs[p_at_m132].id = prm_802;
    cdata[prm_801].buffs[p_at_m132].power = prm_803;
    cdata[prm_801].buffs[p_at_m132].turns = fixeddur_at_m132;
    refresh_character(prm_801);
    return 0;
}



void delbuff(int prm_805, int prm_806)
{
    if (prm_805 == 0)
    {
        txtef(8);
        txt(lang(
            ""s
                + i18n::_(
                      u8"buff",
                      std::to_string(cdata[prm_805].buffs[prm_806].id),
                      u8"name")
                + u8"の効果が切れた。"s,
            u8"The effect of "s
                + i18n::_(
                      u8"buff",
                      std::to_string(cdata[prm_805].buffs[prm_806].id),
                      u8"name")
                + u8" ends."s));
    }
    if (cdata[prm_805].buffs[prm_806].id == 15)
    {
        if (prm_805 == 0)
        {
            incognitoend();
        }
    }
    if (cdata[prm_805].buffs[prm_806].id == 16)
    {
        cdata[prm_805].is_sentenced_daeth() = false;
    }
    if (cdata[prm_805].buffs[prm_806].id == 18)
    {
        cdata[prm_805].is_contracting_with_reaper() = false;
    }
    cdata[prm_805].buffs[prm_806].id = 0;
    for (int cnt = prm_806, cnt_end = cnt + (16 - prm_806 - 1); cnt < cnt_end;
         ++cnt)
    {
        if (cdata[prm_805].buffs[cnt].id == 0)
        {
            if (cdata[prm_805].buffs[cnt + 1].id != 0)
            {
                cdata[prm_805].buffs[cnt].id = cdata[prm_805].buffs[cnt + 1].id;
                cdata[prm_805].buffs[cnt].power =
                    cdata[prm_805].buffs[cnt + 1].power;
                cdata[prm_805].buffs[cnt].turns =
                    cdata[prm_805].buffs[cnt + 1].turns;
                cdata[prm_805].buffs[cnt + 1].id = 0;
                cdata[prm_805].buffs[cnt + 1].power = 0;
                cdata[prm_805].buffs[cnt + 1].turns = 0;
            }
            else
            {
                break;
            }
        }
    }
    refresh_character(prm_805);
    return;
}



void animeload(int prm_807, int prm_808)
{
    elona_vector1<int> i_at_m133;
    if (mode != 0)
    {
        return;
    }
    if (is_in_fov(prm_808) == 0)
    {
        return;
    }
    if (config::instance().animewait == 0)
    {
        return;
    }
    screenupdate = -1;
    update_screen();
    dx_at_m133 = (cdata[prm_808].position.x - scx) * inf_tiles + inf_screenx;
    dy_at_m133 = (cdata[prm_808].position.y - scy) * inf_tiles + inf_screeny;
    gsel(7);
    picload(filesystem::dir::graphic() / (u8"anime"s + prm_807 + u8".bmp"));
    gsel(4);
    gmode(0);
    pos(0, 0);
    gcopy(0, dx_at_m133 - 24, dy_at_m133 - 40, 96, 96);
    gsel(0);
    gmode(2);
    i_at_m133(0) = 5;
    i_at_m133(1) = 50;
    r_at_m133 = 0;
    if (prm_807 == 8)
    {
        snd(65);
    }
    if (prm_807 == 10)
    {
        i_at_m133(0) = 8;
        i_at_m133(1) = 30;
        r_at_m133 = 0.2;
        snd(119);
    }
    if (prm_807 == 11)
    {
        i_at_m133(0) = 5;
        i_at_m133(1) = 50;
        r_at_m133 = 0;
        snd(118);
    }
    if (prm_807 == 14)
    {
        i_at_m133(0) = 6;
        i_at_m133(1) = 50;
    }
    for (int cnt = 0, cnt_end = (i_at_m133); cnt < cnt_end; ++cnt)
    {
        gmode(2, 96, 96);
        pos(dx_at_m133 + 24, dy_at_m133 + 8);
        grotate(7, cnt * 96, 0, r_at_m133 * cnt, 96, 96);
        gmode(0);
        redraw();
        pos(dx_at_m133 - 24, dy_at_m133 - 40);
        gcopy(4, 0, 0, 96, 96);
        await(config::instance().animewait + i_at_m133(1));
    }
    gmode(2);
    return;
}



void animeblood(int prm_809, int prm_810, int prm_811)
{
    int ele2_at_m133 = 0;
    elona_vector1<int> x_at_m133;
    elona_vector1<int> y_at_m133;
    int cnt2_at_m133 = 0;
    if (is_in_fov(prm_809) == 0)
    {
        return;
    }
    if (config::instance().animewait == 0)
    {
        return;
    }
    screenupdate = -1;
    update_screen();
    if (prm_810 == 0)
    {
        prepare_item_image(16, 0);
    }
    if (prm_810 == 1)
    {
        prepare_item_image(18, 0);
    }
    dx_at_m133 = (cdata[prm_809].position.x - scx) * inf_tiles + inf_screenx;
    dy_at_m133(0) = (cdata[prm_809].position.y - scy) * inf_tiles + inf_screeny;
    dy_at_m133(1) = 0;
    gsel(4);
    gmode(0);
    pos(0, 0);
    gcopy(0, dx_at_m133 - 48, dy_at_m133 - 56, 144, 160);
    ele2_at_m133 = 0;
    if (prm_811 == 52)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime18.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 51)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime19.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 50)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime20.bmp");
        dy_at_m133(1) = -20;
    }
    if (prm_811 == 56)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime22.bmp");
        dy_at_m133(1) = -24;
    }
    if (prm_811 == 53)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime21.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 54)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime23.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 57)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime24.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 59)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime25.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 58)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime26.bmp");
        dy_at_m133(1) = -16;
    }
    if (prm_811 == 55 || prm_811 == 63)
    {
        ele2_at_m133 = 1;
        gsel(7);
        picload(filesystem::dir::graphic() / u8"anime27.bmp");
        dy_at_m133(1) = -16;
    }
    gmode(2);
    gsel(0);
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        x_at_m133(cnt) = rnd(48) - 24;
        y_at_m133(cnt) = rnd(16);
    }
    for (int cnt = 0; cnt < 6; ++cnt)
    {
        cnt2_at_m133 = cnt * 2;
        gmode(2, inf_tiles, inf_tiles);
        if (ele2_at_m133)
        {
            pos(dx_at_m133 - 24, dy_at_m133 - 32 + dy_at_m133(1));
            gcopy(7, cnt * 96, 0, 96, 96);
        }
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            pos(dx_at_m133 + 24 + x_at_m133(cnt)
                    + (x_at_m133(cnt) < 3) * ((1 + (cnt % 2 == 0)) * -1)
                        * cnt2_at_m133
                    + (x_at_m133(cnt) > -4) * (1 + (cnt % 2 == 0))
                        * cnt2_at_m133,
                dy_at_m133 + y_at_m133(cnt) + cnt2_at_m133 * cnt2_at_m133 / 2
                    - 12 + cnt);
            grotate(
                1,
                0,
                960,
                0.2 * cnt,
                24 - cnt2_at_m133 * 2,
                24 - cnt2_at_m133 * 2);
        }
        gmode(0);
        redraw();
        pos(dx_at_m133 - 48, dy_at_m133 - 56);
        gcopy(4, 0, 0, 144, 160);
        await(config::instance().animewait + 15 + (ele2_at_m133 != 0) * 20);
    }
    gmode(2);
    return;
}



void resistmod(int cc, int element, int delta)
{
    if (delta >= 50)
    {
        txtef(2);
        switch (element)
        {
        case 50:
            txt(lang(
                name(cc) + u8"の身体は急に火照りだした。"s,
                u8"Suddenly, "s + name(cc) + u8" feel"s + _s(cc)
                    + u8" very hot."s));
            break;
        case 51:
            txt(lang(
                name(cc) + u8"の身体は急に冷たくなった。"s,
                u8"Suddenly, "s + name(cc) + u8" feel"s + _s(cc)
                    + u8" cool."s));
            break;
        case 52:
            txt(lang(
                name(cc) + u8"の身体に電気が走った。"s,
                name(cc) + u8" "s + is(cc)
                    + u8" struck by an electric shock."s));
            break;
        case 54:
            txt(lang(
                name(cc) + u8"は急に明晰になった。"s,
                u8"Suddenly, "s + name(cc) + your(cc)
                    + u8" mind becomes very clear."s));
            break;
        case 58:
            txt(lang(
                name(cc) + u8"は急に神経が図太くなった。"s,
                name(cc) + your(cc) + u8" nerve is sharpened."s));
            break;
        case 53:
            txt(lang(
                name(cc) + u8"は急に暗闇が怖くなくなった。"s,
                name(cc) + u8" no longer fear"s + _s(cc) + u8" darkness."s));
            break;
        case 57:
            txt(lang(
                name(cc) + u8"は騒音を気にしなくなった。"s,
                name(cc) + your(cc) + u8" eardrums get thick."s));
            break;
        case 59:
            txt(lang(
                name(cc) + u8"は急にカオスを理解した。"s,
                u8"Suddenly, "s + name(cc) + u8" understand"s + _s(cc)
                    + u8" chaos."s));
            break;
        case 55:
            txt(lang(
                name(cc) + u8"の毒への耐性は強くなった。"s,
                name(cc) + u8" now "s + have(cc)
                    + u8" antibodies to poisons."s));
            break;
        case 56:
            txt(lang(
                name(cc) + u8"の魂は地獄に近づいた。"s,
                name(cc) + u8" "s + is(cc) + u8" no longer afraid"s + _s(cc)
                    + u8" of hell."s));
            break;
        case 60:
            txt(lang(
                name(cc) + u8"の皮膚は魔力のオーラに包まれた。"s,
                name(cc) + your(cc)
                    + u8" body is covered by a magical aura."s));
            break;
        default: assert(0);
        }
    }
    else if (delta <= 50 * -1)
    {
        txtef(8);
        switch (element)
        {
        case 50:
            txt(lang(
                name(cc) + u8"は急に汗をかきだした。"s,
                name(cc) + u8" sweat"s + _s(cc) + u8"."s));
            break;
        case 51:
            txt(lang(
                name(cc) + u8"は急に寒気を感じた。"s,
                name(cc) + u8" shivers"s + _s(cc) + u8"."s));
            break;
        case 52:
            txt(lang(
                name(cc) + u8"は急に電気に敏感になった。"s,
                name(cc) + u8" "s + is(cc) + u8" shocked."s));
            break;
        case 54:
            txt(lang(
                name(cc) + u8"は以前ほど明晰ではなくなった。"s,
                name(cc) + your(cc) + u8" mind becomes slippery."s));
            break;
        case 58:
            txt(lang(
                name(cc) + u8"の神経は急に萎縮した。"s,
                name(cc) + u8" become"s + _s(cc) + u8" dull."s));
            break;
        case 53:
            txt(lang(
                name(cc) + u8"は急に暗闇が怖くなった。"s,
                u8"Suddenly, "s + name(cc) + u8" fear"s + _s(cc)
                    + u8" darkness."s));
            break;
        case 57:
            txt(lang(
                name(cc) + u8"は急に辺りをうるさく感じた。"s,
                name(cc) + u8" become"s + _s(cc)
                    + u8" very sensitive to noises."s));
            break;
        case 59:
            txt(lang(
                name(cc) + u8"はカオスへの理解を失った。"s,
                name(cc) + u8" no longer understand"s + _s(cc) + u8" chaos."s));
            break;
        case 55:
            txt(lang(
                name(cc) + u8"の毒への耐性は薄れた。"s,
                name(cc) + u8" lose"s + _s(cc, true)
                    + u8" antibodies to poisons."s));
            break;
        case 56:
            txt(lang(
                name(cc) + u8"の魂は地獄から遠ざかった。"s,
                name(cc) + u8" "s + is(cc) + u8" afraid of hell."s));
            break;
        case 60:
            txt(lang(
                name(cc) + u8"の皮膚から魔力のオーラが消えた。"s,
                u8"The magical aura disappears from "s + name(cc) + your(cc)
                    + u8" body."s));
            break;
        }
    }

    sdata.get(element, cc).original_level =
        clamp(sdata.get(element, cc).original_level + delta, 50, 200);
    snd(107);
    animeload(15, cc);

    refresh_character(cc);
}



void modcorrupt(int prm_815)
{
    int org_at_m134 = 0;
    int p_at_m134 = 0;
    int mod_at_m134 = 0;
    int cnt2_at_m134 = 0;
    int i_at_m134 = 0;
    org_at_m134 = gdata_ether_disease_stage / 1000;
    p_at_m134 = prm_815 + (prm_815 > 0) * gdata_ether_disease_speed;
    if (trait(168))
    {
        if (prm_815 > 0)
        {
            p_at_m134 = p_at_m134 * 100 / 150;
        }
    }
    gdata_ether_disease_stage += p_at_m134;
    if (gdata_ether_disease_stage < 0)
    {
        gdata_ether_disease_stage = 0;
    }
    mod_at_m134 = gdata_ether_disease_stage / 1000 - org_at_m134;
    if (mod_at_m134 > 0)
    {
        if (org_at_m134 == 0)
        {
            txtef(8);
            txt(lang(
                u8"エーテルの病が発症した。"s,
                u8"The symptom of the Ether disease is shown up on you."s));
            if (config::instance().extrahelp)
            {
                if (gdata(215) == 0)
                {
                    if (mode == 0)
                    {
                        if (cdata[0].continuous_action_turn == 0)
                        {
                            gdata(215) = 1;
                            ghelp = 15;
                            show_ex_help();
                        }
                    }
                }
            }
        }
        if (org_at_m134 + mod_at_m134 >= 20)
        {
            p_at_m134 = 20 - org_at_m134;
        }
        else
        {
            p_at_m134 = mod_at_m134;
        }
        for (int cnt = 0, cnt_end = (p_at_m134); cnt < cnt_end; ++cnt)
        {
            cnt2_at_m134 = cnt;
            if (org_at_m134 + cnt2_at_m134 > 20)
            {
                break;
            }
            for (int cnt = 0; cnt < 100000; ++cnt)
            {
                await();
                int tid = rnd(17) + 200;
                int stat = get_trait_info(0, tid);
                if (stat == 0 || traitref != 3)
                {
                    continue;
                }
                if (trait(tid) <= traitref(1))
                {
                    continue;
                }
                --trait(tid);
                i_at_m134 = 700 + org_at_m134 + cnt2_at_m134;
                gdata(i_at_m134) = tid;
                txtef(8);
                txt(lang(
                    u8"あなたはエーテルに侵食された。"s,
                    u8"Your disease is getting worse."s));
                txtef(3);
                txt(traitrefn(1));
                if (tid == 203)
                {
                    body = 9;
                    label_2196(0);
                }
                if (tid == 205)
                {
                    body = 3;
                    label_2196(0);
                }
                if (tid == 206)
                {
                    body = 2;
                    label_2196(0);
                }
                break;
            }
        }
        animeload(8, 0);
        refresh_character(0);
        return;
    }
    if (mod_at_m134 < 0)
    {
        if (org_at_m134 + mod_at_m134 < 0)
        {
            p_at_m134 = org_at_m134;
        }
        else
        {
            p_at_m134 = std::abs(mod_at_m134);
        }
        if (p_at_m134 < 0)
        {
            p_at_m134 = 0;
        }
        for (int cnt = 0, cnt_end = (p_at_m134); cnt < cnt_end; ++cnt)
        {
            cnt2_at_m134 = cnt;
            for (int cnt = 0; cnt < 100000; ++cnt)
            {
                await();
                int tid = rnd(17) + 200;
                if (cnt == 0)
                {
                    i_at_m134 = 700 + org_at_m134 - cnt2_at_m134 - 1;
                    if (gdata(i_at_m134) != 0)
                    {
                        tid = gdata(i_at_m134);
                    }
                }
                int stat = get_trait_info(0, tid);
                if (stat == 0 || traitref != 3)
                {
                    continue;
                }
                if (trait(tid) >= 0)
                {
                    continue;
                }
                ++trait(tid);
                txtef(2);
                txt(lang(
                    u8"あなたのエーテルの侵食はやわらいだ。"s,
                    u8"The symptoms of the Ether disease seem to calm down."s));
                txtef(2);
                txt(traitrefn(0));
                break;
            }
        }
        animeload(10, 0);
        refresh_character(0);
        return;
    }
    return;
}



void wet(int cc, int turns)
{
    cdata[cc].wet += turns;
    if (is_in_fov(cc))
    {
        txt(lang(
            name(cc) + u8"は濡れた。"s,
            name(cc) + u8" get"s + _s(cc) + u8" wet."s));
        if (cdata[cc].is_invisible())
        {
            txt(lang(
                name(cc) + u8"の姿があらわになった。"s,
                name(cc) + u8" "s + is(cc) + u8" revealed "s + his(cc)
                    + u8" shape."s));
        }
    }
}



int dmgcon(int prm_818, int prm_819, int prm_820)
{
    elona::prm_818 = prm_818;
    elona::prm_820 = prm_820;
    if (prm_820 < 1)
    {
        f_at_con = 0;
    }
    else
    {
        f_at_con = 1;
    }
    if (prm_819 == 4)
    {
        if (cdata[prm_818].is_immune_to_blindness() == 1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 2 + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 53;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 6;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].blind == 0)
            {
                cdata[prm_818].blind = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は盲目になった。"s,
                        name(prm_818) + u8" "s + is(prm_818) + u8" blinded."s));
                }
            }
            else
            {
                cdata[prm_818].blind += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 5)
    {
        if (cdata[prm_818].is_immune_to_confusion() == 1)
        {
            f_at_con = 0;
        }
        if (findbuff(prm_818, 7) != -1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 2 + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 54;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 7;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].confused == 0)
            {
                cdata[prm_818].confused = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は混乱した。"s,
                        name(prm_818) + u8" "s + is(prm_818)
                            + u8" confused."s));
                }
            }
            else
            {
                cdata[prm_818].confused += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 3)
    {
        if (cdata[prm_818].is_immune_to_paralyzation() == 1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 58;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 10;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].paralyzed == 0)
            {
                cdata[prm_818].paralyzed = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は麻痺した。"s,
                        name(prm_818) + u8" "s + is(prm_818)
                            + u8" paralyzed."s));
                }
            }
            else
            {
                cdata[prm_818].paralyzed += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 1)
    {
        if (cdata[prm_818].is_immune_to_poison() == 1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 3 + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 55;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 5;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].poisoned == 0)
            {
                cdata[prm_818].poisoned = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は毒におかされた。"s,
                        name(prm_818) + u8" "s + is(prm_818)
                            + u8" poisoned."s));
                }
            }
            else
            {
                cdata[prm_818].poisoned += p_at_con / 3 + 3;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 2)
    {
        if (cdata[prm_818].is_immune_to_sleep() == 1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 5 + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 58;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 4;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].sleep == 0)
            {
                cdata[prm_818].sleep = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は眠りにおちた。"s,
                        name(prm_818) + u8" fall"s + _s(prm_818)
                            + u8" asleep."s));
                }
            }
            else
            {
                cdata[prm_818].sleep += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 6)
    {
        if (cdata[prm_818].is_immune_to_fear() == 1)
        {
            f_at_con = 0;
        }
        if (findbuff(prm_818, 1) != -1)
        {
            f_at_con = 0;
        }
        if (findbuff(prm_818, 7) != -1)
        {
            f_at_con = 0;
        }
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 5 + 1))
            {
                f_at_con = 0;
            }
        }
        res_at_con = 54;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 7;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].fear == 0)
            {
                cdata[prm_818].fear = p_at_con;
            }
            if (is_in_fov(prm_818))
            {
                txt(lang(
                    name(prm_818) + u8"は恐怖に侵された。"s,
                    name(prm_818) + u8" "s + is(prm_818) + u8" frightened."s));
            }
        }
        return 1;
    }
    if (prm_819 == 7)
    {
        if (cdata[prm_818].quality > 3)
        {
            if (rnd(cdata[prm_818].level / 3 + 1))
            {
                f_at_con = 0;
            }
        }
        if (cdatan(2, prm_818) == u8"golem"s)
        {
            f_at_con = 0;
        }
        res_at_con = 57;
        label_1346();
        if (f_at_con == 0)
        {
            return 0;
        }
        p_at_con = p_at_con / 8;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].dimmed == 0)
            {
                cdata[prm_818].dimmed = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は朦朧とした。"s,
                        name(prm_818) + u8" "s + is(prm_818) + u8" dimmed."s));
                }
            }
            else
            {
                cdata[prm_818].dimmed += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 9)
    {
        p_at_con = prm_820 / 25;
        if (cdata[prm_818].quality > 3)
        {
            p_at_con /= 2;
        }
        if (p_at_con > 0)
        {
            if (cdata[prm_818].bleeding == 0)
            {
                cdata[prm_818].bleeding = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は血を流し始めた。"s,
                        name(prm_818) + u8" begin"s + _s(prm_818)
                            + u8" to bleed."s));
                }
            }
            else
            {
                cdata[prm_818].bleeding += p_at_con;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 8)
    {
        p_at_con = prm_820 / 10;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].drunk == 0)
            {
                cdata[prm_818].drunk = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txt(lang(
                        name(prm_818) + u8"は酔っ払った。"s,
                        name(prm_818) + u8" get"s + _s(prm_818)
                            + u8" drunk."s));
                }
            }
            else
            {
                cdata[prm_818].drunk += p_at_con;
            }
        }
        return 1;
    }
    if (prm_819 == 11)
    {
        p_at_con = prm_820 / 8;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].insane == 0)
            {
                cdata[prm_818].insane = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は気が狂った。"s,
                        name(prm_818) + u8" become"s + _s(prm_818)
                            + u8" insane."s));
                }
            }
            else
            {
                cdata[prm_818].insane += p_at_con / 3 + 1;
            }
            rowactend(prm_818);
        }
        return 1;
    }
    if (prm_819 == 12)
    {
        p_at_con = prm_820 / 10;
        if (p_at_con > 0)
        {
            if (cdata[prm_818].sick == 0)
            {
                cdata[prm_818].sick = p_at_con;
                if (is_in_fov(prm_818))
                {
                    txtef(8);
                    txt(lang(
                        name(prm_818) + u8"は病気になった。"s,
                        name(prm_818) + u8" get"s + _s(prm_818) + u8" sick."s));
                }
            }
            else
            {
                cdata[prm_818].sick += p_at_con / 10 + 1;
            }
        }
        return 1;
    }
    return 0;
}



void label_1346()
{
    int r_at_con = 0;
    p_at_con = rnd(prm_820 / 2 + 1) + prm_820 / 2;
    r_at_con = sdata(res_at_con, prm_818) / 50;
    p_at_con = p_at_con * 100 / (50 + r_at_con * 50);
    if (r_at_con >= 3)
    {
        if (p_at_con < 40)
        {
            f_at_con = 0;
        }
    }
    return;
}



void healhp(int cc, int delta)
{
    cdata[cc].hp += delta;
    if (cdata[cc].hp > cdata[cc].max_hp)
    {
        cdata[cc].hp = cdata[cc].max_hp;
    }
}



void healmp(int cc, int delta)
{
    cdata[cc].mp += delta;
    if (cdata[cc].mp > cdata[cc].max_mp)
    {
        cdata[cc].mp = cdata[cc].max_mp;
    }
}



void healsp(int cc, int delta)
{
    cdata[cc].sp += delta;
    if (cdata[cc].sp > cdata[cc].max_sp)
    {
        cdata[cc].sp = cdata[cc].max_sp;
    }
}



void healcon(int prm_827, int prm_828, int prm_829)
{
    if (prm_828 == 6)
    {
        if (cdata[prm_827].fear > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].fear = 0;
            }
            else
            {
                cdata[prm_827].fear -= prm_829;
            }
            if (cdata[prm_827].fear <= 0)
            {
                cdata[prm_827].fear = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は恐怖から立ち直った。"s,
                        name(prm_827) + u8" shake"s + _s(prm_827) + u8" off "s
                            + his(prm_827) + u8" fear."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 4)
    {
        if (cdata[prm_827].blind > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].blind = 0;
            }
            else
            {
                cdata[prm_827].blind -= prm_829;
            }
            if (cdata[prm_827].blind <= 0)
            {
                cdata[prm_827].blind = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は盲目から回復した。"s,
                        name(prm_827) + u8" can see again."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 5)
    {
        if (cdata[prm_827].confused > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].confused = 0;
            }
            else
            {
                cdata[prm_827].confused -= prm_829;
            }
            if (cdata[prm_827].confused <= 0)
            {
                cdata[prm_827].confused = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は混乱から回復した。"s,
                        name(prm_827) + u8" recover"s + _s(prm_827)
                            + u8" from confusion."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 3)
    {
        if (cdata[prm_827].paralyzed > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].paralyzed = 0;
            }
            else
            {
                cdata[prm_827].paralyzed -= prm_829;
            }
            if (cdata[prm_827].paralyzed <= 0)
            {
                cdata[prm_827].paralyzed = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は麻痺から回復した。"s,
                        name(prm_827) + u8" recover"s + _s(prm_827)
                            + u8" from paralysis."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 1)
    {
        if (cdata[prm_827].poisoned > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].poisoned = 0;
            }
            else
            {
                cdata[prm_827].poisoned -= prm_829;
            }
            if (cdata[prm_827].poisoned <= 0)
            {
                cdata[prm_827].poisoned = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は毒から回復した。"s,
                        name(prm_827) + u8" recover"s + _s(prm_827)
                            + u8" from poison."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 2)
    {
        if (cdata[prm_827].sleep > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].sleep = 0;
            }
            else
            {
                cdata[prm_827].sleep -= prm_829;
            }
            if (cdata[prm_827].sleep <= 0)
            {
                cdata[prm_827].sleep = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は心地よい眠りから覚めた。"s,
                        name(prm_827) + u8" awake"s + _s(prm_827) + u8" from "s
                            + his(prm_827) + u8" sleep."s));
                }
            }
            return;
        }
    }
    if (prm_828 == 7)
    {
        if (cdata[prm_827].dimmed > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].dimmed = 0;
            }
            else
            {
                cdata[prm_827].dimmed -= prm_829;
            }
            if (cdata[prm_827].dimmed <= 0)
            {
                cdata[prm_827].dimmed = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"の意識ははっきりした。"s,
                        name(prm_827) + u8" recover"s + _s(prm_827)
                            + u8" from poison."s));
                }
            }
        }
    }
    if (prm_828 == 9)
    {
        if (cdata[prm_827].bleeding > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].bleeding = 0;
            }
            else
            {
                cdata[prm_827].bleeding -= prm_829;
            }
            if (cdata[prm_827].bleeding <= 0)
            {
                cdata[prm_827].bleeding = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"の出血は止まった。"s,
                        name(prm_827) + your(prm_827) + u8" bleeding stops."s));
                }
            }
        }
    }
    if (prm_828 == 8)
    {
        if (cdata[prm_827].drunk > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].drunk = 0;
            }
            else
            {
                cdata[prm_827].drunk -= prm_829;
            }
            if (cdata[prm_827].drunk <= 0)
            {
                cdata[prm_827].drunk = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"の酔いは覚めた。"s,
                        name(prm_827) + u8" get"s + _s(prm_827)
                            + u8" sober."s));
                }
            }
        }
    }
    if (prm_828 == 11)
    {
        if (cdata[prm_827].insane > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].insane = 0;
            }
            else
            {
                cdata[prm_827].insane -= prm_829;
            }
            if (cdata[prm_827].insane <= 0)
            {
                cdata[prm_827].insane = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"は正気に戻った。"s,
                        name(prm_827) + u8" come"s + _s(prm_827) + u8" to "s
                            + yourself(prm_827) + u8" again."s));
                }
            }
        }
    }
    if (prm_828 == 12)
    {
        if (cdata[prm_827].sick > 0)
        {
            if (prm_829 == 0)
            {
                cdata[prm_827].sick = 0;
            }
            else
            {
                cdata[prm_827].sick -= prm_829;
            }
            if (cdata[prm_827].sick <= 0)
            {
                cdata[prm_827].sick = 0;
                if (is_in_fov(prm_827))
                {
                    txt(lang(
                        name(prm_827) + u8"の病気は治った。"s,
                        name(prm_827) + u8" recover"s + _s(prm_827)
                            + u8" from "s + his(prm_827) + u8" illness."s));
                }
            }
        }
    }
    return;
}



void spillblood(int prm_830, int prm_831, int prm_832)
{
    for (int cnt = 0, cnt_end = (prm_832 + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt == 0)
        {
            dx_at_m136 = prm_830;
            dy_at_m136 = prm_831;
        }
        else
        {
            dx_at_m136 = prm_830 + rnd(2) - rnd(2);
            dy_at_m136 = prm_831 + rnd(2) - rnd(2);
        }
        if (dx_at_m136 < 0 || dx_at_m136 >= mdata(0) || dy_at_m136 < 0
            || dy_at_m136 >= mdata(1))
        {
            continue;
        }
        if (chipm(2, map(dx_at_m136, dy_at_m136, 0)))
        {
            continue;
        }
        if (map(dx_at_m136, dy_at_m136, 7) % 10 < 5)
        {
            ++map(dx_at_m136, dy_at_m136, 7);
        }
    }
    return;
}



void spillfrag(int prm_833, int prm_834, int prm_835)
{
    for (int cnt = 0, cnt_end = (prm_835 + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt == 0)
        {
            dx_at_m136 = prm_833;
            dy_at_m136 = prm_834;
        }
        else
        {
            dx_at_m136 = prm_833 + rnd(2) - rnd(2);
            dy_at_m136 = prm_834 + rnd(2) - rnd(2);
        }
        if (dx_at_m136 < 0 || dx_at_m136 >= mdata(0) || dy_at_m136 < 0
            || dy_at_m136 >= mdata(1))
        {
            continue;
        }
        if (chipm(2, map(dx_at_m136, dy_at_m136, 0)))
        {
            continue;
        }
        if (map(dx_at_m136, dy_at_m136, 7) / 10 < 4)
        {
            map(dx_at_m136, dy_at_m136, 7) = map(dx_at_m136, dy_at_m136, 7) % 10
                + (map(dx_at_m136, dy_at_m136, 7) / 10 + 1) * 10;
        }
    }
    return;
}



void check_kill(int prm_836, int prm_837)
{
    int p_at_m137 = 0;
    if (gdata_current_map == 40 || gdata_current_map == 35
        || gdata_current_map == 6)
    {
        return;
    }
    p_at_m137 = 0;
    if (prm_836 >= 0)
    {
        if (prm_836 == 0 || cdata[prm_836].relationship >= 10)
        {
            if (prm_837 > 16)
            {
                ++gdata_kill_count;
                if (cdata[prm_837].id == gdata_fighters_guild_target)
                {
                    if (gdata_fighters_guild_quota > 0)
                    {
                        --gdata_fighters_guild_quota;
                    }
                }
                if (cdata[prm_837].original_relationship >= 0)
                {
                    p_at_m137 = -2;
                }
                if (cdata[prm_837].id == 183)
                {
                    p_at_m137 = -15;
                }
                if (cdata[prm_837].id == 184)
                {
                    p_at_m137 = -10;
                }
                if (cdata[prm_837].id == 185)
                {
                    p_at_m137 = -5;
                }
                if ((cdata[prm_837].character_role >= 1000
                     && cdata[prm_837].character_role < 2000)
                    || cdata[prm_837].character_role == 2003)
                {
                    p_at_m137 = -10;
                }
                if (cdata[prm_837].character_role == 13)
                {
                    modimp(prm_837, -25);
                }
            }
        }
        if (cdata[prm_836].relationship >= 10)
        {
            if (prm_836 != 0)
            {
                if (cdata[prm_836].impression < 200)
                {
                    if (rnd(2))
                    {
                        modimp(prm_836, 1);
                        cdata[prm_836].emotion_icon = 317;
                    }
                }
                else if (rnd(10) == 0)
                {
                    modimp(prm_836, 1);
                    cdata[prm_836].emotion_icon = 317;
                }
            }
        }
    }
    if (p_at_m137 != 0)
    {
        modify_karma(0, p_at_m137);
    }
    return;
}



void item_acid(int prm_838, int prm_839)
{
    int body_at_m138 = 0;
    if (prm_839 != -1)
    {
        ci_at_m138 = prm_839;
    }
    else
    {
        ci_at_m138 = -1;
        for (int i = 0; i < 30; ++i)
        {
            body_at_m138 = cdata_body_part(prm_838, i) / 10000;
            if (body_at_m138 == 0)
            {
                break;
            }
            p_at_m138 = cdata_body_part(prm_838, i) % 10000 - 1;
            if (p_at_m138 == -1)
            {
                continue;
            }
            if (rnd(clamp(30, 1, 30)) == 0)
            {
                if (inv[p_at_m138].enhancement > -4)
                {
                    ci_at_m138 = p_at_m138;
                    break;
                }
            }
        }
    }
    if (ci_at_m138 == -1)
    {
        return;
    }
    if (the_item_db[inv[ci_at_m138].id]->category >= 50000)
    {
        return;
    }
    if (ibit(1, ci_at_m138) == 0)
    {
        txtef(8);
        txt(lang(
            name(prm_838) + u8"の"s + itemname(ci_at_m138)
                + u8"は酸で傷ついた。"s,
            name(prm_838) + your(prm_838) + u8" "s + itemname(ci_at_m138, 0, 1)
                + u8" is damaged by acid."s));
        --inv[ci_at_m138].enhancement;
    }
    else
    {
        txt(lang(
            name(prm_838) + u8"の"s + itemname(ci_at_m138)
                + u8"は酸では傷つかない。"s,
            name(prm_838) + your(prm_838) + u8" "s + itemname(ci_at_m138, 0, 1)
                + u8" is immune to acid."s));
    }
    return;
}



int item_fire(int prm_840, int prm_841)
{
    max_at_m138 = 0;
    ti_at_m138 = -1;
    if (prm_841 != -1)
    {
        list_at_m138(0) = prm_841;
        ++max_at_m138;
    }
    if (prm_840 != -1)
    {
        if (sdata(50, prm_840) / 50 >= 6 || cdata[prm_840].quality >= 4)
        {
            return 0;
        }
        for (const auto& cnt : items(prm_840))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (inv[cnt].id == 567)
            {
                if (ti_at_m138 == -1)
                {
                    ti_at_m138 = cnt;
                    item_separate(ti_at_m138);
                }
                continue;
            }
            if (prm_841 == -1)
            {
                list_at_m138(max_at_m138) = cnt;
                ++max_at_m138;
            }
        }
    }
    if (max_at_m138 == 0)
    {
        return 0;
    }
    f_at_m138 = 0;
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        ci_at_m138 = list_at_m138(rnd(max_at_m138));
        if (inv[ci_at_m138].number <= 0)
        {
            continue;
        }
        rowact_item(ci_at_m138);
        if (ibit(2, ci_at_m138) == 0)
        {
            if (ibit(5, ci_at_m138) == 0)
            {
                a_at_m138 = the_item_db[inv[ci_at_m138].id]->category;
                if (a_at_m138 == 57000)
                {
                    if (inv[ci_at_m138].param2 == 0)
                    {
                        if (prm_840 == -1)
                        {
                            if (is_in_fov(inv[ci_at_m138].position))
                            {
                                txtef(11);
                                txt(lang(
                                    u8"地面の"s
                                        + itemname(
                                              ci_at_m138,
                                              inv[ci_at_m138].number)
                                        + u8"はこんがりと焼き上がった。"s,
                                    itemname(ci_at_m138, inv[ci_at_m138].number)
                                        + u8" on the ground get"s
                                        + _s2(inv[ci_at_m138].number)
                                        + u8" perfectly broiled."s));
                            }
                        }
                        if (prm_840 != -1)
                        {
                            if (is_in_fov(prm_840))
                            {
                                txtef(11);
                                txt(lang(
                                    name(prm_840) + u8"の"s
                                        + itemname(
                                              ci_at_m138,
                                              inv[ci_at_m138].number)
                                        + u8"はこんがりと焼き上がった。"s,
                                    name(prm_840) + your(prm_840) + u8" "s
                                        + itemname(
                                              ci_at_m138,
                                              inv[ci_at_m138].number,
                                              1)
                                        + u8" get"s
                                        + _s2(inv[ci_at_m138].number)
                                        + u8" perfectly broiled."s));
                            }
                        }
                        make_dish(ci_at_m138, rnd(5) + 1);
                        f_at_m138 = 1;
                        continue;
                    }
                }
                if (a_at_m138 == 72000 || a_at_m138 == 59000
                    || a_at_m138 == 68000 || inv[ci_at_m138].quality >= 4)
                {
                    continue;
                }
                if (inv[ci_at_m138].body_part != 0)
                {
                    if (rnd(2))
                    {
                        continue;
                    }
                }
                if (a_at_m138 != 56000 && a_at_m138 != 80000
                    && a_at_m138 != 55000 && a_at_m138 != 53000
                    && a_at_m138 != 54000)
                {
                    if (rnd(4))
                    {
                        continue;
                    }
                    if (prm_840 != -1)
                    {
                        if (rnd(4))
                        {
                            continue;
                        }
                    }
                }
                if (ti_at_m138 != -1)
                {
                    if (inv[ti_at_m138].number > 0)
                    {
                        if (is_in_fov(prm_840))
                        {
                            txt(lang(
                                itemname(ti_at_m138, 1) + u8"が"s
                                    + name(prm_840)
                                    + u8"の持ち物を炎から守った。"s,
                                itemname(ti_at_m138, 1) + u8" protects "s
                                    + name(prm_840) + your(prm_840)
                                    + u8" stuff from fire."s));
                        }
                        if (inv[ti_at_m138].count > 0)
                        {
                            --inv[ti_at_m138].count;
                        }
                        else if (rnd(20) == 0)
                        {
                            --inv[ti_at_m138].number;
                            if (is_in_fov(prm_840))
                            {
                                txt(lang(
                                    itemname(ti_at_m138, 1)
                                        + u8"は灰と化した。"s,
                                    itemname(ti_at_m138, 1)
                                        + u8" turns to dust."s));
                                break;
                            }
                        }
                        continue;
                    }
                }
                p_at_m138 = rnd(inv[ci_at_m138].number) / 2 + 1;
                if (prm_840 != -1)
                {
                    if (inv[ci_at_m138].body_part != 0)
                    {
                        if (is_in_fov(prm_840))
                        {
                            txtef(8);
                            txt(lang(
                                name(prm_840) + u8"の装備している"s
                                    + itemname(ci_at_m138, p_at_m138)
                                    + u8"は灰と化した。"s,
                                itemname(ci_at_m138, p_at_m138) + u8" "s
                                    + name(prm_840) + u8" equip"s + _s(prm_840)
                                    + u8" turn"s + _s2(p_at_m138)
                                    + u8" to dust."s));
                        }
                        cdata_body_part(prm_840, inv[ci_at_m138].body_part) =
                            cdata_body_part(prm_840, inv[ci_at_m138].body_part)
                            / 10000 * 10000;
                        inv[ci_at_m138].body_part = 0;
                        refresh_character(prm_840);
                    }
                    else if (is_in_fov(prm_840))
                    {
                        txtef(8);
                        txt(lang(
                            name(prm_840) + u8"の"s
                                + itemname(ci_at_m138, p_at_m138)
                                + u8"は灰と化した。"s,
                            name(prm_840) + your(prm_840) + u8" "s
                                + itemname(ci_at_m138, p_at_m138, 1)
                                + u8" turn"s + _s2(p_at_m138)
                                + u8" to dust."s));
                    }
                }
                else if (is_in_fov(inv[ci_at_m138].position))
                {
                    txtef(8);
                    txt(lang(
                        u8"地面の"s + itemname(ci_at_m138, p_at_m138)
                            + u8"は灰と化した。"s,
                        itemname(ci_at_m138, p_at_m138)
                            + u8" on the ground turn"s + _s(p_at_m138)
                            + u8" to dust."s));
                }
                inv[ci_at_m138].number -= p_at_m138;
                cell_refresh(
                    inv[ci_at_m138].position.x, inv[ci_at_m138].position.y);
                f_at_m138 = 1;
            }
        }
    }
    refresh_burden_state();
    return f_at_m138;
}



void mapitem_fire(int prm_842, int prm_843)
{
    if (map(prm_842, prm_843, 4) == 0)
    {
        return;
    }
    ci_at_m138 = -1;
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        if (inv[cnt].position.x == prm_842)
        {
            if (inv[cnt].position.y == prm_843)
            {
                ci_at_m138 = cnt;
                break;
            }
        }
    }
    if (ci_at_m138 != -1)
    {
        int stat = item_fire(-1, ci_at_m138);
        if (stat == 1)
        {
            if (map(prm_842, prm_843, 8) == 0)
            {
                addmef(prm_842, prm_843, 5, 24, rnd(10) + 5, 100, cc);
            }
        }
        cell_refresh(prm_842, prm_843);
    }
    return;
}



int item_cold(int prm_844, int prm_845)
{
    std::string s_at_m138;
    max_at_m138 = 0;
    ti_at_m138 = -1;
    if (prm_845 != -1)
    {
        list_at_m138(0) = prm_845;
        ++max_at_m138;
    }
    if (prm_844 != -1)
    {
        if (sdata(51, prm_844) / 50 >= 6 || cdata[prm_844].quality >= 4)
        {
            return 0;
        }
        for (const auto& cnt : items(prm_844))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (inv[cnt].id == 568)
            {
                if (ti_at_m138 == -1)
                {
                    ti_at_m138 = cnt;
                    item_separate(ti_at_m138);
                }
                continue;
            }
            if (prm_845 == -1)
            {
                list_at_m138(max_at_m138) = cnt;
                ++max_at_m138;
            }
        }
    }
    if (max_at_m138 == 0)
    {
        return 0;
    }
    f_at_m138 = 0;
    for (int cnt = 0; cnt < 2; ++cnt)
    {
        ci_at_m138 = list_at_m138(rnd(max_at_m138));
        if (inv[ci_at_m138].number <= 0)
        {
            continue;
        }
        rowact_item(ci_at_m138);
        if (ibit(5, ci_at_m138) == 0)
        {
            a_at_m138 = the_item_db[inv[ci_at_m138].id]->category;
            if (prm_844 == -1)
            {
                s_at_m138 = "";
            }
            else
            {
                s_at_m138 = name(prm_844) + lang(u8"の"s, your(prm_844));
            }
            if (a_at_m138 == 72000 || a_at_m138 == 59000 || a_at_m138 == 68000)
            {
                continue;
            }
            if (inv[ci_at_m138].quality >= 4 || inv[ci_at_m138].body_part != 0)
            {
                continue;
            }
            if (a_at_m138 != 52000)
            {
                if (rnd(30))
                {
                    continue;
                }
            }
            if (ti_at_m138 != -1)
            {
                if (inv[ti_at_m138].number > 0)
                {
                    txt(lang(
                        itemname(ti_at_m138, 1) + u8"が"s + name(prm_844)
                            + u8"の持ち物を冷気から守った。"s,
                        itemname(ti_at_m138, 1) + u8" protects "s
                            + name(prm_844) + your(prm_844)
                            + u8" stuff from cold."s));
                    if (inv[ti_at_m138].count > 0)
                    {
                        --inv[ti_at_m138].count;
                    }
                    else if (rnd(20) == 0)
                    {
                        txt(lang(
                            itemname(ti_at_m138, 1) + u8"は粉々に砕けた。"s,
                            itemname(ti_at_m138, 1)
                                + u8" is broken to pieces."s));
                        --inv[ti_at_m138].number;
                        break;
                    }
                    continue;
                }
            }
            p_at_m138 = rnd(inv[ci_at_m138].number) / 2 + 1;
            txtef(8);
            txt(lang(
                s_at_m138 + itemname(ci_at_m138, p_at_m138)
                    + u8"は粉々に砕けた。"s,
                s_at_m138 + itemname(ci_at_m138, p_at_m138) + u8" break"s
                    + _s2(p_at_m138) + u8" to pieces."s));
            inv[ci_at_m138].number -= p_at_m138;
            f_at_m138 = 1;
        }
    }
    refresh_burden_state();
    return f_at_m138;
}



void mapitem_cold(int prm_846, int prm_847)
{
    if (map(prm_846, prm_847, 4) == 0)
    {
        return;
    }
    ci_at_m138 = -1;
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        if (inv[cnt].position.x == prm_846)
        {
            if (inv[cnt].position.y == prm_847)
            {
                ci_at_m138 = cnt;
                break;
            }
        }
    }
    if (ci_at_m138 != -1)
    {
        item_cold(-1, ci_at_m138);
        cell_refresh(prm_846, prm_847);
    }
    return;
}



int copy_chara(int prm_848)
{
    int c_at_m139 = 0;
    int f_at_m139 = 0;
    int y_at_m139 = 0;
    int x_at_m139 = 0;
    c_at_m139 = 0;
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            c_at_m139 = cnt;
            break;
        }
    }
    if (c_at_m139 == 0)
    {
        return 0;
    }
    f_at_m139 = 0;
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        y_at_m139 =
            cdata[prm_848].position.y - rnd((cnt / 4 + 1)) + rnd((cnt / 4 + 1));
        if (y_at_m139 < 0 || y_at_m139 >= mdata(1))
        {
            continue;
        }
        x_at_m139 =
            cdata[prm_848].position.x - rnd((cnt / 4 + 1)) + rnd((cnt / 4 + 1));
        if (x_at_m139 < 0 || x_at_m139 >= mdata(0))
        {
            continue;
        }
        if (map(x_at_m139, y_at_m139, 1) == 0)
        {
            if ((chipm(7, map(x_at_m139, y_at_m139, 0)) & 4) == 0)
            {
                f_at_m139 = 1;
                break;
            }
        }
    }
    if (f_at_m139 == 0)
    {
        return 0;
    }
    del_chara(c_at_m139);
    sdata.copy(c_at_m139, prm_848);
    cdata(c_at_m139) = cdata(prm_848);
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        cdatan(cnt, c_at_m139) = cdatan(cnt, prm_848);
    }
    map(x_at_m139, y_at_m139, 1) = c_at_m139 + 1;
    cdata[c_at_m139].position.x = x_at_m139;
    cdata[c_at_m139].position.y = y_at_m139;
    cdata[c_at_m139].impression = 0;
    cdata[c_at_m139].gold = 0;
    for (int i = 0; i < 30; ++i)
    {
        cdata_body_part(c_at_m139, i) =
            cdata_body_part(c_at_m139, i) / 10000 * 10000;
    }
    cdata[c_at_m139].original_relationship = -3;
    cdata[c_at_m139].has_own_sprite() = false;
    cdata[c_at_m139].is_livestock() = false;
    cdata[c_at_m139].is_married() = false;
    cdata[c_at_m139].is_ridden() = false;
    cdata[c_at_m139].needs_refreshing_status() = true;
    cdata[c_at_m139].is_hung_on_sand_bag() = false;
    return 1;
}



void txteledmg(int type, int attacker, int target, int element)
{
    switch (element)
    {
    case 50:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は燃え上がった。"s,
                    name(target) + u8" "s + is(target) + u8" burnt."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"燃やし尽くした。"s,
                u8"burn"s + _s(attacker) + u8" "s + him(target)
                    + u8" to death."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は燃え尽きて灰になった。"s,
                name(target) + u8" "s + is(target) + u8" burnt to ashes."s));
        }
        break;
    case 51:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は凍えた。"s,
                    name(target) + u8" "s + is(target) + u8" frozen."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"氷の塊に変えた。"s,
                u8"transform"s + _s(attacker) + u8" "s + him(target)
                    + u8" to an ice sculpture."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は氷の彫像になった。"s,
                name(target) + u8" "s + is(target) + u8" frozen and turn"s
                    + _s(target) + u8" into an ice sculpture."s));
        }
        break;
    case 52:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"に電流が走った。"s,
                    name(target) + u8" "s + is(target) + u8" shocked."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"焦げカスにした。"s,
                u8"electrocute"s + _s(attacker) + u8" "s + him(target)
                    + u8" to death."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は雷に打たれ死んだ。"s,
                name(target) + u8" "s + is(target)
                    + u8" struck by lightning and die"s + _s(target) + u8"."s));
        }
        break;
    case 53:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は闇の力で傷ついた。"s,
                    name(target) + u8" "s + is(target)
                        + u8" struck by dark force."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"闇に飲み込んだ。"s,
                u8"let"s + _s(attacker) + u8" the depths swallow "s
                    + him(target) + u8"."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は闇に蝕まれて死んだ。"s,
                name(target) + u8" "s + is(target)
                    + u8" consumed by darkness."s));
        }
        break;
    case 58:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"の神経は傷ついた。"s,
                    name(target) + your(target) + u8" nerves are hurt."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"神経を破壊した。"s,
                u8"destroy"s + _s(attacker) + u8" "s + his(target)
                    + u8" nerves."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は神経を蝕まれて死んだ。"s,
                name(target) + u8" die"s + _s(target)
                    + u8" from neurofibroma."s));
        }
        break;
    case 54:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は狂気に襲われた。"s,
                    name(target) + u8" suffer"s + _s(target)
                        + u8" a splitting headache."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"再起不能にした。"s,
                u8"completely disable"s + _s(attacker) + u8" "s + him(target)
                    + u8"."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は発狂して死んだ。"s,
                name(target) + u8" lose"s + _s(target) + u8" "s + his(target)
                    + u8" mind and commit"s + _s(target) + u8" a suicide."s));
        }
        break;
    case 59:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は混沌の渦で傷ついた。"s,
                    name(target) + u8" "s + is(target)
                        + u8" hurt by chaotic force."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"混沌の渦に吸い込んだ。"s,
                u8"let"s + _s(attacker) + u8" the chaos consume "s + him(target)
                    + u8"."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は混沌の渦に吸収された。"s,
                name(target) + u8" "s + is(target)
                    + u8" drawn into a chaotic vortex."s));
        }
        break;
    case 56:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は冥界の冷気で傷ついた。"s,
                    name(target) + u8" "s + is(target)
                        + u8" chilled by infernal squall."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"冥界に墜とした。"s,
                u8"entrap"s + _s(attacker) + u8" "s + him(target)
                    + u8" into the inferno."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は冥界に墜ちた。"s,
                name(target) + u8" go"s + _s(target, true) + u8" to hell."s));
        }
        break;
    case 55:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は吐き気を催した。"s,
                    name(target) + u8" suffer"s + _s(target)
                        + u8" from venom."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"毒殺した。"s,
                u8"kill"s + _s(attacker) + u8" "s + him(target)
                    + u8" with poison."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は毒に蝕まれて死んだ。"s,
                name(target) + u8" "s + is(target) + u8" poisoned to death."s));
        }
        break;
    case 57:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は轟音の衝撃を受けた。"s,
                    name(target) + u8" "s + is(target)
                        + u8" shocked by a shrill sound"s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"聴覚を破壊し殺した。"s,
                u8"shatter"s + _s(attacker) + u8" "s + him(target)
                    + u8" to atoms."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は朦朧となって死んだ。"s,
                name(target) + u8" resonate"s + _s(target)
                    + u8" and break up."s));
        }
        break;
    case 63:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は酸に焼かれた。"s,
                    name(target) + u8" "s + is(target) + u8" burnt by acid."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"ドロドロに溶かした。"s,
                u8"melt"s + _s(attacker) + u8" "s + him(target) + u8" away."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は酸に焼かれ溶けた。"s,
                name(target) + u8" melt"s + _s(target) + u8"."s));
        }
        break;
    case 61:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は切り傷を負った。"s,
                    name(target) + u8" get"s + _s(target) + u8" a cut."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"千切りにした。"s,
                u8"cut"s + _s(attacker) + u8" "s + him(target)
                    + u8" into thin strips."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は千切りになった。"s,
                name(target) + u8" "s + is(target)
                    + u8" cut into thin strips."s));
        }
        break;
    default:
        if (type == 0)
        {
            if (is_in_fov(target))
            {
                txt(lang(
                    name(target) + u8"は傷ついた。"s,
                    name(target) + u8" "s + is(target) + u8" wounded."s));
            }
        }
        else if (type == 1)
        {
            txt(lang(
                u8"殺した。"s,
                u8"kill"s + _s(attacker) + u8" "s + him(target) + u8"."s));
        }
        else if (type == 2)
        {
            txt(lang(
                name(target) + u8"は死んだ。"s,
                name(target) + u8" "s + is(target) + u8" killed."s));
        }
        break;
    }
}



int dmghp(int prm_853, int prm_854, int prm_855, int prm_856, int prm_857)
{
    int ele_at_m141 = 0;
    int c3_at_m141 = 0;
    int r_at_m141 = 0;
    int dmglevel_at_m141 = 0;
    int f_at_m141 = 0;
    int se_at_m141 = 0;
    elona_vector1<int> p_at_m141;
    int exp_at_m141 = 0;
    elona::prm_853 = prm_853;
    ele_at_m141 = prm_856;
    if (txt3rd == 0)
    {
        c3_at_m141 = prm_855;
    }
    else
    {
        c3_at_m141 = -1;
    }
    if (cdata[prm_853].state != 1)
    {
        end_dmghp();
        return 0;
    }
    dmg_at_m141 = prm_854 * (1 + (cdata[prm_853].furious > 0));
    if (prm_855 >= 0)
    {
        if (cdata[prm_855].furious > 0)
        {
            dmg_at_m141 *= 2;
        }
    }
    if (ele_at_m141 != 0 && ele_at_m141 < 61)
    {
        r_at_m141 = sdata(ele_at_m141, prm_853) / 50;
        if (r_at_m141 < 3)
        {
            dmg_at_m141 =
                dmg_at_m141 * 150 / clamp((r_at_m141 * 50 + 50), 40, 150);
        }
        else if (r_at_m141 < 10)
        {
            dmg_at_m141 = dmg_at_m141 * 100 / (r_at_m141 * 50 + 50);
        }
        else
        {
            dmg_at_m141 = 0;
        }
        dmg_at_m141 = dmg_at_m141 * 100 / (sdata(60, prm_853) / 2 + 50);
    }
    if (prm_855 == 0)
    {
        if (critical)
        {
            snd(3);
        }
        else
        {
            snd(2);
        }
    }
    if (cdata[prm_853].wet > 0)
    {
        if (ele_at_m141 == 50 || prm_855 == -9)
        {
            dmg_at_m141 = dmg_at_m141 / 3;
        }
        if (ele_at_m141 == 52)
        {
            dmg_at_m141 = dmg_at_m141 * 3 / 2;
        }
    }
    if (ele_at_m141)
    {
        if (ele_at_m141 != 60)
        {
            if (cdata[prm_853].is_immune_to_elemental_damage())
            {
                dmg_at_m141 = 0;
            }
        }
    }
    if (cdata[prm_853].is_metal())
    {
        dmg_at_m141 = rnd(dmg_at_m141 / 10 + 2);
    }
    if (cdata[prm_853].is_contracting_with_reaper())
    {
        if (cdata[prm_853].hp - dmg_at_m141 <= 0)
        {
            if (clamp(
                    25 + cdata[prm_853].buffs[findbuff(prm_853, 18)].power / 17,
                    25,
                    80)
                >= rnd(100))
            {
                dmg_at_m141 *= -1;
            }
        }
    }
    if (cdata[prm_853].nullify_damage > 0)
    {
        if (cdata[prm_853].nullify_damage > rnd(100))
        {
            dmg_at_m141 = 0;
        }
    }
    if (ele_at_m141 == 658)
    {
        dmg_at_m141 = prm_854;
    }
    rtdmg = dmg_at_m141;

    if (prm_853 == 0 && cdata[0].god_id == core_god::opatos)
    {
        dmg_at_m141 = dmg_at_m141 * 90 / 100;
    }

    if (debug::voldemort && prm_853 == 0)
    {
        dmg_at_m141 = 0;
    }
    cdata[prm_853].hp -= dmg_at_m141;


    if (is_in_fov(prm_853))
    {
        add_damage_popup(std::to_string(dmg_at_m141), prm_853, {0, 0, 0});
    }


    if (ele_at_m141 == 56)
    {
        if (prm_855 >= 0)
        {
            if (dmg_at_m141 > 0)
            {
                healhp(
                    prm_855,
                    clamp(
                        rnd(dmg_at_m141 * (150 + prm_857 * 2) / 1000 + 10),
                        1,
                        cdata[prm_855].max_hp / 10 + rnd(5)));
            }
        }
    }
    if (prm_853 == 0)
    {
        gdata(30) = 0;
        if (cdata[prm_853].hp < 0)
        {
            if (evid() != -1)
            {
                if (evid() != 21)
                {
                    cdata[prm_853].hp = 1;
                }
            }
            if (gdata_current_map == 40)
            {
                cdata[prm_853].hp = 1;
            }
        }
    }
    if (dmg_at_m141 <= 0)
    {
        dmglevel_at_m141 = -1;
    }
    else
    {
        dmglevel_at_m141 = dmg_at_m141 * 6 / cdata[prm_853].max_hp;
    }
    if (cdata[prm_853].hp < 0)
    {
        if (prm_853 < 16)
        {
            for (int cnt = 0; cnt < 16; ++cnt)
            {
                if (prm_853 == cnt)
                {
                    continue;
                }
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (cdata[cnt].has_lay_hand() == 0)
                {
                    continue;
                }
                if (cdata[cnt].is_lay_hand_available() == 0)
                {
                    continue;
                }
                cdata[cnt].is_lay_hand_available() = false;
                txtef(9);
                txt(lang(
                    name(cnt)
                        + u8"は叫んだ。「この者にジュアの加護を。レイハンド！」"s,
                    name(cnt) + u8" shout"s + _s(cnt) + u8", "s
                        + u8"\"Lay hand!\""s));
                txt(lang(
                    name(prm_853) + u8"は回復した。"s,
                    name(prm_853) + u8" "s + is(prm_853) + u8" healed."s));
                cdata[prm_853].hp = cdata[prm_853].max_hp / 2;
                animode = 100 + prm_853;
                play_animation(19);
                snd(120);
                break;
            }
        }
        else if (cdata[prm_853].is_hung_on_sand_bag())
        {
            cdata[prm_853].hp = cdata[prm_853].max_hp;
        }
    }
    if (cdata[prm_853].hp >= 0)
    {
        if (dmglevel_at_m141 > 1)
        {
            spillblood(
                cdata[prm_853].position.x,
                cdata[prm_853].position.y,
                1 + rnd(2));
        }
        if (gdata(809) == 1)
        {
            txteledmg(0, c3_at_m141, prm_853, ele_at_m141);
            goto label_1369_internal;
        }
        if (dmglevel_at_m141 > 0)
        {
            if (cdata[prm_853].max_hp / 2 > cdata[prm_853].hp)
            {
                ++dmglevel_at_m141;
                if (cdata[prm_853].max_hp / 4 > cdata[prm_853].hp)
                {
                    ++dmglevel_at_m141;
                    if (cdata[prm_853].max_hp / 10 > cdata[prm_853].hp)
                    {
                        ++dmglevel_at_m141;
                    }
                }
            }
        }
        if (gdata(809) == 2)
        {
            txtcontinue();
            if (dmglevel_at_m141 == -1)
            {
                txt(lang(
                    u8"かすり傷をつけた。"s,
                    u8"make"s + _s(c3_at_m141) + u8" a scratch."s));
            }
            if (dmglevel_at_m141 == 0)
            {
                txtef(5);
                txt(lang(
                    u8"軽い傷を負わせた。"s,
                    u8"slightly wound"s + _s(c3_at_m141) + u8" "s + him(prm_853)
                        + u8"."s));
            }
            if (dmglevel_at_m141 == 1)
            {
                txtef(11);
                txt(lang(
                    u8"傷つけた。"s,
                    u8"moderately wound"s + _s(c3_at_m141) + u8" "s
                        + him(prm_853) + u8"."s));
            }
            if (dmglevel_at_m141 == 2)
            {
                txtef(10);
                txt(lang(
                    u8"深い傷を負わせた。"s,
                    u8"severely wound"s + _s(c3_at_m141) + u8" "s + him(prm_853)
                        + u8"."s));
            }
            if (dmglevel_at_m141 >= 3)
            {
                txtef(3);
                txt(lang(
                    u8"致命傷を与えた。"s,
                    u8"critically wound"s + _s(c3_at_m141) + u8" "s
                        + him(prm_853) + u8"!"s));
            }
            rowact_check(prm_853);
            goto label_1369_internal;
        }
        if (dmglevel_at_m141 == 1)
        {
            if (is_in_fov(prm_853))
            {
                txtef(11);
                txt(lang(
                    name(prm_853) + u8"は痛手を負った。"s,
                    name(prm_853) + u8" scream"s + _s(prm_853) + u8"."s));
            }
        }
        if (dmglevel_at_m141 == 2)
        {
            if (is_in_fov(prm_853))
            {
                txtef(10);
                txt(lang(
                    name(prm_853) + u8"は苦痛にもだえた。"s,
                    name(prm_853) + u8" writhe"s + _s(prm_853)
                        + u8" in pain."s));
            }
        }
        if (dmglevel_at_m141 >= 3)
        {
            if (is_in_fov(prm_853))
            {
                txtef(3);
                txt(lang(
                    name(prm_853) + u8"は悲痛な叫び声をあげた。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" severely hurt!"s));
            }
        }
        if (dmg_at_m141 < 0)
        {
            if (cdata[prm_853].hp > cdata[prm_853].max_hp)
            {
                cdata[prm_853].hp = cdata[prm_853].max_hp;
            }
            if (is_in_fov(prm_853))
            {
                txtef(4);
                txt(lang(
                    name(prm_853) + u8"は回復した。"s,
                    name(prm_853) + u8" "s + is(prm_853) + u8" healed."s));
            }
        }
    label_1369_internal:
        rowact_check(prm_853);
        if (cdata[prm_853].hp < cdata[prm_853].max_hp / 5)
        {
            if (prm_853 != 0)
            {
                if (cdata[prm_853].fear == 0)
                {
                    if (cdata[prm_853].is_immune_to_fear() == 0)
                    {
                        if (dmg_at_m141 * 100 / cdata[prm_853].max_hp + 10
                            > rnd(200))
                        {
                            f_at_m141 = 1;
                        }
                        else
                        {
                            f_at_m141 = 0;
                        }
                        if (prm_855 == 0)
                        {
                            if (trait(44))
                            {
                                f_at_m141 = 0;
                            }
                        }
                        if (f_at_m141)
                        {
                            cdata[prm_853].fear = rnd(20) + 5;
                            if (is_in_fov(prm_853))
                            {
                                txtef(4);
                                txt(lang(
                                    name(prm_853) + u8"は恐怖して逃げ出した。"s,
                                    name(prm_853) + u8" run"s + _s(prm_853)
                                        + u8" away in terror."s));
                            }
                        }
                    }
                }
            }
        }
        if (ele_at_m141)
        {
            if (ele_at_m141 == 59)
            {
                if (rnd(10) < prm_857 / 75 + 4)
                {
                    dmgcon(prm_853, 4, rnd(prm_857 / 3 * 2 + 1));
                }
                if (rnd(20) < prm_857 / 50 + 4)
                {
                    dmgcon(prm_853, 3, rnd(prm_857 / 3 * 2 + 1));
                }
                if (rnd(20) < prm_857 / 50 + 4)
                {
                    dmgcon(prm_853, 5, rnd(prm_857 / 3 * 2 + 1));
                }
                if (rnd(20) < prm_857 / 50 + 4)
                {
                    dmgcon(prm_853, 1, rnd(prm_857 / 3 * 2 + 1));
                }
                if (rnd(20) < prm_857 / 50 + 4)
                {
                    dmgcon(prm_853, 2, rnd(prm_857 / 3 * 2 + 1));
                }
            }
            if (ele_at_m141 == 52)
            {
                if (rnd(3 + (cdata[prm_853].quality >= 4) * 3) == 0)
                {
                    ++cdata[prm_853].paralyzed;
                }
            }
            if (ele_at_m141 == 53)
            {
                dmgcon(prm_853, 4, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 58)
            {
                dmgcon(prm_853, 3, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 54)
            {
                dmgcon(prm_853, 5, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 57)
            {
                dmgcon(prm_853, 5, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 55)
            {
                dmgcon(prm_853, 1, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 61)
            {
                dmgcon(prm_853, 9, rnd(prm_857 + 1));
            }
            if (ele_at_m141 == 62)
            {
                if (prm_853 == 0)
                {
                    modcorrupt(rnd(prm_857 + 1));
                }
            }
            if (ele_at_m141 == 63)
            {
                if (prm_853 == 0 || rnd(3) == 0)
                {
                    item_acid(prm_853, -1);
                }
            }
        }
        if ((ele_at_m141 == 50 || prm_855 == -9) && cdata[prm_853].wet == 0)
        {
            item_fire(prm_853, -1);
        }
        if (ele_at_m141 == 51)
        {
            item_cold(prm_853, -1);
        }
        if (cdata[prm_853].sleep != 0)
        {
            if (ele_at_m141 != 54 && ele_at_m141 != 58 && ele_at_m141 != 59)
            {
                cdata[prm_853].sleep = 0;
                txt(lang(
                    name(prm_853) + u8"は眠りを妨げられた。"s,
                    name(prm_853) + your(prm_853) + u8" sleep "s + is(prm_853)
                        + u8" disturbed."s));
            }
        }
        if (prm_855 == 0)
        {
            hostileaction(0, prm_853);
            gdata(94) = prm_853;
        }
        if (prm_853 == 0)
        {
            if (cdata[prm_853].max_hp / 4 > cdata[prm_853].hp)
            {
                if (config::instance().sound)
                {
                    if (config::instance().heart == 1)
                    {
                        if (!CHECKPLAY(32))
                        {
                            snd(32);
                        }
                    }
                }
            }
        }
        if (cdata[prm_853].explodes())
        {
            if (rnd(3) == 0)
            {
                cdata[prm_853].will_explode_soon() = true;
                txtef(9);
                txt(lang(u8" *カチッ* "s, u8"*click*"s));
            }
        }
        if (cdata[prm_853].splits())
        {
            if (gdata(809) != 1)
            {
                if (dmg_at_m141 > cdata[prm_853].max_hp / 20 || rnd(10) == 0)
                {
                    if (mdata(6) != 1)
                    {
                        int stat = copy_chara(prm_853);
                        if (stat == 1)
                        {
                            txt(lang(
                                name(prm_853) + u8"は分裂した！"s,
                                name(prm_853) + u8" split"s + _s(prm_853)
                                    + u8"!"s));
                        }
                    }
                }
            }
        }
        if (cdata[prm_853].splits2())
        {
            if (gdata(809) != 1)
            {
                if (rnd(3) == 0)
                {
                    if (cdata[prm_853].confused == 0
                        && cdata[prm_853].dimmed == 0
                        && cdata[prm_853].poisoned == 0
                        && cdata[prm_853].paralyzed == 0
                        && cdata[prm_853].blind == 0)
                    {
                        if (mdata(6) != 1)
                        {
                            int stat = copy_chara(prm_853);
                            if (stat == 1)
                            {
                                txt(lang(
                                    name(prm_853) + u8"は分裂した！"s,
                                    name(prm_853) + u8" split"s + _s(prm_853)
                                        + u8"!"s));
                            }
                        }
                    }
                }
            }
        }
        if (cdata[prm_853].is_quick_tempered())
        {
            if (gdata(809) != 1)
            {
                if (cdata[prm_853].furious == 0)
                {
                    if (rnd(20) == 0)
                    {
                        if (is_in_fov(prm_853))
                        {
                            txtef(4);
                            txt(lang(
                                name(prm_853) + u8"は怒りに体を奮わせた！"s,
                                name(prm_853) + u8" "s + is(prm_853)
                                    + u8" engulfed in fury!"s));
                        }
                        cdata[prm_853].furious += rnd(30) + 15;
                    }
                }
            }
        }
        if (prm_855 >= 0)
        {
            f_at_m141 = 0;
            if (cdata[prm_853].relationship <= -3)
            {
                if (cdata[prm_855].original_relationship > -3)
                {
                    if (cdata[prm_853].hate == 0 || rnd(4) == 0)
                    {
                        f_at_m141 = 1;
                    }
                }
            }
            else if (cdata[prm_855].original_relationship <= -3)
            {
                if (cdata[prm_853].hate == 0 || rnd(4) == 0)
                {
                    f_at_m141 = 1;
                }
            }
            if (prm_855 != 0)
            {
                if (cdata[prm_855].enemy_id == prm_853)
                {
                    if (rnd(3) == 0)
                    {
                        f_at_m141 = 1;
                    }
                }
            }
            if (f_at_m141)
            {
                if (prm_853 != 0)
                {
                    cdata[prm_853].enemy_id = prm_855;
                    if (cdata[prm_853].hate == 0)
                    {
                        cdata[prm_853].emotion_icon = 218;
                        cdata[prm_853].hate = 20;
                    }
                    else
                    {
                        cdata[prm_853].hate += 2;
                    }
                }
            }
        }
    }
    if (cdata[prm_853].hp < 0)
    {
        se_at_m141 = eleinfo(ele_at_m141, 1);
        if (se_at_m141)
        {
            snd(se_at_m141, false, false);
        }
        txtef(3);
        if (prm_855 >= 0)
        {
            if (ele_at_m141)
            {
                if (prm_853 >= 16 && gdata(809) == 2)
                {
                    txtcontinue();
                    txteledmg(1, c3_at_m141, prm_853, ele_at_m141);
                }
                else
                {
                    txteledmg(2, c3_at_m141, prm_853, ele_at_m141);
                }
            }
            else
            {
                p_at_m141 = rnd(4);
                if (p_at_m141 == 0)
                {
                    if (prm_853 >= 16 && gdata(809) == 2)
                    {
                        txtcontinue();
                        txt(lang(
                            u8"粉々の肉片に変えた。"s,
                            u8"transform"s + _s(c3_at_m141) + u8" "s
                                + him(prm_853)
                                + u8" into several pieces of meat."s));
                    }
                    else
                    {
                        txt(lang(
                            name(prm_853) + u8"は粉々の肉片に変えられた。"s,
                            name(prm_853) + u8" "s + is(prm_853)
                                + u8" transformed into several pieces of meat."s));
                    }
                }
                if (p_at_m141 == 1)
                {
                    if (prm_853 >= 16 && gdata(809) == 2)
                    {
                        txtcontinue();
                        txt(lang(
                            u8"破壊した。"s,
                            u8"destroy"s + _s(c3_at_m141) + u8" "s
                                + him(prm_853) + u8"."s));
                    }
                    else
                    {
                        txt(lang(
                            name(prm_853) + u8"は破壊された。"s,
                            name(prm_853) + u8" "s + is(prm_853)
                                + u8" killed."s));
                    }
                }
                if (p_at_m141 == 2)
                {
                    if (prm_853 >= 16 && gdata(809) == 2)
                    {
                        txtcontinue();
                        txt(lang(
                            u8"ミンチにした。"s,
                            u8"mince"s + _s(c3_at_m141) + u8" "s + him(prm_853)
                                + u8"."s));
                    }
                    else
                    {
                        txt(lang(
                            name(prm_853) + u8"はミンチにされた。"s,
                            name(prm_853) + u8" "s + is(prm_853)
                                + u8" minced."s));
                    }
                }
                if (p_at_m141 == 3)
                {
                    if (prm_853 >= 16 && gdata(809) == 2)
                    {
                        txtcontinue();
                        txt(lang(
                            u8"殺した。"s,
                            u8"kill"s + _s(c3_at_m141) + u8" "s + him(prm_853)
                                + u8"."s));
                    }
                    else
                    {
                        txt(lang(
                            name(prm_853) + u8"は殺された。"s,
                            name(prm_853) + u8" "s + is(prm_853)
                                + u8" slain."s));
                    }
                }
            }
            ndeathcause = lang(
                cdatan(0, cc) + u8"に殺された。"s,
                u8"was killed by "s + cdatan(0, cc));
        }
        else
        {
            if (prm_855 == -11)
            {
                txt(lang(
                    name(prm_853) + u8"は見えざる手に葬られた。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" assassinated by the unseen hand."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"見えざる手に葬られた。"s,
                        u8"got assassinated by the unseen hand"s);
                }
            }
            if (prm_855 == -1)
            {
                txt(lang(
                    name(prm_853) + u8"は罠にかかって死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" caught in a trap and die"s + _s(prm_853)
                        + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"罠にかかって死んだ。"s,
                        u8"got caught in a trap and died"s);
                }
            }
            if (prm_855 == -2)
            {
                txt(lang(
                    name(prm_853) + u8"はマナの反動で死んだ。"s,
                    name(prm_853) + u8" die"s + _s(prm_853)
                        + u8" from over-casting."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"マナの反動で消滅した。"s,
                        u8"was completely wiped by magic reaction"s);
                }
            }
            if (prm_855 == -3)
            {
                txt(lang(
                    name(prm_853) + u8"は餓死した。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" starved to death."s));
                if (prm_853 == 0)
                {
                    ndeathcause =
                        lang(u8"飢え死にした。"s, u8"was starved to death"s);
                }
            }
            if (prm_855 == -4)
            {
                txt(lang(
                    name(prm_853) + u8"は毒に蝕まれ死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" killed with poison."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"毒にもがき苦しみながら死んだ。"s,
                        u8"miserably died from poison"s);
                }
            }
            if (prm_855 == -13)
            {
                txt(lang(
                    name(prm_853) + u8"は出血多量で死んだ。"s,
                    name(prm_853) + u8" die"s + _s(prm_853)
                        + u8" from loss of blood"s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"血を流しすぎて死んだ。"s,
                        u8"died from loss of blood"s);
                }
            }
            if (prm_855 == -5)
            {
                txt(lang(
                    name(prm_853) + u8"は呪いの力で死んだ。"s,
                    name(prm_853) + u8" die"s + _s(prm_853)
                        + u8" from curse."s));
                if (prm_853 == 0)
                {
                    ndeathcause =
                        lang(u8"呪い殺された。"s, u8"died from curse"s);
                }
            }
            if (prm_855 == -7)
            {
                txt(lang(
                    name(prm_853) + u8"は階段から転げ落ちて死んだ。"s,
                    name(prm_853) + u8" tumble"s + _s(prm_853)
                        + u8" from stairs and die"s + _s(prm_853) + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"階段から転げ落ちて亡くなった。"s,
                        u8"tumbled from stairs and died"s);
                }
            }
            if (prm_855 == -8)
            {
                txt(lang(
                    name(prm_853) + u8"は聴衆に殺された。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" killed by an audience."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"演奏中に激怒した聴衆に殺された。"s,
                        u8"was killed by an audience"s);
                }
            }
            if (prm_855 == -9)
            {
                txt(lang(
                    name(prm_853) + u8"は焼け死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" burnt and turned into ash."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"焼けて消滅した。"s,
                        u8"was burnt and turned into ash"s);
                }
            }
            if (prm_855 == -12)
            {
                txt(lang(
                    name(prm_853) + u8"は食中毒で死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" killed by food poisoning."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"食中毒で倒れた。"s,
                        u8"got killed by food poisoning"s);
                }
            }
            if (prm_855 == -14)
            {
                txt(lang(
                    name(prm_853) + u8"はエーテルに侵食され死んだ。"s,
                    name(prm_853) + u8" die"s + _s(prm_853)
                        + u8" of the Ether disease."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"エーテルの病に倒れた。"s,
                        u8"died of the Ether disease"s);
                }
            }
            if (prm_855 == -15)
            {
                txt(lang(
                    name(prm_853) + u8"は溶けて液体になった。"s,
                    name(prm_853) + u8" melt"s + _s(prm_853) + u8" down."s));
                if (prm_853 == 0)
                {
                    ndeathcause =
                        lang(u8"溶けて液体になった。"s, u8"melted down"s);
                }
            }
            if (prm_855 == -16)
            {
                txt(lang(
                    name(prm_853) + u8"はバラバラになった。"s,
                    name(prm_853) + u8" shatter"s + _s(prm_853) + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(u8"自殺した。"s, u8"committed suicide"s);
                }
            }
            if (prm_855 == -17)
            {
                txt(lang(
                    name(prm_853) + u8"は核爆発に巻き込まれて塵となった。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" turned into atoms."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"核爆発に巻き込まれて死んだ。"s,
                        u8"was killed by an atomic bomb"s);
                }
            }
            if (prm_855 == -18)
            {
                txt(lang(
                    name(prm_853)
                        + u8"はアイアンメイデンの中で串刺しになって果てた。"s,
                    name(prm_853) + u8" step"s + _s(prm_853)
                        + u8" in an iron maiden and die"s + _s(prm_853)
                        + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"アイアンメイデンにはさまれて死んだ。"s,
                        u8"stepped in an iron maiden and died"s);
                }
            }
            if (prm_855 == -19)
            {
                txt(lang(
                    name(prm_853) + u8"はギロチンで首をちょんぎられて死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853)
                        + u8" guillotined and die"s + _s(prm_853) + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"ギロチンで首を落とされて死んだ。"s,
                        u8"was guillotined"s);
                }
            }
            if (prm_855 == -20)
            {
                txt(lang(
                    name(prm_853) + u8"は首を吊った。"s,
                    name(prm_853) + u8" hang"s + _s(prm_853) + u8" "s
                        + his(prm_853) + u8"self."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"首を吊った。"s, u8"commited suicide by hanging"s);
                }
            }
            if (prm_855 == -21)
            {
                txt(lang(
                    name(prm_853) + u8"はもちを喉に詰まらせて死んだ。"s,
                    name(prm_853) + u8" choke"s + _s(prm_853)
                        + u8" on mochi and die."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        u8"もちを喉に詰まらせて死んだ。"s,
                        u8"ate mochi and died"s);
                }
            }
            if (prm_855 == -6)
            {
                p_at_m141(0) = -1;
                p_at_m141(1) = 0;
                for (const auto& cnt : items(0))
                {
                    if (inv[cnt].number == 0)
                    {
                        continue;
                    }
                    if (inv[cnt].weight > p_at_m141(1))
                    {
                        p_at_m141(0) = cnt;
                        p_at_m141(1) = inv[cnt].weight;
                    }
                }
                if (p_at_m141 == -1)
                {
                    rtvaln = lang(u8"荷物"s, u8"backpack"s);
                }
                else
                {
                    rtvaln = itemname(p_at_m141);
                }
                txt(lang(
                    name(prm_853) + u8"は"s + rtvaln
                        + u8"の重さに耐え切れず死んだ。"s,
                    name(prm_853) + u8" "s + is(prm_853) + u8" squashed by "s
                        + rtvaln + u8"."s));
                if (prm_853 == 0)
                {
                    ndeathcause = lang(
                        rtvaln + u8"の重さに耐え切れず潰れた。"s,
                        u8"was squashed by "s + rtvaln);
                }
            }
        }
        if (prm_855 == -9 || ele_at_m141 == 50)
        {
            addmef(
                cdata[prm_853].position.x,
                cdata[prm_853].position.y,
                5,
                24,
                rnd(10) + 5,
                100,
                prm_855);
        }
        if (ele_at_m141 == 56)
        {
            if (prm_855 >= 0)
            {
                if (dmg_at_m141 > 0)
                {
                    healhp(cc, rnd(dmg_at_m141 * (200 + prm_857) / 1000 + 5));
                }
            }
        }
        if (gdata_mount != prm_853 || prm_853 == 0)
        {
            cell_removechara(
                cdata[prm_853].position.x, cdata[prm_853].position.y);
        }
        if (cdata[prm_853].breaks_into_debris())
        {
            if (is_in_fov(prm_853))
            {
                x = cdata[prm_853].position.x;
                y = cdata[prm_853].position.y;
                snd(45, false, false);
                animeblood(prm_853, 1, ele_at_m141);
            }
            spillfrag(cdata[prm_853].position.x, cdata[prm_853].position.y, 3);
        }
        else
        {
            snd(8 + rnd(2), false, false);
            animeblood(prm_853, 0, ele_at_m141);
            spillblood(cdata[prm_853].position.x, cdata[prm_853].position.y, 4);
        }
        if (cdata[prm_853].character_role == 0)
        {
            cdata[prm_853].state = 0;
        }
        else if (cdata[prm_853].character_role == 13)
        {
            cdata[prm_853].state = 4;
            cdata[prm_853].time_to_revive = gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12 + 24
                + rnd(12);
        }
        else
        {
            cdata[prm_853].state = 2;
            cdata[prm_853].time_to_revive = gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12 + 48;
        }
        if (prm_853 != 0)
        {
            if (prm_853 < 16)
            {
                modimp(prm_853, -10);
                cdata[prm_853].state = 6;
                cdata[prm_853].current_map = 0;
                if (cdata[prm_853].is_escorted() == 1)
                {
                    evadd(15, cdata[prm_853].id);
                    cdata[prm_853].state = 0;
                }
                if (cdata[prm_853].is_escorted_in_sub_quest() == 1)
                {
                    cdata[prm_853].state = 0;
                }
            }
        }
        if (prm_853 == 0)
        {
            ++gdata_death_count;
        }
        lua::on_chara_removal(prm_853);
        if (prm_853 == gdata(94))
        {
            gdata(94) = 0;
        }
        if (prm_855 >= 0)
        {
            if (prm_855 != 0)
            {
                customtalk(prm_855, 103);
            }
            exp_at_m141 = clamp(cdata[prm_853].level, 1, 200)
                    * clamp((cdata[prm_853].level + 1), 1, 200)
                    * clamp((cdata[prm_853].level + 2), 1, 200) / 20
                + 8;
            if (cdata[prm_853].level > cdata[prm_855].level)
            {
                exp_at_m141 /= 4;
            }
            if (cdata[prm_853].splits() || cdata[prm_853].splits2())
            {
                exp_at_m141 /= 20;
            }
            cdata[prm_855].experience += exp_at_m141;
            if (prm_855 == 0)
            {
                gdata_sleep_experience += exp_at_m141;
            }
            cdata[prm_855].hate = 0;
            if (prm_855 < 16)
            {
                cdata[prm_855].enemy_id = 0;
                cdata[0].enemy_id = 0;
                gdata(94) = 0;
            }
        }
        if (prm_853 != 0)
        {
            if (gdata_current_map != 35)
            {
                if (gdata_current_map != 42)
                {
                    if (cdata[prm_853].id == 2)
                    {
                        evadd(1);
                    }
                    if (cdata[prm_853].id == 141)
                    {
                        txtef(2);
                        txt(lang(
                            u8"愚者の魔石を手に入れた！"s,
                            u8"You obtain the fool's magic stone!"s));
                        snd(51);
                        gdata_magic_stone_of_fool = 1;
                    }
                    if (cdata[prm_853].id == 143)
                    {
                        txtef(2);
                        txt(lang(
                            u8"覇者の魔石を手に入れた！"s,
                            u8"You obtain the king's magic stone!"s));
                        snd(51);
                        gdata_magic_stone_of_king = 1;
                    }
                    if (cdata[prm_853].id == 144)
                    {
                        txtef(2);
                        txt(lang(
                            u8"賢者の魔石を手に入れた！"s,
                            u8"You obtain the sage's magic stone!"s));
                        snd(51);
                        gdata_magic_stone_of_sage = 1;
                    }
                    if (cdata[prm_853].id == 242)
                    {
                        if (gdata_novice_knight < 1000)
                        {
                            gdata_novice_knight = 2;
                            snd(44);
                            txtef(2);
                            txt(lang(
                                u8"ジャーナルが更新された。"s,
                                u8"Your journal has been updated."s));
                        }
                    }
                    if (cdata[prm_853].id == 257)
                    {
                        if (gdata_pyramid_trial < 1000)
                        {
                            gdata_pyramid_trial = 1000;
                            snd(44);
                            txtef(2);
                            txt(lang(
                                u8"ジャーナルが更新された。"s,
                                u8"Your journal has been updated."s));
                            txt(lang(
                                u8"クエストを達成した！"s,
                                u8"You have completed the quest!"s));
                            snd(51);
                        }
                    }
                    if (cdata[prm_853].id == 300)
                    {
                        if (gdata_minotaur_king < 1000)
                        {
                            gdata_minotaur_king = 2;
                            snd(44);
                            txtef(2);
                            txt(lang(
                                u8"ジャーナルが更新された。"s,
                                u8"Your journal has been updated."s));
                        }
                    }
                    if (cdata[prm_853].id == 318)
                    {
                        evadd(
                            27,
                            cdata[prm_853].position.x,
                            cdata[prm_853].position.y);
                    }
                    if (cdata[prm_853].id == 319)
                    {
                        ++gdata_kill_count_of_little_sister;
                        txtef(3);
                        txt(lang(
                            u8"リトルシスター殺害"s
                                + gdata_kill_count_of_little_sister
                                + u8"回、救出"s
                                + gdata_save_count_of_little_sister + u8"回。"s,
                            u8"You have saved little sister "s
                                + gdata_save_count_of_little_sister
                                + u8" times and killed "s
                                + gdata_kill_count_of_little_sister
                                + u8" times."s));
                    }
                    if (gdata_current_dungeon_level
                            == adata(10, gdata_current_map)
                        || gdata_current_map == 42)
                    {
                        if (adata(20, gdata_current_map) == prm_853
                            && cdata[prm_853].is_lord_of_dungeon() == 1)
                        {
                            evadd(5);
                        }
                    }
                    if (cdata[prm_853].id == 331)
                    {
                        if (rnd(4) == 0)
                        {
                            evadd(
                                28,
                                cdata[prm_853].position.x,
                                cdata[prm_853].position.y);
                        }
                    }
                    check_quest();
                }
                else if (gdata_current_map == 42)
                {
                    if (adata(20, gdata_current_map) == prm_853
                        && cdata[prm_853].is_lord_of_dungeon() == 1)
                    {
                        evadd(5);
                    }
                }
            }
        }
        if (prm_853 != 0)
        {
            ++npcmemory(0, cdata[prm_853].id);
            customtalk(prm_853, 102);
            if (prm_853 < 16)
            {
                txt(lang(
                    u8"あなたは悲しくなった。"s,
                    u8"You feel sad for a moment."s));
            }
        }
        --gdata_other_character_count;
        if (gdata_mount)
        {
            if (prm_853 == gdata_mount)
            {
                txt(lang(
                    name(0) + u8"は"s + name(prm_853) + u8"の死体から降りた。"s,
                    name(0) + u8" get off the corpse of "s + name(prm_853)
                        + u8"."s));
                ride_end();
            }
        }
        check_kill(prm_855, prm_853);
        catitem = 0;
        rollanatomy = 0;
        if (rnd(60) == 0)
        {
            rollanatomy = 1;
        }
        if (prm_855 >= 0)
        {
            if (cdata[prm_855].id == 260)
            {
                catitem = prm_855;
            }
            if (int(std::sqrt(sdata(161, prm_855))) > rnd(150))
            {
                rollanatomy = 1;
            }
            skillexp(161, prm_855, 10 + rollanatomy * 4);
        }
        rc = prm_853;
        label_1573();
        if (gdata_current_map == 40)
        {
            if (rnd(5) == 0)
            {
                snd(69);
            }
        }
        if (cdata[prm_853].is_death_master() == 1)
        {
            txt(lang(
                u8"死の宣告は無効になった。"s, u8"The death word breaks."s));
            for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                p_at_m141 = cnt;
                for (int cnt = 0; cnt < 16; ++cnt)
                {
                    if (cdata[p_at_m141].buffs[cnt].id == 0)
                    {
                        break;
                    }
                    if (cdata[p_at_m141].buffs[cnt].id == 16)
                    {
                        delbuff(p_at_m141, cnt);
                        --cnt;
                        continue;
                    }
                }
            }
        }
        if (prm_855 == 0)
        {
            if (gdata_catches_god_signal)
            {
                if (rnd(20) == 0)
                {
                    txtgod(cdata[0].god_id, 9);
                }
            }
        }
        end_dmghp();
        return 0;
    }
    end_dmghp();
    return 1;
}



void end_dmghp()
{
    if (cdata[prm_853].is_hung_on_sand_bag())
    {
        if (is_in_fov(prm_853))
        {
            txt(u8"("s + dmg_at_m141 + u8")"s + lang(u8" "s, ""s));
            if (rnd(20) == 0)
            {
                txt(lang(u8"「くっ！」"s, u8"\"Kill me already!\""s),
                    lang(u8"「まだまだ！」"s, u8"\"No..not yet...!\""s),
                    lang(
                        u8"「もう限界…」"s,
                        u8"\"I can't take it anymore...\""s),
                    lang(u8"「うぐぐ」"s, u8"\"Argh!\""s),
                    lang(u8"「あう」"s, u8"\"Uhhh\""s),
                    lang(u8"「ああんっ」"s, u8"\"Ugggg\""s));
            }
        }
    }
    gdata(809) = 0;
    txt3rd = 0;
    return;
}



void dmgmp(int cc, int delta)
{
    cdata[cc].mp -= delta;
    if (cdata[cc].mp < -999999)
    {
        cdata[cc].mp = -999999;
    }
    if (cdata[cc].mp < 0)
    {
        gain_skill_experience_mana_capacity(cc);
        int damage = -cdata[cc].mp * 400 / (100 + sdata(164, cc) * 10);
        if (cc == 0)
        {
            if (trait(156) == 1)
            {
                damage /= 2;
            }
        }
        else
        {
            damage /= 5;
            if (damage < 10)
                return;
        }
        txt(lang(
            u8"マナの反動が"s + name(cc) + u8"の精神を蝕んだ！"s,
            u8"Magic reaction hurts "s + name(cc) + u8"!"s));
        dmghp(cc, damage, -2);
    }
}



void dmgsp(int cc, int delta)
{
    if (cc != 0 || debug::voldemort)
        return;

    if (cdata[cc].sp >= -100)
    {
        cdata[cc].sp -= delta;
    }
}



void healsan(int prm_862, int prm_863)
{
    cdata[prm_862].insanity -= prm_863;
    if (cdata[prm_862].insanity < 0)
    {
        cdata[prm_862].insanity = 0;
    }
    return;
}



void damage_insanity(int cc, int delta)
{
    if (cdata[cc].quality >= 4)
        return;

    int resistance = std::max(sdata(54, cc) / 50, 1);
    if (resistance > 10)
        return;

    delta /= resistance;
    if (cc < 16)
    {
        if (trait(166))
        {
            delta -= rnd(4);
        }
    }
    delta = std::max(delta, 0);
    cdata[cc].insanity += delta;
    if (rnd(10) == 0 || rnd(delta + 1) > 5 || rnd(cdata[cc].insanity + 1) > 50)
    {
        dmgcon(cc, 11, 100);
    }
}



bool actionsp(int cc, int sp)
{
    if (cc != 0 || debug::voldemort)
        return true;

    if (cdata[cc].sp < 50 && cdata[cc].sp < rnd(75))
    {
        dmgsp(cc, sp);
        return false;
    }
    dmgsp(cc, sp);
    return true;
}



int advfavoriteskill(int prm_868)
{
    randomize(prm_868);
    rtval = 0;
    i_at_m145 = 0;
    while (1)
    {
        rtval(i_at_m145) = rnd(300) + 100;
        if (!the_ability_db[rtval(i_at_m145)])
        {
            continue;
        }
        ++i_at_m145;
        if (i_at_m145 >= 2)
        {
            break;
        }
    }
    randomize();
    return i_at_m145;
}



int advfavoritestat(int prm_869)
{
    randomize(prm_869);
    i_at_m145 = rnd(8) + 10;
    randomize();
    return i_at_m145;
}



void modweight(int cc, int delta, bool force)
{
    int min = cdata[cc].height * cdata[cc].height * 18 / 25000;
    int max = cdata[cc].height * cdata[cc].height * 24 / 10000;

    if (cdata[cc].weight < min)
    {
        cdata[cc].weight = min;
        return;
    }
    if (!force && delta > 0)
    {
        if (cdata[cc].weight > max)
        {
            return;
        }
    }

    cdata[cc].weight =
        cdata[cc].weight * (100 + delta) / 100 + (delta > 0) - (delta < 0);

    if (cdata[cc].weight <= 0)
    {
        cdata[cc].weight = 1;
    }
    if (is_in_fov(cc))
    {
        if (delta >= 3)
        {
            txt(lang(
                name(cc) + u8"は太った。"s,
                name(cc) + u8" gain"s + _s(cc) + u8" weight."s));
        }
        if (delta <= -3)
        {
            txt(lang(
                name(cc) + u8"は痩せた。"s,
                name(cc) + u8" lose"s + _s(cc) + u8" weight."s));
        }
    }
}



void modheight(int cc, int delta)
{
    cdata[cc].height =
        cdata[cc].height * (100 + delta) / 100 + (delta > 0) - (delta < 0);
    if (cdata[cc].height <= 1)
    {
        cdata[cc].height = 1;
    }
    if (is_in_fov(cc))
    {
        if (delta > 0)
        {
            txt(lang(
                name(cc) + u8"の身長は少し伸びた。"s,
                name(cc) + u8" grow"s + _s(cc) + u8" taller."s));
        }
        if (delta < 0)
        {
            txt(lang(
                name(cc) + u8"の身長は少し縮んだ。"s,
                name(cc) + u8" grow"s + _s(cc) + u8" smaller."s));
        }
    }
}



void cure_anorexia(int cc)
{
    if (cdata[cc].has_anorexia() == 0)
        return;

    cdata[cc].has_anorexia() = false;
    if (is_in_fov(cc) || cc < 16)
    {
        txt(lang(
            name(cc) + u8"の拒食症は治った。"s,
            name(cc) + u8" manage"s + _s(cc)
                + u8" to recover from anorexia."s));
        snd(65);
    }
}



void chara_vomit(int prm_876)
{
    int p_at_m146 = 0;
    ++cdata[prm_876].anorexia_count;
    if (is_in_fov(prm_876))
    {
        snd(104);
        txt(lang(
            name(prm_876) + u8"は吐いた。"s,
            name(prm_876) + u8" vomit"s + _s(prm_876) + u8"."s));
    }
    if (cdata[prm_876].is_pregnant())
    {
        cdata[prm_876].is_pregnant() = false;
        if (is_in_fov(prm_876))
        {
            txt(lang(
                name(prm_876) + u8"は体内のエイリアンを吐き出した！"s,
                name(prm_876) + u8" spit"s + _s(prm_876)
                    + u8" alien children from "s + his(prm_876) + u8" body!"s));
        }
    }
    if (cdata[prm_876].buffs[0].id != 0)
    {
        for (int cnt = 0; cnt < 16; ++cnt)
        {
            if (cdata[prm_876].buffs[cnt].id == 0)
            {
                break;
            }
            if (the_buff_db[cdata[prm_876].buffs[cnt].id]->type
                == buff_data::type_t::food)
            {
                delbuff(prm_876, cnt);
                --cnt;
                continue;
            }
        }
    }
    if (mdata(6) != 1)
    {
        p_at_m146 = 2;
        for (const auto& cnt : items(-1))
        {
            if (inv[cnt].number > 0)
            {
                if (inv[cnt].id == 704)
                {
                    ++p_at_m146;
                }
            }
        }
        if (rnd(p_at_m146 * p_at_m146 * p_at_m146) == 0 || prm_876 == 0)
        {
            flt();
            int stat = itemcreate(
                -1,
                704,
                cdata[prm_876].position.x,
                cdata[prm_876].position.y,
                0);
            if (stat != 0)
            {
                if (prm_876 != 0)
                {
                    inv[ci].subname = cdata[prm_876].id;
                }
            }
        }
    }
    if (cdata[prm_876].has_anorexia() == 0)
    {
        if ((prm_876 < 16 && cdata[prm_876].anorexia_count > 10)
            || (prm_876 >= 16 && rnd(4) == 0))
        {
            if (rnd(5) == 0)
            {
                cdata[prm_876].has_anorexia() = true;
                if (is_in_fov(prm_876))
                {
                    txt(lang(
                        name(prm_876) + u8"は拒食症になった。"s,
                        name(prm_876) + u8" develop"s + _s(prm_876)
                            + u8" anorexia."s));
                    snd(65);
                }
            }
        }
    }
    else
    {
        skillmod(10, prm_876, -50);
        skillmod(11, prm_876, -75);
        skillmod(17, prm_876, -100);
    }
    dmgcon(prm_876, 7, 100);
    modweight(prm_876, -(1 + rnd(5)));
    if (cdata[prm_876].nutrition <= 0)
    {
        dmghp(prm_876, 9999, -3);
    }
    cdata[prm_876].nutrition -= 3000;
    return;
}



void eatstatus(curse_state_t curse_state, int eater)
{
    if (cdata[eater].state != 1)
        return;

    if (is_cursed(curse_state))
    {
        cdata[eater].nutrition -= 1500;
        if (is_in_fov(eater))
        {
            txt(lang(
                name(eater) + u8"は嫌な感じがした。"s,
                name(eater) + u8" feel"s + _s(eater) + u8" bad."s));
        }
        chara_vomit(eater);
    }
    else if (curse_state == curse_state_t::blessed)
    {
        if (is_in_fov(eater))
        {
            txt(lang(
                name(eater) + u8"は良い予感がした。"s,
                name(eater) + u8" feel"s + _s(eater) + u8" good."s));
        }
        if (rnd(5) == 0)
        {
            addbuff(eater, 19, 100, 500 + rnd(500));
        }
        healsan(eater, 2);
    }
}



int chara_anorexia(int prm_879)
{
    if (cdata[prm_879].has_anorexia() == 0)
    {
        return 0;
    }
    chara_vomit(prm_879);
    return 1;
}



void sickifcursed(curse_state_t curse_state, int drinker, int prm_882)
{
    if (!is_cursed(curse_state))
        return;

    if (rnd(prm_882) == 0)
    {
        if (is_in_fov(drinker))
        {
            txt(lang(
                name(drinker) + u8"は気分が悪くなった。"s,
                name(drinker) + u8" feel"s + _s(drinker) + u8" grumpy."s));
        }
        dmgcon(drinker, 12, 200);
    }
}



int net_send(const std::string& prm_883, int prm_884)
{
    std::string chattemp;
    std::string msg_at_m147;
    if (config::instance().net == 0)
    {
        return 0;
    }
    chattemp = prm_883;
    if (prm_884 == 0)
    {
        fix_input_chat2(chattemp);
    }
    fix_input_chat(chattemp);
    if (prm_884 == 0)
    {
        url_at_m147 = chatsendurl;
        msg_at_m147 = u8"&comment="s + chattemp;
    }
    else if (gdata_wizard)
    {
        return 1;
    }
    conurl_at_m147 = u8"hpcgi3.nifty.com"s;
    if (prm_884 == 1)
    {
        conurl_at_m147 = cgiurl3;
        url_at_m147 = votesendurl;
        msg_at_m147 = u8"&vote="s + chattemp;
    }
    if (prm_884 == 2)
    {
        conurl_at_m147 = cgiurl3;
        url_at_m147 = votesendurl;
        msg_at_m147 = u8"&namber="s + chattemp;
    }
    if (prm_884 == 0)
    {
        conurl_at_m147 = cgiurl2;
    }
    {
        int stat = sockopen(0, conurl_at_m147, 80);
        if (stat)
        {
            sockclose();
            txt(u8"["s + stat + u8"]"s
                + lang(
                      u8"ネットに繋がっていない。"s,
                      u8"You need an internet connection."s));
            return 0;
        }
    }
    {
        int stat = sockput(u8"GET "s + url_at_m147 + msg_at_m147 +
        u8" HTTP/1.0\nHost:www.nifty.com???\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Win 9x 4.90)\n\n"s);
        if (stat)
        {
            sockclose();
            txt(lang(u8"送信に失敗した。"s, u8"Failed to send a message."s));
            return 0;
        }
    }
    sockclose();
    return 1;
}



int net_read(int prm_885)
{
    int lastchat = 0;
    std::string a_at_m147;
    int sz_at_m147 = 0;
    int t_at_m147 = 0;
    int header_at_m147 = 0;
    int tail_at_m147 = 0;
    int chat_count_at_m147 = 0;
    int count_latest_at_m147 = 0;
    std::string chat_date_at_m147;
    std::string chat_msg_at_m147;
    std::string chat_ip_at_m147;
    chatnew = "";
    netbuf = "";
    if (config::instance().net == 0)
    {
        return 0;
    }
    if (prm_885 == 5)
    {
        url_at_m147 = textreadurl;
        conurl_at_m147 = cgiurl3;
    }
    if (prm_885 == 0)
    {
        url_at_m147 = chatreadurl;
        conurl_at_m147 = cgiurl2;
    }
    if (prm_885 == 1)
    {
        url_at_m147 = votereadurl;
        conurl_at_m147 = cgiurl3;
    }
    if (prm_885 == 2)
    {
        url_at_m147 = u8"/rfish/userfile/cliplog.txt"s;
        conurl_at_m147 = u8"homepage3.nifty.com"s;
    }
    if (prm_885 == 3)
    {
        url_at_m147 = u8"/rfish/file/welcome.txt"s;
        conurl_at_m147 = u8"homepage3.nifty.com"s;
    }
    if (prm_885 == 4)
    {
        url_at_m147 = u8"http://homepage3.nifty.com/rfish/file/server.txt"s;
        conurl_at_m147 = u8"homepage3.nifty.com"s;
    }
    {
        int stat = sockopen(0, conurl_at_m147, 80);
        if (stat)
        {
            sockclose();
            return 0;
        }
    }
    {
        int stat = sockput(
            u8"GET "s + url_at_m147
            + u8" HTTP/1.0\nHost:???\nUser-Agent: HSP ver3.0\n\n"s);
        if (stat)
        {
            sockclose();
            return 0;
        }
    }
    a_at_m147 = "";
    sz_at_m147 = 0;
    t_at_m147 = 0;
label_1393_internal:
    await(0);
    ++t_at_m147;
    if (t_at_m147 > 10000)
    {
        if (getkey(snail::key::escape))
        {
            txt(u8"[Chat Skipped]"s);
            sockclose();
            return 0;
        }
    }
    {
        int stat = sockget(a_at_m147, 64);
        if (stat)
        {
            sockclose();
            return 0;
        }
    }
    if (a_at_m147[0] == 0)
    {
        goto label_1394_internal;
        return 0;
    }
    netbuf += a_at_m147;
    sz_at_m147 += 64;
    if (sz_at_m147 > 30000)
    {
        goto label_1394_internal;
        return 0;
    }
    goto label_1393_internal;
label_1394_internal:
    sockclose();
    if (prm_885 == 1 || prm_885 == 4)
    {
        header_at_m147 = instr(netbuf, 0, u8"\n\n"s) + 4;
    }
    else
    {
        header_at_m147 = instr(netbuf, 0, u8"<!--START-->"s) + 13;
    }
    for (int cnt = 0;; ++cnt)
    {
        if (prm_885 == 4)
        {
            netbuf = strmid(netbuf, header_at_m147, 2000);
            break;
        }
        if (prm_885 == 5)
        {
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            if (tail_at_m147 == -1)
            {
                break;
            }
            listn(0, listmax) = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 1;
            ++listmax;
        }
        if (prm_885 == 1)
        {
            tail_at_m147 = instr(netbuf, header_at_m147, u8"<>"s);
            if (tail_at_m147 == -1)
            {
                break;
            }
            if (listmax > 100)
            {
                break;
            }
            list(0, listmax) =
                elona::stoi(strmid(netbuf, header_at_m147, tail_at_m147));
            header_at_m147 += tail_at_m147 + 2;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"<>"s);
            listn(0, listmax) =
                ""s + strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 2;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"<>"s);
            list(1, listmax) =
                elona::stoi(strmid(netbuf, header_at_m147, tail_at_m147));
            header_at_m147 += tail_at_m147 + 2;
            listn(1, listmax) = ""s + list(1, listmax);
            tail_at_m147 = instr(netbuf, header_at_m147, u8"<>"s);
            header_at_m147 += tail_at_m147 + 2;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"<>"s);
            header_at_m147 += tail_at_m147 + 3;
            ++listmax;
        }
        if (prm_885 == 0)
        {
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            if (tail_at_m147 == -1)
            {
                break;
            }
            chat_count_at_m147 =
                elona::stoi(strmid(netbuf, header_at_m147, tail_at_m147));
            header_at_m147 += tail_at_m147 + 1;
            if (cnt == 0)
            {
                if (chat_count_at_m147 > count_latest_at_m147)
                {
                    count_latest_at_m147 = chat_count_at_m147;
                }
            }
            if (cnt == 1)
            {
                if (lastchat == 0)
                {
                    break;
                }
            }
            if (chat_count_at_m147 <= lastchat)
            {
                break;
            }
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            chat_date_at_m147 = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 1;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            chat_msg_at_m147 = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 1;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            chat_ip_at_m147 = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 2;
            chatnew += ""s + chat_msg_at_m147 + u8"\n"s;
        }
        if (prm_885 == 3)
        {
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            if (tail_at_m147 == -1)
            {
                break;
            }
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            s = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 1;
            tail_at_m147 = instr(netbuf, header_at_m147, u8"%"s);
            s(1) = strmid(netbuf, header_at_m147, tail_at_m147);
            header_at_m147 += tail_at_m147 + 1;
            break;
        }
    }
    if (prm_885 == 0)
    {
        lastchat = count_latest_at_m147;
    }
    return 1;
}



int net_dllist(const std::string& prm_886, int prm_887)
{
    std::string file_at_m147;
    int size_at_m147 = 0;
    int p_at_m147 = 0;
    int f_at_m147 = 0;
    int nxt_at_m147 = 0;
    std::string s_at_m147;
    netinit();
    neturl(u8"http://homepage3.nifty.com/rfish/userfile/"s);
    file_at_m147 = (filesystem::dir::user() / u8"net.tmp").generic_string();
    if (fs::exists(file_at_m147))
    {
        elona_delete(file_at_m147);
    }
    netdlname(file_at_m147);
    netload(u8"cliplog.txt"s);
    if (!fs::exists(file_at_m147))
    {
        return 0;
    }
    notesel(netbuf);
    {
        netbuf(0).clear();
        std::ifstream in{file_at_m147, std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            netbuf(0) += tmp + '\n';
        }
    }
    size_at_m147 = fs::file_size(file_at_m147);
    p_at_m147 = 0;
    for (int cnt = 0; cnt < 10000; ++cnt)
    {
        if (!strutil::contains(netbuf(0), u8"<", p_at_m147)
            || p_at_m147 + 1 >= size_at_m147)
        {
            break;
        }
        f_at_m147 = 0;
        for (int cnt = 0; cnt < 14; ++cnt)
        {
            nxt_at_m147 = instr(netbuf, p_at_m147, u8"<"s);
            if (nxt_at_m147 == -1)
            {
                break;
            }
            s_at_m147 = strmid(netbuf, p_at_m147, nxt_at_m147);
            p_at_m147 += nxt_at_m147 + 2;
            if (cnt == 0)
            {
                list(0, listmax) = listmax;
                list(1, listmax) = elona::stoi(s_at_m147);
            }
            if (cnt == 2)
            {
                listn(0, listmax) = ""s + s_at_m147;
                listn(1, listmax) = u8"net"s;
            }
            if (cnt == 3)
            {
                list(2, listmax) = elona::stoi(s_at_m147);
                if (elona::stoi(s_at_m147) != 100001)
                {
                    if (prm_887 == 0)
                    {
                        f_at_m147 = 1;
                    }
                }
            }
            if (cnt == 5)
            {
                listn(0, listmax) += u8" "s + s_at_m147;
            }
            if (cnt == 9)
            {
                if (s_at_m147 != prm_886)
                {
                    f_at_m147 = 1;
                }
            }
        }
        if (f_at_m147 == 0)
        {
            ++listmax;
        }
        ++p_at_m147;
    }
    return 1;
}



int net_dl(const std::string& prm_888, const std::string& prm_889)
{
    if (fs::exists(filesystem::dir::user() / prm_889))
    {
        elona_delete(filesystem::dir::user() / prm_889);
    }
    neturl(u8"http://homepage3.nifty.com/rfish/userfile/"s);
    netdlname((filesystem::dir::user() / prm_889).generic_string());
    netload(prm_888);
    if (!fs::exists(filesystem::dir::user() / u8"user" / prm_889))
    {
        return 0;
    }
    return 1;
}



void initialize_server_info()
{
    elona_vector1<std::string> serverlist;
    SDIM1(cgiurl2);
    SDIM1(cgiurl3);
    SDIM2(serverlist, 200);
    notesel(serverlist);
    int stat = net_read(4);
    if (stat == 1 && config::instance().serverlist == 0)
    {
        serverlist = netbuf;
    }
    else
    {
        {
            serverlist(0).clear();
            std::ifstream in{(filesystem::dir::exe() / u8"server.txt").native(),
                             std::ios::binary};
            std::string tmp;
            while (std::getline(in, tmp))
            {
                serverlist(0) += tmp + '\n';
            }
        }
        netbuf = serverlist;
        dialog(""s + serverlist);
    }
    p = instr(netbuf, 0, u8"%"s);
    cgiurl2 = strmid(netbuf, 0, p);
    cgiurl3 = strmid(netbuf, p + 1, instr(netbuf, p + 1, u8"%"s));
    {
        std::ofstream out{(filesystem::dir::exe() / u8"./server.txt").native(),
                          std::ios::binary};
        out << serverlist(0) << std::endl;
    }
    if (jp)
    {
        chatreadurl = u8"http://www."s + cgiurl2 + u8"/log.txt"s;
        chatsendurl = u8"http://www."s + cgiurl2
            + u8"/cgi-bin/wtalk/wtalk2.cgi?mode=regist"s;
        votesendurl = u8"http://www."s + cgiurl3
            + u8"/cgi-bin/vote/votec.cgi?no=1&mode=wri"s;
        votereadurl = u8"http://www."s + cgiurl3 + u8"/vote.txt"s;
    }
    else
    {
        chatreadurl = u8"http://www."s + cgiurl2 + u8"/logen.txt"s;
        chatsendurl = u8"http://www."s + cgiurl2
            + u8"/cgi-bin/wtalken/wtalk2.cgi?mode=regist"s;
        votesendurl = u8"http://www."s + cgiurl3
            + u8"/cgi-bin/vote/votec.cgi?no=0&mode=wri"s;
        votereadurl = u8"http://www."s + cgiurl3 + u8"/voteen.txt"s;
    }
    textreadurl = u8"http://www."s + cgiurl3 + u8"/text.txt"s;
    return;
}



void label_1399()
{
    int chatdeny = 0;
    if (chatdeny == 1)
    {
        if (chatturn > 20)
        {
            chatdeny = 0;
        }
        else
        {
            txt(lang(
                u8"もう少し待った方がいい気がする。"s,
                u8"You think you should wait a little more."s));
            return;
        }
    }
    if (jp)
    {
        imeset(1);
    }
    inputlog = "";
    input_text_dialog(80, windowh - inf_verh - 70, 38);
    imeset(0);
    if (inputlog == ""s)
    {
        return;
    }
    if (jp)
    {
        inputlog = u8"「"s + inputlog + u8"」"s;
    }
    else
    {
        inputlog = u8"\""s + inputlog + u8"\""s;
    }
    txt(inputlog);
    net_send(
        u8"chat"s + cdatan(1, 0) + lang(""s, u8" "s) + cdatan(0, 0)
        + lang(""s, u8" says, "s) + inputlog);
    chatturn = 0;
    chatdeny = 1;
    return;
}



int voting_box()
{
label_14001_internal:
    gsel(4);
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        pos(cnt % 4 * 180, cnt / 4 * 300);
        picload(
            filesystem::dir::graphic() / (u8"g"s + (cnt + 1) + u8".bmp"), 1);
    }
    gsel(0);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    for (int cnt = 0; cnt < 6; ++cnt)
    {
        listn(0, cnt) = u8"Could not connect to the server."s;
    }
    listmax = 0;
    net_read(5);
    txt(lang(listn(0, 1), listn(0, 2)));
    listmax = 0;
    list(0, listmax) = -999;
    list(1, listmax) = 0;
    listn(0, listmax) =
        lang(u8"あなたの異名を登録する"s, u8"Submit your alias."s);
    ++listmax;
    net_read(1);
    if (gdata_next_voting_time > gdata_hour + gdata_day * 24
            + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12)
    {
        comctrl = 0;
        txt(lang(
            u8"あなたの投票権はまだ復活していない("s
                + cnvdate(gdata_next_voting_time) + u8"まで)"s,
            u8"You can't vote until "s + cnvdate(gdata_next_voting_time)
                + u8"."s));
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (cnt == 0)
            {
                continue;
            }
            list(1, cnt) = 1000000 - list(1, cnt);
        }
        label_2057();
    }
    else
    {
        comctrl = 1;
        txt(lang(
            u8"どの候補に投票する？"s, u8"Which one do you want to vote?"s));
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (cnt == 0)
            {
                continue;
            }
            list(1, cnt) = rnd(10000);
        }
        label_2057();
        if (listmax > pagesize)
        {
            listmax = pagesize;
        }
    }
    windowshadow = 1;
label_1401_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1402_internal:
    s(0) = lang(u8"投票箱"s, u8"Voting Box"s);
    s(1) = lang(u8"決定 [投票する項目を選択]  "s, u8"Enter [Vote] "s) + strhint2
        + strhint3;
    display_window((windoww - 640) / 2 + inf_screenx, winposy(448), 640, 448);
    x = ww / 5 * 3;
    y = wh - 80;
    gmode(4, 180, 300, 50);
    pos(wx + ww / 3 * 2, wy + wh / 2);
    grotate(4, cmbg / 4 % 4 * 180, cmbg / 4 / 4 % 2 * 300, 0, x, y);
    gmode(2);
    s(0) = lang(u8"投票項目"s, u8"Choice"s);
    s(1) = "";
    s(2) = lang(u8"備考"s, u8"Vote"s);
    display_topic(s, wx + 28, wy + 36);
    display_topic(s(2), wx + 440, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(540, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    gmode(2);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        s(0) = ""s + listn(0, p);
        s(1) = ""s + listn(1, p);
        if (p != 0)
        {
            pos(wx + 90, wy + 66 + cnt * 19 + 2);
            if (comctrl == 0)
            {
                mes(lang(u8"第"s + p + u8"位"s, cnvrank(p)));
            }
            else
            {
                mes(lang(u8"候補"s, ""s));
            }
        }
        cs_list(cs == cnt, s, wx + 138, wy + 66 + cnt * 19 - 1);
        if (i != -999)
        {
            pos(wx + 462, wy + 66 + cnt * 19 + 2);
            mes(s(1));
        }
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, cs = i);
    if (p != -1)
    {
        if (p == -999)
        {
            net_send(""s + cdatan(1, 0) + lang(""s, u8" "s) + cdatan(0, 0), 1);
            ELONA_APPEND_PROMPT(lang(u8"オッケー"s, u8"Ok"s), u8"y"s, u8"0"s);
            rtval = show_prompt(promptx, prompty, 200);
            goto label_14001_internal;
        }
        if (gdata_next_voting_time > gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12)
        {
            snd(27);
            txt(lang(
                u8"まだ投票権が復活していない。"s,
                u8"You need to wait before submitting a new vote."s));
            goto label_1401_internal;
        }
        gdata_next_voting_time = gdata_hour + gdata_day * 24
            + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12 + 168;
        txt(lang(
            u8"「"s + listn(0, (cs + pagesize * page)) + u8"は素敵！」"s,
            u8"\"I like "s + listn(0, (cs + pagesize * page)) + u8"!\""s));
        txt(lang(u8"投票した。"s, u8"You vote."s));
        net_send(""s + p, 2);
        modrank(6, 100, 5);
        ELONA_APPEND_PROMPT(lang(u8"オッケー"s, u8"Ok"s), u8"y"s, u8"0"s);
        rtval = show_prompt(promptx, prompty, 200);
        goto label_14001_internal;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1401_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1401_internal;
        }
    }
    if (key == key_cancel)
    {
        return -1;
    }
    goto label_1402_internal;
}



void initialize_ui_constants()
{
    inf_clockarrowx = inf_clockx + 62;
    inf_clockarrowy = inf_clocky + 48;
    inf_barh = 16;
    inf_msgh = 72;
    inf_verh = inf_barh + inf_msgh;
    inf_msgline = 4;
    inf_raderx = 1;
    inf_raderw = 136;
    inf_screenw = windoww / inf_tiles + (windoww % inf_tiles != 0);
    if (windowh > 768)
    {
        windowh = 768;
    }
    inf_screenh = (windowh - inf_verh) / inf_tiles;
    if ((windowh - inf_verh) % inf_tiles != 0)
    {
        ++inf_screenh;
    }
    if (inf_vertype == 0)
    {
        inf_ver = 0;
        inf_bary = 0;
        inf_msgy = inf_ver + inf_barh;
        inf_screeny = inf_verh;
        inf_clocky = windowh - inf_clockh;
        inf_radery = 1;
    }
    else
    {
        inf_screeny = 0;
        if ((windowh - inf_verh) % inf_tiles != 0)
        {
            inf_screeny = 0 - inf_tiles + (windowh - inf_verh) % inf_tiles;
        }
        inf_ver = windowh - inf_verh;
        inf_bary = windowh - inf_barh;
        inf_msgy = inf_ver;
        inf_clocky = 0;
        inf_radery = windowh - 86;
    }
    scposy = inf_screenh / 2 - 1;
    inf_hpx = (windoww - 84) / 2 - 100;
    inf_hpy = inf_ver - 12;
    inf_mpx = (windoww - 84) / 2 + 40;
    inf_mpy = inf_ver - 12;
    inf_msgx = inf_raderw;
    inf_msgspace = 15;
    inf_maxmsglen = (windoww - inf_msgx - 28) / inf_mesfont * 2 - 1;
    inf_maxlog = (inf_msgy - 100) / inf_msgspace + 3;
    inf_very = windowh - inf_verh;
    screenmsgy = inf_screeny + inf_tiles * 2;
    prompty = (windowh - inf_verh - 30) / 2 - 4;
    promptx = (windoww - 10) / 2 + 3;
    return;
}



void label_1416()
{
    gmode(2);
    update_screen();
    return;
}



void update_entire_screen()
{
    update_screen_hud();
    update_minimap();
    update_screen();
    return;
}



void update_screen()
{
    screendrawhack = 1;
    gmode(2);
    if (mode == 9)
    {
        screen_txtadv();
    }
    else
    {
        sxfix = 0;
        syfix = 0;
        label_1428();
        label_1429();
        label_1433();
    }
    screendrawhack = 10;
    render_hud();
    if (autoturn == 1)
    {
        label_1423();
    }
    else
    {
        firstautoturn = 1;
        racount = 0;
    }
    if (screenupdate != -1)
    {
        redraw();
    }
    screenupdate = 0;
    screendrawhack = 0;
}



void screen_txtadv()
{
    gmode(0);
    pos(0, 0);
    if (txtadvscreenupdate == 1)
    {
        gcopy(4, 0, 0, windoww, windowh - inf_verh);
    }
    else
    {
        gcopy(4, 0, 0, windoww, 100);
    }
    gmode(2);
    for (int i = 0; i < 4; ++i)
    {
        font(13 - en * 2);
        color(250, 250, 250);
        if (i == 0)
        {
            sx = 265;
            sy = 8;
            pos(sx - 30, 5);
            gcopy(3, 192, 360, 24, 16);
            pos(sx + atxinfon(0).size() * 13 / 2 + 14, 5);
            gcopy(3, 216, 360, 24, 16);
        }
        else
        {
            sx = 220;
            sy = 10 + i * 14;
        }
        pos(sx, sy);
        mes(atxinfon(i));
    }
    txtadvscreenupdate = 1;
}



void update_screen_hud()
{
    gmode(2);
    ap = windoww / 192;
    for (int cnt = 0, cnt_end = (ap + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt == ap)
        {
            sx = windoww % 192;
        }
        else
        {
            sx = 192;
        }
        pos(cnt * 192, inf_bary);
        gcopy(3, 0, 464 - inf_barh, sx, inf_barh);
        pos(cnt * 192, inf_msgy);
        gcopy(3, 496, 528, sx, inf_msgh);
    }
    pos(0, inf_msgy);
    gcopy(3, 120, 504, inf_msgx, inf_verh);
    pos(inf_raderw + 6, inf_bary);
    gcopy(3, 208, 376, 16, 16);
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        sx = 0;
        if (cnt == 8)
        {
            sx = 8;
        }
        if (cnt == 9)
        {
            sx = 14;
        }
        pos(inf_raderw + cnt * 47 + 148 + sx, inf_bary + 1);
        gcopy(3, cnt * 16, 376, 16, 16);
    }
    font(12 + sizefix - en * 2);
    pos(inf_raderw + 24, inf_bary + 3 + vfix - en);
    if (strlen_u(mdatan(0)) > size_t(16 - (maplevel() != ""s) * 4))
    {
        mes(cnven(strmid(mdatan(0), 0, 16 - (maplevel() != ""s) * 4)));
    }
    else
    {
        mes(cnven(mdatan(0)));
    }
    pos(inf_raderw + 114, inf_bary + 3 + vfix - en);
    mes(maplevel());
    return;
}



void update_minimap()
{
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        sy = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            sx = cnt;
            if (map(sx, sy, 2) == map(sx, sy, 0))
            {
                label_1440();
            }
        }
    }
    return;
}



void label_1420()
{
    gmode(2);
    label_1433();
    render_hud();
    redraw();
    screenupdate = 0;
    return;
}



void render_hud()
{
    int ap3 = 0;
    int ap2 = 0;
    font(12 - en * 2, snail::font_t::style_t::bold);
    pos(inf_hpx, inf_hpy);
    gcopy(3, 312, 504, 104, 15);
    pos(inf_mpx, inf_mpy);
    gcopy(3, 312, 504, 104, 15);
    if (cdata[0].hp > 0)
    {
        ap = cdata[0].hp * 84 / cdata[0].max_hp;
        if (ap > 100)
        {
            ap = 100;
        }
        pos(inf_hpx + 16, inf_hpy + 5);
        gcopy(3, 412 - ap, 520, ap, 6);
    }
    if (cdata[0].mp > 0)
    {
        ap = cdata[0].mp * 84 / cdata[0].max_mp;
        if (ap > 100)
        {
            ap = 100;
        }
        pos(inf_mpx + 16, inf_mpy + 5);
        gcopy(3, 532 - ap, 520, ap, 6);
    }
    if (gdata_mount != 0)
    {
        if (cdata[gdata_mount].state == 1)
        {
            pos(inf_hpx - 120, inf_hpy);
            gcopy(3, 312, 504, 104, 15);
            ap = cdata[gdata_mount].hp * 84 / cdata[gdata_mount].max_hp;
            if (ap > 100)
            {
                ap = 100;
            }
            pos(inf_hpx - 120 + 16, inf_hpy + 5);
            gcopy(3, 412 - ap, 520, ap, 6);
        }
    }
    sx = inf_hpx + 16;
    sy = inf_hpy - 8;
    pos(sx + 4, sy);
    bmes(""s + cdata[0].hp + u8"("s + cdata[0].max_hp + u8")"s, 255, 255, 255);
    sx = inf_mpx + 16;
    sy = inf_mpy - 8;
    pos(sx + 4, sy);
    bmes(""s + cdata[0].mp + u8"("s + cdata[0].max_mp + u8")"s, 255, 255, 255);
    font(13 - en * 2);
    sy = inf_bary + 2 + vfix;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        sx = inf_raderw + cnt * 47 + 168;
        if (cnt < 8)
        {
            if (cdata[0].attr_adjs[cnt] < 0)
            {
                color(200, 0, 0);
            }
            else
            {
                color(0, 0, 0);
            }
            pos(sx, sy);
            gcopy(3, 0, 440, 24, 16);
            mes(sdata(10 + cnt, 0));
            color(0, 0, 0);
        }
        else if (cnt == 8)
        {
            pos(sx + 8, sy);
            gcopy(3, 0, 440, 34, 16);
            if (gspdorg > gspd)
            {
                color(200, 0, 0);
            }
            else if (gspdorg < gspd)
            {
                color(0, 120, 0);
            }
            else
            {
                color(0, 0, 0);
            }
            mes(""s + gspd);
            color(0, 0, 0);
        }
        else
        {
            pos(sx + 14, sy);
            gcopy(3, 0, 440, 64, 16);
            mes(""s + cdata[0].dv + u8"/"s + cdata[0].pv);
        }
    }
    font(13 - en * 2);
    sy = inf_ver - 16;
    sx = windoww - 240;
    pos(sx, sy);
    gcopy(3, 0, 392, 24, 24);
    pos(sx + 28, sy + 2);
    bmes(""s + cdata[0].gold + u8" gp"s, 255, 255, 255);
    sx = windoww - 120;
    pos(sx, sy);
    gcopy(3, 24, 392, 24, 24);
    pos(sx + 28, sy + 2);
    bmes(""s + cdata[0].platinum_coin + u8" pp"s, 255, 255, 255);
    pos(4, inf_ver - 16);
    gcopy(3, 48, 392, 24, 24);
    pos(32, inf_ver - 14);
    bmes(
        u8"Lv"s + cdata[0].level + u8"/"s
            + (cdata[0].required_experience - cdata[0].experience),
        255,
        255,
        255);
    if (cdata[0].position.x < 6)
    {
        if (mode != 9)
        {
            if (mdata(6) != 1)
            {
                if (cdata[0].continuous_action_id == 0)
                {
                    gmode(4, -1, -1, 150);
                }
            }
        }
    }
    sx = 8;
    sy = inf_ver - 50;
    if (cdata[0].nutrition >= 12000)
    {
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"hunger", u8"_12"));
        sy -= 20;
    }
    else if (cdata[0].nutrition >= 1000)
    {
        if (cdata[0].nutrition <= 4000)
        {
            color(200, 0, 0);
        }
        if (i18n::_(u8"ui", u8"hunger", u8"_"s + (cdata[0].nutrition / 1000))
            != ""s)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(
                u8"ui", u8"hunger", u8"_"s + (cdata[0].nutrition / 1000)));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    else
    {
        color(250, 0, 0);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"hunger", u8"_0"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].sick != 0)
    {
        color(80, 120, 0);
        if (cdata[0].sick >= 30)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sick", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sick", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].poisoned != 0)
    {
        color(0, 150, 0);
        if (cdata[0].poisoned >= 30)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"poison", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"poison", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].sleep != 0)
    {
        color(0, 50, 50);
        if (cdata[0].sleep >= 30)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sleep", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sleep", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].blind != 0)
    {
        color(100, 100, 0);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"blind"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].paralyzed != 0)
    {
        color(0, 100, 100);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"paralyzed"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].choked != 0)
    {
        color(0, 100, 100);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"choked"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].confused != 0)
    {
        color(100, 0, 100);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"confused"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].fear != 0)
    {
        color(100, 0, 100);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"fear"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].dimmed != 0)
    {
        color(0, 100, 100);
        if (cdata[0].dimmed >= 60)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"dimmed", u8"_2"));
            sy -= 20;
        }
        else if (cdata[0].dimmed >= 30)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"dimmed", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"dimmed", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].furious != 0)
    {
        color(150, 0, 0);
        if (cdata[0].furious >= 30)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"angry", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"angry", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].bleeding != 0)
    {
        color(150, 0, 0);
        if (cdata[0].bleeding >= 20)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"bleeding", u8"_2"));
            sy -= 20;
        }
        else if (cdata[0].bleeding >= 10)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"bleeding", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"bleeding", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].insane != 0)
    {
        color(150, 100, 0);
        if (cdata[0].insane >= 50)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"insane", u8"_2"));
            sy -= 20;
        }
        else if (cdata[0].insane >= 25)
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"insane", u8"_1"));
            sy -= 20;
        }
        else
        {
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"insane", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].drunk != 0)
    {
        color(100, 0, 100);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"drunk"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].wet != 0)
    {
        color(0, 0, 160);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"wet"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (cdata[0].gravity != 0)
    {
        color(0, 80, 80);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"gravity"));
        color(0, 0, 0);
        sy -= 20;
    }
    if (gdata_continuous_active_hours >= 15)
    {
        if (gdata_continuous_active_hours >= 50)
        {
            color(255, 0, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sleepy", u8"_2"));
            sy -= 20;
        }
        else if (gdata_continuous_active_hours >= 30)
        {
            color(100, 100, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sleepy", u8"_1"));
            sy -= 20;
        }
        else
        {
            color(0, 0, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"sleepy", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].sp < 50)
    {
        if (cdata[0].sp < 0)
        {
            color(120, 120, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"tired", u8"_2"));
            sy -= 20;
        }
        else if (cdata[0].sp < 25)
        {
            color(80, 80, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"tired", u8"_1"));
            sy -= 20;
        }
        else
        {
            color(60, 60, 0);
            pos(sx, sy);
            gcopy(3, 0, 416, 50 + en * 30, 15);
            pos(sx + 6, sy + 1);
            mes(i18n::_(u8"ui", u8"tired", u8"_0"));
            sy -= 20;
        }
        color(0, 0, 0);
    }
    if (cdata[0].inventory_weight_type != 0)
    {
        color(
            0,
            cdata[0].inventory_weight_type * 40,
            cdata[0].inventory_weight_type * 40);
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(
            u8"ui", u8"burden", u8"_"s + cdata[0].inventory_weight_type));
        color(0, 0, 0);
        sy -= 20;
    }

    if (foobar_save.is_autodig_enabled)
    {
        pos(sx, sy);
        gcopy(3, 0, 416, 50 + en * 30, 15);
        pos(sx + 6, sy + 1);
        mes(i18n::_(u8"ui", u8"autodig", u8"mode"));
        sy -= 20;
    }

    pos(inf_clockx, inf_clocky);
    gcopy(3, 448, 408, inf_clockw, inf_clockh);
    pos(inf_clockx + 78, inf_clocky + 8);
    gcopy(3, 448, 376, 128, 24);
    gmode(4, -1, -1, 180);
    sx = windoww - 40;
    sy = inf_ver - 40;
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[0].buffs[cnt].id == 0)
        {
            break;
        }
        pos(sx, sy);
        gcopy(5, cdata[0].buffs[cnt].id * 32, 1120, 32, 32);
        pos(sx + 3, sy + 19);
        mes(cdata[0].buffs[cnt].turns);
        color(255, 255, 255);
        pos(sx + 2, sy + 18);
        mes(cdata[0].buffs[cnt].turns);
        color(0, 0, 0);
        sy -= 32;
    }
    pos(inf_clockarrowx, inf_clockarrowy);
    gmode(2, 48, 48);
    grotate(3, 0, 288, 0.0174532925199433 * (gdata_hour * 30), 48, 48);
    pos(inf_clockw - 3, inf_clocky + 17 + vfix);
    mes(""s + gdata_year + u8"/"s + gdata_month + u8"/"s + gdata_day);
    pos(inf_clockw + 6, inf_clocky + 35);
    bmes(
        i18n::_(u8"ui", u8"time", u8"_"s + gdata_hour / 4) + u8" "s
            + i18n::_(u8"ui", u8"weather", u8"_"s + gdata_weather),
        255,
        255,
        255);
    ap3 = 0;
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        ap = gdata((750 + cnt)) % 10000;
        if (ap == 0)
        {
            continue;
        }
        ap2 = gdata((750 + cnt)) / 10000;
        if (cdata[ap2].state != 1)
        {
            if (ap2 != 0)
            {
                gdata(750 + cnt) = 0;
            }
            continue;
        }
        pos(16, inf_clocky + 155 - ap3 * 16);
        bmes(
            ""s
                + strmid(
                      i18n::_(u8"ability", std::to_string(ap), u8"name"), 0, 6),
            255,
            255,
            255);
        pos(66, inf_clocky + 155 - ap3 * 16);
        bmes(
            ""s + sdata.get(ap, ap2).original_level + u8"."s
                + std::to_string(1000 + sdata.get(ap, ap2).experience % 1000)
                      .substr(1),
            255,
            255,
            255);
        ++ap3;
    }
    if (config::instance().hp_bar)
    {
        show_hp_bar(
            config::instance().hp_bar == 1 ? show_hp_bar_side::left_side
                                           : show_hp_bar_side::right_side,
            inf_clocky);
    }

    show_damage_popups(inf_ver);
}



void label_1422()
{
    gsel(9);
    pos(0, 0);
    if (cdata[0].continuous_action_id == 5)
    {
        picload(filesystem::dir::graphic() / u8"anime1.bmp");
    }
    if (cdata[0].continuous_action_id == 7)
    {
        if (rowactre)
        {
            picload(filesystem::dir::graphic() / u8"anime2.bmp");
        }
    }
    if (cdata[0].continuous_action_id == 8)
    {
        picload(filesystem::dir::graphic() / u8"anime3.bmp");
    }
    if (cdata[0].continuous_action_id == 9)
    {
        picload(filesystem::dir::graphic() / u8"anime4.bmp");
    }
    gsel(0);
    return;
}



void label_1423()
{
    if (racount == 0)
    {
        label_1422();
    }
    if (msgtemp != ""s
        || (cdata[0].continuous_action_id == 7 && rowactre == 0
            && fishanime == 0))
    {
        label_1433();
        msgtemp = "";
    }
    render_hud();
    if (cdata[0].continuous_action_id == 7)
    {
        if (rowactre == 0)
        {
            label_1446();
        }
    }
    sx = windoww - 156;
    sy = inf_ver - 30;
    int w = 148;
    int h = 25;
    window2(sx, sy, w, h, 0, 5);
    font(13 - en * 2, snail::font_t::style_t::bold);
    pos(sx + 43, sy + 6);
    bmes(u8"AUTO TURN"s, 235, 235, 235);
    pos(sx + 18, sy + 12);
    gmode(2, 24, 24);
    grotate(3, 72, 392, 0.0174532925199433 * (gdata_minute / 4 % 2 * 90));
    if (cdata[0].continuous_action_id == 9 || cdata[0].continuous_action_id == 5
        || cdata[0].continuous_action_id == 8
        || (cdata[0].continuous_action_id == 7 && rowactre != 0))
    {
        window2(sx, sy - 104, 148, 101, 0, 5);
        if (racount % 15 == 0)
        {
            for (int cnt = 0; cnt < 10; ++cnt)
            {
                gmode(0);
                pos(sx + 2, sy - 102);
                if (cdata[0].continuous_action_id == 5)
                {
                    if (cnt == 2)
                    {
                        snd(52);
                    }
                    gcopy(9, cnt / 2 % 5 * 144, 0, 144, 96);
                    await(40);
                }
                if (cdata[0].continuous_action_id == 7)
                {
                    if (racount == 0)
                    {
                        if (cnt == 0)
                        {
                            snd(57);
                        }
                    }
                    gcopy(9, cnt / 3 % 3 * 144, 0, 144, 96);
                    await(50);
                }
                if (cdata[0].continuous_action_id == 8)
                {
                    if (cnt == 4)
                    {
                        snd(55);
                    }
                    gcopy(9, cnt / 2 % 3 * 144, 0, 144, 96);
                    await(55);
                }
                if (cdata[0].continuous_action_id == 9)
                {
                    if (cnt == 2)
                    {
                        snd(54);
                    }
                    gcopy(9, cnt / 2 % 4 * 144, 0, 144, 96);
                    await(60);
                }
                redraw();
            }
        }
        else
        {
            gcopy(9, 0, 0, 144, 96);
        }
        ++racount;
        redraw();
    }
    if (firstautoturn == 1)
    {
        redraw();
        firstautoturn = 0;
    }
    gmode(2);
    return;
}



void draw_caption()
{
    int msgx = 0;
    gmode(0);
    font(16 - en * 2);
    color(245, 245, 245);
    msgx = 20;
    msgy = 30;
    sx = 760;
    sx = s(0).size() * 8 + 45;
    if (sx > 760)
    {
        sx = 760;
    }
    ap = sx / 128 + 1;
    for (int cnt = 0, cnt_end = (ap); cnt < cnt_end; ++cnt)
    {
        if (cnt == sx / 128)
        {
            ap = sx % 128;
        }
        else
        {
            ap = 128;
        }
        pos(cnt * 128 + msgx, msgy);
        gcopy(3, 672, 477, ap, 3);
        pos(cnt * 128 + msgx, msgy + 2);
        gcopy(3, 672, 480, ap, 22);
        pos(cnt * 128 + msgx, msgy + 22);
        gcopy(3, 672, 477, ap, 2);
    }
    pos(msgx + 18, msgy + 4);
    mes(s);
    gmode(2);
    return;
}



void label_1428()
{
    if (scposval == 0)
    {
        if (scroll)
        {
            sx(0) = cdata[0].next_position.x - scx;
            sx(1) = cdata[0].next_position.x;
            sy(0) = cdata[0].next_position.y - scy;
            sy(1) = cdata[0].next_position.y;
        }
        else
        {
            sx(0) = cdata[0].position.x - scx;
            sx(1) = cdata[0].position.x;
            sy(0) = cdata[0].position.y - scy;
            sy(1) = cdata[0].position.y;
        }
    }
    else
    {
        sx(0) = tlocx - scx;
        sx(1) = tlocx;
        sy(0) = tlocy - scy;
        sy(1) = tlocy;
    }
    if (gdata_current_map == 40)
    {
        sx(0) = cdata[camera].position.x - scx;
        sx(1) = cdata[camera].position.x;
        sy(0) = cdata[camera].position.y - scy;
        sy(1) = cdata[camera].position.y;
    }
    if (config::instance().alwayscenter)
    {
        scx = sx + scx - inf_screenw / 2;
        scy = sy + scy - inf_screenh / 2;
    }
    else
    {
        if (sy < scposy)
        {
            scy = sy(1) - scposy;
        }
        if (sx < 6)
        {
            scx = sx(1) - 6;
        }
        if (sx > inf_screenw - 7)
        {
            scx = sx(1) - (inf_screenw - 7);
        }
        if (sy > inf_screenh - scposy - 1)
        {
            scy = sy(1) - (inf_screenh - scposy - 1);
        }
    }
    if (scx + inf_screenw >= mdata(0))
    {
        scx = mdata(0) - inf_screenw;
    }
    if (scy + inf_screenh >= mdata(1))
    {
        scy = mdata(1) - inf_screenh;
    }
    if (scy < 0)
    {
        scy = 0;
    }
    if (scx < 0)
    {
        scx = 0;
    }
    return;
}



void label_1429()
{
    int ly = 0;
    int lx = 0;
    slight.clear();
    ++msync;
    sy(2) = cdata[0].position.y - 7;
    sy(3) = cdata[0].position.y + 7;
    sy(4) = 7 - cdata[0].position.y;
    sx(3) = cdata[0].position.x - 7 - 2;
    if (config::instance().scroll)
    {
        repw(0) = inf_screenw + 2;
        repw(1) = scx - 1;
        reph(0) = inf_screenh + 2;
        reph(1) = scy - 1;
    }
    else
    {
        repw(0) = inf_screenw;
        repw(1) = scx;
        reph(0) = inf_screenh;
        reph(1) = scy;
    }
    ly = 1 + (config::instance().scroll == 0);
    for (int cnt = reph(1), cnt_end = cnt + (reph); cnt < cnt_end; ++cnt)
    {
        sy = cnt;
        lx = 1 + (config::instance().scroll == 0);
        if (sy < 0 || sy >= mdata(1))
        {
            for (int cnt = repw(1), cnt_end = cnt + (repw); cnt < cnt_end;
                 ++cnt)
            {
                slight(lx + 1, ly) += 1;
                slight(lx - 1, ly) += 8;
                slight(lx, ly - 1) += 2;
                slight(lx, ly + 1) += 4;
                slight(lx + 1, ly + 1) += 16;
                slight(lx - 1, ly - 1) += 32;
                slight(lx + 1, ly - 1) += 64;
                slight(lx - 1, ly + 1) += 128;
                ++lx;
            }
            ++ly;
            continue;
        }
        for (int cnt = repw(1), cnt_end = cnt + (repw); cnt < cnt_end; ++cnt)
        {
            sx = cnt;
            if (sx < 0 || sx >= mdata(0))
            {
                slight(lx + 1, ly) += 1;
                slight(lx - 1, ly) += 8;
                slight(lx, ly - 1) += 2;
                slight(lx, ly + 1) += 4;
                slight(lx + 1, ly + 1) += 16;
                slight(lx - 1, ly - 1) += 32;
                slight(lx + 1, ly - 1) += 64;
                slight(lx - 1, ly + 1) += 128;
                ++lx;
                continue;
            }
            if (gdata_current_map == 40)
            {
                goto label_1430_internal;
            }
            if (cdata[0].blind != 0)
            {
                if (sx != cdata[0].position.x || sy != cdata[0].position.y)
                {
                    goto label_1431_internal;
                }
            }
            if (sy > sy(2))
            {
                if (sy < sy(3))
                {
                    sx(2) = fovlist(0, sy + sy(4)) + sx(3);
                    if (sx >= sx(2))
                    {
                        if (sx < fovlist(1, sy + sy(4)) + sx(3))
                        {
                            if (fov_los(
                                    cdata[0].position.x,
                                    cdata[0].position.y,
                                    sx,
                                    sy))
                            {
                            label_1430_internal:
                                mapsync(sx, sy) = msync;
                                if (map(sx, sy, 1) != 0)
                                {
                                    cdata[map(sx, sy, 1) - 1].vision_flag =
                                        msync;
                                }
                                if (map(sx, sy, 2) != map(sx, sy, 0))
                                {
                                    map(sx, sy, 2) = map(sx, sy, 0);
                                    label_1440();
                                }
                                map(sx, sy, 5) = map(sx, sy, 4);
                                ++lx;
                                continue;
                            }
                        }
                    }
                }
            }
        label_1431_internal:
            slight(lx, ly) += 1000;
            slight(lx + 1, ly) += 1;
            slight(lx - 1, ly) += 8;
            slight(lx, ly - 1) += 2;
            slight(lx, ly + 1) += 4;
            slight(lx + 1, ly + 1) += 16;
            slight(lx - 1, ly - 1) += 32;
            slight(lx + 1, ly - 1) += 64;
            slight(lx - 1, ly + 1) += 128;
            ++lx;
        }
        ++ly;
    }
    return;
}



void label_1433()
{
    screendrawhack = 2;
    cell_draw();
    screendrawhack = 3;
    if (gdata_current_map == 40)
    {
        for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
            ap = 0;
            if (cdata[cnt].relationship == 10)
            {
                ap(0) = 1;
                ap(1) = 1;
                ap(2) = 25;
            }
            if (cdata[cnt].relationship == -3)
            {
                ap(0) = 25;
                ap(1) = 1;
                ap(2) = 1;
            }
            if (cnt == 0)
            {
                ap = 0;
            }
            if (ap != 0)
            {
                sx = (cdata[cnt].position.x - scx) * inf_tiles + inf_screenx;
                sy = (cdata[cnt].position.y - scy) * inf_tiles + inf_screeny;
                if (sx >= 0)
                {
                    if (sy >= 0)
                    {
                        if (sx - inf_screenx < (inf_screenw - 1) * inf_tiles)
                        {
                            if (sy < (inf_screenh - 1) * inf_tiles)
                            {
                                pos(sx, sy * (sy > 0));
                                gfini(
                                    inf_tiles,
                                    inf_tiles + (sy < 0) * inf_screeny);
                                gfinc(ap, ap(1), ap(2));
                                if (cnt == camera)
                                {
                                    gmode(4, -1, -1, 120);
                                    pos(sx + 36, sy + 32);
                                    gcopy(3, 240, 410, 24, 16);
                                    gmode(2);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    screendrawhack = 4;
    sy = 84 * cdata[0].position.y / mdata(1);
    if (sy < 2)
    {
        sy = 2;
    }
    else if (sy > 76)
    {
        sy = 76;
    }
    sx = 120 * cdata[0].position.x / mdata(0);
    if (sx < 2)
    {
        sx = 2;
    }
    else if (sx > 112)
    {
        sx = 112;
    }
    if (raderx != -1)
    {
        pos(inf_raderx + raderx, inf_radery + radery);
        gcopy(3, 688 + raderx, 528 + radery, 6, 6);
    }
    raderx = sx;
    radery = sy;
    pos(inf_raderx + sx, inf_radery + sy);
    gcopy(3, 15, 338, 6, 6);
    for (int y = 0; y < mdata(1); ++y)
    {
        for (int x = 0; x < mdata(0); ++x)
        {
            int sx = clamp(120 * x / mdata(0), 2, 112);
            int sy = clamp(84 * y / mdata(1), 2, 76);
            if (map(x, y, 6) / 1000 % 100 == 11)
            {
                // Downstairs
                pos(inf_raderx + sx, inf_radery + sy);
                gcopy(3, 15, 338, 6, 6);
            }
            else if (map(x, y, 6) / 1000 % 100 == 10)
            {
                // Upstairs
                pos(inf_raderx + sx, inf_radery + sy);
                gcopy(3, 15, 338, 6, 6);
            }
        }
    }
    screendrawhack = 5;
    if (config::instance().env)
    {
        if (gdata_weather == 3)
        {
            label_1434();
        }
        if (gdata_weather == 4)
        {
            label_1435();
        }
        if (gdata_weather == 2)
        {
            label_1436();
        }
        if (gdata_weather == 1)
        {
            label_1437();
        }
    }
    return;
}



void label_1434()
{
    if (mdata(14) != 2)
    {
        return;
    }
    for (int cnt = 0, cnt_end = (maxrain * (1 + (mdata(6) == 1)));
         cnt < cnt_end;
         ++cnt)
    {
        s_p = rnd(100);
        color(170 - s_p, 200 - s_p, 250 - s_p);
        line(
            rainx(cnt) - 40,
            rainy(cnt) - cnt % 3 - 1,
            rainx(cnt) - 39 + cnt % 2,
            rainy(cnt));
        color(0, 0, 0);
        if (rainx(cnt) == 0)
        {
            rainx(cnt) = rnd(windoww) + 40;
        }
        else
        {
            rainx(cnt) += 2;
        }
        if (rainy(cnt) == 0)
        {
            rainy(cnt) = rnd(windowh - inf_verh) - 6;
        }
        else
        {
            rainy(cnt) += 16 + cnt % 8;
            if (rainy(cnt) > windowh - inf_verh - 6)
            {
                rainy(cnt) = 0;
                rainx(cnt) = 0;
            }
        }
    }
    weatherbk = gdata_weather;
    return;
}



void label_1435()
{
    if (mdata(14) != 2)
    {
        return;
    }
    for (int cnt = 0, cnt_end = (maxrain * (1 + (mdata(6) == 1)));
         cnt < cnt_end;
         ++cnt)
    {
        s_p = rnd(100);
        color(170 - s_p, 200 - s_p, 250 - s_p);
        line(
            rainx(cnt) - 40,
            rainy(cnt) - cnt % 5 - 4,
            rainx(cnt) - 39 + cnt % 2,
            rainy(cnt));
        color(0, 0, 0);
        if (rainx(cnt) == 0)
        {
            rainx(cnt) = rnd(windoww) + 40;
        }
        else
        {
            rainx(cnt) += 1;
        }
        if (rainy(cnt) == 0)
        {
            rainy(cnt) = rnd(windowh - inf_verh) - 6;
        }
        else
        {
            rainy(cnt) += 24 + cnt % 8;
            if (rainy(cnt) > windowh - inf_verh - 10)
            {
                rainy(cnt) = 0;
                rainx(cnt) = 0;
            }
        }
    }
    weatherbk = gdata_weather;
    return;
}



void label_1436()
{
    if (mdata(14) != 2)
    {
        return;
    }
    for (int cnt = 0, cnt_end = (maxrain * 2); cnt < cnt_end; ++cnt)
    {
        if (cnt % 30 == 0)
        {
            gmode(4, 8, 8, 100 + cnt % 150);
        }
        if (rainy(cnt) == 0 || weatherbk != gdata_weather)
        {
            rainy(cnt) = rnd(windowh / 2) * -1;
            rainx(cnt) = rnd(windoww);
        }
        else
        {
            rainx(cnt) += rnd(3) - 1;
            rainy(cnt) += rnd(2) + cnt % 5;
            if (rainy(cnt) > windowh - inf_verh - 10 || rnd(500) == 0)
            {
                rainy(cnt) = 0;
                rainx(cnt) = 0;
            }
        }
        pos(rainx(cnt), rainy(cnt));
        gcopy(3, rainx(cnt) % 2 * 8, 600 + cnt % 6 * 8);
    }
    weatherbk = gdata_weather;
    gmode(2);
    return;
}



void label_1437()
{
    if (mdata(14) != 2)
    {
        return;
    }
    for (int cnt = 0, cnt_end = (maxrain); cnt < cnt_end; ++cnt)
    {
        if (cnt % 20 == 0)
        {
            gmode(4, 8, 8, 100 + cnt % 150);
        }
        if (rainy(cnt) <= 0 || weatherbk != gdata_weather)
        {
            rainy(cnt) = windowh - inf_verh - 8 - rnd(100);
            rainx(cnt) = rnd(windoww);
        }
        else
        {
            pos(rainx(cnt), rainy(cnt));
            gcopy(3, 16 + rainx(cnt) % 2 * 8, 600 + cnt % 6 * 8);
            rainx(cnt) += rnd(3) - 1;
            rainy(cnt) -= rnd(2) + cnt % 5;
        }
    }
    weatherbk = gdata_weather;
    gmode(2);
    return;
}



void label_1438()
{
    int scxbk2 = 0;
    int scybk2 = 0;
    if (std::abs(cdata[0].next_position.x - cdata[0].position.x) > 1)
    {
        return;
    }
    if (std::abs(cdata[0].next_position.y - cdata[0].position.y) > 1)
    {
        return;
    }
    scrollp = config::instance().walkwait;
    if (mdata(6) == 1)
    {
        scrollp = 6;
        keybd_wait = 1000;
        if (chipm(0, map(cdata[0].position.x, cdata[0].position.y, 0)) == 4)
        {
            scrollp = 9;
        }
    }
    else if (keybd_wait > config::instance().startrun)
    {
        scrollp = 3;
        if (config::instance().runscroll == 0)
        {
            return;
        }
        if (keybd_wait >= 100000)
        {
            scrollp = 1;
        }
    }
    scxbk2 = scx;
    scybk2 = scy;
    scroll = 1;
    label_1428();
    scroll = 0;
    scxbk = scx;
    scybk = scy;
    scx = scxbk2;
    scy = scybk2;
    scrollanime = 1;
    for (int cnt = 1, cnt_end = cnt + (scrollp - 1); cnt < cnt_end; ++cnt)
    {
        if (cnt % 2 == 1)
        {
            ++scrturn;
        }
        sxfix = (cdata[0].next_position.x - cdata[0].position.x) * cnt
            * inf_tiles / scrollp * -1;
        syfix = (cdata[0].next_position.y - cdata[0].position.y) * cnt
            * inf_tiles / scrollp * -1;
        gsel(4);
        pos(0, 0);
        gmode(0);
        gcopy(0, 0, windowh - inf_verh, windoww, inf_tiles);
        gsel(0);
        gmode(2);
        label_1433();
        gmode(0);
        pos(0, windowh - inf_verh);
        gcopy(4, 0, 0, windoww, inf_tiles);
        gmode(2);
        render_hud();
        gmode(2);
        redraw();
        await(40);
    }
    scrollanime = 0;
    return;
}



void label_1439()
{
    gsel(3);
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        sy = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            sx = cnt;
            sy(1) = 84 * sy / mdata(1);
            sx(1) = 120 * sx / mdata(0);
            pos(688 + sx(1), 528 + sy(1));
            gcopy(
                2,
                map(sx, sy, 0) % 33 * inf_tiles + sx % 16,
                map(sx, sy, 0) / 33 * inf_tiles + sy % 12,
                raderw,
                raderh);
            pos(688 + sx(1), 528 + sy(1));
            gfini(raderw, raderh);
            if (chipm(7, map(sx, sy, 0)) & 4)
            {
                gfdec2(100, 100, 100);
            }
        }
    }
    pos(688, 528);
    gfini(raderw * mdata(0), raderh * mdata(1));
    gfinc(10, 10, 10);
    gsel(0);
    return;
}



void label_1440()
{
    sy(1) = 84 * sy / mdata(1);
    sx(1) = 120 * sx / mdata(0);
    pos(inf_raderx + sx(1), inf_radery + sy(1));
    gcopy(3, 688 + sx(1), 528 + sy(1), raderw, raderh);
    return;
}



void fade_out()
{
    gsel(4);
    gmode(0);
    pos(0, 0);
    gcopy(0, 0, 0, windoww, windowh);
    gsel(0);
    gmode(0);
    for (int cnt = 0; cnt < 50; ++cnt)
    {
        await(20);
        pos(0, 0);
        gfini(windoww, windowh);
        gfdec2(5, 5, 5);
        redraw();
    }
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        gmode(4, 0, 0, 10 + cnt * 5);
        await(20);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh);
        redraw();
    }
    gmode(2);
    return;
}



void label_1442()
{
    for (int cnt = 0; cnt < 50; ++cnt)
    {
        await(20);
        pos(0, 0);
        gfini(windoww, windowh);
        gfdec2(5, 5, 5);
        redraw();
    }
    return;
}



void label_1443()
{
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        gmode(4, 0, 0, 10 + cnt * 5);
        await(20);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh);
        redraw();
    }
    gmode(2);
    return;
}



void label_1444()
{
    boxf();
    evx = 12;
    evy = 14;
    evtiles = 48;
    evscrh = windowh / evtiles - 1;
    evscrw = windoww / evtiles + 2;
    label_1445();
    redraw();
    return;
}



void label_1445()
{
    for (int cnt = 0, cnt_end = (evscrh); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        dy = cnt + evy;
        if (dy >= mdata(1))
        {
            dy = mdata(1);
        }
        for (int cnt = 0, cnt_end = (evscrw); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            dx = cnt + evx;
            if (dx >= mdata(0))
            {
                dx = mdata(0);
            }
            pos(x * evtiles, y * evtiles);
            gmode(0, inf_tiles, inf_tiles);
            ap = map(dx, dy, 0);
            grotate(
                2,
                ap % 33 * inf_tiles,
                ap / 33 * inf_tiles,
                0,
                evtiles,
                evtiles);
        }
    }
    return;
}



void label_1446()
{
    elona_vector1<int> fishdir;
    int sx2 = 0;
    int sy2 = 0;
    fishdir(0) = 0;
    fishdir(1) = 1;
    fishdir(2) = 3;
    fishdir(3) = 2;
    fishdir = fishdir(cdata[0].direction);
    randomize(cdata[0].turn / 3);
    gmode(2);
    if (fishanime == 4)
    {
        sx = (fishx - scx) * inf_tiles + inf_screenx;
        sy = (fishy - scy) * inf_tiles + inf_screeny;
        if (fishanime(1) > 15)
        {
            sx += (cdata[0].position.x - fishx) * 8 * (fishanime(1) - 15);
            sy += (cdata[0].position.y - fishy) * 8 * (fishanime(1) - 15)
                + fishanime(1);
            pos(sx, sy - 44);
            gcopy(9, 144 + fishanime(1) / 2 % 2 * 48, 0, 48, 48);
        }
        else
        {
            pos(sx, sy - fishanime(1) * 3 + 14);
            gcopy(
                9,
                144 + fishanime(1) % 2 * 48,
                0,
                48,
                clamp(fishanime(1) * 5, 1, 48));
        }
        return;
    }
    sx = (cdata[0].position.x - scx) * inf_tiles + inf_screenx + 20;
    if (fishdir == 1)
    {
        sx -= 48;
    }
    if (fishdir == 3)
    {
        sx += 48;
    }
    sy = (cdata[0].position.y - scy) * inf_tiles + inf_screeny + 20;
    if (fishdir == 0)
    {
        sy += 48;
    }
    if (fishdir == 2)
    {
        sy -= 48;
    }
    ap = rnd(2);
    if (fishanime == 1)
    {
        ap = fishanime(1);
    }
    else if (fishanime >= 2)
    {
        ap = 10;
    }
    pos(sx, sy - 5 + ap);
    gcopy(9, 116, 18, 14, 10 - ap);
    sx = (cdata[0].position.x - scx) * inf_tiles + inf_screenx;
    sy = (cdata[0].position.y - scy) * inf_tiles + inf_screeny;
    gmode(2, 48, 48);
    if (fishdir == 0)
    {
        sx2 = inf_tiles / 2 + rnd(3) - 1;
        sy2 = inf_tiles / 2 + 12;
        gmode(2, 48, 48);
        pos(sx + sx2 + 1, sy + sy2 + 40);
        grotate(9, 48, 0, 0, 48, 48);
    }
    if (fishdir == 1)
    {
        sx2 = inf_tiles / 2 - 26;
        sy2 = inf_tiles / 2 - 12 + rnd(3) - 3;
        pos(sx + sx2 - 16, sy + sy2 + 25);
        grotate(9, 48, 0, 0, 48, 48);
    }
    if (fishdir == 2)
    {
        sx2 = inf_tiles / 2 + rnd(3) + 1;
        sy2 = inf_tiles / 2 - 46;
    }
    if (fishdir == 3)
    {
        sx2 = inf_tiles / 2 + 26;
        sy2 = inf_tiles / 2 - 12 + rnd(3) - 3;
        pos(sx + sx2 + 14, sy + sy2 + 25);
        grotate(9, 48, 0, 0, 48, 48);
    }
    if (fishdir == 2)
    {
        gmode(2, 48, 24);
        pos(sx + sx2, sy + sy2);
        grotate(9, 0, 24, 0.5 * fishdir * 3.14, 48, 24);
    }
    else
    {
        gmode(2, 48, 48);
        pos(sx + sx2, sy + sy2);
        grotate(9, 0, 0, 0.5 * fishdir * 3.14, 48, 48);
    }
    randomize();
    return;
}



int carmor(int cc)
{
    if (cdata[cc].sum_of_equipment_weight >= 35000)
    {
        return 169;
    }
    else if (cdata[cc].sum_of_equipment_weight >= 15000)
    {
        return 170;
    }
    else
    {
        return 171;
    }
}



std::string cnveqweight(int cc)
{
    int id = carmor(cc);
    if (id == 169)
    {
        return lang(u8"(重装備)"s, u8"(Heavy)"s);
    }
    else if (id == 170)
    {
        return lang(u8"(中装備)"s, u8"(Medium)"s);
    }
    else
    {
        return lang(u8"(軽装備)"s, u8"(Light)"s);
    }
}



void refresh_speed_correction_value(int cc)
{
    int number_of_body_parts = 0;
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(cc, i) != 0)
        {
            ++number_of_body_parts;
        }
    }
    if (number_of_body_parts > 13)
    {
        cdata[cc].speed_correction_value = (number_of_body_parts - 13) * 5;
    }
    else
    {
        cdata[cc].speed_correction_value = 0;
    }
}



void gain_new_body_part(int cc)
{
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(cc, i) != 0)
        {
            continue;
        }
        if (rnd(7) == 0)
        {
            cdata_body_part(cc, i) = 20000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_2")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_2") + u8"!"s));
                break;
            }
        }
        if (rnd(9) == 0)
        {
            cdata_body_part(cc, i) = 30000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_3")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_3") + u8"!"s));
                break;
            }
        }
        if (rnd(8) == 0)
        {
            cdata_body_part(cc, i) = 50000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_5")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_5") + u8"!"s));
                break;
            }
        }
        if (rnd(4) == 0)
        {
            cdata_body_part(cc, i) = 60000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_6")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_6") + u8"!"s));
                break;
            }
        }
        if (rnd(6) == 0)
        {
            cdata_body_part(cc, i) = 70000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_7")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_7") + u8"!"s));
                break;
            }
        }
        if (rnd(5) == 0)
        {
            cdata_body_part(cc, i) = 80000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_8")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_8") + u8"!"s));
                break;
            }
        }
        if (rnd(5) == 0)
        {
            cdata_body_part(cc, i) = 90000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_9")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_9") + u8"!"s));
                break;
            }
        }
        if (rnd(1) == 0)
        {
            cdata_body_part(cc, i) = 10000;
            if (cm)
            {
                break;
            }
            else
            {
                txt(lang(
                    name(cc) + u8"の身体から新たな"s
                        + i18n::_(u8"ui", u8"body_part", u8"_1")
                        + u8"が生えてきた！"s,
                    name(cc) + u8" grow"s + _s(cc) + u8" a new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_1") + u8"!"s));
                break;
            }
        }
        break;
    }
    refresh_speed_correction_value(cc);
}



void gain_level(int cc)
{
    cdata[cc].experience -= cdata[cc].required_experience;
    if (cdata[cc].experience < 0)
    {
        cdata[cc].experience = 0;
    }
    ++cdata[cc].level;
    if (cdata[cc].character_role != 13)
    {
        if (r2 == 0)
        {
            txtef(2);
            if (cc == 0)
            {
                txt(lang(
                    name(cc) + u8"はレベル"s + cdata[cc].level
                        + u8"になった！"s,
                    name(cc) + u8" have gained a level."s));
            }
            else
            {
                txt(lang(
                    name(cc) + u8"は成長した。"s,
                    name(cc) + u8" "s + have(cc) + u8" grown up."s));
            }
        }
    }
    else
    {
        addnews(2, cc);
    }
    p = 5 * (100 + sdata.get(14, cc).original_level * 10)
            / (300 + cdata[cc].level * 15)
        + 1;
    if (cc == 0)
    {
        if (cdata[cc].level % 5 == 0)
        {
            if (cdata[cc].max_level < cdata[cc].level)
            {
                if (cdata[cc].level <= 50)
                {
                    ++gdata_acquirable_feat_count;
                }
            }
        }
        gain_special_action();
        p += trait(154);
    }
    cdata[cc].skill_bonus += p;
    cdata[cc].total_skill_bonus += p;
    if (cdatan(2, cc) == u8"mutant"s || (cc == 0 && trait(0) == 1))
    {
        if (cdata[cc].level < 37)
        {
            if (cdata[cc].level % 3 == 0)
            {
                if (cdata[cc].max_level < cdata[cc].level)
                {
                    gain_new_body_part(cc);
                }
            }
        }
    }
    if (cdata[cc].max_level < cdata[cc].level)
    {
        cdata[cc].max_level = cdata[cc].level;
    }
    if (cc >= 16)
    {
        label_1455(cc);
    }
    label_1456(cc);
    refresh_character(cc);
}



void label_1455(int cc)
{
    for (int cnt = 10; cnt < 20; ++cnt)
    {
        sdata.get(cnt, cc).original_level += rnd(3);
        if (sdata.get(cnt, cc).original_level > 2000)
        {
            sdata.get(cnt, cc).original_level = 2000;
        }
    }
    for (int cnt = 0, cnt_end = (length(mainskill)); cnt < cnt_end; ++cnt)
    {
        sdata.get(mainskill(cnt), cc).original_level += rnd(3);
        if (sdata.get(mainskill(cnt), cc).original_level > 2000)
        {
            sdata.get(mainskill(cnt), cc).original_level = 2000;
        }
    }
}



void label_1456(int cc)
{
    cdata[cc].required_experience = clamp(cdata[cc].level, 1, 200)
            * (clamp(cdata[cc].level, 1, 200) + 1)
            * (clamp(cdata[cc].level, 1, 200) + 2)
            * (clamp(cdata[cc].level, 1, 200) + 3)
        + 3000;
    if (cdata[cc].required_experience > 100000000
        || cdata[cc].required_experience < 0)
    {
        cdata[cc].required_experience = 100000000;
    }
}



void label_1457()
{
    skillexp(163, 0, 100);
    return;
}



void label_1458()
{
    skillexp(150, 0, 15, 10, 100);
    return;
}



void label_1459(int cc)
{
    if (r2 >= (sdata(156, cc) + 10) * (sdata(156, cc) + 10))
    {
        skillexp(
            156, cc, clamp(r2 * r2 / (sdata(156, cc) * 5 + 10), 10, 1000), 10);
    }
}



void gain_skill_experience_lock_picking(int cc)
{
    skillexp(158, cc, 100);
}



void gain_skill_experience_detection(int cc)
{
    skillexp(159, cc, gdata_current_dungeon_level * 2 + 20);
}



void gain_skill_experience_casting(int cc)
{
    if (cc == 0)
    {
        skillexp(r2, cc, the_ability_db[r2]->cost * 4 + 20, 4, 5);
        skillexp(172, cc, the_ability_db[r2]->cost + 10, 5);
    }
    else
    {
        skillexp(172, cc, the_ability_db[r2]->cost + 10, 5);
    }
}



void gain_skill_experience_mana_capacity(int cc)
{
    skillexp(164, cc, std::abs(cdata[cc].mp) * 200 / (cdata[cc].max_mp + 1));
}



void label_1464(int cc)
{
    if (cdata[cc].hp != cdata[cc].max_hp)
    {
        if (sdata(154, cc) < sdata(11, cc))
        {
            skillexp(154, cc, 5 + sdata(154, cc) / 5, 1000);
        }
    }
    if (cdata[cc].mp != cdata[cc].max_mp)
    {
        if (sdata(155, cc) < sdata(16, cc))
        {
            skillexp(155, cc, 5 + sdata(155, cc) / 5, 1000);
        }
    }
}



void label_1465(int cc)
{
    if (mdata(6) == 1)
    {
        if (rnd(20))
        {
            return;
        }
    }
    skillexp(157, cc, 2, 0, 1000);
}



void label_1466(int cc)
{
    skillexp(160, cc, 600);
}



void label_1468(int cc)
{
    if (cdata[0].inventory_weight_type == 0)
    {
        return;
    }
    if (mdata(6) == 1)
    {
        if (rnd(20))
        {
            return;
        }
    }
    skillexp(153, cc, 4, 0, 1000);
}



void label_1469(int cc)
{
    if (cc == 0)
    {
        skillexp(174, cc, 40);
    }
}



void label_1470(int cc)
{
    skillexp(185, cc, 100);
}



void label_1471(int cc)
{
    skillexp(165, cc, 10 + the_ability_db[efid]->sdataref4 / 5);
}



void label_1472(int skill)
{
    skillexp(skill, 0, 50 + r2 * 20);
}



void cnvbonus(int prm_895, int prm_896)
{
    if (prm_895 >= 50 && prm_895 < 61)
    {
        if (prm_896 > 0)
        {
            buff += u8"　　"s
                + i18n::_(u8"ability", std::to_string(prm_895), u8"name")
                + u8"耐性に <green>クラス"s + prm_896 / 50 + u8"<col>("s
                + prm_896 + u8") のボーナス\n"s;
        }
        if (prm_896 < 0)
        {
            buff += u8"　　"s
                + i18n::_(u8"ability", std::to_string(prm_895), u8"name")
                + u8"耐性に <red>クラス"s + prm_896 / 50 + u8"<col>("s + prm_896
                + u8") のマイナス修正\n"s;
        }
    }
    else
    {
        if (prm_896 > 0)
        {
            buff += u8"　　"s
                + i18n::_(u8"ability", std::to_string(prm_895), u8"name")
                + u8"に <green>+"s + prm_896 + u8"<col> のボーナス\n"s;
        }
        if (prm_896 < 0)
        {
            buff += u8"　　"s
                + i18n::_(u8"ability", std::to_string(prm_895), u8"name")
                + u8"に <red>"s + prm_896 + u8"<col> のマイナス修正\n"s;
        }
    }
    return;
}



void refresh_character(int cc)
{
    int rp = 0;
    int rp2 = 0;
    int rp3 = 0;
    if (cc == 0)
    {
        gdata_seven_league_boot_effect = 0;
        gdata_ether_disease_speed = 0;
        gdata_protects_from_etherwind = 0;
        gdata_protects_from_bad_weather = 0;
        gdata(89) = 70;
        gdata_catches_god_signal = 0;
        gdata_reveals_religion = 0;
    }
    for (int cnt = 0; cnt < 600; ++cnt)
    {
        sdata(cnt, cc) = sdata.get(cnt, cc).original_level;
    }
    if (cc == 0)
    {
        cdata(cc).clear_flags();
        if (trait(161) != 0)
        {
            for (int i = 0; i < 30; ++i)
            {
                if (cdata_body_part(cc, i) % 10000 == 0)
                {
                    continue;
                }
                rp = cdata_body_part(cc, i) % 10000 - 1;
                if (inv[rp].weight >= 1000)
                {
                    cdata_body_part(cc, i) =
                        cdata_body_part(cc, i) / 10000 * 10000;
                    inv[rp].body_part = 0;
                }
            }
        }
    }
    else if (cdata[cc].id == 343)
    {
        for (size_t i = 0; i < 32 * 30; ++i)
        {
            cdata[cc]._flags[i] =
                userdata(40 + i / (8 * sizeof(int)), cdata[cc].cnpc_id)
                & (1 << (i % (8 * sizeof(int))));
        }
    }
    else
    {
        for (size_t i = 0; i < 32 * 30; ++i)
        {
            cdata[cc]._flags[i] = the_character_db[cdata[cc].id]->_flags[i];
        }
    }
    for (int cnt = 10; cnt < 20; ++cnt)
    {
        cdata[cc].growth_buffs[cnt - 10] = 0;
    }
    cdata[cc].dv = 0;
    cdata[cc].pv = 0;
    cdata[cc].hit_bonus = 0;
    cdata[cc].damage_bonus = 0;
    cdata[cc].equipment_type = 0;
    attacknum = 0;
    cdata[cc].rate_to_pierce = 0;
    if (sdata(186, cc))
    {
        cdata[cc].rate_of_critical_hit = int(std::sqrt(sdata(186, cc))) + 2;
    }
    else
    {
        cdata[cc].rate_of_critical_hit = 0;
    }
    cdata[cc].curse_power = 0;
    cdata[cc].extra_attack = 0;
    cdata[cc].extra_shot = 0;
    cdata[cc].sum_of_equipment_weight = 0;
    cdata[cc].decrease_physical_damage = 0;
    cdata[cc].nullify_damage = 0;
    cdata[cc].cut_counterattack = 0;
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(cc, i) % 10000 == 0)
        {
            continue;
        }
        rp = cdata_body_part(cc, i) % 10000 - 1;
        cdata[cc].sum_of_equipment_weight += inv[rp].weight;
        if (inv[rp].skill == 168)
        {
            if (!(cdata[cc].equipment_type & 1))
            {
                cdata[cc].equipment_type += 1;
            }
        }
        cdata[cc].dv += inv[rp].dv;
        cdata[cc].pv += inv[rp].pv;
        if (inv[rp].dice_x == 0)
        {
            cdata[cc].hit_bonus += inv[rp].hit_bonus;
            cdata[cc].damage_bonus += inv[rp].damage_bonus;
            cdata[cc].pv += inv[rp].enhancement * 2
                + (inv[rp].curse_state == curse_state_t::blessed) * 2;
        }
        else if (cdata_body_part(cc, i) / 10000 == 5)
        {
            ++attacknum;
        }
        if (inv[rp].curse_state == curse_state_t::cursed)
        {
            cdata[cc].curse_power += 20;
        }
        if (inv[rp].curse_state == curse_state_t::doomed)
        {
            cdata[cc].curse_power += 100;
        }
        if (inv[rp].material == 8)
        {
            if (cc == 0)
            {
                gdata_ether_disease_speed += 5;
            }
        }
        for (int cnt = 0; cnt < 15; ++cnt)
        {
            if (inv[rp].enchantments[cnt].id == 0)
            {
                break;
            }
            rp2 = inv[rp].enchantments[cnt].id;
            if (rp2 >= 10000)
            {
                rp3 = rp2 % 10000;
                rp2 = rp2 / 10000;
                if (rp2 == 1)
                {
                    sdata(rp3, cc) += inv[rp].enchantments[cnt].power / 50 + 1;
                    continue;
                }
                if (rp2 == 2)
                {
                    sdata(rp3, cc) += inv[rp].enchantments[cnt].power / 2;
                    if (sdata(rp3, cc) < 0)
                    {
                        sdata(rp3, cc) = 1;
                    }
                    continue;
                }
                if (rp2 == 3)
                {
                    if (sdata.get(rp3, cc).original_level != 0)
                    {
                        sdata(rp3, cc) +=
                            inv[rp].enchantments[cnt].power / 50 + 1;
                        if (sdata(rp3, cc) < 1)
                        {
                            sdata(rp3, cc) = 1;
                        }
                    }
                    continue;
                }
            }
            else
            {
                if (rp2 == 56)
                {
                    if (cc == 0)
                    {
                        gdata_catches_god_signal = 1;
                        continue;
                    }
                }
                if (rp2 == 59)
                {
                    if (cc == 0)
                    {
                        gdata_reveals_religion = 1;
                        continue;
                    }
                }
                if (rp2 == 29)
                {
                    sdata(18, cc) += inv[rp].enchantments[cnt].power / 50 + 1;
                    if (cc == 0)
                    {
                        gdata_seven_league_boot_effect +=
                            inv[rp].enchantments[cnt].power / 8;
                        continue;
                    }
                }
                if (rp2 == 32)
                {
                    cdata[cc].is_floating() = true;
                    continue;
                }
                if (rp2 == 35)
                {
                    cdata[cc].can_see_invisible() = true;
                    continue;
                }
                if (rp2 == 23)
                {
                    cdata[cc].is_immune_to_blindness() = true;
                    continue;
                }
                if (rp2 == 24)
                {
                    cdata[cc].is_immune_to_paralyzation() = true;
                    continue;
                }
                if (rp2 == 25)
                {
                    cdata[cc].is_immune_to_confusion() = true;
                    continue;
                }
                if (rp2 == 26)
                {
                    cdata[cc].is_immune_to_fear() = true;
                    continue;
                }
                if (rp2 == 27)
                {
                    cdata[cc].is_immune_to_sleep() = true;
                    continue;
                }
                if (rp2 == 28)
                {
                    cdata[cc].is_immune_to_poison() = true;
                    continue;
                }
                if (rp2 == 42)
                {
                    cdata[cc].can_digest_rotten_food() = true;
                    continue;
                }
                if (rp2 == 41)
                {
                    cdata[cc].is_protected_from_thieves() = true;
                    continue;
                }
                if (rp2 == 55)
                {
                    cdata[cc].cures_bleeding_quickly() = true;
                    continue;
                }
                if (rp2 == 52)
                {
                    cdata[cc].decrease_physical_damage +=
                        inv[rp].enchantments[cnt].power / 40 + 5;
                    continue;
                }
                if (rp2 == 53)
                {
                    cdata[cc].nullify_damage +=
                        inv[rp].enchantments[cnt].power / 60 + 3;
                    continue;
                }
                if (rp2 == 54)
                {
                    cdata[cc].cut_counterattack +=
                        inv[rp].enchantments[cnt].power / 5;
                    continue;
                }
                if (rp2 == 44)
                {
                    cdata[cc].rate_of_critical_hit +=
                        inv[rp].enchantments[cnt].power / 50;
                    continue;
                }
                if (rp2 == 39)
                {
                    cdata[cc].rate_to_pierce +=
                        inv[rp].enchantments[cnt].power / 50;
                    continue;
                }
                if (rp2 == 50)
                {
                    cdata[cc].extra_attack +=
                        inv[rp].enchantments[cnt].power / 15;
                    continue;
                }
                if (rp2 == 51)
                {
                    cdata[cc].extra_shot +=
                        inv[rp].enchantments[cnt].power / 15;
                    continue;
                }
                if (rp2 == 21 || rp2 == 45 || rp2 == 46 || rp2 == 47)
                {
                    cdata[cc].has_cursed_equipments() = true;
                    continue;
                }
                if (cc == 0)
                {
                    if (rp2 == 30)
                    {
                        gdata_protects_from_etherwind = 1;
                        continue;
                    }
                    if (rp2 == 31)
                    {
                        gdata_protects_from_bad_weather = 1;
                        continue;
                    }
                }
            }
        }
    }
    if (refreshmode == 1)
    {
        buff += u8"\n"s;
        buff += u8"<title1>◆ 装備による能力の修正<def>\n"s;
        for (int cnt = 0; cnt < 600; ++cnt)
        {
            sdata(cnt, 56) = sdata.get(cnt, cc).original_level;
            if (sdata(cnt, 56) != sdata(cnt, cc))
            {
                rp = sdata(cnt, cc) - sdata(cnt, 56);
                cnvbonus(cnt, rp);
            }
        }
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (cdata[cc].attr_adjs[cnt] != 0)
        {
            if (cdata[cc].quality >= 4)
            {
                if (cdata[cc].attr_adjs[cnt]
                    < sdata.get(10 + cnt, cc).original_level / 5)
                {
                    cdata[cc].attr_adjs[cnt] =
                        sdata.get(10 + cnt, cc).original_level / 5;
                }
            }
            sdata(10 + cnt, cc) += cdata[cc].attr_adjs[cnt];
        }
        if (sdata(10 + cnt, cc) < 1)
        {
            sdata(10 + cnt, cc) = 1;
        }
    }
    if (cc == 0)
    {
        apply_god_blessing(cc);
        for (int cnt = 0; cnt < 217; ++cnt)
        {
            if (trait(cnt) != 0)
            {
                get_trait_info(1, cnt);
            }
        }
    }
    if (cdata[cc].equipment_type & 1)
    {
        if (cdata[cc].pv > 0)
        {
            cdata[cc].pv =
                cdata[cc].pv * (120 + int(std::sqrt(sdata(168, cc))) * 2) / 100;
        }
    }
    else if (attacknum == 1)
    {
        cdata[cc].equipment_type += 2;
    }
    else if (attacknum != 0)
    {
        cdata[cc].equipment_type += 4;
    }
    cdata[cc].max_mp =
        clamp(
            ((sdata(16, cc) * 2 + sdata(15, cc) + sdata(14, cc) / 3)
                 * cdata[cc].level / 25
             + sdata(16, cc)),
            1,
            1000000)
        * sdata(3, cc) / 100;
    cdata[cc].max_hp =
        clamp(
            ((sdata(11, cc) * 2 + sdata(10, cc) + sdata(15, cc) / 3)
                 * cdata[cc].level / 25
             + sdata(11, cc)),
            1,
            1000000)
            * sdata(2, cc) / 100
        + 5;
    cdata[cc].max_sp =
        100 + (sdata(15, cc) + sdata(11, cc)) / 5 + trait(24) * 8;
    if (cdata[cc].max_mp < 1)
    {
        cdata[cc].max_mp = 1;
    }
    if (cdata[cc].max_hp < 1)
    {
        cdata[cc].max_hp = 1;
    }
    if (cc >= ELONA_MAX_PARTY_CHARACTERS || false)
    {
        cdata[cc].dv = cdata[cc].level / 2
            + cdata[cc].dv * cdata[cc].dv_correction_value / 100
            + cdata[cc].dv_correction_value - 100;
        cdata[cc].pv = cdata[cc].level
            + (cdata[cc].pv + cdata[cc].level / 2
               + cdata[cc].pv_correction_value / 25)
                * cdata[cc].pv_correction_value / 100;
        if (cdata[cc].quality == 3)
        {
            cdata[cc].max_hp = cdata[cc].max_hp * 3 / 2;
        }
        if (cdata[cc].quality >= 4)
        {
            cdata[cc].max_hp = cdata[cc].max_hp * 5;
        }
    }
    else
    {
        cdata[cc].max_hp += 10;
    }
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        rp = cdata[cc].buffs[cnt].id;
        if (rp == 0)
        {
            break;
        }
        apply_buff(cc, rp, cdata[cc].buffs[cnt].power);
    }
    if (cdata[cc].equipment_type & 4)
    {
        cdata[cc].extra_attack += int(std::sqrt(sdata(166, cc))) * 3 / 2 + 4;
    }
    if (cdata[cc].rate_of_critical_hit > 30)
    {
        cdata[cc].hit_bonus += (cdata[cc].rate_of_critical_hit - 30) * 2;
        cdata[cc].rate_of_critical_hit = 30;
    }
    refresh_burden_state();
    refreshspeed(cc);
    cdata[cc].needs_refreshing_status() = false;
}



void skillinit(int id, int cc, int initial_level)
{
    int potential = 0;
    int original_level = sdata.get(id, cc).original_level;
    if (id >= 100)
    {
        potential = initial_level * 5;
        if (original_level == 0)
        {
            potential += 100;
        }
        else
        {
            potential += 50;
        }
    }
    else
    {
        potential = initial_level * 20;
        if (potential > 400)
        {
            potential = 400;
        }
    }
    int level = 0;
    if (id == 18)
    {
        level = initial_level * (100 + cdata[cc].level * 2) / 100;
    }
    else
    {
        level = potential * potential * cdata[cc].level / 45000 + initial_level
            + cdata[cc].level / 3;
    }
    if (cdata[cc].level > 1)
    {
        potential = std::exp(std::log(0.9) * cdata[cc].level) * potential;
    }
    if (potential < 1)
    {
        potential = 1;
    }
    if (id == 2 || id == 19 || id == 3)
    {
        level = initial_level;
        potential = 100;
    }
    if (original_level + level > 2000)
    {
        level = 2000 - original_level;
    }
    sdata.get(id, cc).original_level += clamp(level, 0, 2000);
    sdata.get(id, cc).potential += potential;
}



void label_1512(int cc)
{
    for (int cnt = 50; cnt < 61; ++cnt)
    {
        p = cdata[cc].level * 4 + 96;
        if (p > 300)
        {
            p = 300;
        }
        if (sdata(cnt, cc) != 0)
        {
            if (sdata(cnt, cc) < 100 || sdata(cnt, cc) >= 500)
            {
                p = sdata(cnt, cc);
            }
            else
            {
                p += sdata(cnt, cc);
            }
        }
        if ((cnt == 60 && p < 500) || cc == 0)
        {
            p = 100;
        }
        sdata.get(cnt, cc).original_level = clamp(p(0), 1, 2000);
        sdata.get(cnt, cc).experience = 0;
        sdata.get(cnt, cc).potential = 0;
    }

    skillinit(100, cc, 4);
    skillinit(101, cc, 4);
    skillinit(103, cc, 4);
    skillinit(102, cc, 4);
    skillinit(104, cc, 4);
    skillinit(105, cc, 4);
    skillinit(107, cc, 4);
    skillinit(108, cc, 4);
    skillinit(111, cc, 4);
    skillinit(109, cc, 4);
    skillinit(173, cc, 4);
    skillinit(154, cc, 4);
    skillinit(155, cc, 4);
    skillinit(106, cc, 4);
    skillinit(157, cc, 4);
    skillinit(181, cc, 4);
    skillinit(171, cc, 4);
    skillinit(170, cc, 4);
    skillinit(169, cc, 4);
    skillinit(168, cc, 3);
    skillinit(19, cc, 50);
}



int try_to_cast_spell()
{
    int r4 = 0;
    f = 1;
    tc = cc;
    if (cdata[cc].blind != 0)
    {
        f = 0;
    }
    if (cdata[cc].confused != 0 || cdata[cc].dimmed != 0)
    {
        if (rnd(4) != 0)
        {
            f = 0;
        }
    }
    else
    {
        if (r3 == 0)
        {
            r4 = sdata(16, cc);
        }
        else
        {
            r4 = sdata(the_ability_db[r3]->related_basic_attribute, cc);
        }
        if (rnd(sdata(150, cc) * r4 * 4 + 250) < rnd(r2 + 1))
        {
            if (rnd(7) == 0)
            {
                f = 0;
            }
            if (r4 * 10 < r2)
            {
                if (rnd(r4 * 10 + 1) < rnd(r2 + 1))
                {
                    f = 0;
                }
            }
            if (r4 * 20 < r2)
            {
                if (rnd(r4 * 20 + 1) < rnd(r2 + 1))
                {
                    f = 0;
                }
            }
            if (r4 * 30 < r2)
            {
                if (rnd(r4 * 30 + 1) < rnd(r2 + 1))
                {
                    f = 0;
                }
            }
        }
    }
    if (f == 1)
    {
        return 1;
    }
    if (rnd(4) == 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"はマナを吸い取られた！"s,
                name(cc) + your(cc) + u8" mana is absorbed."s));
        }
        if (cc == 0)
        {
            dmgmp(cc, cdata[cc].max_mp);
        }
        else
        {
            dmgmp(cc, cdata[cc].max_mp / 3);
        }
        return 0;
    }
    if (rnd(4) == 0)
    {
        if (is_in_fov(cc))
        {
            if (cdata[cc].confused != 0)
            {
                txt(lang(
                    name(cc) + u8"は余計に混乱した。"s,
                    name(cc) + u8" "s + is(cc) + u8" confused more."s));
            }
            else
            {
                txt(lang(u8"難解だ！"s, u8"It's too difficult!"s));
            }
        }
        dmgcon(cc, 5, 100);
        return 0;
    }
    if (rnd(4) == 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"魔力の渦が何かを召喚した！"s,
                u8"Several creatures are summoned from a vortex of magic."s));
        }
        for (int cnt = 0, cnt_end = (2 + rnd(3)); cnt < cnt_end; ++cnt)
        {
            flt(calcobjlv(cdata[0].level * 3 / 2 + 3), calcfixlv(2));
            int stat =
                characreate(-1, 0, cdata[cc].position.x, cdata[cc].position.y);
            if (stat != 0)
            {
                if (cdata[cc].relationship <= -3)
                {
                    cdata[rc].relationship = -1;
                    cdata[rc].original_relationship = -1;
                }
            }
        }
        return 0;
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            name(cc) + u8"は奇妙な力に捻じ曲げられた！"s,
            u8"A dimension door opens in front of you."s));
    }
    tc = cc;
    efid = 408;
    magic();
    return 0;
}



int try_to_reveal()
{
    if (rnd(sdata(159, cc) * 15 + 20 + sdata(13, cc))
        > rnd(gdata_current_dungeon_level * 8 + 60))
    {
        gain_skill_experience_detection(cc);
        return 1;
    }
    return 0;
}



int can_evade_trap()
{
    if (feat(2) == 7)
    {
        return 0;
    }
    if (cc < 16)
    {
        if (rnd(refdiff + 1) < sdata(13, cc) + sdata(159, cc) * 4)
        {
            return 1;
        }
    }
    else if (rnd(4) != 0)
    {
        return 1;
    }
    return 0;
}



void gain_disarm_trap_experience()
{
    skillexp(175, cc, 50);
    return;
}



int try_to_disarm_trap()
{
    if (rnd(sdata(175, cc) * 15 + 20 + sdata(12, cc))
        > rnd(gdata_current_dungeon_level * 12 + 100))
    {
        gain_disarm_trap_experience();
        return 1;
    }
    return 0;
}



int try_to_perceive_npc(int cc)
{
    int cv = 0;
    cv = 8;
    if (cdata[cc].position.x > cdata[r2].position.x - cv
        && cdata[cc].position.x < cdata[r2].position.x + cv)
    {
        if (cdata[cc].position.y > cdata[r2].position.y - cv
            && cdata[cc].position.y < cdata[r2].position.y + cv)
        {
            if (cdata[r2].hate > 0)
            {
                return 1;
            }
            p = dist(
                    cdata[cc].position.x,
                    cdata[cc].position.y,
                    cdata[r2].position.x,
                    cdata[r2].position.y)
                    * 150
                + (sdata(157, cc) * 100 + 150) + 1;
            if (rnd(p) < rnd(sdata(13, r2) * 60 + 150))
            {
                return 1;
            }
        }
    }
    if (pcnoise != 0)
    {
        if (rnd(150) < pcnoise)
        {
            return 1;
        }
    }
    return 0;
}



void get_hungry(int cc)
{
    if ((trait(158) && rnd(3) == 0) || debug::voldemort)
        return;

    int p = cdata[cc].nutrition / 1000;
    cdata[cc].nutrition -= 8;
    if (cdata[cc].nutrition / 1000 != p)
    {
        if (p == 1)
        {
            msgalert = 1;
            txt(lang(u8"このままだと餓死してしまう！"s, u8"You are starving!"s),
                lang(
                    u8"腹が減ってほとんど死にかけている。"s,
                    u8"You are almost dead from hunger."s));
        }
        else if (p == 2)
        {
            msgalert = 1;
            txt(lang(
                    u8"空腹で目が回りだした…"s,
                    u8"Your hunger makes you dizzy."s),
                lang(
                    u8"すぐに何かを食べなくては…"s,
                    u8"You have to eat something NOW."s));
        }
        else if (p == 5)
        {
            msgalert = 1;
            txt(lang(u8"腹がすいてきた。"s, u8"You are getting hungry."s),
                lang(u8"空腹になった。"s, u8"You feel hungry."s),
                lang(u8"さて何を食べようか。"s, u8"Now what shall I eat?"s));
        }
        refreshspeed(cc);
    }
}



void label_1520(int cc)
{
    int regen = 0;
    regen = 1;
    if (cdata[cc].sleep > 0)
    {
        healcon(cc, 2, 1);
        if (cdata[cc].sleep > 0)
        {
            cdata[cc].emotion_icon = 114;
        }
        healhp(cc, 1);
        healmp(cc, 1);
    }
    if (cdata[cc].poisoned > 0)
    {
        dmghp(cc, rnd(2 + sdata(11, cc) / 10), -4);
        healcon(cc, 1, 1);
        if (cdata[cc].poisoned > 0)
        {
            cdata[cc].emotion_icon = 108;
        }
        regen = 0;
    }
    if (cdata[cc].choked > 0)
    {
        if (cdata[cc].choked % 3 == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(u8"「うぐぐ…！」"s, u8"\"Ughh...!\""s));
            }
        }
        ++cdata[cc].choked;
        if (cdata[cc].choked > 15)
        {
            dmghp(cc, 500, -21);
        }
        regen = 0;
    }
    if (cdata[cc].gravity > 0)
    {
        --cdata[cc].gravity;
        if (cdata[cc].gravity == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"は重力から抜け出した。"s,
                    name(cc) + u8" break"s + _s(cc)
                        + u8" away from gravity."s));
            }
        }
    }
    if (cdata[cc].furious > 0)
    {
        --cdata[cc].furious;
        if (cdata[cc].furious == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"はやや落ち着いた。"s,
                    name(cc) + u8" calm"s + _s(cc) + u8" down."s));
            }
        }
    }
    if (cdata[cc].sick > 0)
    {
        if (rnd(80) == 0)
        {
            p = rnd(10);
            if (encfind(cc, 60010 + p) == -1)
            {
                cdata[cc].attr_adjs[p] -=
                    sdata.get(10 + p, cc).original_level / 25 + 1;
                refresh_character(cc);
            }
        }
        if (rnd(5))
        {
            regen = 0;
        }
        if (cc >= 16)
        {
            if (cdata[cc].quality >= 4)
            {
                if (rnd(200) == 0)
                {
                    healcon(cc, 12);
                }
            }
        }
    }
    if (cdata[cc].blind > 0)
    {
        healcon(cc, 4, 1);
        if (cdata[cc].blind > 0)
        {
            cdata[cc].emotion_icon = 110;
        }
    }
    if (cdata[cc].paralyzed > 0)
    {
        regen = 0;
        healcon(cc, 3, 1);
        if (cdata[cc].paralyzed > 0)
        {
            cdata[cc].emotion_icon = 115;
        }
    }
    if (cdata[cc].confused > 0)
    {
        healcon(cc, 5, 1);
        if (cdata[cc].confused > 0)
        {
            cdata[cc].emotion_icon = 111;
        }
    }
    if (cdata[cc].fear > 0)
    {
        healcon(cc, 6, 1);
        if (cdata[cc].fear > 0)
        {
            cdata[cc].emotion_icon = 113;
        }
    }
    if (cdata[cc].dimmed > 0)
    {
        healcon(cc, 7, 1);
        if (cdata[cc].dimmed > 0)
        {
            cdata[cc].emotion_icon = 112;
        }
    }
    if (cdata[cc].drunk > 0)
    {
        healcon(cc, 8, 1);
        if (cdata[cc].drunk > 0)
        {
            cdata[cc].emotion_icon = 106;
        }
    }
    if (cdata[cc].bleeding > 0)
    {
        dmghp(
            cc,
            rnd(cdata[cc].hp * (1 + cdata[cc].bleeding / 4) / 100 + 3) + 1,
            -13);
        healcon(cc, 9, 1 + cdata[cc].cures_bleeding_quickly() * 3);
        if (cdata[cc].bleeding > 0)
        {
            cdata[cc].emotion_icon = 109;
        }
        regen = 0;
        spillblood(cdata[cc].position.x, cdata[cc].position.y);
    }
    if (cdata[cc].wet > 0)
    {
        --cdata[cc].wet;
    }
    if (cdata[cc].insane > 0)
    {
        if (is_in_fov(cc))
        {
            if (rnd(3) == 0)
            {
                txtef(9);
                if (jp)
                {
                    r2 = rnd(5);
                    if (r2 == 0)
                    {
                        txt(name(cc) + u8"「キョキョキョ」"s,
                            name(cc) + u8"「クワッ」"s,
                            name(cc) + u8"「シャアァァ」"s,
                            name(cc) + u8"「ばぶっふ！」"s,
                            name(cc) + u8"「煮殺せ！」"s,
                            name(cc) + u8"「許しなさい許しなさい！！」"s);
                    }
                    if (r2 == 1)
                    {
                        txt(name(cc) + u8"「フゥハハハー！」"s,
                            name(cc) + u8"「あ、あ、あ、あ」"s,
                            name(cc) + u8"「ぴ…ぴ…ぴか…」"s,
                            name(cc) + u8"「お兄ちゃん！」"s,
                            name(cc) + u8"「うみみやぁ」"s);
                    }
                    if (r2 == 2)
                    {
                        txt(name(cc) + u8"は突然踊りだした。"s,
                            name(cc) + u8"は着ていたものを脱ぎだした。"s,
                            name(cc) + u8"はぐるぐる回りだした。"s,
                            name(cc) + u8"は奇声を発した。"s,
                            name(cc) + u8"「ねうねう♪ねうねう♪」"s);
                    }
                    if (r2 == 3)
                    {
                        txt(name(cc) + u8"「ウージッムシ♪ウージッムシ♪」"s,
                            name(cc) + u8"「じゃあ殺さなきゃ。うん♪」"s,
                            name(cc) + u8"「このナメクジがっ」"s,
                            name(cc) + u8"「おすわり！」"s,
                            name(cc) +
                                u8"「フーーーーン フーーーーン･･･ フーーーンフ」"s);
                    }
                    if (r2 == 4)
                    {
                        txt(name(cc) + u8"「このかたつむり野郎がっ」"s,
                            name(cc) + u8"「うにゅみゅあ！」"s,
                            name(cc) + u8"「ごめんなさいごめんなさい！」"s,
                            name(cc) + u8"「もうすぐ生まれるよ♪」"s,
                            name(cc) + u8"「フーーーーン フー…クワッ！」"s);
                    }
                }
                else
                {
                    r2 = rnd(2);
                    if (r2 == 0)
                    {
                        txt(name(cc) + u8" start"s + _s(cc) + u8" to take "s
                                + his(cc) + u8" cloths off."s,
                            name(cc) + u8" shout"s + _s(cc) + u8"."s,
                            name(cc) + u8" dance"s + _s(cc) + u8"."s);
                    }
                    if (r2 == 1)
                    {
                        txt(u8"\"Weeeeeee!\""s,
                            u8"\"Forgive me! Forgive me!\""s,
                            u8"\"P-P-Pika!\""s,
                            u8"\"Shhhhhh!\""s,
                            u8"\"So I have to kill.\""s,
                            u8"\"You snail!\""s);
                    }
                }
            }
        }
        if (rnd(5) == 0)
        {
            cdata[cc].confused += rnd(10);
        }
        if (rnd(5) == 0)
        {
            cdata[cc].dimmed += rnd(10);
        }
        if (rnd(5) == 0)
        {
            cdata[cc].sleep += rnd(5);
        }
        if (rnd(5) == 0)
        {
            cdata[cc].fear += rnd(10);
        }
        healcon(cc, 11, 1);
        if (cdata[cc].insane > 0)
        {
            cdata[cc].emotion_icon = 124;
        }
    }
    if (cc == 0)
    {
        if (cdata[cc].nutrition < 2000)
        {
            if (cdata[cc].nutrition < 1000)
            {
                if (cdata[cc].continuous_action_id != 1)
                {
                    dmghp(cc, rnd(2) + cdata[0].max_hp / 50, -3);
                    if (gdata_play_turns % 10 == 0)
                    {
                        rowact_check(cc);
                        if (rnd(50) == 0)
                        {
                            modweight(cc, -1);
                        }
                    }
                }
            }
            regen = 0;
        }
        if (gdata_continuous_active_hours >= 30)
        {
            if (debug::voldemort)
            {
                gdata_continuous_active_hours = 0;
            }
            if (gdata_play_turns % 100 == 0)
            {
                txt(lang(
                    u8"あなたは眠りを必要としている。"s,
                    u8"You need to sleep."s));
            }
            if (rnd(2))
            {
                regen = 0;
            }
            if (gdata_continuous_active_hours >= 50)
            {
                regen = 0;
                dmgsp(cc, 1);
            }
        }
    }
    else if (cdata[cc].related_quest_id != 0)
    {
        p = cdata[cc].related_quest_id - 1;
        if (qdata(15, p) > 0)
        {
            cdata[cc].emotion_icon = 122;
        }
        if (qdata(8, p) != 0)
        {
            if (cdata[cc].turn % 2 == 1)
            {
                cdata[cc].emotion_icon = 123;
            }
        }
    }
    if (gdata_executing_immediate_quest_type == 1009)
    {
        if (cc >= 57)
        {
            if (cdata[cc].impression >= 53)
            {
                cdata[cc].emotion_icon = 225;
            }
        }
    }
    if (regen == 1)
    {
        if (rnd(6) == 0)
        {
            healhp(cc, rnd(sdata(154, cc) / 3 + 1) + 1);
        }
        if (rnd(5) == 0)
        {
            healmp(cc, rnd(sdata(155, cc) / 2 + 1) + 1);
        }
    }
}



void refresh_burden_state()
{
    cdata[0].inventory_weight = clamp(inv_weight(0), 0, 20000000)
        * (100 - trait(201) * 10 + trait(205) * 20) / 100;
    cdata[0].max_inventory_weight =
        sdata(10, 0) * 500 + sdata(11, 0) * 250 + sdata(153, 0) * 2000 + 45000;
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (cdata[0].inventory_weight > cdata[0].max_inventory_weight * 2)
        {
            cdata[0].inventory_weight_type = 4;
            break;
        }
        if (cdata[0].inventory_weight > cdata[0].max_inventory_weight)
        {
            cdata[0].inventory_weight_type = 3;
            break;
        }
        if (cdata[0].inventory_weight > cdata[0].max_inventory_weight / 4 * 3)
        {
            cdata[0].inventory_weight_type = 2;
            break;
        }
        if (cdata[0].inventory_weight > cdata[0].max_inventory_weight / 2)
        {
            cdata[0].inventory_weight_type = 1;
            break;
        }
        cdata[0].inventory_weight_type = 0;
    }
    refreshspeed(0);
    return;
}



void gain_special_action()
{
    if (sdata.get(174, 0).original_level > 15)
    {
        if (spact(29) == 0)
        {
            spact(29) = 1;
            txtef(5);
            txt(lang(
                u8"あなたは「"s
                    + i18n::_(u8"ability", std::to_string(629), u8"name")
                    + u8"」の能力を得た。"s,
                u8"You have learned new ability, "s
                    + i18n::_(u8"ability", std::to_string(629), u8"name")
                    + u8"."s));
        }
        if (spact(30) == 0)
        {
            spact(30) = 1;
            txtef(5);
            txt(lang(
                u8"あなたは「"s
                    + i18n::_(u8"ability", std::to_string(630), u8"name")
                    + u8"」の能力を得た。"s,
                u8"You have learned new ability, "s
                    + i18n::_(u8"ability", std::to_string(630), u8"name")
                    + u8"."s));
        }
    }
    if (sdata.get(152, 0).original_level > 15)
    {
        if (spact(31) == 0)
        {
            spact(31) = 1;
            txtef(5);
            txt(lang(
                u8"あなたは「"s
                    + i18n::_(u8"ability", std::to_string(631), u8"name")
                    + u8"」の能力を得た。"s,
                u8"You have learned new ability, "s
                    + i18n::_(u8"ability", std::to_string(631), u8"name")
                    + u8"."s));
        }
    }
    return;
}



int eqweaponlight()
{
    if (rnd(2))
    {
        return 10003;
    }
    if (rnd(2))
    {
        return 10009;
    }
    return 10004;
}



int eqweaponheavy()
{
    if (rnd(3) == 0)
    {
        return 10001;
    }
    if (rnd(3) == 0)
    {
        return 10010;
    }
    if (rnd(3) == 0)
    {
        return 10008;
    }
    return 10005;
}



void eqrandweaponmage(int prm_929)
{
    int p_at_m162 = 0;
    p_at_m162 = rnd(2);
    if (p_at_m162 == 0)
    {
        eqweapon1(0) = 10003;
        eqweapon1(1) = prm_929;
    }
    if (p_at_m162 == 1)
    {
        eqweapon1(0) = 10006;
        eqweapon1(1) = prm_929;
    }
    return;
}



void label_1530()
{
    elona_vector1<int> eqhelm;
    elona_vector1<int> eqshield;
    elona_vector1<int> eqweapon2;
    elona_vector1<int> eqarmor;
    elona_vector1<int> eqglove;
    elona_vector1<int> eqboots;
    elona_vector1<int> eqcloack;
    elona_vector1<int> eqgirdle;
    elona_vector1<int> eqring2;
    elona_vector1<int> eqamulet1;
    elona_vector1<int> eqamulet2;
    int fixeq = 0;
    int probeq = 0;
    int eqtwowield = 0;
    if (cdatan(2, rc) == u8"mutant"s)
    {
        for (int cnt = 0, cnt_end = cnt + clamp(cdata[rc].level / 3, 0, 12);
             cnt < cnt_end;
             ++cnt)
        {
            gain_new_body_part(rc);
        }
    }

    eqhelm.clear();
    eqweapon1.clear();
    eqshield.clear();
    eqrange.clear();
    eqammo.clear();
    eqweapon2.clear();
    eqarmor.clear();
    eqglove.clear();
    eqboots.clear();
    eqcloack.clear();
    eqgirdle.clear();
    eqring1.clear();
    eqring2.clear();
    eqamulet1.clear();
    eqamulet2.clear();

    if (mode == 1)
    {
        fixeq = 0;
        probeq = 10;
    }
    else if (cdata[rc].quality <= 2)
    {
        probeq = 3;
        fixeq = 0;
    }
    else if (cdata[rc].quality == 3)
    {
        probeq = 6;
        fixeq = 0;
    }
    else if (cdata[rc].quality == 4)
    {
        probeq = 8;
        fixeq = 1;
    }
    else
    {
        probeq = 10;
        fixeq = 1;
    }
    if (cequipment == 1)
    {
        generatemoney(rc);
        eqweapon1(0) = eqweaponheavy();
        eqweapon1(1) = 2;
        eqshield(0) = 14003;
        eqshield(1) = 1;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqhelm(0) = 12001;
            eqhelm(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqgirdle(0) = 19001;
            eqgirdle(1) = 1;
        }
        eqrange(0) = 24030;
        eqrange(1) = 1;
    }
    if (cequipment == 8)
    {
        generatemoney(rc);
        eqweapon1(0) = 232;
        eqweapon1(1) = 3;
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqgirdle(0) = 19001;
            eqgirdle(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqcloack(0) = 20001;
            eqcloack(1) = 2;
        }
        eqrange(0) = 24030;
        eqrange(1) = 1;
        eqtwohand = 1;
    }
    if (cequipment == 7)
    {
        generatemoney(rc);
        eqweapon1(0) = eqweaponlight();
        eqweapon1(1) = 2;
        eqweapon2(0) = eqweaponlight();
        eqweapon2(1) = 2;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqhelm(0) = 12001;
            eqhelm(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqgirdle(0) = 19001;
            eqgirdle(1) = 1;
        }
        eqrange(0) = 24030;
        eqrange(1) = 1;
        eqtwowield = 1;
    }
    if (cequipment == 6)
    {
        generatemoney(rc);
        eqweapon1(0) = 10004;
        eqweapon1(1) = 1;
        if (rnd(10) < probeq)
        {
            eqshield(0) = 14003;
            eqshield(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqhelm(0) = 12001;
            eqhelm(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
    }
    if (cequipment == 3)
    {
        generatemoney(rc);
        eqweapon1(0) = 10002;
        eqweapon1(1) = 1;
        eqrange(0) = 24001;
        eqrange(1) = 1;
        eqammo(0) = 25001;
        eqammo(1) = 1;
        eqcloack(0) = 20001;
        eqcloack(1) = 1;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqglove(0) = 22001;
            eqglove(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
    }
    if (cequipment == 2)
    {
        generatemoney(rc);
        eqrandweaponmage(2);
        eqamulet1(0) = 34001;
        eqamulet1(1) = 1;
        eqring1(0) = 32001;
        eqring1(1) = 2;
        eqring2(0) = 32001;
        eqring2(1) = 1;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16003;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqcloack(0) = 20001;
            eqcloack(1) = 1;
        }
    }
    if (cequipment == 4)
    {
        generatemoney(rc);
        eqweapon1(0) = 10002;
        eqweapon1(1) = 1;
        if (rnd(4) != 0)
        {
            eqrange(0) = 24020;
            eqrange(1) = 2;
            eqammo(0) = 25020;
            eqammo(1) = 1;
        }
        else
        {
            eqrange(0) = 24021;
            eqrange(1) = 2;
            eqammo(0) = 25030;
            eqammo(1) = 1;
        }
        eqcloack(0) = 20001;
        eqcloack(1) = 1;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqglove(0) = 22001;
            eqglove(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqboots(0) = 18001;
            eqboots(1) = 1;
        }
    }
    if (cequipment == 5)
    {
        generatemoney(rc);
        eqrandweaponmage(2);
        eqamulet1(0) = 34001;
        eqamulet1(1) = 1;
        eqring1(0) = 32001;
        eqring1(1) = 2;
        eqring2(0) = 32001;
        eqring2(1) = 1;
        if (rnd(10) < probeq)
        {
            eqarmor(0) = 16001;
            eqarmor(1) = 1;
        }
        if (rnd(10) < probeq)
        {
            eqcloack(0) = 20001;
            eqcloack(1) = 1;
        }
    }
    if (cdata[rc].quality >= 4)
    {
        for (int cnt = 0; cnt < 2; ++cnt)
        {
            if (rnd(2) == 0)
            {
                switch (rnd(20))
                {
                case 0: eqhelm(1) = 3; break;
                case 1: eqweapon1(1) = 3; break;
                case 2: eqshield(1) = 3; break;
                case 3: eqrange(1) = 3; break;
                case 4: eqammo(1) = 3; break;
                case 5: eqweapon2(1) = 3; break;
                case 6: eqarmor(1) = 3; break;
                case 7: eqglove(1) = 3; break;
                case 8: eqboots(1) = 3; break;
                case 9: eqcloack(1) = 3; break;
                case 10: eqgirdle(1) = 3; break;
                case 11: eqring1(1) = 3; break;
                case 12: eqring2(1) = 3; break;
                case 13: eqamulet1(1) = 3; break;
                case 14: eqamulet2(1) = 3; break;
                default: break;
                }
            }
            if (rnd(2) == 0)
            {
                --cnt;
                continue;
            }
        }
    }
    if (cspecialeq)
    {
        dbmode = 4;
        dbid = cdata[rc].id;
        access_character_info();
    }
    if (eqtwohand)
    {
        eqshield = 0;
    }
    if (cdata[rc].id == 9)
    {
        if (rnd(120) == 0)
        {
            eqamulet1 = 705;
        }
    }
    if (cdata[rc].id == 274)
    {
        if (rnd(100) == 0)
        {
            eqrange = 718;
        }
    }
    if (cdata[rc].id == 163)
    {
        if (rnd(200) == 0)
        {
            eqrange = 716;
        }
    }
    if (cdata[rc].id == 186 || cdata[rc].id == 187 || cdata[rc].id == 188)
    {
        if (rnd(800) == 0)
        {
            eqgirdle = 728;
        }
    }
    if (cdata[rc].id == 317)
    {
        if (rnd(150) == 0)
        {
            eqweapon1 = 719;
        }
    }
    if (cdata[rc].id == 309 || cdata[rc].id == 310 || cdata[rc].id == 311)
    {
        if (rnd(600) == 0)
        {
            eqamulet1 = 723;
        }
    }
    if (cdata[rc].id == 304)
    {
        if (rnd(250) == 0)
        {
            eqamulet1 = 722;
        }
    }
    for (int i = 0; i < 30; ++i)
    {
        p = cdata_body_part(rc, i) / 10000;
        if (p == 0)
        {
            break;
        }
        if (p == 2)
        {
            if (eqamulet1)
            {
                if (eqamulet1 >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqamulet1(1)));
                    flttypeminor = eqamulet1;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqamulet1;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqamulet1 = 0;
                continue;
            }
            if (eqamulet2)
            {
                if (eqamulet2 >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqamulet2(1)));
                    flttypeminor = eqamulet2;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqamulet2;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqamulet2 = 0;
                continue;
            }
        }
        if (p == 6)
        {
            if (eqring1)
            {
                if (eqring1 >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqring1(1)));
                    flttypeminor = eqring1;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqring1;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqring1 = 0;
                continue;
            }
            if (eqring2)
            {
                if (eqring2 >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqring2(1)));
                    flttypeminor = eqring2;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqring2;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqring2 = 0;
                continue;
            }
        }
        if (p == 3)
        {
            if (eqcloack)
            {
                if (eqcloack >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqcloack(1)));
                    flttypeminor = eqcloack;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqcloack;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqcloack = 0;
                continue;
            }
            continue;
        }
        if (p == 8)
        {
            if (eqgirdle)
            {
                if (eqgirdle >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqgirdle(1)));
                    flttypeminor = eqgirdle;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqgirdle;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqgirdle = 0;
                continue;
            }
            continue;
        }
        if (p == 1)
        {
            if (eqhelm)
            {
                if (eqhelm >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqhelm(1)));
                    flttypeminor = eqhelm;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqhelm;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqhelm = 0;
                continue;
            }
            continue;
        }
        if (p == 4)
        {
            if (eqarmor)
            {
                if (eqarmor >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqarmor(1)));
                    flttypeminor = eqarmor;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqarmor;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqarmor = 0;
                continue;
            }
            continue;
        }
        if (p == 7)
        {
            if (eqglove)
            {
                if (eqglove >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqglove(1)));
                    flttypeminor = eqglove;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqglove;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqglove = 0;
                continue;
            }
            continue;
        }
        if (p == 9)
        {
            if (eqboots)
            {
                if (eqboots >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqboots(1)));
                    flttypeminor = eqboots;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqboots;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqboots = 0;
                continue;
            }
            continue;
        }
        if (p == 5)
        {
            if (eqmultiweapon)
            {
                for (int cnt = 0; cnt < 15; ++cnt)
                {
                    flt(calcobjlv(cdata[rc].level), calcfixlv(2 + fixeq));
                    itemcreate(rc, eqmultiweapon, -1, -1, 0);
                    if (inv[ci].weight > 1500)
                    {
                        if (cnt < 14)
                        {
                            inv[ci].number = 0;
                            continue;
                        }
                    }
                    break;
                }
                body = 100 + i;
                equip_item(rc);
                eqweapon1 = 0;
                continue;
            }
            if (eqweapon1)
            {
                if (eqweapon1 >= 10000)
                {
                    for (int cnt = 0; cnt < 15; ++cnt)
                    {
                        flt(calcobjlv(cdata[rc].level),
                            calcfixlv(fixeq + eqweapon1(1)));
                        flttypeminor = eqweapon1;
                        dbid = -1;
                        itemcreate(rc, dbid, -1, -1, 0);
                        if (eqtwohand)
                        {
                            if (inv[ci].weight < 4000)
                            {
                                if (cnt < 14)
                                {
                                    inv[ci].number = 0;
                                    continue;
                                }
                            }
                        }
                        if (eqtwowield)
                        {
                            if (inv[ci].weight > 1500)
                            {
                                if (cnt < 14)
                                {
                                    inv[ci].number = 0;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    flt();
                    dbid = eqweapon1;
                    itemcreate(rc, dbid, -1, -1, 0);
                }
                body = 100 + i;
                equip_item(rc);
                eqweapon1 = 0;
                continue;
            }
            if (eqweapon2)
            {
                if (eqweapon2 >= 10000)
                {
                    for (int cnt = 0; cnt < 15; ++cnt)
                    {
                        flt(calcobjlv(cdata[rc].level),
                            calcfixlv(fixeq + eqweapon2(1)));
                        flttypeminor = eqweapon2;
                        dbid = -1;
                        itemcreate(rc, dbid, -1, -1, 0);
                        if (eqtwowield)
                        {
                            if (inv[ci].weight > 1500)
                            {
                                if (cnt < 14)
                                {
                                    inv[ci].number = 0;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
                else
                {
                    flt();
                    dbid = eqweapon2;
                    itemcreate(rc, dbid, -1, -1, 0);
                }
                eqweapon2 = 0;
                body = 100 + i;
                equip_item(rc);
                continue;
            }
            if (eqshield)
            {
                if (eqshield >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqshield(1)));
                    flttypeminor = eqshield;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqshield;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqshield = 0;
                continue;
            }
            continue;
        }
        if (p == 10)
        {
            if (eqrange)
            {
                if (eqrange >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqrange(1)));
                    flttypeminor = eqrange;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqrange;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqrange = 0;
                continue;
            }
            continue;
        }
        if (p == 11)
        {
            if (eqammo)
            {
                if (eqammo >= 10000)
                {
                    flt(calcobjlv(cdata[rc].level),
                        calcfixlv(fixeq + eqammo(1)));
                    flttypeminor = eqammo;
                    dbid = -1;
                }
                else
                {
                    flt();
                    dbid = eqammo;
                }
                itemcreate(rc, dbid, -1, -1, 0);
                body = 100 + i;
                equip_item(rc);
                eqammo = 0;
                continue;
            }
            continue;
        }
    }
    if (cdata[rc].id == 326)
    {
        if (rnd(150) == 0)
        {
            flt();
            itemcreate(rc, 707, -1, -1, 0);
        }
        else
        {
            flt(calcobjlv(cdata[rc].level), calcfixlv());
            flttypeminor = 60005;
            itemcreate(rc, 0, -1, -1, 0);
        }
    }
    if (cdata[rc].id == 351 || cdata[rc].id == 352)
    {
        for (int cnt = 0; cnt < 6; ++cnt)
        {
            flt();
            nostack = 1;
            int stat = itemcreate(rc, 772, -1, -1, 0);
            if (stat != 0)
            {
                inv[ci].number += rnd(4);
                if (rnd(2))
                {
                    inv[ci].param3 = -1;
                    inv[ci].image = 336;
                }
            }
        }
    }
    eqtwohand = 0;
    eqtwowield = 0;
    eqmultiweapon = 0;
    return;
}



void place_character()
{
    int placefail = 0;
    if (rc == -1)
    {
        return;
    }
    if (rc == 56)
    {
        cdata[rc].state = 0;
        return;
    }
    placefail = 0;
    if (gdata_mount == rc)
    {
        if (rc != 0)
        {
            cdata[rc].position.x = cdata[0].position.x;
            cdata[rc].position.y = cdata[0].position.y;
            return;
        }
    }
    for (int cnt = 0;; ++cnt)
    {
        if (cnt == 99)
        {
            if (rc >= 57)
            {
                placefail = 1;
                break;
            }
        }
        if (cnt > 99)
        {
            if (mdata(0) == 0)
            {
                placefail = 1;
                break;
            }
            y = (cnt - 100) / mdata(0);
            x = (cnt - 100) % mdata(0);
            if (y >= mdata(1))
            {
                if (rc != 0)
                {
                    placefail = 1;
                    break;
                }
                else
                {
                    x = rnd(mdata(0));
                    y = rnd(mdata(1));
                    if (map(x, y, 1) != 0)
                    {
                        map(x, y, 1) = 0;
                    }
                }
            }
        }
        else
        {
            x = rnd(mdata(0) - 4) + 2;
            y = rnd(mdata(1) - 4) + 2;
            if (cxinit >= 0)
            {
                if (cnt == 0)
                {
                    x = cxinit;
                    y = cyinit;
                }
                else
                {
                    x = cxinit + rnd((cnt + 1)) - rnd((cnt + 1));
                    y = cyinit + rnd((cnt + 1)) - rnd((cnt + 1));
                }
            }
            if (cnt < 20)
            {
                if (cxinit == -2)
                {
                    p = cdata[0].vision_distance / 2;
                    if (x >= cdata[0].position.x - p
                        && x <= cdata[0].position.x + p)
                    {
                        if (y >= cdata[0].position.y - p
                            && y <= cdata[0].position.y + p)
                        {
                            continue;
                        }
                    }
                }
            }
        }
        if (x < 0 || y < 0 || x >= mdata(0) || y >= mdata(1))
        {
            continue;
        }
        if (chipm(7, map(x, y, 0)) & 4)
        {
            continue;
        }
        if (map(x, y, 1) != 0)
        {
            continue;
        }
        if (map(x, y, 6) != 0)
        {
            if (chipm(7, map(x, y, 6) % 1000) & 4)
            {
                continue;
            }
            cell_featread(x, y);
            if (feat(1) == 11)
            {
                if (rc != 0)
                {
                    if (cxinit < 0)
                    {
                        continue;
                    }
                }
            }
            if (feat(1) == 10)
            {
                if (rc != 0)
                {
                    if (cxinit < 0)
                    {
                        continue;
                    }
                }
            }
        }
        cdata[rc].initial_position.x = x;
        cdata[rc].initial_position.y = y;
        map(x, y, 1) = rc + 1;
        cdata[rc].position.x = x;
        cdata[rc].position.y = y;
        p = 1;
        break;
    }
    if (placefail == 1)
    {
        if (rc < 16)
        {
            cdata[rc].state = 8;
            txt(lang(
                name(rc) + u8"とはぐれた。"s,
                name(rc) + u8" loses "s + his(rc) + u8" way."s));
        }
        else
        {
            txt(lang(
                name(rc) + u8"は何かに潰されて息絶えた。"s,
                name(rc) + u8" is killed."s));
            cdata[rc].state = 0;
        }
        if (cdata[rc].character_role != 0)
        {
            cdata[rc].state = 2;
        }
        if (cdata[rc].character_role == 13)
        {
            cdata[rc].state = 4;
            cdata[prm_853].time_to_revive = gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12 + 24
                + rnd(12);
        }
    }
    return;
}



int do_create_character()
{
    if (rc == -1)
    {
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].state == 0)
            {
                rc = cnt;
                break;
            }
        }
        if (rc == -1)
        {
            rc = 56;
            return 0;
        }
    }
    del_chara(rc);
    cequipment = 0;
    if (rc == 0)
    {
        p = 10;
    }
    else
    {
        p = 4;
    }
    if (dbid == -1)
    {
        if (fltselect == 0 && filtermax == 0 && fltnrace(0).empty())
        {
            if (fixlv == 3)
            {
                if (rnd(20) == 0)
                {
                    fltselect = 2;
                }
            }
            if (fixlv == 4)
            {
                if (rnd(10) == 0)
                {
                    fltselect = 2;
                }
            }
        }
        dbmode = 1;
        get_random_npc_id();
        if (dbid == 0)
        {
            if (fltselect == 2 || fixlv == 6)
            {
                fixlv = 4;
            }
            flt(objlv + 10, fixlv);
            dbmode = 1;
            get_random_npc_id();
        }
    }
    else if (dbid == 343)
    {
        if (usernpcmax > 0)
        {
            cdata[rc].cnpc_id = rnd(usernpcmax);
        }
    }
    characreatehack = dbid + 1;
    cm = 1;
    cmshade = 0;
    ++npcmemory(1, dbid);
    if (dbid == 323)
    {
        if (rnd(5))
        {
            objlv *= 2;
            if (fixlv >= 4)
            {
                fixlv = 3;
            }
            cmshade = 1;
            flt(objlv, fixlv);
            dbmode = 1;
            get_random_npc_id();
        }
    }
    if (gdata_current_map == 42)
    {
        if (!novoidlv)
        {
            voidlv = gdata_current_dungeon_level / 50 * 50;
        }
    }
    novoidlv = 0;
    if (dbid == 343)
    {
        create_cnpc();
    }
    else
    {
        dbmode = 3;
        access_character_info();
    }
    if (cmshade)
    {
        cdatan(0, rc) = lang(u8"シェイド"s, u8"shade"s);
        cdata[rc].image = 280;
    }
    cdata[rc].quality = fixlv;
    cdata[rc].idx = rc;
    initialize_character();
    rtval = rc;
    return 1;
}



void add_quality_parentheses()
{
    if (fixlv == 4)
    {
        cdatan(0, rc) = i18n::_(u8"ui", u8"bracket_left") + cdatan(0, rc)
            + i18n::_(u8"ui", u8"bracket_right");
        cdata[rc].level = cdata[rc].level * 10 / 8;
    }
    if (fixlv == 5)
    {
        cdatan(0, rc) =
            lang(u8"《"s, u8"{"s) + cdatan(0, rc) + lang(u8"》"s, u8"}"s);
        cdata[rc].level = cdata[rc].level * 10 / 6;
    }
    return;
}



void initialize_character()
{
    if (mode != 1)
    {
        add_quality_parentheses();
    }
    cdata[rc].state = 1;
    cdata[rc].interest = 100;
    cdata[rc].impression = 50;
    cdata[rc].vision_distance = 14;
    if (cdata[rc].id == 205)
    {
        cdata[rc].image = rnd(33) * 2 + cdata[rc].sex + 1;
    }
    if (rc == 0)
    {
        cdata[rc].nutrition = 9000;
    }
    else
    {
        cdata[rc].nutrition = 5000 + rnd(4000);
    }
    cdata[rc].height = cdata[rc].height + rnd((cdata[rc].height / 5 + 1))
        - rnd((cdata[rc].height / 5 + 1));
    cdata[rc].weight =
        cdata[rc].height * cdata[rc].height * (rnd(6) + 18) / 10000;
    label_1456(rc);
    label_1512(rc);
    if (cdata[rc].portrait == 0)
    {
        cdata[rc].portrait = rnd(32);
    }
    cdata[rc].personality = rnd(4);
    cdata[rc].talk_type = rnd(7);
    label_1530();
    refresh_character(rc);
    ++gdata_other_character_count;
    cdata[rc].hp = cdata[rc].max_hp;
    cdata[rc].mp = cdata[rc].max_mp;
    cdata[rc].sp = cdata[rc].max_sp;
    if (rc == 0)
    {
        initialize_fovmap_and_fovlist();
        gdata_initial_cart_limit = 80000;
        gdata_current_cart_limit = gdata_initial_cart_limit;
    }
    if (cdata[rc].has_lay_hand())
    {
        cdata[rc].is_lay_hand_available() = true;
    }
    cm = 0;
    return;
}



void initialize_pc_character()
{
    cdata[0].quality = 2;
    cdata[0].relationship = 10;
    cdata[0].original_relationship = 10;
    cdata[0].has_own_sprite() = true;
    flt();
    itemcreate(0, 333, -1, -1, 0);
    inv[ci].number = 8;
    flt();
    itemcreate(0, 233, -1, -1, 0);
    inv[ci].number = 4;
    flt();
    itemcreate(0, 31, -1, -1, 0);
    inv[ci].number = 2;
    if (sdata(150, 0) == 0)
    {
        flt();
        itemcreate(0, 68, -1, -1, 0);
        inv[ci].number = 3;
    }
    if (cdatan(3, 0) == u8"pianist"s)
    {
        flt();
        itemcreate(0, 88, -1, -1, 0);
    }
    if (cdatan(3, 0) == u8"farmer"s)
    {
        flt();
        itemcreate(0, 256, -1, -1, 0);
    }
    if (cdatan(3, 0) == u8"wizard"s || cdatan(3, 0) == u8"warmage"s)
    {
        flt();
        itemcreate(0, 116, -1, -1, 0);
        flt();
        itemcreate(0, 257, -1, -1, 0);
        inv[ci].number = 3;
    }
    if (cdatan(3, 0) == u8"priest"s)
    {
        flt();
        itemcreate(0, 249, -1, -1, 0);
        inv[ci].number = 3;
        flt();
        itemcreate(0, 378, -1, -1, 0);
    }
    gain_race_feat();
    cdata[0].skill_bonus = 5 + trait(154);
    cdata[0].total_skill_bonus = 5 + trait(154);
    for (const auto& cnt : items(0))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        inv[cnt].identification_state =
            identification_state_t::completely_identified;
    }
    refresh_character(0);
    return;
}



void label_1537()
{
    label_1538();
    cxinit = cdata[0].position.x;
    cyinit = cdata[0].position.y;
    place_character();
    cdata[rc].current_map = 0;
    snd(64);
    txtef(5);
    txt(cnven(cdatan(0, rc))
        + lang(
              u8"は復活した！"s,
              (u8" "s + have(rc) + u8" been resurrected!"s)));
    return;
}



void label_1538()
{
    label_15380();
    label_15390();
    return;
}



void label_1539()
{
    label_15390();
    return;
}



void label_15380()
{
    cdata[rc].will_explode_soon() = false;
    cdata[rc].is_sentenced_daeth() = false;
    cdata[rc].is_pregnant() = false;
    cdata[rc].is_contracting_with_reaper() = false;
    cdata[rc].has_anorexia() = false;
    cdata[rc].hp = cdata[rc].max_hp / 3;
    cdata[rc].mp = cdata[rc].max_mp / 3;
    cdata[rc].sp = cdata[rc].max_sp / 3;
    cdata[rc].insanity = 0;
    cdata[rc].state = 1;
    cdata[rc].current_map = 0;
    cdata[rc].relationship = cdata[rc].original_relationship;
    cdata[rc].nutrition = 8000;
    return;
}



void label_15390()
{
    cdata[rc].is_contracting_with_reaper() = false;
    rowactend(rc);
    cdata[rc].poisoned = 0;
    cdata[rc].sleep = 0;
    cdata[rc].confused = 0;
    cdata[rc].blind = 0;
    cdata[rc].paralyzed = 0;
    cdata[rc].choked = 0;
    cdata[rc].furious = 0;
    cdata[rc].dimmed = 0;
    cdata[rc].drunk = 0;
    cdata[rc].bleeding = 0;
    cdata[rc].gravity = 0;
    cdata[rc].item_which_will_be_used = 0;
    cdata[rc].hate = 0;
    cdata[rc].enemy_id = 0;
    cdata[rc].sick = 0;
    cdata[rc].emotion_icon = 0;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        cdata[rc].attr_adjs[cnt] = 0;
    }
    if (cdata[rc].buffs[0].id != 0)
    {
        for (int cnt = 0; cnt < 16; ++cnt)
        {
            if (cdata[rc].buffs[cnt].id == 0)
            {
                break;
            }
            if (cdata[rc].buffs[cnt].id == 13)
            {
                continue;
            }
            delbuff(rc, cnt);
            --cnt;
            continue;
        }
    }
    refresh_character(rc);
    return;
}



void label_1540()
{
    label_1538();
    if (rc == 0)
    {
        gdata_is_returning_or_escaping = 0;
        traveldone = 0;
        if (gdata_executing_immediate_quest_type == 0)
        {
            evadd(6);
        }
    }
    if (cdata[rc].character_role == 1)
    {
        cdata[rc].relationship = 0;
    }
    if (cdata[rc].character_role == 14)
    {
        p = rnd(5) + 1;
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            r2 = 1;
            gain_level(rc);
        }
    }
    if (cdata[rc].id == 326)
    {
        skillmod(183, rc, 1000);
    }
    refresh_character(rc);
    return;
}



void clear_background_in_character_making()
{
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"void.bmp", 1);
    gzoom(4, 0, 0, 800, 600, windoww, windowh);
    gsel(0);
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, 64);
    gmode(2);
    return;
}



int convertartifact(int prm_930, int prm_931)
{
    int f_at_m163 = 0;
    int tc_at_m163 = 0;
    std::string n_at_m163;
    if (the_item_db[inv[prm_930].id]->category >= 50000)
    {
        return prm_930;
    }
    if (inv[prm_930].quality != 6)
    {
        return prm_930;
    }
    if (inv[prm_930].body_part != 0)
    {
        return prm_930;
    }
    f_at_m163 = 0;
    for (int cnt = 0; cnt < 5480; ++cnt)
    {
        if (prm_931)
        {
            if (cnt >= 5080)
            {
                break;
            }
        }
        if (cnt >= 520 && cnt < 5060)
        {
            continue;
        }
        tc_at_m163 = inv_getowner(cnt);
        if (tc_at_m163 != -1)
        {
            if (cdata[tc_at_m163].state == 0
                || cdata[tc_at_m163].character_role == 13)
            {
                continue;
            }
        }
        if (inv[cnt].number > 0)
        {
            if (inv[cnt].id == inv[prm_930].id)
            {
                if (cnt != prm_930)
                {
                    f_at_m163 = 1;
                    break;
                }
            }
        }
    }
    if (f_at_m163 == 0)
    {
        return prm_930;
    }
    n_at_m163 = ""s + itemname(prm_930);

    while (1)
    {
        flt(the_item_db[inv[prm_930].id]->level, 4);
        flttypeminor = the_item_db[inv[prm_930].id]->subcategory;
        inv[prm_930].number = 0;
        itemcreate(
            inv_getowner(prm_930),
            0,
            inv[prm_930].position.x,
            inv[prm_930].position.y,
            0);
        if (inv[prm_930].quality != 6)
        {
            break;
        }
    }

    txt(lang(
        n_at_m163 + u8"は"s + itemname(ci) + u8"に形を変えた。"s,
        n_at_m163 + u8" turns its shape into "s + itemname(ci) + u8"."s));
    return prm_930;
}



void initialize_set_of_random_generation()
{
    fsetincome(0) = 52000;
    fsetincome(1) = 52000;
    fsetincome(2) = 52000;
    fsetincome(3) = 53000;
    fsetincome(4) = 53000;
    fsetincome(5) = 56000;
    fsetincome(6) = 54000;
    fsetincome(7) = 77000;
    fsetincome(8) = 57000;
    fsetincome(9) = 57000;
    fsetchest(0) = 10000;
    fsetchest(1) = 24000;
    fsetchest(2) = 12000;
    fsetchest(3) = 16000;
    fsetchest(4) = 20000;
    fsetchest(5) = 19000;
    fsetchest(6) = 18000;
    fsetchest(7) = 22000;
    fsetchest(8) = 14000;
    fsetchest(9) = 32000;
    fsetchest(10) = 34000;
    fsetchest(11) = 54000;
    fsetchest(12) = 59000;
    fsetwear(0) = 10000;
    fsetwear(1) = 10000;
    fsetwear(2) = 24000;
    fsetwear(3) = 24000;
    fsetwear(4) = 25000;
    fsetwear(5) = 12000;
    fsetwear(6) = 16000;
    fsetwear(7) = 20000;
    fsetwear(8) = 19000;
    fsetwear(9) = 18000;
    fsetwear(10) = 22000;
    fsetwear(11) = 14000;
    fsetwear(12) = 32000;
    fsetwear(13) = 34000;
    fsetitem(0) = 52000;
    fsetitem(1) = 52000;
    fsetitem(2) = 53000;
    fsetitem(3) = 53000;
    fsetitem(4) = 56000;
    fsetitem(5) = 68000;
    fsetitem(6) = 54000;
    fsetitem(7) = 64000;
    fsetitem(8) = 59000;
    fsetitem(9) = 55000;
    fsetrewardsupply(0) = 52000;
    fsetrewardsupply(1) = 53000;
    fsetrewardsupply(2) = 56000;
    fsetrewardsupply(3) = 54000;
    fsetrewardsupply(4) = 57000;
    fsetrare(0) = 60000;
    fsetrare(1) = 72000;
    fsetrare(2) = 77000;
    fsetrare(3) = 55000;
    fsetrare(4) = 57000;
    fsetperform(0) = 77000;
    fsetperform(1) = 57000;
    fsetperform(2) = 57000;
    fsetperform(3) = 57000;
    fsetperform(4) = 60000;
    fsetperform(5) = 18000;
    fsetperform(6) = 20000;
    fsetperform(7) = 32000;
    fsetperform(8) = 34000;
    fsetperform(9) = 52000;
    fsetperform(10) = 64000;
    fsetperform(11) = 64000;
    fsetdeliver(0) = 60000;
    fsetdeliver(1) = 77000;
    fsetdeliver(2) = 54000;
    fsetdeliver(3) = 64000;
    fsetsupply(0) = 60000;
    fsetsupply(1) = 77000;
    fsetsupply(2) = 56000;
    fsetsupply(3) = 54000;
    fsetsupply(4) = 64000;
    fsetmagic(0) = 53000;
    fsetmagic(1) = 56000;
    fsetmagic(2) = 54000;
    fsetarmor(0) = 12000;
    fsetarmor(1) = 16000;
    fsetarmor(2) = 20000;
    fsetarmor(3) = 19000;
    fsetarmor(4) = 18000;
    fsetarmor(5) = 22000;
    fsetarmor(6) = 14000;
    fsetweapon(0) = 10000;
    fsetweapon(1) = 24000;
    fsetweapon(2) = 25000;
    fsetplantartifact(0) = 32000;
    fsetplantartifact(1) = 34000;
    fsetplantunknown(0) = 57000;
    fsetplantunknown(1) = 57000;
    fsetplantunknown(2) = 54000;
    fsetplantunknown(3) = 64000;
    fsetplantunknown(4) = 77000;
    fsetremain(0) = 25000;
    fsetremain(1) = 57000;
    fsetremain(2) = 57000;
    fsetremain(3) = 77000;
    fsetremain(4) = 53000;
    fsetremain(5) = 52000;
    fsetremain(6) = 57000;
    fsetbarrel(0) = 25000;
    fsetbarrel(1) = 57000;
    fsetbarrel(2) = 53000;
    fsetbarrel(3) = 52000;
    fsetbarrel(4) = 77000;
    fsetbarrel(5) = 64000;
    fsetcollect(0) = 64000;
    fsetcollect(1) = 60000;
    fsetcollect(2) = 57000;
    fsetcollect(3) = 77000;
    isetdeed(0) = 344;
    isetdeed(1) = 521;
    isetdeed(2) = 522;
    isetdeed(3) = 542;
    isetdeed(4) = 543;
    isetdeed(5) = 555;
    isetdeed(6) = 572;
    isetfruit(0) = 180;
    isetfruit(1) = 181;
    isetfruit(2) = 196;
    isetfruit(3) = 197;
    isetfruit(4) = 192;
    isetfruit(5) = 183;
    isetthrowpotionminor(0) = 27;
    isetthrowpotionminor(1) = 28;
    isetthrowpotionminor(2) = 376;
    isetthrowpotionminor(3) = 30;
    isetthrowpotionminor(4) = 262;
    isetthrowpotionminor(5) = 253;
    isetthrowpotionminor(6) = 379;
    isetthrowpotionminor(7) = 392;
    isetthrowpotionmajor(0) = 28;
    isetthrowpotionmajor(1) = 376;
    isetthrowpotionmajor(2) = 205;
    isetthrowpotionmajor(3) = 368;
    isetthrowpotionmajor(4) = 433;
    isetthrowpotionmajor(5) = 382;
    isetthrowpotionmajor(6) = 577;
    isetthrowpotionmajor(7) = 577;
    isetthrowpotiongreater(0) = 28;
    isetthrowpotiongreater(1) = 205;
    isetthrowpotiongreater(2) = 368;
    isetthrowpotiongreater(3) = 432;
    isetthrowpotiongreater(4) = 429;
    isetthrowpotiongreater(5) = 29;
    isetthrowpotiongreater(6) = 577;
    isethire(0) = 205;
    isethire(1) = 70;
    isethire(2) = 74;
    isethire(3) = 41;
    isethire(4) = 69;
    isethire(5) = 76;
    isethire(6) = 1;
    isethire(7) = 1;
    isethire(8) = 1;
    isetgiftminor(0) = 753;
    isetgiftminor(1) = 754;
    isetgiftminor(2) = 754;
    isetgiftminor(3) = 756;
    isetgiftminor(4) = 756;
    isetgiftminor(5) = 540;
    isetgiftminor(6) = 541;
    isetgiftminor(7) = 537;
    isetgiftminor(8) = 538;
    isetgiftminor(9) = 526;
    isetgiftminor(10) = 415;
    isetgiftminor(11) = 511;
    isetgiftminor(12) = 343;
    isetgiftminor(13) = 340;
    isetgiftminor(14) = 338;
    isetgiftminor(15) = 328;
    isetgiftminor(16) = 220;
    isetgiftminor(17) = 575;
    isetgiftminor(18) = 622;
    isetgiftminor(19) = 167;
    isetgiftmajor(0) = 755;
    isetgiftmajor(1) = 755;
    isetgiftmajor(2) = 633;
    isetgiftmajor(3) = 626;
    isetgiftmajor(4) = 502;
    isetgiftmajor(5) = 632;
    isetgiftmajor(6) = 667;
    isetgiftmajor(7) = 555;
    isetgiftmajor(8) = 748;
    isetgiftmajor(9) = 640;
    isetgiftgrand(0) = 757;
    isetgiftgrand(1) = 558;
    isetgiftgrand(2) = 664;
    isetgiftgrand(3) = 758;
    isetgiftgrand(4) = 759;
    isetgiftgrand(5) = 761;
    isethirerole(0) = 18;
    isethirerole(1) = 9;
    isethirerole(2) = 12;
    isethirerole(3) = 5;
    isethirerole(4) = 8;
    isethirerole(5) = 14;
    isethirerole(6) = 1008;
    isethirerole(7) = 1008;
    isethirerole(8) = 1008;
    isetcrop(0) = 180;
    isetcrop(1) = 181;
    isetcrop(2) = 197;
    isetcrop(3) = 192;
    isetcrop(4) = 183;
    isetcrop(5) = 188;
    isetcrop(6) = 200;
    isetgod(0) = 0;
    isetgod(1) = 1;
    isetgod(2) = 2;
    isetgod(3) = 3;
    isetgod(4) = 4;
    isetgod(5) = 5;
    isetgod(6) = 6;
    isetgod(7) = 7;
    asettown(0) = 5;
    asettown(1) = 11;
    asettown(2) = 14;
    asettown(3) = 15;
    asettown(4) = 12;
    moneybox(0) = 500;
    moneybox(1) = 2000;
    moneybox(2) = 10000;
    moneybox(3) = 50000;
    moneybox(4) = 500000;
    moneybox(5) = 5000000;
    moneybox(6) = 100000000;
    giftvalue(0) = 10;
    giftvalue(1) = 20;
    giftvalue(2) = 30;
    giftvalue(3) = 50;
    giftvalue(4) = 75;
    giftvalue(5) = 100;
    giftn(0) = lang(u8"つまらない"s, u8"cheap"s);
    giftn(1) = lang(u8"普通の"s, u8"so so"s);
    giftn(2) = lang(u8"ちょっとドキドキする"s, u8"exciting"s);
    giftn(3) = lang(u8"高価な"s, u8"expensive"s);
    giftn(4) = lang(u8"気絶しそうなほど素晴らしい"s, u8"hot and gorgeous"s);
    giftn(5) = lang(u8"王様が羨むほどの"s, u8"crazy epic"s);
    giftn(6) = u8"bug"s;
    moneyboxn(0) = lang(u8"5百金貨"s, u8"500 GP"s);
    moneyboxn(1) = lang(u8"2千金貨"s, u8"2k GP"s);
    moneyboxn(2) = lang(u8"1万金貨"s, u8"10K GP"s);
    moneyboxn(3) = lang(u8"5万金貨"s, u8"50K GP"s);
    moneyboxn(4) = lang(u8"50万金貨"s, u8"500K GP"s);
    moneyboxn(5) = lang(u8"500万金貨"s, u8"5M GP"s);
    moneyboxn(6) = lang(u8"1億金貨"s, u8"500M GP"s);
    biten(0) = lang(u8"ミジンコ"s, u8"water flea"s);
    biten(1) = lang(u8"バッタ"s, u8"grasshopper"s);
    biten(2) = lang(u8"テントウ"s, u8"ladybug"s);
    biten(3) = lang(u8"トンボ"s, u8"dragonfly"s);
    biten(4) = lang(u8"セミ"s, u8"locust"s);
    biten(5) = lang(u8"ヘラクレス"s, u8"beetle"s);
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{(filesystem::dir::data() / u8"book.txt").native(),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    p = instr(buff, 0, u8"%DEFINE"s);
    buff = strmid(buff, p, instr(buff, p, u8"%END"s));
    notedel(0);
    SDIM3(booktitle, noteinfo(), 25);
    p = 0;
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(msgtemp, cnt);
        csvsort(s, msgtemp, 44);
        booktitle(elona::stoi(s(0))) = lang(s(1), s(2));
        if (elona::stoi(s(3)) == 1)
        {
            isetbook(p) = elona::stoi(s(0));
            ++p;
        }
    }
    magebookn(0) = lang(u8"ヴォイニッチ写本"s, u8"Voynich Manuscript"s);
    magebookn(1) = lang(u8"ドール賛歌"s, u8"Dhol Chants"s);
    magebookn(2) = lang(u8"ポナペ教教典"s, u8"Ponape Scripture"s);
    magebookn(3) = lang(u8"グラーキ黙示録"s, u8"Revelations of Glaaki"s);
    magebookn(4) = lang(u8"グ＝ハーン断章"s, u8"G'harne Fragments"s);
    magebookn(5) = lang(u8"断罪の書"s, u8"Liber Damnatus"s);
    magebookn(6) = lang(u8"ドジアンの書"s, u8"Book of Dzyan"s);
    magebookn(7) = lang(u8"エイボンの書"s, u8"Book of Eibon"s);
    magebookn(8) = lang(u8"大いなる教書"s, u8"Grand Grimoire"s);
    magebookn(9) = lang(u8"セラエノ断章"s, u8"Celaeno Fragments"s);
    magebookn(10) = lang(u8"ネクロノミコン"s, u8"Necronomicon"s);
    magebookn(11) = lang(u8"ルルイエ異本"s, u8"The R'lyeh Text"s);
    magebookn(12) = lang(u8"エルトダウン・シャールズ"s, u8"Eltdown Shards"s);
    magebookn(13) = lang(u8"金枝篇"s, u8"The Golden Bough"s);
    magebookn(14) = lang(u8"終焉の書"s, u8"Apocalypse"s);
    return;
}



void label_1573()
{
    int lootrich = 0;
    if (rc == 0)
    {
        if (gdata_executing_immediate_quest_type != 0)
        {
            return;
        }
        for (const auto& cnt : items(rc))
        {
            ci = cnt;
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (mdata(7) == 0)
            {
                if (inv[cnt].body_part != 0)
                {
                    continue;
                }
                if (ibit(5, ci))
                {
                    continue;
                }
                if (rnd(3))
                {
                    continue;
                }
            }
            else if (rnd(5))
            {
                continue;
            }
            if (the_item_db[inv[ci].id]->is_cargo == 1)
            {
                if (mdata(6) != 1 && mdata(6) != 5 && mdata(6) != 3
                    && mdata(6) != 4 && mdata(6) != 6 && mdata(6) != 2)
                {
                    continue;
                }
                else if (rnd(2))
                {
                    continue;
                }
            }
            f = 0;
            if (inv[ci].body_part != 0)
            {
                if (rnd(10))
                {
                    f = 1;
                }
                if (inv[ci].curse_state == curse_state_t::blessed)
                {
                    if (rnd(2))
                    {
                        f = 1;
                    }
                }
                if (is_cursed(inv[ci].curse_state))
                {
                    if (rnd(2))
                    {
                        f = 0;
                    }
                }
                if (inv[ci].curse_state == curse_state_t::doomed)
                {
                    if (rnd(2))
                    {
                        f = 0;
                    }
                }
            }
            else if (
                inv[ci].identification_state
                == identification_state_t::completely_identified)
            {
                if (rnd(4))
                {
                    f = 1;
                }
            }
            if (f)
            {
                continue;
            }
            if (inv[ci].body_part != 0)
            {
                cdata_body_part(rc, inv[ci].body_part) =
                    cdata_body_part(rc, inv[ci].body_part) / 10000 * 10000;
                inv[ci].body_part = 0;
            }
            f = 0;
            if (ibit(5, ci) == 0)
            {
                if (rnd(4) == 0)
                {
                    f = 1;
                }
                if (inv[ci].curse_state == curse_state_t::blessed)
                {
                    if (rnd(3) == 0)
                    {
                        f = 0;
                    }
                }
                if (is_cursed(inv[ci].curse_state))
                {
                    if (rnd(3) == 0)
                    {
                        f = 1;
                    }
                }
                if (inv[ci].curse_state == curse_state_t::doomed)
                {
                    if (rnd(3) == 0)
                    {
                        f = 1;
                    }
                }
            }
            if (f)
            {
                inv[ci].number = 0;
                continue;
            }
            inv[ci].position.x = cdata[rc].position.x;
            inv[ci].position.y = cdata[rc].position.y;
            int stat = item_stack(-1, ci);
            if (stat == 0)
            {
                ti = inv_getfreeid(-1);
                if (ti == -1)
                {
                    break;
                }
                item_copy(ci, ti);
                inv[ti].own_state = -2;
            }
            inv[ci].number = 0;
        }
        cell_refresh(cdata[rc].position.x, cdata[rc].position.y);
        create_pcpic(0, true);
        return;
    }
    else
    {
        if (rc < 16)
        {
            if (cdata[rc].has_own_sprite() == 1)
            {
                create_pcpic(rc, true);
            }
        }
        if (cdata[rc].relationship == 10)
        {
            return;
        }
    }
    if (gdata_current_map == 33)
    {
        if (cdata[rc].id == 185)
        {
            return;
        }
        if (cdata[rc].id == 204)
        {
            return;
        }
    }
    if (cdata[rc].is_contracting())
    {
        return;
    }
    if (cdata[rc].splits() || cdata[rc].splits2())
    {
        if (rnd(6))
        {
            return;
        }
    }
    for (const auto& cnt : items(rc))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        ci = cnt;
        f = 0;
        if (cdata[rc].character_role == 20)
        {
            break;
        }
        if (inv[ci].quality > 4 || inv[ci].id == 55)
        {
            f = 1;
        }
        if (rnd(30) == 0)
        {
            f = 1;
        }
        if (cdata[rc].quality >= 4)
        {
            if (rnd(2) == 0)
            {
                f = 1;
            }
        }
        if (cdata[rc].character_role == 13)
        {
            if (rnd(5))
            {
                f = 0;
            }
        }
        if (gdata_current_map == 6)
        {
            if (rnd(4))
            {
                f = 0;
            }
        }
        if (inv[ci].quality == 6)
        {
            f = 1;
        }
        if (ibit(12, ci))
        {
            f = 1;
        }
        if (f == 0)
        {
            continue;
        }
        if (catitem != 0)
        {
            if (ibit(8, ci) == 0)
            {
                if (the_item_db[inv[ci].id]->category < 50000)
                {
                    if (inv[ci].quality >= 3)
                    {
                        if (rnd(3))
                        {
                            txtef(9);
                            txt(lang(
                                name(catitem) + u8"は"s + itemname(ci)
                                    + u8"をぺろぺろと舐めた。"s,
                                name(catitem) + " licks " + itemname(ci)
                                    + "."));
                            ibitmod(8, ci, 1);
                            reftype = the_item_db[inv[ci].id]->category;
                            encadd(
                                ci,
                                randomenc(randomenclv(rnd(4))),
                                randomencp());
                            animeload(8, rc);
                        }
                    }
                }
            }
        }
        if (inv[ci].body_part != 0)
        {
            cdata_body_part(rc, inv[ci].body_part) =
                cdata_body_part(rc, inv[ci].body_part) / 10000 * 10000;
            inv[ci].body_part = 0;
        }
        inv[ci].position.x = cdata[rc].position.x;
        inv[ci].position.y = cdata[rc].position.y;
        itemturn(ci);
        int stat = item_stack(-1, ci);
        if (stat == 0)
        {
            ti = inv_getfreeid(-1);
            if (ti == -1)
            {
                break;
            }
            item_copy(ci, ti);
        }
        inv[ci].number = 0;
    }
    if (cdata[rc].quality >= 4 || rnd(20) == 0 || cdata[rc].drops_gold() == 1
        || rc < 16)
    {
        if (cdata[rc].gold > 0)
        {
            flt();
            itemcreate(
                -1,
                54,
                cdata[rc].position.x,
                cdata[rc].position.y,
                cdata[rc].gold / (1 + 3 * (cdata[rc].drops_gold() == 0)));
            cdata[rc].gold -=
                cdata[rc].gold / (1 + 3 * (cdata[rc].drops_gold() == 0));
        }
    }

    switch (access_class_info(16, cdatan(3, rc)))
    {
    case 1:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 7:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 3:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 2:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 53000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(40) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 54000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 4:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 5:
        if (rnd(50) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 54000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    }

    dbid = cdata[rc].id;
    dbmode = 16;
    dbspec = 3;
    switch (access_character_info())
    {
    case 3:
        if (rnd(40) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(40) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 53000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(40) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(40) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetweapon(rnd(length(fsetweapon)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 68000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 1:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 62000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
            remain_make(ci, rc);
        }
        break;
    case 2:
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 62000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
            remain_make(ci, rc);
        }
        break;
    case 6:
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 32000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 34000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 54000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 53000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 72000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 68000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 77000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 4:
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetweapon(rnd(length(fsetweapon)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(20) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 72000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(4) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 68000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    case 5:
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = fsetweapon(rnd(length(fsetweapon)));
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(15) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 54000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 52000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(5) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 53000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(10) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 72000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(4) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 68000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(4) == 0)
        {
            p = 0;
            flt(calcobjlv(cdata[tc].level), calcfixlv(2));
            flttypemajor = 77000;
            flttypeminor = 0;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        break;
    }

    if (rnd(40) == 0)
    {
        p = 0;
        flt(calcobjlv(cdata[tc].level), calcfixlv(2));
        flttypemajor = 62000;
        flttypeminor = 0;
        itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        remain_make(ci, rc);
    }
    if (gdata_current_map == 35)
    {
        cell_refresh(cdata[rc].position.x, cdata[rc].position.y);
        return;
    }
    if (gdata_current_map != 6 && cdata[rc].character_role != 20)
    {
        if (rnd(175) == 0 || cdata[rc].quality == 6 || 0
            || (cdata[rc].quality == 4 && rnd(2) == 0)
            || (cdata[rc].quality == 5 && rnd(3) == 0))
        {
            flt();
            itemcreate(-1, 504, cdata[rc].position.x, cdata[rc].position.y, 0);
            inv[ci].param1 = cdata[rc].image;
            inv[ci].subname = cdata[rc].id;
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
        if (rnd(175) == 0 || cdata[rc].quality == 6 || 0
            || (cdata[rc].quality == 4 && rnd(2) == 0)
            || (cdata[rc].quality == 5 && rnd(3) == 0))
        {
            flt();
            itemcreate(-1, 503, cdata[rc].position.x, cdata[rc].position.y, 0);
            inv[ci].param1 = cdata[rc].image;
            inv[ci].subname = cdata[rc].id;
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
    }
    if (cdata[rc].character_role == 1010)
    {
        flt();
        itemcreate(-1, 361, cdata[rc].position.x, cdata[rc].position.y, 0);
        inv[ci].param1 = cdata[rc].shop_store_id;
        inv[ci].own_state = 2;
    }
    if (rollanatomy == 1 || cdata[rc].quality >= 4 || 0
        || cdata[rc].is_livestock() == 1 || 0)
    {
        flt();
        int stat =
            itemcreate(-1, 204, cdata[rc].position.x, cdata[rc].position.y, 0);
        if (stat != 0)
        {
            remain_make(ci, rc);
            if (cdata[rc].is_livestock() == 1)
            {
                if (sdata(161, 0) != 0)
                {
                    inv[ci].number +=
                        rnd(1 + (sdata(161, 0) > cdata[rc].level));
                }
            }
        }
    }
    lootrich = -1;
    if (cdata[rc].id == 183)
    {
        lootrich = 8;
    }
    if (cdata[rc].id == 184)
    {
        lootrich = 4;
    }
    if (cdata[rc].id == 185)
    {
        lootrich = 2;
    }
    if (lootrich != -1)
    {
        for (int cnt = 0, cnt_end = (lootrich); cnt < cnt_end; ++cnt)
        {
            flt(calcobjlv(cdata[rc].level));
            flttypeminor = 77001;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
        if (rnd(3) == 0)
        {
            flt();
            itemcreate(-1, 284, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    drop(0) = -1;
    drop(1) = -1;
    drop(2) = -1;
    drop(3) = -1;
    drop(4) = -1;
    drop(5) = -1;
    drop(6) = -1;
    drop(7) = -1;
    drop(8) = -1;
    drop(9) = -1;
    drop(10) = -1;
    if (cdata[rc].id == 140)
    {
        drop(0) = 355;
        drop(1) = -1;
    }
    if (cdata[rc].id == 175 || cdata[rc].id == 177 || cdata[rc].id == 178)
    {
        if (npcmemory(0, cdata[rc].id) == 0)
        {
            drop(0) = 290;
            drop(1) = 421;
            drop(2) = -1;
        }
        else
        {
            drop(0) = 421;
            drop(1) = 421;
            drop(2) = -1;
        }
    }
    if (gdata_current_map == 37)
    {
        if (cdata[rc].id == 257)
        {
            drop(0) = 665;
            drop(1) = 55;
            drop(2) = 55;
            drop(3) = 55;
            drop(4) = 55;
            drop(5) = 621;
            drop(6) = -1;
        }
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (drop(cnt) == -1)
        {
            break;
        }
        flt();
        itemcreate(
            -1, drop(cnt), cdata[rc].position.x, cdata[rc].position.y, 0);
    }
    if (cdata[rc].id == 5)
    {
        if (rnd(200) == 0)
        {
            flt();
            itemcreate(-1, 702, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 21)
    {
        if (rnd(100) == 0)
        {
            flt();
            itemcreate(-1, 706, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 34)
    {
        if (rnd(4) == 0)
        {
            flt();
            itemcreate(-1, 717, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 99 || cdata[rc].id == 100 || cdata[rc].id == 101)
    {
        if (rnd(300) == 0)
        {
            flt();
            itemcreate(-1, 708, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 117)
    {
        if (rnd(140) == 0)
        {
            flt();
            itemcreate(-1, 720, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 168)
    {
        if (rnd(100) == 0)
        {
            flt();
            itemcreate(-1, 740, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id >= 302 && cdata[rc].id <= 305)
    {
        if (rnd(90) == 0)
        {
            flt();
            itemcreate(-1, 771, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 307 || cdata[rc].id == 308)
    {
        if (rnd(150) == 0)
        {
            flt();
            itemcreate(-1, 709, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 189 || cdata[rc].id == 190)
    {
        if (rnd(150) == 0)
        {
            flt();
            itemcreate(-1, 711, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 213)
    {
        if (rnd(50) == 0)
        {
            flt();
            int stat = itemcreate(
                -1, 672, cdata[rc].position.x, cdata[rc].position.y, 0);
            if (stat != 0)
            {
                inv[ci].param1 = 169;
            }
        }
    }
    if (cdata[rc].id == 250)
    {
        if (rnd(200) == 0)
        {
            flt();
            itemcreate(-1, 715, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 341)
    {
        if (rnd(3) == 0)
        {
            flt();
            itemcreate(-1, 635, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 85 || cdata[rc].id == 86 || cdata[rc].id == 87)
    {
        if (rnd(600) == 0)
        {
            flt();
            itemcreate(-1, 737, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 302)
    {
        for (int cnt = 0, cnt_end = (2 + rnd(4)); cnt < cnt_end; ++cnt)
        {
            flt(cdata[rc].level, 2);
            flttypemajor = 92000;
            itemcreate(-1, 0, cdata[rc].position.x, cdata[rc].position.y, 0);
            if (inv[ci].value < 800)
            {
                inv[ci].number = rnd(5) + 1;
            }
        }
    }
    if (cdata[rc].id == 328)
    {
        flt();
        itemcreate(
            -1, 55, cdata[rc].position.x, cdata[rc].position.y, 1 + rnd(3));
        if (rnd(2))
        {
            flt();
            itemcreate(-1, 622, cdata[rc].position.x, cdata[rc].position.y, 0);
        }
    }
    if (cdata[rc].id == 329)
    {
        flt();
        itemcreate(
            -1,
            54,
            cdata[rc].position.x,
            cdata[rc].position.y,
            2500 + rnd((cdata[0].fame + 1000)));
    }
    if (cdata[rc].id == 351 || cdata[rc].id == 352)
    {
        for (int cnt = 0; cnt < 12; ++cnt)
        {
            flt();
            nostack = 1;
            int stat = itemcreate(
                -1, 772, cdata[rc].position.x, cdata[rc].position.y, 0);
            if (rnd(2))
            {
                if (stat != 0)
                {
                    inv[ci].param3 = -1;
                    inv[ci].image = 336;
                }
            }
        }
    }
    cell_refresh(cdata[rc].position.x, cdata[rc].position.y);
    if (cdata[rc].character_role == 13)
    {
        supply_new_equipment();
    }
    return;
}



void label_1576()
{
    i = gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
        + gdata_year * 24 * 30 * 12;
    for (int cnt = 0; cnt < 246; ++cnt)
    {
        if (cnt == ELONA_MAX_CHARACTERS)
        {
            p = -1;
        }
        else
        {
            p = cnt;
            if (cdata[p].state == 0)
            {
                continue;
            }
        }
        for (const auto& cnt : items(p))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (inv[cnt].material == 35)
            {
                if (inv[cnt].param3 > 0)
                {
                    if (inv[cnt].param3 <= i)
                    {
                        if (inv[cnt].own_state <= 0)
                        {
                            if (p == -1)
                            {
                                if (inv[cnt].id == 204)
                                {
                                    if (chipm(
                                            0,
                                            map(inv[cnt].position.x,
                                                inv[cnt].position.y,
                                                0))
                                        == 1)
                                    {
                                        if (gdata_weather != 0)
                                        {
                                            continue;
                                        }
                                        txt(lang(
                                            itemname(cnt)
                                                + u8"は上手い具合に干された。"s,
                                            itemname(cnt) + is2(inv[cnt].number)
                                                + u8" dried up in the sun."s));
                                        inv[cnt].param3 = gdata_hour
                                            + gdata_day * 24
                                            + gdata_month * 24 * 30
                                            + gdata_year * 24 * 30 * 12 + 2160;
                                        inv[cnt].image = 337;
                                        inv[cnt].id = 571;
                                        inv[cnt].param1 = 0;
                                        inv[cnt].param2 = 5;
                                        cell_refresh(
                                            inv[cnt].position.x,
                                            inv[cnt].position.y);
                                        continue;
                                    }
                                }
                            }
                            if (p != -1)
                            {
                                if (p < 16)
                                {
                                    txt(lang(
                                        itemname(cnt) + u8"は腐った。"s,
                                        itemname(cnt) + u8" rot"s
                                            + _s2(inv[cnt].number) + u8"."s));
                                }
                            }
                            inv[cnt].param3 = -1;
                            inv[cnt].image = 336;
                            if (p == -1)
                            {
                                cell_refresh(
                                    inv[cnt].position.x, inv[cnt].position.y);
                            }
                            if (p == 0)
                            {
                                if (cdata[0].god_id == core_god::kumiromi)
                                {
                                    i = the_item_db[inv[cnt].id]->subcategory;
                                    if (rnd(3) == 0)
                                    {
                                        txt(lang(
                                            u8"あなたは"s + itemname(cnt)
                                                + u8"から種を取り出した。"s,
                                            u8"You extract plant seeds from "s
                                                + itemname(cnt) + u8"."s));
                                        p = rnd(inv[cnt].number) + 1;
                                        removeitem(cnt, inv[cnt].number);
                                        flt(calcobjlv(cdata[0].level));
                                        flttypeminor = 58500;
                                        itemcreate(0, 0, -1, -1, p);
                                        p = 0;
                                        i = gdata_hour + gdata_day * 24
                                            + gdata_month * 24 * 30
                                            + gdata_year * 24 * 30 * 12;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return;
}



void label_1577()
{
    if (rnd(4) == 0)
    {
        dmghp(cc, cdata[cc].hp * (5 + cdata[cc].curse_power / 5) / 100, -5);
        return;
    }
    if (mdata(6) != 1)
    {
        if (rnd(10 - clamp(cdata[cc].curse_power / 10, 0, 9)) == 0)
        {
            efid = 408;
            tc = cc;
            magic();
            return;
        }
    }
    if (rnd(10) == 0)
    {
        if (cdata[cc].gold > 0)
        {
            p = rnd(cdata[cc].gold) / 100 + rnd(10) + 1;
            if (p > cdata[cc].gold)
            {
                p = cdata[cc].gold;
            }
            cdata[cc].gold -= p;
            if (is_in_fov(cc))
            {
                txtef(8);
                txt(lang(
                    u8"悪意のある手が"s + name(cc)
                        + u8"の財布から金貨を抜き去った。"s,
                    u8"A malicious hand filches some gold pieces from "s
                        + name(cc) + your(cc) + u8" wallet."s));
            }
            return;
        }
    }
    return;
}



void label_1578()
{
    if (rnd(15) == 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は不安げに腹を押さえた。"s,
                name(cc) + u8" pat"s + _s(cc) + u8" "s + his(cc)
                    + u8" stomach uneasily."s));
            txt(lang(
                    u8"「なにかが産まれそうだよ！」"s,
                    u8"\"I'm going to have a baby!\""s),
                lang(
                    u8"「腹になにかが…」"s,
                    u8"\"Something is wrong with my stomach...\""s));
        }
    }
    if (mdata(6) != 1)
    {
        if (rnd(30) == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"何かが"s + name(cc) + u8"の腹を破り飛び出した！"s,
                    u8"Something splits "s + name(cc) + your(cc)
                        + u8" body and breaks out!"s));
            }
            cdata[cc].bleeding += 15;
            flt();
            initlv = cdata[cc].level / 2 + 1;
            novoidlv = 1;
            int stat = characreate(
                -1, 330, cdata[cc].position.x, cdata[cc].position.y);
            if (stat != 0)
            {
                if (strlen_u(cdatan(0, cc)) > 10
                    || instr(cdatan(0, cc), 0, lang(u8"の子供"s, u8"child"s))
                        != -1)
                {
                    cdatan(0, rc) = lang(u8"エイリアンの子供"s, u8"alien kid"s);
                }
                else
                {
                    cdatan(0, rc) = lang(
                        cdatan(0, cc) + u8"の子供"s,
                        u8"child of "s + cdatan(0, cc));
                }
            }
        }
    }
    return;
}



void label_1579()
{
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(cc, i) % 10000 == 0)
        {
            continue;
        }
        ci = cdata_body_part(cc, i) % 10000 - 1;
        for (int cnt = 0; cnt < 15; ++cnt)
        {
            if (inv[ci].enchantments[cnt].id == 0)
            {
                break;
            }
            if (inv[ci].enchantments[cnt].id == 21)
            {
                if (mdata(6) != 1)
                {
                    if (rnd(25)
                        < clamp(
                              std::abs(inv[ci].enchantments[cnt].power) / 50,
                              1,
                              25))
                    {
                        efid = 408;
                        tc = cc;
                        magic();
                        continue;
                    }
                }
            }
            if (inv[ci].enchantments[cnt].id == 45)
            {
                if (rnd(4) == 0)
                {
                    if (is_in_fov(cc))
                    {
                        txtef(8);
                        txt(lang(
                            u8"何かが"s + name(cc) + u8"の血を吸った。"s,
                            u8"Something sucks "s + name(cc) + your(cc)
                                + u8" blood."s));
                    }
                    cdata[cc].bleeding +=
                        std::abs(inv[ci].enchantments[cnt].power) / 25 + 3;
                    continue;
                }
            }
            if (inv[ci].enchantments[cnt].id == 46)
            {
                if (rnd(20) == 0)
                {
                    if (is_in_fov(cc))
                    {
                        txtef(8);
                        txt(lang(
                            name(cc) + u8"は未熟になった。"s,
                            name(cc) + u8" become"s + _s(cc)
                                + u8" inexperienced."s));
                    }
                    cdata[cc].experience -= cdata[cc].required_experience
                            / (300
                               - clamp(
                                     std::abs(inv[ci].enchantments[cnt].power)
                                         / 2,
                                     0,
                                     50))
                        + rnd(100);
                    if (cdata[cc].experience < 0)
                    {
                        cdata[cc].experience = 0;
                    }
                    continue;
                }
            }
            if (inv[ci].enchantments[cnt].id == 47)
            {
                if (mdata(6) != 1)
                {
                    if (mdata(6) != 5)
                    {
                        if (rnd(50)
                            < clamp(
                                  std::abs(inv[ci].enchantments[cnt].power)
                                      / 50,
                                  1,
                                  50))
                        {
                            if (is_in_fov(cc))
                            {
                                txtef(8);
                                txt(lang(
                                    u8"魔力の渦が何かを召喚した！"s,
                                    u8"Several creatures are summoned from a vortex of magic."s));
                            }
                            for (int cnt = 0, cnt_end = (1 + rnd(3));
                                 cnt < cnt_end;
                                 ++cnt)
                            {
                                flt(calcobjlv(cdata[0].level * 3 / 2 + 3),
                                    calcfixlv(2));
                                characreate(
                                    -1,
                                    0,
                                    cdata[cc].position.x,
                                    cdata[cc].position.y);
                            }
                            continue;
                        }
                    }
                }
            }
        }
    }
    return;
}



void label_1580()
{
    if (cdata[0].confused != 0 || cdata[0].sleep != 0 || cdata[0].paralyzed != 0
        || cdata[0].choked != 0)
    {
        return;
    }
    for (const auto& cnt : items(0))
    {
        if (inv[cnt].number == 0
            || inv[cnt].identification_state
                == identification_state_t::completely_identified)
        {
            continue;
        }
        if (the_item_db[inv[cnt].id]->category >= 50000)
        {
            continue;
        }
        ci = cnt;
        p(0) = sdata(13, 0) + sdata(162, 0) * 5;
        p(1) = 1500 + inv[ci].difficulty_of_identification * 5;
        if (p > rnd(p(1) * 5))
        {
            s = itemname(ci);
            item_identify(
                inv[ci], identification_state_t::completely_identified);
            itemmemory(0, inv[ci].id) = 1;
            if (config::instance().hideautoidentify <= 1)
            {
                txt(lang(
                    u8"バックパックの中の"s + s + u8"は"s + itemname(ci)
                        + u8"だと判明した。"s,
                    u8"You appraise "s + s + u8" as "s + itemname(ci)
                        + u8"."s));
            }
            skillexp(162, 0, 50);
        }
        if (inv[ci].identification_state
            <= identification_state_t::partly_identified)
        {
            if (p > rnd(p(1)))
            {
                if (config::instance().hideautoidentify == 0)
                {
                    txt(lang(
                        u8"バックパックの中の"s + itemname(ci) + u8"は"s
                            + i18n::_(
                                  u8"ui", u8"quality", u8"_"s + inv[ci].quality)
                            + u8"だという感じがする。"s,
                        u8"You sense the quality of "s + itemname(ci)
                            + u8" is "s
                            + i18n::_(
                                  u8"ui", u8"quality", u8"_"s + inv[ci].quality)
                            + u8"."s));
                }
                item_identify(
                    inv[ci], identification_state_t::almost_identified);
                skillexp(162, 0, 50);
            }
        }
    }
    return;
}



void label_1581()
{
    if (reftype < 60000)
    {
        if (rnd(12) == 0)
        {
            inv[ci].curse_state = curse_state_t::blessed;
        }
        if (rnd(13) == 0)
        {
            inv[ci].curse_state = curse_state_t::cursed;
            if (the_item_db[inv[ci].id]->category < 50000)
            {
                if (rnd(4) == 0)
                {
                    inv[ci].curse_state = curse_state_t::doomed;
                }
            }
        }
    }
    if (cm || mode == 1 || inv[ci].quality == 6)
    {
        inv[ci].curse_state = curse_state_t::none;
    }
    if (reftype < 50000 || (reftype == 60000 && rnd(5) == 0))
    {
        if (inv[ci].material >= 1000 || reftype == 60000)
        {
            initialize_item_material();
        }
        else
        {
            set_material_specific_attributes();
        }
    }
    if (fixeditemenc != 0)
    {
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            if (fixeditemenc(cnt * 2) == 0)
            {
                break;
            }
            encadd(
                ci,
                fixeditemenc(cnt * 2),
                fixeditemenc(cnt * 2 + 1),
                0,
                0,
                0,
                1);
        }
    }
    if (reftype < 52000)
    {
        add_enchantments();
    }
    else if (inv[ci].quality != 6)
    {
        inv[ci].quality = 2;
    }
    return;
}



int do_create_item(int slot, int x, int y)
{
    if ((slot == 0 || slot == -1) && fixlv < 5)
    {
        if (sdata(19, 0) > rnd(5000))
        {
            ++fixlv;
        }
    }

    ci = inv_getfreeid(slot);
    if (ci == -1)
        return 0;

    item_delete(ci);

    if (slot == -1 && mode != 6 && mode != 9)
    {
        bool ok = false;
        for (int i = 0; i < 100; ++i)
        {
            if (x == -1)
            {
                sx = rnd(mdata(0) - 2) + 2;
                sy = rnd(mdata(1) - 2) + 2;
                if (map(sx, sy, 4) != 0)
                {
                    continue;
                }
            }
            else
            {
                if (i == 0)
                {
                    sx = x;
                    sy = y;
                }
                else
                {
                    sx = x + rnd(i + 1) - rnd(i + 1);
                    sy = y + rnd(i + 1) - rnd(i + 1);
                }
                if (sx < 0 || sy < 0 || sx > mdata(0) - 1 || sy > mdata(1) - 1)
                {
                    continue;
                }
            }
            if (x != -1 && i == 0)
            {
                ok = true;
                inv[ci].position.x = sx;
                inv[ci].position.y = sy;
                break;
            }
            if (map(sx, sy, 6) != 0)
            {
                if (map(sx, sy, 6) / 1000 % 100 == 22
                    || map(sx, sy, 6) / 1000 % 100 == 20
                    || map(sx, sy, 6) / 1000 % 100 == 21)
                {
                    continue;
                }
            }
            if ((chipm(7, map(sx, sy, 0)) & 4) == 0)
            {
                ok = true;
                inv[ci].position.x = sx;
                inv[ci].position.y = sy;
                break;
            }
        }
        if (!ok)
            return 0;
    }

    if (dbid == -1)
    {
        if (fltselect == 0 && mode != 6)
        {
            if (fixlv == 3)
            {
                if (rnd(1000) == 0)
                {
                    fltselect = 2;
                }
            }
            if (fixlv == 4)
            {
                if (rnd(100) == 0)
                {
                    fltselect = 2;
                }
            }
        }
        dbmode = 1;
        get_random_item_id();
        if (dbid == 25)
        {
            if (fltselect == 2)
            {
                fixlv = 4;
            }
            objlv += 10;
            fltselect = 0;
            dbmode = 1;
            get_random_item_id();
        }
    }

    if (dbid == 25 && flttypemajor == 60002)
    {
        dbid = 501;
    }

    access_item_db(3);
    access_item_db(2);

    inv[ci].color = icolref(inv[ci].id);
    if (inv[ci].color == 1)
    {
        inv[ci].color = randcolor(rnd(length(randcolor)));
    }
    if (inv[ci].id == 519)
    {
        inv[ci].color = rnd(21);
    }
    if (inv[ci].id == 24 && inv[ci].param1 == 0)
    {
        inv[ci].param1 = isetbook(rnd(length(isetbook)));
    }
    if (inv[ci].id == 563 && inv[ci].param1 == 0)
    {
        inv[ci].param1 = randskill();
    }
    if (inv[ci].id == 783)
    {
        inv[ci].subname = rpsourcelist(rnd(length(rpsourcelist)));
        inv[ci].param1 = 1;
    }

    ++itemmemory(1, dbid);

    inv[ci].quality = fixlv;
    if (fixlv == 6 && mode != 6 && nooracle == 0)
    {
        int owner = inv_getowner(ci);
        if (owner != -1)
        {
            if (cdata[owner].character_role == 13)
            {
                artifactlocation.push_back(lang(
                    iknownnameref(inv[ci].id) + u8"は"s + gdata_year + u8"年"s
                        + gdata_month + u8"月に"s
                        + mapname(cdata[owner].current_map) + u8"の"s
                        + cdatan(0, owner) + u8"の手に渡った。"s,
                    cnven(iknownnameref(inv[ci].id)) + u8" was held by "s
                        + cdatan(0, owner) + u8" at "s
                        + mapname(cdata[owner].current_map) + u8" in "s
                        + gdata_day + u8"/"s + gdata_month + u8", "s
                        + gdata_year + u8". "s));
            }
            else
            {
                owner = -1;
            }
        }
        if (owner == -1)
        {
            artifactlocation.push_back(lang(
                iknownnameref(inv[ci].id) + u8"は"s + gdata_year + u8"年"s
                    + gdata_month + u8"月に"s + mdatan(0) + u8"で生成された。"s,
                cnven(iknownnameref(inv[ci].id)) + u8" was created at "s
                    + mdatan(0) + u8" in "s + gdata_day + u8"/"s + gdata_month
                    + u8", "s + gdata_year + u8". "s));
        }
    }

    if (inv[ci].id == 617)
    {
        inv[ci].param1 = rnd(6);
        inv[ci].image = 385 + inv[ci].param1;
        inv[ci].value = inv[ci].param1 * inv[ci].param1 * 500 + 200;
    }

    if (inv[ci].id == 344)
    {
        inv[ci].param1 = rnd(5) + 1;
        if (mode != 6)
        {
            inv[ci].param1 = 2;
        }
        inv[ci].subname = inv[ci].param1;
        inv[ci].value = 5000
            + 4500 * inv[ci].param1 * inv[ci].param1 * inv[ci].param1
            + inv[ci].param1 * 20000;
        if (inv[ci].param1 == 5)
        {
            inv[ci].value *= 2;
        }
    }

    if (inv[ci].id == 54)
    {
        inv[ci].number = calcinitgold(slot);
        if (inv[ci].quality == 3)
        {
            inv[ci].number = inv[ci].number * 2;
        }
        if (inv[ci].quality >= 4)
        {
            inv[ci].number = inv[ci].number * 4;
        }
        if (slot >= 0)
        {
            cdata[slot].gold += inv[ci].number;
            inv[ci].number = 0;
            return 1;
        }
    }

    if (inv[ci].id == 729)
    {
        inv[ci].param4 = rnd(rnd(rnd(length(giftvalue)) + 1) + 1);
        inv[ci].value = inv[ci].param4 * 2500 + 500;
    }

    if (inv[ci].id == 578)
    {
        inv[ci].param2 = rnd(rnd(length(moneybox)) + 1);
        inv[ci].value =
            inv[ci].param2 * inv[ci].param2 * inv[ci].param2 * 1000 + 1000;
    }

    if (inv[ci].id == 685)
    {
        inv[ci].param2 = rnd(objlv + 1) + 1;
        inv[ci].value =
            2000 + inv[ci].param2 * inv[ci].param2 + inv[ci].param2 * 100;
    }

    if (inv[ci].id == 630)
    {
        determine_item_material();
        apply_item_material();
    }

    if (inv[ci].id == 687)
    {
        inv[ci].param1 = rnd(rnd(clamp(objlv / 2, 1, 15)) + 1);
    }

    if (inv[ci].id == 667)
    {
        ibitmod(17, ci, 1);
    }

    if (inv[ci].id == 641)
    {
        ++gdata_next_inventory_serial_id;
        inv[ci].count = gdata_next_inventory_serial_id;
    }

    if (inv[ci].id == 510)
    {
        inv[ci].count = 3;
    }

    if (inv[ci].id == 561)
    {
        inv[ci].count = 5;
    }

    if (inv[ci].id == 547)
    {
        inv[ci].count = 4;
    }

    if (inv[ci].id == 579)
    {
        inv[ci].count = 6;
    }

    if (reftype == 72000)
    {
        inv[ci].param1 =
            gdata_current_dungeon_level * (gdata_current_map != 30) + 5;
        if (inv[ci].id == 283)
        {
            inv[ci].param1 = (rnd(10) + 1) * (cdata[0].level / 10 + 1);
        }
        if (inv[ci].id == 415 || inv[ci].id == 416)
        {
            inv[ci].param1 = cdata[0].level;
        }
        inv[ci].param2 = rnd(
            std::abs(gdata_current_dungeon_level) * (gdata_current_map != 30)
            + 1);
        if (inv[ci].id == 284 || inv[ci].id == 283)
        {
            inv[ci].param2 = rnd(15);
        }
        inv[ci].param3 = rnd(30000);
        if (inv[ci].id == 734)
        {
            inv[ci].param2 = rnd(rnd(100) + 1) + 1;
            inv[ci].value = inv[ci].param2 * 25 + 150;
            initnum = rnd(8);
        }
    }

    if (reftype == 57000 && inv[ci].param1 != 0)
    {
        if (mode == 6)
        {
            if (rnd(2) == 0)
            {
                inv[ci].param2 = 0;
            }
            else
            {
                inv[ci].param2 = 3 + rnd(3);
            }
        }
        if (inv[ci].param2 != 0)
        {
            inv[ci].image = picfood(inv[ci].param2, inv[ci].param1 / 1000);
        }
        if (inv[ci].material == 35)
        {
            inv[ci].param3 += gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12;
        }
    }

    label_1581();
    if (reftype == 60000)
    {
        if (rnd(3) == 0)
        {
            inv[ci].subname = rnd(rnd(12) + 1);
        }
        else
        {
            inv[ci].subname = 0;
        }
    }

    if (mode == 6)
    {
        inv[ci].identification_state =
            identification_state_t::completely_identified;
    }
    if (reftype == 68000 || reftype == 69000 || inv[ci].id == 622
        || inv[ci].id == 724 || inv[ci].id == 730 || inv[ci].id == 615)
    {
        inv[ci].curse_state = curse_state_t::none;
        inv[ci].identification_state =
            identification_state_t::completely_identified;
    }
    if (reftype == 92000)
    {
        inv[ci].identification_state =
            identification_state_t::completely_identified;
        inv[ci].curse_state = curse_state_t::none;
        itemmemory(0, inv[ci].id) = 1;
    }
    if (reftype == 62000 || reftype == 64000 || reftype == 77000)
    {
        inv[ci].curse_state = curse_state_t::none;
    }
    if (mode != 6)
    {
        if (reftype < 50000)
        {
            if (rnd(sdata(162, 0) + 1) > 5)
            {
                inv[ci].identification_state =
                    identification_state_t::almost_identified;
            }
        }
    }

    label_1583();

    itemturn(ci);

    if (initnum != 0)
    {
        inv[ci].number = initnum;
    }

    if (nostack == 1)
    {
        nostack = 0;
    }
    else
    {
        int stat = item_stack(slot, ci);
        if (stat == 1)
        {
            ci = ti;
            return 1;
        }
    }

    if (slot == -1)
    {
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
    }
    return 1;
}



void label_1583()
{
    if (reftype == 60000)
    {
        if (inv[ci].subname != 0)
        {
            inv[ci].value = inv[ci].value * (80 + inv[ci].subname * 20) / 100;
        }
    }
    return;
}



void lovemiracle(int prm_932)
{
    if (rnd(2) || prm_932 == 0)
    {
        return;
    }
    cibk = ci;
    txtef(9);
    txt(lang(u8"「あ…！」"s, u8"\"Uh...!\""s));
    flt();
    if (rnd(2))
    {
        int stat = itemcreate(
            -1, 573, cdata[prm_932].position.x, cdata[prm_932].position.y, 0);
        if (stat)
        {
            inv[ci].subname = cdata[prm_932].id;
            inv[ci].weight = cdata[prm_932].weight * 10 + 250;
            inv[ci].value = clamp(
                cdata[prm_932].weight * cdata[prm_932].weight / 10000,
                200,
                40000);
        }
    }
    else
    {
        int stat = itemcreate(
            -1, 574, cdata[prm_932].position.x, cdata[prm_932].position.y, 0);
        if (stat)
        {
            inv[ci].subname = cdata[prm_932].id;
        }
    }
    ci = cibk;
    snd(107);
    animeload(15, prm_932);
    return;
}



void eat_rotten_food()
{
    if (cdata[cc].can_digest_rotten_food() == 1)
    {
        txt(lang(
            u8"しかし、"s + name(cc) + u8"は何ともなかった。"s,
            u8"But "s + name(cc) + your(cc) + u8" stomach isn't affected."s));
        return;
    }
    fdmax = 0;
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 10;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 11;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 17;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 16;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 12;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 13;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 14;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    if (fdmax < 10)
    {
        fdlist(0, fdmax) = 15;
        fdlist(1, fdmax) = -100;
        ++fdmax;
    }
    nutrition = 1000;
    dmgcon(cc, 3, 100);
    dmgcon(cc, 5, 200);
    return;
}



void cook()
{
    snd(25);
    item_separate(ci);
    s = itemname(ci);
    p = rnd(sdata(184, cc) + 6) + rnd((inv[cooktool].param1 / 50 + 1));
    if (p > sdata(184, cc) / 5 + 7)
    {
        p = sdata(184, cc) / 5 + 7;
    }
    p = rnd(p + 1);
    if (p > 3)
    {
        p = rnd(p);
    }
    if (sdata(184, cc) >= 5)
    {
        if (p < 3)
        {
            if (rnd(4) == 0)
            {
                p = 3;
            }
        }
    }
    if (sdata(184, cc) >= 10)
    {
        if (p < 3)
        {
            if (rnd(3) == 0)
            {
                p = 3;
            }
        }
    }
    p += inv[cooktool].param1 / 100;
    if (p > 9)
    {
        p = 9;
    }
    if (p < 1)
    {
        p = 1;
    }
    make_dish(ci, p);
    txt(lang(
        itemname(cooktool) + u8"で"s + s + u8"を料理して、"s + itemname(ci, 1)
            + u8"を作った。"s,
        u8"You cook "s + s + u8" with "s + itemname(cooktool, 1)
            + u8" and make "s + itemname(ci, 1) + u8"."s));
    int rank = inv[ci].param2;
    if (rank > 2)
    {
        skillexp(184, cc, 30 + rank * 5);
    }
    refresh_burden_state();
    return;
}



void apply_general_eating_effect()
{
    tc = cc;
    DIM3(fdlist, 2, 10);
    for (int cnt = 0, cnt_end = (fdmax); cnt < cnt_end; ++cnt)
    {
        fdlist(0, cnt) = 0;
        fdlist(1, cnt) = 0;
    }
    nutrition = 2500;
    if (the_item_db[inv[ci].id]->is_cargo == 1)
    {
        nutrition += 2500;
    }
    fdmax = 0;
    i = inv[ci].param1 / 1000;
    if (i == 1)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 30;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 40;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        nutrition = 3500;
    }
    if (i == 8)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 20;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 20;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 20;
            ++fdmax;
        }
        nutrition = 2000;
    }
    if (i == 2)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        nutrition = 2000;
    }
    if (i == 3)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 20;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 30;
            ++fdmax;
        }
        nutrition = 1500;
    }
    if (i == 7)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 25;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 25;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 25;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 25;
            ++fdmax;
        }
        nutrition = 2800;
    }
    if (i == 4)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 40;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 30;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 30;
            ++fdmax;
        }
        nutrition = 1500;
    }
    if (i == 6)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 40;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 40;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 20;
            ++fdmax;
        }
        nutrition = 3000;
    }
    if (i == 5)
    {
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 60;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 40;
            ++fdmax;
        }
        nutrition = 3500;
    }
    nutrition = nutrition * (100 + inv[ci].param2 * 15) / 100;
    for (int cnt = 0, cnt_end = (fdmax); cnt < cnt_end; ++cnt)
    {
        if (fdlist(1, cnt) > 0)
        {
            if (inv[ci].param2 < 3)
            {
                fdlist(1, cnt) = fdlist(1, cnt) / 2;
            }
            else
            {
                fdlist(1, cnt) =
                    fdlist(1, cnt) * (50 + inv[ci].param2 * 20) / 100;
            }
        }
        else if (inv[ci].param2 < 3)
        {
            fdlist(1, cnt) =
                fdlist(1, cnt) * ((3 - inv[ci].param2) * 100 + 100) / 100;
        }
        else
        {
            fdlist(1, cnt) = fdlist(1, cnt) * 100 / (inv[ci].param2 * 50);
        }
    }
    if (cc == 0)
    {
        p = inv[ci].param1 / 1000;
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (cc == 0)
            {
                if (trait(41))
                {
                    if (inv[ci].id == 204)
                    {
                        s = refchara_str(inv[ci].subname, 8);
                        if (strutil::contains(s(0), u8"/man/"))
                        {
                            txt(lang(u8"ウマイ！"s, u8"Delicious!"s));
                            break;
                        }
                    }
                }
            }
            if (inv[ci].material == 35)
            {
                if (inv[ci].param3 < 0)
                {
                    txt(lang(
                        u8"うげっ！腐ったものを食べてしまった…うわ…"s,
                        u8"Ugh! Rotten food!"s));
                    break;
                }
            }
            if (inv[ci].param2 == 0)
            {
                if (p == 1)
                {
                    txt(lang(u8"生肉だ…"s, u8"Ugh...Raw meat..."s));
                    break;
                }
                if (p == 7)
                {
                    txt(lang(
                        u8"粉の味がする…"s, u8"It tastes like...powder..."s));
                    break;
                }
                if (p == 5)
                {
                    txt(lang(
                        u8"生で食べるものじゃないな…"s,
                        u8"Er...this needs to be cooked."s));
                    break;
                }
                txt(lang(
                        u8"まずいわけではないが…"s,
                        u8"It doesn't taste awful but..."s),
                    lang(u8"平凡な味だ。"s, u8"Very boring food."s));
                break;
            }
            if (inv[ci].param2 < 3)
            {
                txt(lang(
                        u8"うぅ…腹を壊しそうだ。"s,
                        u8"Boy, it gives your stomach trouble!"s),
                    lang(u8"まずい！"s, u8"Ugh! Yuk!"s),
                    lang(u8"ひどい味だ！"s, u8"Awful taste!!"s));
                break;
            }
            if (inv[ci].param2 < 5)
            {
                txt(lang(
                        u8"まあまあの味だ。"s, u8"Uh-uh, the taste is so so."s),
                    lang(u8"悪くない味だ。"s, u8"The taste is not bad."s));
                break;
            }
            if (inv[ci].param2 < 7)
            {
                txt(lang(u8"かなりいける。"s, u8"It tasted good."s),
                    lang(u8"それなりに美味しかった。"s, u8"Decent meal."s));
                break;
            }
            if (inv[ci].param2 < 9)
            {
                txt(lang(u8"美味しい！"s, u8"Delicious!"s),
                    lang(u8"これはいける！"s, u8"Gee what a good taste!"s),
                    lang(u8"いい味だ！"s, u8"It tasted pretty good!"s));
                break;
            }
            txt(lang(u8"最高に美味しい！"s, u8"Wow! Terrific food!"s),
                lang(u8"まさに絶品だ！"s, u8"Yummy! Absolutely yummy!"s),
                lang(
                    u8"天にも昇る味だ！"s,
                    u8"It tasted like seventh heaven!"s));
        }
    }
    else if (inv[ci].material == 35)
    {
        if (inv[ci].param3 < 0)
        {
            txt(lang(
                name(cc) + u8"は渋い顔をした。"s,
                name(cc) + u8" looks glum."s));
        }
    }
    if (inv[ci].id == 425)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 100;
            ++fdmax;
        }
        nutrition = 2500;
        if (cc == 0)
        {
            txtef(2);
            txt(lang(
                u8"このハーブは活力の源だ。"s,
                u8"This herb invigorates you."s));
        }
    }
    if (inv[ci].id == 422)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 900;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 700;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        nutrition = 500;
        modify_potential(cc, 10, 2);
        modify_potential(cc, 11, 2);
        if (cc == 0)
        {
            txtef(2);
            txt(lang(
                u8"新たな力が湧きあがってくる。"s,
                u8"You feel might coming through your body."s));
        }
    }
    if (inv[ci].id == 423)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 800;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 800;
            ++fdmax;
        }
        nutrition = 500;
        modify_potential(cc, 16, 2);
        modify_potential(cc, 15, 2);
        if (cc == 0)
        {
            txtef(2);
            txt(lang(
                u8"魔力の向上を感じる。"s,
                u8"You feel magical power springs up inside you."s));
        }
    }
    if (inv[ci].id == 424)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 750;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 800;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        modify_potential(cc, 12, 2);
        modify_potential(cc, 13, 2);
        nutrition = 500;
        if (cc == 0)
        {
            txtef(2);
            txt(lang(
                u8"感覚が研ぎ澄まされるようだ。"s,
                u8"You feel as your sense is sharpened."s));
        }
    }
    if (inv[ci].id == 426)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 850;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 700;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 10;
            ++fdmax;
        }
        nutrition = 500;
        modify_potential(cc, 17, 2);
        modify_potential(cc, 14, 2);
        if (cc == 0)
        {
            txtef(2);
            txt(lang(
                u8"ホルモンが活発化した。"s,
                u8"Your hormones are activated."s));
        }
    }
    if (inv[ci].id == 427)
    {
        fdmax = 0;
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 10;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 11;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 17;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 16;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 12;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 13;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 14;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        if (fdmax < 10)
        {
            fdlist(0, fdmax) = 15;
            fdlist(1, fdmax) = 50;
            ++fdmax;
        }
        nutrition = 20000;
    }
    if (inv[ci].id == 738)
    {
        nutrition = 750;
    }
    if (cc == 0)
    {
        if (inv[ci].material == 35)
        {
            if (inv[ci].param3 < 0)
            {
                eat_rotten_food();
            }
        }
    }
    if (inv[ci].id == 204)
    {
        s = refchara_str(inv[ci].subname, 8);
        if (cc == 0)
        {
            if (strutil::contains(s(0), u8"/man/"))
            {
                if (trait(41))
                {
                    txt(lang(
                        u8"これはあなたの大好きな人肉だ！"s,
                        u8"It's your favorite human flesh!"s));
                }
                else
                {
                    txt(lang(
                        u8"これは人肉だ…うぇぇ！"s,
                        u8"Eeeek! It's human flesh!"s));
                    damage_insanity(cc, 15);
                    dmgcon(cc, 11, 150);
                    if (trait(41) == 0)
                    {
                        if (rnd(5) == 0)
                        {
                            get_trait_info(0, 41);
                            txtef(2);
                            txt(traitrefn(0));
                            trait(41) = 1;
                        }
                    }
                }
            }
            else if (trait(41))
            {
                txt(lang(
                    u8"人肉の方が好みだが…"s,
                    u8"You would've rather eaten human flesh."s));
                nutrition = nutrition * 2 / 3;
            }
        }
    }
    if (inv[ci].id == 204
        || ((inv[ci].id == 571 || inv[ci].id == 573) && rnd(3) == 0))
    {
        dbmode = 12;
        dbid = inv[ci].subname;
        access_character_info();
    }
    for (int cnt = 0, cnt_end = (fdmax); cnt < cnt_end; ++cnt)
    {
        i = 100;
        if (cdata[cc].nutrition >= 5000)
        {
            p = (cdata[cc].nutrition - 5000) / 25;
            i = i * 100 / (100 + p);
        }
        if (cc != 0)
        {
            i = 1500;
            if (inv[ci].material == 35)
            {
                if (inv[ci].param3 < 0)
                {
                    i = 500;
                }
            }
        }
        if (i > 0)
        {
            skillexp(fdlist(0, cnt), cc, fdlist(1, cnt) * i / 100);
        }
    }
    if (inv[ci].curse_state == curse_state_t::blessed)
    {
        nutrition = nutrition * 150 / 100;
    }
    if (is_cursed(inv[ci].curse_state))
    {
        nutrition = nutrition * 50 / 100;
    }
    cdata[cc].nutrition += nutrition;
    if (nutrition >= 3000)
    {
        if (rnd(10) == 0 || cdata[cc].nutrition >= 12000)
        {
            modweight(cc, rnd(3) + 1, cdata[cc].nutrition >= 12000);
        }
    }
    if (cdata[cc].id == 261)
    {
        if (nutrition >= 2000)
        {
            cibk = ci;
            flt(calcobjlv(cdata[cc].level));
            flttypeminor = 58500;
            itemcreate(-1, 0, cdata[cc].position.x, cdata[cc].position.y, 0);
            txtef(9);
            txt(lang(
                u8"「げふぅ」"s + name(cc) + u8"は"s + itemname(ci, 1)
                    + u8"を吐き出した。"s,
                u8"「Ugh-Ughu」 "s + name(cc) + u8" spews up "s
                    + itemname(ci, 1) + u8"."s));
            ci = cibk;
        }
    }
    if (inv[ci].id == 204)
    {
        if (inv[ci].subname == 319)
        {
            txtef(2);
            txt(lang(
                name(cc) + u8"は進化した。"s,
                name(cc) + u8" evolve"s + _s(cc) + u8"."s));
            if (rnd(sdata.get(2, cc).original_level
                        * sdata.get(2, cc).original_level
                    + 1)
                < 2000)
            {
                skillmod(2, cc, 1000);
            }
            if (rnd(sdata.get(3, cc).original_level
                        * sdata.get(3, cc).original_level
                    + 1)
                < 2000)
            {
                skillmod(3, cc, 1000);
            }
            for (int cnt = 100; cnt < 400; ++cnt)
            {
                if (!the_ability_db[cnt]
                    || the_ability_db[cnt]->related_basic_attribute == 0
                    || sdata.get(cnt, cc).original_level == 0)
                {
                    continue;
                }
                modify_potential(cc, cnt, rnd(10) + 1);
            }
        }
    }
    if (inv[ci].id == 755)
    {
        txt(lang(u8"これは縁起がいい！"s, u8"The food is a charm!"s));
        skillmod(19, cc, 2000);
    }
    if (inv[ci].id == 702)
    {
        skillmod(19, cc, 1000);
    }
    if (inv[ci].id == 639)
    {
        skillmod(19, cc, 20000);
    }
    if (inv[ci].id == 655)
    {
        skillmod(2, cc, 3000);
    }
    if (inv[ci].id == 662)
    {
        skillmod(3, cc, 3000);
    }
    if (inv[ci].id == 738)
    {
        if (cc < 16)
        {
            txt(lang(
                name(cc) + u8"はクッキーの中のおみくじを読んだ。"s,
                name(cc) + u8" read"s + _s(cc) + u8" the paper fortune."s));
            read_talk_file(u8"%COOKIE2");
            if (inv[ci].curse_state == curse_state_t::blessed
                || (inv[ci].curse_state == curse_state_t::none && rnd(2)))
            {
                read_talk_file(u8"%COOKIE1");
            }
            txtef(5);
            txt(""s + buff);
        }
    }
    if (inv[ci].id == 667)
    {
        txt(lang(
            name(cc) + u8"の心はすこし癒された。"s,
            name(cc) + your(cc) + u8" heart is warmed."s));
        healsan(cc, 30);
    }
    if (ibit(14, ci) == 1)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"これは毒されている！"s + name(cc)
                    + u8"はもがき苦しみのたうちまわった！"s,
                u8"It's poisoned! "s + name(cc) + u8" writhe"s + _s(cc)
                    + u8" in agony!"s));
            txt(lang(u8"「ギャァァ…！」"s, u8"\"Gyaaaaa...!\""s),
                lang(u8"「ブッ！」"s, u8"\"Ugh!\""s));
        }
        dmghp(cc, rnd(250) + 250, -4);
        if (cdata[cc].state != 1)
        {
            if (cc != 0)
            {
                if (cdata[cc].relationship >= 0)
                {
                    modify_karma(0, -1);
                }
            }
            return;
        }
    }
    if (ibit(6, ci) == 1)
    {
        if (cc == 0)
        {
            txt(lang(u8"あなたは興奮した！"s, u8"You are excited!"s));
        }
        else
        {
            txtef(9);
            txt(name(cc)
                    + lang(
                          u8"「なんだか…変な気分なの…」"s,
                          (u8" gasps, "s + u8"\"I f-feel...strange...\""s)),
                name(cc)
                    + lang(
                          u8"「あれ…なにこの感じは…」"s,
                          (u8"gasps "s
                           + u8"\"Uh..uh..What is this feeling...\""s)));
            cdata[cc].emotion_icon = 317;
            modimp(cc, 30);
            modify_karma(0, -10);
            lovemiracle(cc);
        }
        dmgcon(cc, 7, 500);
        cdata[cc].emotion_icon = 317;
    }
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        if (inv[ci].enchantments[cnt].id == 0)
        {
            break;
        }
        enc = inv[ci].enchantments[cnt].id;
        if (enc == 36)
        {
            p = rnd(inv[ci].enchantments[cnt].power / 50 + 1) + 1;
            healsp(cc, p);
            continue;
        }
        if (enc == 38)
        {
            p = rnd(inv[ci].enchantments[cnt].power / 25 + 1) + 1;
            healmp(cc, p / 5);
            continue;
        }
        if (enc == 37)
        {
            evadd(18, cc);
            continue;
        }
        if (enc == 40)
        {
            if (gdata_left_turns_of_timestop == 0)
            {
                txtef(9);
                txt(lang(
                    name(cc) + u8"は時を止めた。"s,
                    name(cc) + u8" stop"s + _s(cc) + u8" time."s));
                gdata_left_turns_of_timestop =
                    inv[ci].enchantments[cnt].power / 100 + 1 + 1;
                continue;
            }
        }
        enc2 = enc / 10000;
        if (enc2 != 0)
        {
            enc = enc % 10000;
            if (enc2 == 1)
            {
                skillexp(
                    enc,
                    cc,
                    (inv[ci].enchantments[cnt].power / 50 + 1) * 100
                        * (1 + (cc != 0) * 5));
                if (is_in_fov(cc))
                {
                    if (inv[ci].enchantments[cnt].power / 50 + 1 >= 0)
                    {
                        txt(lang(
                            name(cc) + u8"の"s
                                + i18n::_(
                                      u8"ability",
                                      std::to_string(enc),
                                      u8"name")
                                + u8"は発達した。"s,
                            name(cc) + his(cc) + u8" "s
                                + i18n::_(
                                      u8"ability",
                                      std::to_string(enc),
                                      u8"name")
                                + u8" develops."s));
                    }
                    else
                    {
                        txt(lang(
                            name(cc) + u8"の"s
                                + i18n::_(
                                      u8"ability",
                                      std::to_string(enc),
                                      u8"name")
                                + u8"は衰えた。"s,
                            name(cc) + his(cc) + u8" "s
                                + i18n::_(
                                      u8"ability",
                                      std::to_string(enc),
                                      u8"name")
                                + u8" deteriorates."s));
                    }
                }
                continue;
            }
            if (enc2 == 6)
            {
                if (is_in_fov(cc))
                {
                    txt(lang(
                        name(cc) + u8"の"s
                            + i18n::_(
                                  u8"ability", std::to_string(enc), u8"name")
                            + u8"は成長期に突入した。"s,
                        name(cc) + his(cc) + u8" "s
                            + i18n::_(
                                  u8"ability", std::to_string(enc), u8"name")
                            + u8" enters a period of rapid growth."s));
                }
                addbuff(
                    cc,
                    20 + (enc - 10),
                    (inv[ci].enchantments[cnt].power / 50 + 1) * 5
                        * (1 + (cc != 0) * 2),
                    2000);
                continue;
            }
        }
    }
    eatstatus(inv[cieat].curse_state, cc);
    return;
}



void eating_effect_eat_iron()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            u8"まるで鉄のように硬い！"s + name(cc) + u8"の胃は悲鳴をあげた。"s,
            u8"It's too hard! "s + name(cc) + your(cc)
                + u8" stomach screams."s));
    }
    dmgcon(cc, 7, 200);
    return;
}



void eating_effect_insanity()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            u8"気が変になりそうな味だ。"s,
            u8"It tastes really, really strange."s));
    }
    damage_insanity(cc, 25);
    dmgcon(cc, 11, 500);
    return;
}



void eating_effect_eat_horse()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"馬肉だ！これは精がつきそうだ。"s,
            u8"A horsemeat! It's nourishing"s));
    }
    skillexp(11, cc, 100);
    return;
}



void eating_effect_eat_holy_one()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            name(cc) + u8"は神聖なものを汚した気がした。"s,
            name(cc) + u8" feel"s + _s(cc) + u8" as "s + he(cc) + u8" "s
                + have(cc) + u8" been corrupted."s));
    }
    if (rnd(5) == 0)
    {
        resistmod(cc, 53, 50);
    }
    return;
}



void eating_effect_eat_at()
{
    if (is_in_fov(cc))
    {
        txt(lang(u8"＠を食べるなんて…"s, u8"You dare to eat @..."s));
    }
    return;
}



void eating_effect_eat_guard()
{
    if (cc != 0)
    {
        return;
    }
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(u8"ガード達はあなたを憎悪した。"s, u8"Guards hate you."s));
    }
    modify_karma(cc, -15);
    return;
}



void eating_effect_fire()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            name(cc) + u8"の体は一瞬燃え上がった。"s,
            name(cc) + your(cc) + u8" body burns up for a second."s));
    }
    resistmod(cc, 50, 100);
    return;
}



void eating_effect_insanity2()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            name(cc) + u8"の胃は狂気で満たされた。"s, u8"Sheer madness!"s));
    }
    resistmod(cc, 54, 50);
    damage_insanity(cc, 200);
    dmgcon(cc, 11, 1000);
    return;
}



void eating_effect_eat_cute_one()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"肌がつるつるになりそうだ。"s,
            name(cc) + your(cc) + u8" skin becomes smooth."s));
    }
    skillexp(17, cc, 150);
    return;
}



void eating_effect_eat_lovely_one()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            name(cc) + u8"は恋をしている気分になった！"s,
            name(cc) + u8" feel"s + _s(cc) + u8" love!"s));
    }
    skillexp(17, cc, 400);
    return;
}



void eating_effect_eat_poisonous_one()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(u8"これは有毒だ！"s, u8"Argh! It's poisonous!"s));
    }
    dmgcon(cc, 1, 100);
    return;
}



void eating_effect_regeneration()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"血が沸き立つようだ。"s,
            u8"A troll meat. This must be good for your body."s));
    }
    skillexp(154, cc, 200);
    return;
}



void eating_effect_eat_rotten_one()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            u8"腐ってるなんて分かりきっていたのに…うげぇ"s,
            u8"Of course, it's rotten! Urgh..."s));
    }
    eat_rotten_food();
    return;
}



void eating_effect_strength()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(u8"力が湧いてくるようだ。"s, u8"Mighty taste!"s));
    }
    skillexp(10, cc, 250);
    return;
}



void eating_effect_magic()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"微かな魔力の刺激を感じた。"s,
            name(cc) + u8" "s + is(cc) + u8" magically stimulated."s));
    }
    skillexp(155, cc, 500);
    return;
}



void eating_effect_insanity3()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            u8"胃の調子がおかしい…"s,
            u8"Something is wrong with "s + name(cc) + your(cc)
                + u8" stomach..."s));
    }
    dmgcon(cc, 5, 200);
    return;
}



void eating_effect_calm()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"この肉は心を落ち着かせる効果があるようだ。"s,
            u8"Eating this brings "s + name(cc) + u8" inner peace."s));
    }
    healsan(cc, 20);
    return;
}



void eating_effect_insanity4()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            name(cc) + u8"の胃は狂気で満たされた。"s, u8"Sheer madness!"s));
    }
    damage_insanity(cc, 50);
    if (rnd(5) == 0)
    {
        resistmod(cc, 54, 50);
    }
    return;
}



void eating_effect_chaos()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            name(cc) + u8"の胃は混沌で満たされた。"s,
            name(cc) + u8" "s + is(cc) + u8" shaken by a chaotic power."s));
    }
    dmgcon(cc, 5, 300);
    return;
}



void eating_effect_lightning()
{
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            name(cc) + u8"の神経に電流が走った。"s,
            name(cc) + your(cc) + u8" nerve is damaged."s));
    }
    dmgcon(cc, 3, 300);
    return;
}



void eating_effect_eat_cat()
{
    if (cc != 0)
    {
        return;
    }
    if (is_in_fov(cc))
    {
        txt(lang(u8"猫を食べるなんて！！"s, u8"How can you eat a cat!!"s));
    }
    modify_karma(0, -5);
    return;
}



void eating_effect_ether()
{
    if (cc != 0)
    {
        return;
    }
    if (is_in_fov(cc))
    {
        txtef(8);
        txt(lang(
            name(cc) + u8"の体内はエーテルで満たされた。"s,
            u8"Ether corrupts your body."s));
    }
    modcorrupt(1000);
    return;
}



void eating_effect_constitution()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"体力がつきそうだ。"s,
            u8"This food is good for your endurance."s));
    }
    return;
}



void eating_effect_magic2()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"魔力が鍛えられる。"s, u8"This food is good for your magic."s));
    }
    return;
}



void eating_effect_strength2()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"力がつきそうだ。"s, u8"This food is good for your strength."s));
    }
    return;
}



void eating_effect_will()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"精神が少しずぶとくなった。"s,
            u8"This food is good for your will power."s));
    }
    return;
}



void eating_effect_quick()
{
    if (is_in_fov(cc))
    {
        txtef(2);
        txt(lang(
            u8"ワアーォ、"s + name(cc) + u8"は速くなった気がする！"s,
            u8"Wow, "s + name(cc) + u8" speed"s + _s(cc) + u8" up!"s));
    }
    skillexp(
        18, cc, clamp(2500 - sdata(18, cc) * sdata(18, cc) / 10, 20, 2500));
    return;
}



void eating_effect_pregnant()
{
    if (is_in_fov(cc))
    {
        txt(lang(
            u8"何かが"s + name(cc) + u8"の体内に入り込んだ。"s,
            u8"Something gets into "s + name(cc) + your(cc) + u8" body."s));
    }
    tc = cc;
    get_pregnant();
    return;
}



void get_pregnant()
{
    if (encfind(tc, 48) != -1)
    {
        if (is_in_fov(tc))
        {
            txt(lang(
                u8"しかしすぐに吐き出した。"s,
                u8"But "s + he(tc) + u8" puke"s + _s(tc)
                    + u8" it out quickly."s));
        }
        return;
    }
    if (cdata[tc].is_pregnant() == 0)
    {
        txtef(5);
        txt(lang(
            name(tc) + u8"は寄生された。"s,
            name(tc) + u8" get"s + _s(tc) + u8" pregnant."s));
        animeload(8, tc);
        cdata[tc].is_pregnant() = true;
    }
    return;
}



void initialize_cell_object_data()
{
    int tile_doorclosed2 = 0;
    int tile_doorclosed3 = 0;
    elona_vector1<std::string> cellobjname;
    int maxobjid = 0;
    tile_trap = 234;
    tile_doorclosed = 726;
    tile_doorclosed2 = 728;
    tile_doorclosed3 = 730;
    tile_doorclosed4 = 733;
    tile_dooropen = 236;
    tile_downstairs = 231;
    tile_upstairs = 232;
    tile_hidden = 0;
    tile_downlocked = 237;
    tile_re = 238;
    tile_plant = 247;
    tile_board = 727;
    tile_votebox = 729;
    tile_townboard = 732;
    DIM3(cellobjdata, 5, 50);
    SDIM3(cellobjname, 20, 50);
    maxobjid = 0;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed;
    cellobjdata(2, maxobjid) = 99;
    cellobjdata(3, maxobjid) = tile_doorclosed;
    cellobjname(maxobjid) = u8"dummy"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed;
    cellobjdata(2, maxobjid) = 99;
    cellobjdata(3, maxobjid) = tile_doorclosed;
    cellobjname(maxobjid) = u8"扉99"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_doorclosed;
    cellobjname(maxobjid) = u8"扉0"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 14;
    cellobjdata(1, maxobjid) = tile_trap;
    cellobjdata(2, maxobjid) = 100;
    cellobjdata(3, maxobjid) = 0;
    cellobjname(maxobjid) = u8"罠"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 14;
    cellobjdata(1, maxobjid) = tile_trap;
    cellobjdata(2, maxobjid) = 100;
    cellobjdata(3, maxobjid) = 0;
    cellobjname(maxobjid) = u8"罠"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 10;
    cellobjdata(1, maxobjid) = tile_upstairs;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_upstairs;
    cellobjname(maxobjid) = u8"昇り階段"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 11;
    cellobjdata(1, maxobjid) = tile_downstairs;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_downstairs;
    cellobjname(maxobjid) = u8"降り階段"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed2;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_doorclosed2;
    cellobjname(maxobjid) = u8"扉SF"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 23;
    cellobjdata(1, maxobjid) = tile_board;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_board;
    cellobjname(maxobjid) = u8"掲示板"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 31;
    cellobjdata(1, maxobjid) = tile_votebox;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_votebox;
    cellobjname(maxobjid) = u8"投票箱"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 32;
    cellobjdata(1, maxobjid) = tile_trap;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = 0;
    cellobjname(maxobjid) = u8"メダル"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed3;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_doorclosed3;
    cellobjname(maxobjid) = u8"扉JP"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 33;
    cellobjdata(1, maxobjid) = tile_townboard;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_townboard;
    cellobjname(maxobjid) = u8"街掲示板"s;
    ++maxobjid;
    cellobjdata(0, maxobjid) = 21;
    cellobjdata(1, maxobjid) = tile_doorclosed4;
    cellobjdata(2, maxobjid) = 0;
    cellobjdata(3, maxobjid) = tile_doorclosed4;
    cellobjname(maxobjid) = u8"扉JAIL"s;
    ++maxobjid;
    return;
}



void map_converttile()
{
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            if (map(x, y, 0) == 0)
            {
                map(x, y, 0) = tile_default
                    + (rnd(tile_default(2)) == 0) * rnd(tile_default(1));
                continue;
            }
            if (map(x, y, 0) >= 100)
            {
                map(x, y, 0) = tile_tunnel
                    + (rnd(tile_tunnel(2)) == 0) * rnd(tile_tunnel(1));
                continue;
            }
            if (map(x, y, 0) == 1)
            {
                map(x, y, 0) =
                    tile_wall + (rnd(tile_wall(2)) == 0) * rnd(tile_wall(1));
                continue;
            }
            if (map(x, y, 0) == 3)
            {
                map(x, y, 0) =
                    tile_room + (rnd(tile_room(2)) == 0) * rnd(tile_room(1));
                continue;
            }
            if (map(x, y, 0) == 4)
            {
                map(x, y, 0) = tile_default
                    + (rnd(tile_default(2)) == 0) * rnd(tile_default(1));
                continue;
            }
        }
    }
    return;
}



void map_tileset(int prm_933)
{
    tile_doorclosed = 726;
    tile_dooropen = 236;
    tile_default(0) = 396;
    tile_default(1) = 1;
    tile_default(2) = 1;
    tile_fog(0) = 531;
    tile_fog(1) = 1;
    tile_fog(2) = 1;
    tile_wall(0) = 462;
    tile_wall(1) = 1;
    tile_wall(2) = 1;
    tile_room(0) = 13;
    tile_room(1) = 1;
    tile_room(2) = 1;
    tile_board = 727;
    tile_votebox = 729;
    tile_townboard = 732;
    tile_tunnel(0) = 33;
    tile_tunnel(1) = 1;
    tile_tunnel(2) = 1;
    tile_pot = 242;
    if (prm_933 == 12)
    {
        tile_doorclosed = 733;
        tile_dooropen = 265;
    }
    if (prm_933 == 8)
    {
        tile_doorclosed = 728;
        tile_dooropen = 241;
    }
    if (prm_933 == 9)
    {
        tile_doorclosed = 730;
        tile_dooropen = 264;
    }
    if (prm_933 == 3)
    {
        tile_room = 41;
        tile_tunnel = 41;
        tile_wall = 469;
        tile_fog = tile_wall + 66;
    }
    if (prm_933 == 2)
    {
        tile_wall = 462;
        tile_fog = 529;
    }
    if (prm_933 == 10)
    {
        tile_room = 165;
        tile_tunnel(0) = 33;
        tile_tunnel(1) = 4;
        tile_tunnel(2) = 2;
        tile_wall = 469;
        tile_default = 469;
    }
    if (prm_933 == 11)
    {
        tile_default = 465;
        tile_fog = 530;
        tile_tunnel = 212;
        tile_wall = 467;
        tile_room = 203;
    }
    if (prm_933 == 0)
    {
        tile_default = 469;
        tile_fog = 529;
        tile_tunnel(0) = 33;
        tile_tunnel(1) = 4;
        tile_tunnel(2) = 2;
        tile_wall = 469;
        tile_room(0) = 33;
        tile_room(1) = 4;
        tile_room(2) = 2;
    }
    if (prm_933 == 6)
    {
        tile_default = 469;
        tile_fog = 529;
        tile_tunnel(0) = 45;
        tile_tunnel(1) = 3;
        tile_tunnel(2) = 2;
        tile_wall = 469;
        tile_room(0) = 33;
        tile_room(1) = 6;
        tile_room(2) = 3;
    }
    if (prm_933 == 7)
    {
        tile_default = 474;
        tile_fog = 530;
        tile_tunnel = 68;
        tile_wall = 474;
        tile_room(0) = 66;
        tile_room(1) = 2;
        tile_room(2) = 2;
    }
    if (prm_933 == 300)
    {
        tile_default = 475;
        tile_fog = 528;
        tile_tunnel = 0;
        tile_wall = 475;
        tile_room(0) = 0;
        tile_room(1) = 6;
        tile_room(2) = 6;
    }
    if (prm_933 == 100)
    {
        tile_default = 472;
        tile_fog = 530;
        tile_tunnel = 103;
        tile_wall = 473;
        tile_room(0) = 132;
        tile_room(1) = 3;
        tile_room(2) = 2;
    }
    if (prm_933 == 101)
    {
        tile_default = 477;
        tile_fog = 530;
        tile_tunnel = 100;
        tile_wall = 477;
        tile_room = 99;
    }
    if (prm_933 == 200)
    {
        tile_default = 468;
        tile_fog = 531;
        tile_tunnel(0) = 33;
        tile_tunnel(1) = 4;
        tile_tunnel(2) = 2;
        tile_wall = 462;
        tile_room(0) = 119;
        tile_room(1) = 4;
        tile_room(2) = 2;
    }
    if (prm_933 == 1)
    {
        tile_wall = -1;
        tile_fog(0) = 396;
        tile_fog(1) = 4;
        tile_fog(2) = 2;
    }
    if (prm_933 == 4)
    {
        tile_default = 0;
        tile_fog = 528;
        if (4 <= gdata(62) && gdata(62) < 9)
        {
            tile_default = 7;
            tile_fog = 528;
        }
        if (264 <= gdata(62) && gdata(62) < 363)
        {
            tile_default = 12;
        }
        if (9 <= gdata(62) && gdata(62) < 13)
        {
            tile_fog = 528;
            tile_default = 3;
        }
        if (13 <= gdata(62) && gdata(62) < 17)
        {
            tile_fog = 531;
            tile_default = 19;
        }
        if (chipm(0, gdata(62)) == 4)
        {
            tile_fog = 532;
            tile_default = 45;
        }
    }
    return;
}



int dist_town()
{
    int p_at_m165 = 0;
    int y_at_m165 = 0;
    int x_at_m165 = 0;
    int i_at_m165 = 0;
    p_at_m165 = 1000;
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y_at_m165 = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x_at_m165 = cnt;
            cell_featread(x_at_m165, y_at_m165);
            if (adata(0, feat(2)) == 3)
            {
                i_at_m165 = dist(
                    cdata[0].position.x,
                    cdata[0].position.y,
                    x_at_m165,
                    y_at_m165);
                if (i_at_m165 < p_at_m165)
                {
                    p_at_m165 = i_at_m165;
                }
            }
        }
    }
    return p_at_m165;
}



void map_initcustom(const std::string& prm_934)
{
    fmapfile = (filesystem::dir::map() / prm_934).generic_string();
    ctrl_file(file_operation_t::_5);
    map_tileset(mdata(12));
    nooracle = 1;
    for (int cnt = 0; cnt < 400; ++cnt)
    {
        if (cmapdata(0, cnt) == 0)
        {
            continue;
        }
        if (cmapdata(4, cnt) == 0)
        {
            flt();
            int stat = itemcreate(
                -1, cmapdata(0, cnt), cmapdata(1, cnt), cmapdata(2, cnt), 0);
            if (stat != 0)
            {
                inv[ci].own_state = cmapdata(3, cnt);
            }
        }
        if (cmapdata(4, cnt) == 1)
        {
            flt();
            characreate(
                -1, cmapdata(0, cnt), cmapdata(1, cnt), cmapdata(2, cnt));
        }
        if (cmapdata(4, cnt) == 2)
        {
            if (mapupdate)
            {
                if (cellobjdata(0, cmapdata(0, cnt)) == 32)
                {
                    continue;
                }
            }
            cell_featset(
                cmapdata(1, cnt),
                cmapdata(2, cnt),
                cellobjdata(3, cmapdata(0, cnt)),
                cellobjdata(0, cmapdata(0, cnt)),
                cmapdata(3, cnt) % 1000,
                cmapdata(3, cnt) / 1000);
            if (cellobjdata(0, cmapdata(0, cnt)) == 10)
            {
                mdata(5) = cmapdata(2, cnt) * 1000 + cmapdata(1, cnt);
            }
            if (cellobjdata(0, cmapdata(0, cnt)) == 11)
            {
                mdata(4) = cmapdata(2, cnt) * 1000 + cmapdata(1, cnt);
            }
        }
    }
    nooracle = 0;
    mdata(15) = 1;
    return;
}



void map_reload(const std::string& prm_935)
{
    int y_at_m166 = 0;
    int x_at_m166 = 0;
    fmapfile = (filesystem::dir::map() / prm_935).generic_string();
    ctrl_file(file_operation_t::_16);
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y_at_m166 = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            map(cnt, y_at_m166, 8) = 0;
            map(cnt, y_at_m166, 9) = 0;
        }
    }
    for (int cnt = 0; cnt < 200; ++cnt)
    {
        mef(0, cnt) = 0;
    }
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number > 0)
        {
            if (inv[cnt].own_state == 1)
            {
                if (the_item_db[inv[cnt].id]->category == 57000)
                {
                    inv[cnt].number = 0;
                    cell_refresh(inv[cnt].position.x, inv[cnt].position.y);
                }
            }
        }
    }
    for (int cnt = 0; cnt < 400; ++cnt)
    {
        if (cmapdata(0, cnt) == 0)
        {
            continue;
        }
        x_at_m166 = cmapdata(1, cnt);
        y_at_m166 = cmapdata(2, cnt);
        if (cmapdata(4, cnt) == 0)
        {
            if (map(x_at_m166, y_at_m166, 4) == 0)
            {
                flt();
                int stat =
                    itemcreate(-1, cmapdata(0, cnt), x_at_m166, y_at_m166, 0);
                if (stat != 0)
                {
                    inv[ci].own_state = cmapdata(3, cnt);
                }
            }
            cell_refresh(x_at_m166, y_at_m166);
        }
    }
    return;
}



void map_initialize()
{
    if (rdroomnum >= 30)
    {
        rdroomnum = 30;
    }
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        roomexist(cnt) = 0;
    }
    DIM4(map, mdata(0), mdata(1), 10);
    DIM3(mapsync, mdata(0), mdata(1));
    DIM3(mef, 9, 200);
    map_tileset(mdata(12));
    return;
}



void map_placecharaonentrance(int prm_936, int prm_937, int prm_938)
{
    int x_at_m167 = 0;
    int y_at_m167 = 0;
    if (prm_937 == 1)
    {
        x_at_m167 = mdata(5) % 1000;
        if (prm_938 != 0)
        {
            x_at_m167 += rnd(prm_938) - rnd(prm_938);
        }
        y_at_m167 = mdata(5) / 1000;
        if (prm_938 != 0)
        {
            y_at_m167 += rnd(prm_938) - rnd(prm_938);
        }
    }
    if (prm_937 == 2)
    {
        x_at_m167 = mdata(4) % 1000;
        if (prm_938 != 0)
        {
            x_at_m167 += rnd(prm_938) - rnd(prm_938);
        }
        y_at_m167 = mdata(4) / 1000;
        if (prm_938 != 0)
        {
            y_at_m167 += rnd(prm_938) - rnd(prm_938);
        }
    }
    if (prm_937 == 3)
    {
        if (gdata(35) == 1)
        {
            x_at_m167 = mdata(0) - 2;
            y_at_m167 = mdata(1) / 2;
            if (gdata_current_map == 15)
            {
                y_at_m167 = 22;
            }
            if (gdata_current_map == 36)
            {
                x_at_m167 = 58;
                y_at_m167 = 21;
            }
        }
        if (gdata(35) == 2)
        {
            x_at_m167 = 1;
            y_at_m167 = mdata(1) / 2;
            if (gdata_current_map == 33)
            {
                y_at_m167 = 3;
            }
            if (gdata_current_map == 36)
            {
                x_at_m167 = 25;
                y_at_m167 = 1;
            }
        }
        if (gdata(35) == 3)
        {
            x_at_m167 = mdata(0) / 2;
            y_at_m167 = mdata(1) - 2;
            if (gdata_current_map == 15)
            {
                x_at_m167 = 30;
            }
            if (gdata_current_map == 33)
            {
                x_at_m167 = 28;
            }
            if (gdata_current_map == 36)
            {
                x_at_m167 = 58;
                y_at_m167 = 21;
            }
        }
        if (gdata(35) == 0)
        {
            x_at_m167 = mdata(0) / 2;
            y_at_m167 = 1;
            if (gdata_current_map == 33)
            {
                x_at_m167 = 5;
            }
            if (gdata_current_map == 36)
            {
                x_at_m167 = 25;
                y_at_m167 = 1;
            }
        }
        if (gdata_current_map == 25)
        {
            x_at_m167 = 1;
            y_at_m167 = 14;
        }
        if (gdata(60) != -1)
        {
            x_at_m167 = gdata(60);
            y_at_m167 = gdata(61);
        }
    }
    if (prm_937 == 4)
    {
        x_at_m167 = mdata(0) / 2;
        y_at_m167 = mdata(1) / 2;
    }
    if (prm_937 == 8)
    {
        x_at_m167 = mdata(0) / 2;
        y_at_m167 = mdata(1) - 2;
    }
    if (prm_937 == 5)
    {
        x_at_m167 = rnd(mdata(0) - 5) + 2;
        y_at_m167 = rnd(mdata(1) - 5) + 2;
    }
    if (prm_937 == 6)
    {
        x_at_m167 = gdata_pc_home_x + rnd((prm_936 / 5 + 1));
        y_at_m167 = gdata_pc_home_y + rnd((prm_936 / 5 + 1));
    }
    if (prm_937 == 7)
    {
        x_at_m167 = mapstartx;
        y_at_m167 = mapstarty;
    }
    cxinit = x_at_m167;
    cyinit = y_at_m167;
    rc = prm_936;
    place_character();
    return;
}



void map_placearena(int prm_939, int prm_940)
{
    while (1)
    {
        await();
        x = rnd(7) + 5;
        y = rnd(6) + 6;
        if (prm_940 == 0)
        {
            x += 8;
        }
        cxinit = x;
        cyinit = y;
        rc = prm_939;
        place_character();
        if (prm_940 == 0)
        {
            if (cdata[prm_939].position.x >= 13
                && cdata[prm_939].position.y >= 6
                && cdata[prm_939].position.x < 20
                && cdata[prm_939].position.y < 12)
            {
                break;
            }
        }
        else if (
            cdata[prm_939].position.x >= 5 && cdata[prm_939].position.y >= 6
            && cdata[prm_939].position.x < 12 && cdata[prm_939].position.y < 12)
        {
            break;
        }
        map(cdata[prm_939].position.x, cdata[prm_939].position.y, 1) = 0;
    }
    return;
}



void map_placeplayer()
{
    if (mode == 11)
    {
        return;
    }
    camera = 0;
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cnt != 0)
        {
            if (gdata_mount == cnt)
            {
                cdata[gdata_mount].position.x = cdata[0].position.x;
                cdata[gdata_mount].position.y = cdata[0].position.y;
                continue;
            }
        }
        if (gdata_current_map == 40)
        {
            if (followerin(cnt) == 1)
            {
                if (camera == 0)
                {
                    camera = cnt;
                }
                map_placearena(cnt, 0);
                continue;
            }
        }
        if (cdata[cnt].current_map == gdata_current_map)
        {
            if (cnt != 0)
            {
                cxinit = cdata[cnt].initial_position.x;
                cyinit = cdata[cnt].initial_position.y;
                rc = cnt;
                place_character();
                continue;
            }
        }
        map_placecharaonentrance(cnt, gdata_entrance_type);
    }
    return;
}



void map_randomtile(int prm_941, int prm_942)
{
    for (int cnt = 0, cnt_end = (mdata(0) * mdata(1) * prm_942 / 100 + 1);
         cnt < cnt_end;
         ++cnt)
    {
        map(rnd(mdata(0)), rnd(mdata(1)), 0) = prm_941;
    }
    return;
}



int map_digcheck(int prm_953, int prm_954)
{
    if (prm_953 < 1 || prm_954 < 1 || prm_953 > mdata(0) - 2
        || prm_954 > mdata(1) - 2)
    {
        return 0;
    }
    if (map(prm_953, prm_954, 0) == 100)
    {
        return 100;
    }
    return map(prm_953, prm_954, 0) == 0;
}



void map_nextdir1(int prm_955, int prm_956)
{
    if (tx_at_m168 >= prm_955 - 4 && tx_at_m168 <= prm_955 + 4)
    {
        if (ty_at_m168 >= prm_956 - 4 && ty_at_m168 <= prm_956 + 4)
        {
            if (tx_at_m168 < prm_955)
            {
                dir_at_m168 = 2;
                if (ty_at_m168 > prm_956)
                {
                    dest_at_m168 = 3;
                }
                else
                {
                    dest_at_m168 = 0;
                }
            }
            if (tx_at_m168 > prm_955)
            {
                dir_at_m168 = 1;
                if (ty_at_m168 > prm_956)
                {
                    dest_at_m168 = 3;
                }
                else
                {
                    dest_at_m168 = 0;
                }
            }
            if (ty_at_m168 < prm_956)
            {
                dir_at_m168 = 0;
                if (tx_at_m168 > prm_955)
                {
                    dest_at_m168 = 1;
                }
                else
                {
                    dest_at_m168 = 2;
                }
            }
            if (ty_at_m168 > prm_956)
            {
                dir_at_m168 = 3;
                if (tx_at_m168 > prm_955)
                {
                    dest_at_m168 = 1;
                }
                else
                {
                    dest_at_m168 = 2;
                }
            }
            return;
        }
    }
    if (dir_at_m168 == 1 || dir_at_m168 == 2)
    {
        if (ty_at_m168 > prm_956)
        {
            dir_at_m168 = 3;
        }
        else
        {
            dir_at_m168 = 0;
        }
        if (tx_at_m168 > prm_955)
        {
            dest_at_m168 = 1;
        }
        else
        {
            dest_at_m168 = 2;
        }
        return;
    }
    else
    {
        if (tx_at_m168 > prm_955)
        {
            dir_at_m168 = 1;
        }
        else
        {
            dir_at_m168 = 2;
        }
        if (ty_at_m168 > prm_956)
        {
            dest_at_m168 = 3;
        }
        else
        {
            dest_at_m168 = 0;
        }
        return;
    }
}



void map_nextdir2(int prm_957, int prm_958)
{
    int p_at_m168 = 0;
    if (dir2_at_m168 != -1)
    {
        if (dir2_at_m168 == 1)
        {
            if (map_digcheck(tx_at_m168 - 1, ty_at_m168))
            {
                if (tx_at_m168 == prm_957)
                {
                    p_at_m168 = dir2_at_m168;
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = p_at_m168;
                }
                else
                {
                    dir_at_m168 = dir2_at_m168;
                    dir2_at_m168 = -1;
                }
            }
        }
        if (dir2_at_m168 == 2)
        {
            if (map_digcheck(tx_at_m168 + 1, ty_at_m168))
            {
                if (tx_at_m168 == prm_957)
                {
                    p_at_m168 = dir2_at_m168;
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = p_at_m168;
                }
                else
                {
                    dir_at_m168 = dir2_at_m168;
                    dir2_at_m168 = -1;
                }
            }
        }
        if (dir2_at_m168 == 3)
        {
            if (map_digcheck(tx_at_m168, ty_at_m168 - 1))
            {
                if (ty_at_m168 == prm_958)
                {
                    p_at_m168 = dir2_at_m168;
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = p_at_m168;
                }
                else
                {
                    dir_at_m168 = dir2_at_m168;
                    dir2_at_m168 = -1;
                }
            }
        }
        if (dir2_at_m168 == 0)
        {
            if (map_digcheck(tx_at_m168, ty_at_m168 + 1))
            {
                if (ty_at_m168 == prm_958)
                {
                    p_at_m168 = dir2_at_m168;
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = p_at_m168;
                }
                else
                {
                    dir_at_m168 = dir2_at_m168;
                    dir2_at_m168 = -1;
                }
            }
        }
    }
    if (dir_at_m168 == 1 || dir_at_m168 == 2)
    {
        if (tx_at_m168 == prm_957)
        {
            if (ty_at_m168 > prm_958)
            {
                if (map_digcheck(tx_at_m168, ty_at_m168 - 1))
                {
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = 3;
                }
            }
            if (ty_at_m168 < prm_958)
            {
                if (map_digcheck(tx_at_m168, ty_at_m168 + 1))
                {
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = 0;
                }
            }
        }
        return;
    }
    else
    {
        if (ty_at_m168 == prm_958)
        {
            if (tx_at_m168 > prm_957)
            {
                if (map_digcheck(tx_at_m168 - 1, ty_at_m168))
                {
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = 1;
                }
            }
            if (tx_at_m168 < prm_957)
            {
                if (map_digcheck(tx_at_m168 + 1, ty_at_m168))
                {
                    dir2_at_m168 = dir_at_m168;
                    dir_at_m168 = 2;
                }
            }
        }
        return;
    }
}



int map_digtoentrance1(
    int prm_959,
    int prm_960,
    int prm_961,
    int prm_962,
    int prm_963)
{
    int f_at_m168 = 0;
    int dx_at_m168 = 0;
    int dy_at_m168 = 0;
    tx_at_m168 = prm_959;
    ty_at_m168 = prm_960;
    dest_at_m168 = -1;
    f_at_m168 = 0;
    if (prm_963 == 1)
    {
        dir2_at_m168 = -1;
        map_nextdir1(prm_961, prm_962);
    }
    for (int cnt = 0; cnt < 2000; ++cnt)
    {
        if (tx_at_m168 == prm_961)
        {
            if (ty_at_m168 + 1 == prm_962 || ty_at_m168 - 1 == prm_962)
            {
                f_at_m168 = 1;
                break;
            }
        }
        if (ty_at_m168 == prm_962)
        {
            if (tx_at_m168 + 1 == prm_961 || tx_at_m168 - 1 == prm_961)
            {
                f_at_m168 = 1;
                break;
            }
        }
        if (prm_963 == 1)
        {
            map_nextdir2(prm_961, prm_962);
        }
        dx_at_m168 = tx_at_m168;
        dy_at_m168 = ty_at_m168;
        if (dir_at_m168 == 1)
        {
            --dx_at_m168;
        }
        if (dir_at_m168 == 2)
        {
            ++dx_at_m168;
        }
        if (dir_at_m168 == 3)
        {
            --dy_at_m168;
        }
        if (dir_at_m168 == 0)
        {
            ++dy_at_m168;
        }
        if (map_digcheck(dx_at_m168, dy_at_m168))
        {
            tx_at_m168 = dx_at_m168;
            ty_at_m168 = dy_at_m168;
            map(dx_at_m168, dy_at_m168, 0) = 100;
            if (rnd(200) < rdhiddenpath)
            {
                map(dx_at_m168, dy_at_m168, 0) = 4;
                cell_featset(dx_at_m168, dy_at_m168, 0, 22);
            }
            if (prm_963 == 0)
            {
                if (rnd(4) == 0)
                {
                    map_nextdir1(prm_961, prm_962);
                }
            }
        }
        else
        {
            if (dest_at_m168 == 1)
            {
                if (map_digcheck(tx_at_m168 - 1, ty_at_m168))
                {
                    dir_at_m168 = 1;
                    dest_at_m168 = -2;
                }
            }
            if (dest_at_m168 == 2)
            {
                if (map_digcheck(tx_at_m168 + 1, ty_at_m168))
                {
                    dir_at_m168 = 2;
                    dest_at_m168 = -2;
                }
            }
            if (dest_at_m168 == 3)
            {
                if (map_digcheck(tx_at_m168, ty_at_m168 - 1))
                {
                    dir_at_m168 = 3;
                    dest_at_m168 = -2;
                }
            }
            if (dest_at_m168 == 0)
            {
                if (map_digcheck(tx_at_m168, ty_at_m168 + 1))
                {
                    dir_at_m168 = 0;
                    dest_at_m168 = -2;
                }
            }
            if (dest_at_m168 == -2)
            {
                dest_at_m168 = -1;
                continue;
            }
            if (prm_963 == 0)
            {
                map_nextdir1(prm_961, prm_962);
            }
            if (prm_963 == 1)
            {
                map_nextdir1(prm_961, prm_962);
            }
        }
    }
    return f_at_m168;
}



void map_setfog(int, int)
{
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            map(x, y, 2) =
                tile_fog + (rnd(tile_fog(2)) == 0) * rnd(tile_fog(1));
        }
    }
    return;
}



void map_createroomdoor()
{
    elona_vector1<int> rddoorpos;
    if (rdpos == 3 || rdpos == 0)
    {
        p = roomwidth(cr);
    }
    else
    {
        p = roomheight(cr);
    }
    DIM1(rddoorpos);
    for (int cnt = 0, cnt_end = (p - 2); cnt < cnt_end; ++cnt)
    {
        rddoorpos(cnt) = cnt;
    }
    rndshuffle(rddoorpos);
    for (int cnt = 0, cnt_end = (p - 2); cnt < cnt_end; ++cnt)
    {
        if (rdpos == 3)
        {
            x = rddoorpos(cnt) + roomx(cr) + 1;
            y = roomy(cr) + roomheight(cr) - 1;
            p(0) = 0;
            p(1) = 0;
            p(2) = -1;
            p(3) = 1;
        }
        if (rdpos == 0)
        {
            x = rddoorpos(cnt) + roomx(cr) + 1;
            y = roomy(cr);
            p(0) = 0;
            p(1) = 0;
            p(2) = -1;
            p(3) = 1;
        }
        if (rdpos == 1)
        {
            y = rddoorpos(cnt) + roomy(cr) + 1;
            x = roomx(cr) + roomwidth(cr) - 1;
            p(0) = -1;
            p(1) = 1;
            p(2) = 0;
            p(3) = 0;
        }
        if (rdpos == 2)
        {
            y = rddoorpos(cnt) + roomy(cr) + 1;
            x = roomx(cr);
            p(0) = -1;
            p(1) = 1;
            p(2) = 0;
            p(3) = 0;
        }
        f = 1;
        for (int cnt = 0; cnt < 2; ++cnt)
        {
            dx = x + p(cnt);
            dy = y + p((cnt + 2));
            if ((dx >= 0 && dy >= 0 && dx < mdata(0) && dy < mdata(1)) == 0)
            {
                f = 0;
                break;
            }
            if (map(dx, dy, 0) == 1)
            {
                f = 0;
                break;
            }
        }
        if (f == 1)
        {
            map(x, y, 0) = 3;
            if (roomdoor != 3)
            {
                cell_featset(
                    x,
                    y,
                    tile_doorclosed,
                    21,
                    rnd(std::abs(gdata_current_dungeon_level * 3 / 2) + 1));
            }
            break;
        }
    }
    return;
}



int map_createroom(int prm_966)
{
    int roompos = 0;
    int roomwall = 0;
    if (roomsum >= 30)
    {
        return 0;
    }
    if (prm_966 == 0)
    {
        roompos = 0;
        roomwall = 0;
        roomdoor = 0;
    }
    if (prm_966 == 1)
    {
        roompos = 1;
        roomwall = 1;
        roomdoor = 0;
    }
    if (prm_966 == 2)
    {
        roompos = 2;
        roomwall = 1;
        roomdoor = 1;
    }
    if (prm_966 == 3)
    {
        roompos = 3;
        roomwall = 2;
        roomdoor = 3;
    }
    if (prm_966 == 4)
    {
        roompos = 4;
        roomwall = 3;
        roomdoor = 0;
    }
    cr = roomsum;
    f = 0;
    for (int cnt = 0; cnt < 100; ++cnt)
    {
        if (roompos == 0)
        {
            roomwidth(cr) = rnd(rdroomsizemax) + rdroomsizemin;
            roomheight(cr) = rnd(rdroomsizemax) + rdroomsizemin;
            roomx(cr) = rnd(mdata(0)) + 2;
            roomy(cr) = rnd(mdata(1)) + 2;
        }
        if (roompos == 1)
        {
            roomwidth(cr) = (rnd(rdroomsizemax) + rdroomsizemin) / 3 * 3 + 5;
            roomheight(cr) = (rnd(rdroomsizemax) + rdroomsizemin) / 3 * 3 + 5;
            roomx(cr) = rnd(mdata(0)) / 3 * 3 + 2;
            roomy(cr) = rnd(mdata(1)) / 3 * 3 + 2;
        }
        if (roompos == 2)
        {
            rdpos = rnd(4);
            if (rdpos == 3 || rdpos == 0)
            {
                roomx(cr) = rnd(mdata(0) - rdroomsizemin * 3 / 2 - 2)
                    + rdroomsizemin / 2;
                roomwidth(cr) = rnd(rdroomsizemin) + rdroomsizemin / 2 + 3;
                roomheight(cr) = rdroomsizemin;
                if (rdpos == 3)
                {
                    roomy(cr) = 0;
                }
                else
                {
                    roomy(cr) = mdata(1) - roomheight(cr);
                }
            }
            if (rdpos == 1 || rdpos == 2)
            {
                roomy(cr) = rnd(mdata(1) - rdroomsizemin * 3 / 2 - 2)
                    + rdroomsizemin / 2;
                roomwidth(cr) = rdroomsizemin;
                roomheight(cr) = rnd(rdroomsizemin) + rdroomsizemin / 2 + 3;
                if (rdpos == 1)
                {
                    roomx(cr) = 0;
                }
                else
                {
                    roomx(cr) = mdata(0) - roomwidth(cr);
                }
            }
        }
        if (roompos == 3)
        {
            roomwidth(cr) = 3;
            roomheight(cr) = 3;
            x = mdata(0) - rdroomsizemin * 2 - roomwidth(cr) - 2 + 1;
            if (x < 1)
            {
                break;
            }
            y = mdata(1) - rdroomsizemin * 2 - roomheight(cr) - 2 + 1;
            if (y < 1)
            {
                break;
            }
            roomx(cr) = rdroomsizemin + 1 + rnd(x);
            roomy(cr) = rdroomsizemin + 1 + rnd(y);
        }
        if (roompos == 4)
        {
            roomwidth(cr) = rnd(rdroomsizemax) + rdroomsizemin;
            roomheight(cr) = rnd(rdroomsizemax) + rdroomsizemin;
            roomx(cr) = rnd(mdata(0) - rdroomsizemax - 8) + 3;
            roomy(cr) = rnd(mdata(1) - rdroomsizemax - 8) + 3;
        }
        x = roomx(cr) + roomwidth(cr) - 1;
        y = roomy(cr) + roomheight(cr) - 1;
        if (x >= mdata(0))
        {
            continue;
        }
        if (y >= mdata(1))
        {
            continue;
        }
        if (roompos == 1)
        {
            if (x + 1 >= mdata(0))
            {
                continue;
            }
            if (y + 1 >= mdata(1))
            {
                continue;
            }
        }
        if (roompos == 0)
        {
            if (map(x, y, 0) != 3)
            {
                continue;
            }
        }
        bool do_continue{};
        for (p = 0; p < roomsum; ++p)
        {
            if (p == cr)
            {
                continue;
            }
            x1 = roomx(p) - 1 - roomx(cr);
            x2 = -roomwidth(p) - 2 < x1 && x1 < roomwidth(cr);
            y1 = roomy(p) - 1 - roomy(cr);
            y2 = -roomheight(p) - 2 < y1 && y1 < roomheight(cr);
            if (x2 && y2)
            {
                do_continue = true;
                break;
            }
        }
        if (do_continue)
        {
            continue;
        }
        ++roomsum;
        f = 1;
        break;
    }
    if (f == 0)
    {
        return 0;
    }
    if (rnd(2) == 0)
    {
        tile(1) = 1 + rnd(2);
    }
    else
    {
        tile(1) = 0;
    }
    if (rnd(2) == 0)
    {
        tile(2) = 1 + rnd(2);
    }
    else
    {
        tile(2) = 0;
    }
    for (int cnt = 0, cnt_end = (roomheight(cr)); cnt < cnt_end; ++cnt)
    {
        y = roomy(cr) + cnt;
        int cnt2 = cnt;
        for (int cnt = 0, cnt_end = (roomwidth(cr)); cnt < cnt_end; ++cnt)
        {
            x = roomx(cr) + cnt;
            tile = 3;
            if (roomwall != 0)
            {
                if (cnt == 0 || cnt2 == 0 || cnt == roomwidth(cr) - 1
                    || cnt2 == roomheight(cr) - 1)
                {
                    if (roomwall == 1)
                    {
                        tile = 1;
                    }
                    if (roomwall == 2)
                    {
                        tile = 4;
                    }
                    if (roomwall == 3)
                    {
                        tile = 3;
                        if (tile(1) == 1)
                        {
                            if (cnt == 0)
                            {
                                tile = 1;
                            }
                        }
                        if (tile(2) == 1)
                        {
                            if (cnt2 == 0)
                            {
                                if (cnt != 0 && cnt != roomwidth(cr) - 1)
                                {
                                    if (rnd(3))
                                    {
                                        flt();
                                        p(0) = 296;
                                        p(1) = 300;
                                        p(2) = 312;
                                        p(3) = 604;
                                        itemcreate(-1, p(rnd(4)), x, y + 1, 0);
                                    }
                                    else if (cnt % 2 == 1)
                                    {
                                        flt();
                                        itemcreate(-1, 584, x, y + 1, 0);
                                    }
                                }
                                tile = 1;
                            }
                        }
                        if (tile(1) == 2)
                        {
                            if (cnt == roomwidth(cr) - 1)
                            {
                                tile = 1;
                            }
                        }
                        if (tile(2) == 2)
                        {
                            if (cnt2 == roomheight(cr) - 1)
                            {
                                if (rnd(3))
                                {
                                    flt();
                                    p(0) = 296;
                                    p(1) = 300;
                                    p(2) = 312;
                                    p(3) = 604;
                                    itemcreate(-1, p(rnd(4)), x, y + 1, 0);
                                }
                                else if (cnt % 2 == 1)
                                {
                                    flt();
                                    itemcreate(-1, 584, x, y + 1, 0);
                                }
                                tile = 1;
                            }
                        }
                    }
                }
            }
            map(x, y, 0) = tile;
        }
    }
    if (roomdoor == 1)
    {
        map_createroomdoor();
    }
    if (roomdoor == 2 || roomdoor == 3)
    {
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            rdpos = cnt;
            map_createroomdoor();
        }
    }
    return 1;
}



int map_placeupstairs(int prm_967, int prm_968)
{
    if (prm_967 == 0)
    {
        x_at_m169 = rnd(roomwidth(cr) - 2) + roomx(cr) + 1;
        y_at_m169 = rnd(roomheight(cr) - 2) + roomy(cr) + 1;
    }
    else
    {
        x_at_m169 = prm_967;
        y_at_m169 = prm_968;
    }
    cell_featset(x_at_m169, y_at_m169, tile_upstairs, 10);
    mdata(5) = y_at_m169 * 1000 + x_at_m169;
    rdroomupstair = cr;
    return 1;
}



int map_placedownstairs(int prm_969, int prm_970)
{
    if (gdata_current_dungeon_level >= adata(10, gdata_current_map))
    {
        return 0;
    }
    if (prm_969 == 0)
    {
        x_at_m169 = rnd(roomwidth(cr) - 2) + roomx(cr) + 1;
        y_at_m169 = rnd(roomheight(cr) - 2) + roomy(cr) + 1;
    }
    else
    {
        x_at_m169 = prm_969;
        y_at_m169 = prm_970;
    }
    cell_featset(x_at_m169, y_at_m169, tile_downstairs, 11);
    mdata(4) = y_at_m169 * 1000 + x_at_m169;
    rdroomdownstair = cr;
    return 1;
}



void map_randsite(int prm_971, int prm_972)
{
    int f_at_m169 = 0;
    f_at_m169 = 0;
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        if (prm_971 == 0)
        {
            x_at_m169 = rnd(mdata(0) - 5) + 2;
            y_at_m169 = rnd(mdata(1) - 5) + 2;
        }
        else
        {
            x_at_m169 = prm_971;
            y_at_m169 = prm_972;
        }
        if ((chipm(7, map(x_at_m169, y_at_m169, 0)) & 4) == 0)
        {
            if (map(x_at_m169, y_at_m169, 6) == 0
                && map(x_at_m169, y_at_m169, 4) == 0)
            {
                f_at_m169 = 1;
                break;
            }
        }
    }
    if (mdata(6) == 1)
    {
        if ((264 <= map(x_at_m169, y_at_m169, 0)
             && map(x_at_m169, y_at_m169, 0) < 363)
            || (33 <= map(x_at_m169, y_at_m169, 0)
                && map(x_at_m169, y_at_m169, 0) < 66))
        {
            f_at_m169 = 0;
        }
    }
    if (f_at_m169 == 0)
    {
        return;
    }
    if (mdata(6) >= 20 && mdata(6) <= 23)
    {
        if (mdata(3) == 0)
        {
            if (rnd(25) == 0)
            {
                flt();
                itemcreate(-1, 173, x_at_m169, y_at_m169, 0);
                inv[ci].own_state = 1;
                return;
            }
            if (rnd(100) == 0)
            {
                flt();
                itemcreate(-1, 172, x_at_m169, y_at_m169, 0);
                inv[ci].own_state = 1;
                inv[ci].param1 = isetgod(rnd(length(isetgod)));
                return;
            }
        }
    }
    if (mdata(6) >= 20 && mdata(6) <= 23)
    {
        if (rnd(14) == 0)
        {
            cell_featset(x_at_m169, y_at_m169, 243, 27);
            return;
        }
        if (rnd(13) == 0)
        {
            cell_featset(x_at_m169, y_at_m169, 244, 25);
            return;
        }
        if (rnd(12) == 0)
        {
            cell_featset(x_at_m169, y_at_m169, 245, 26);
            return;
        }
        if (rnd(11) == 0)
        {
            cell_featset(x_at_m169, y_at_m169, 246, 28);
            return;
        }
        cell_featset(x_at_m169, y_at_m169, tile_re + rnd(3), 24);
        return;
    }
    if (mdata(6) == 3 || mdata(6) == 2)
    {
        if (rnd(3) == 0)
        {
            flt();
            itemcreate(-1, 631, x_at_m169, y_at_m169, 0);
            return;
        }
        if (rnd(15) == 0)
        {
            flt();
            itemcreate(-1, 55, x_at_m169, y_at_m169, 0);
            return;
        }
        if (rnd(20) == 0)
        {
            flt();
            itemcreate(-1, 284, x_at_m169, y_at_m169, 0);
            return;
        }
        if (rnd(15) == 0)
        {
            flt();
            itemcreate(-1, 283, x_at_m169, y_at_m169, 0);
            return;
        }
        if (rnd(18) == 0)
        {
            flt(calcobjlv(rnd(cdata[0].level + 10)), calcfixlv(3));
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            itemcreate(-1, 0, x_at_m169, y_at_m169, 0);
            return;
        }
        flt(10);
        flttypeminor = 64100;
        itemcreate(-1, 0, x_at_m169, y_at_m169, 0);
        return;
    }
    return;
}



int map_trap(int prm_973, int prm_974, int, int prm_976)
{
    int trap_at_m170 = 0;
    dx_at_m170 = prm_973;
    dy_at_m170 = prm_974;
    p_at_m170 = 0;
    while (1)
    {
        if (p_at_m170 >= 3)
        {
            return 0;
        }
        if (prm_973 == 0)
        {
            dx_at_m170 = rnd(mdata(0) - 5) + 2;
            dy_at_m170 = rnd(mdata(1) - 5) + 2;
        }
        else
        {
            dx_at_m170 = prm_973;
            dy_at_m170 = prm_974;
        }
        if ((chipm(7, map(dx_at_m170, dy_at_m170, 0)) & 4) == 0)
        {
            if (map(dx_at_m170, dy_at_m170, 6) == 0)
            {
                if (prm_976 == 0)
                {
                    trap_at_m170 = rnd(8);
                }
                else
                {
                    trap_at_m170 = prm_976;
                }
                if (gdata_current_dungeon_level <= 5)
                {
                    if (trap_at_m170 == 6)
                    {
                        return 0;
                    }
                    if (trap_at_m170 == 1)
                    {
                        return 0;
                    }
                    if (trap_at_m170 == 5)
                    {
                        return 0;
                    }
                }
                if (gdata_current_dungeon_level <= 25)
                {
                    if (trap_at_m170 == 7)
                    {
                        return 0;
                    }
                }
                cell_featset(dx_at_m170, dy_at_m170, 0, 14, trap_at_m170);
                return 1;
            }
        }
        p_at_m170 += 1;
    }
}



int map_web(int prm_977, int prm_978, int prm_979)
{
    dx_at_m170 = prm_977;
    dy_at_m170 = prm_978;
    p_at_m170 = 0;

    while (1)
    {
        if (p_at_m170 >= 3)
        {
            return 0;
        }
        if (prm_977 == 0)
        {
            dx_at_m170 = rnd(mdata(0) - 5) + 2;
            dy_at_m170 = rnd(mdata(1) - 5) + 2;
        }
        else
        {
            dx_at_m170 = prm_977;
            dy_at_m170 = prm_978;
        }
        if ((chipm(7, map(dx_at_m170, dy_at_m170, 0)) & 4) == 0)
        {
            if (map(dx_at_m170, dy_at_m170, 6) == 0)
            {
                addmef(dx_at_m170, dy_at_m170, 1, 11, -1, prm_979);
                return 1;
            }
        }
        p_at_m170 += 1;
    }
}



int map_barrel(int prm_980, int prm_981)
{
    dx_at_m170 = prm_980;
    dy_at_m170 = prm_981;
    p_at_m170 = 0;

    while (1)
    {
        if (p_at_m170 >= 3)
        {
            return 0;
        }
        if (prm_980 == 0)
        {
            dx_at_m170 = rnd(mdata(0) - 5) + 2;
            dy_at_m170 = rnd(mdata(1) - 5) + 2;
        }
        else
        {
            dx_at_m170 = prm_980;
            dy_at_m170 = prm_981;
        }
        if ((chipm(7, map(dx_at_m170, dy_at_m170, 0)) & 4) == 0)
        {
            if (map(dx_at_m170, dy_at_m170, 6) == 0)
            {
                cell_featset(dx_at_m170, dy_at_m170, tile_pot, 30);
                return 1;
            }
        }
        p_at_m170 += 1;
    }
}



int map_connectroom()
{
    cr = 0;
    while (cr < roomsum - 1)
    {
        bool ok = false;
        for (int i = 0; i < rnd(rdroomentrance + 1) + 1; ++i)
        {
            for (int j = cr; j < cr + 2; ++j)
            {
                while (1)
                {
                    dir = rnd(4);
                    x = dirxy(0, dir);
                    y = dirxy(1, dir);
                    if (dir == 1)
                    {
                        dx = roomx(j);
                        dy = roomy(j) + rnd(roomheight(j) - 2) + 1;
                    }
                    if (dir == 2)
                    {
                        dx = roomx(j) + roomwidth(j) - 1;
                        dy = roomy(j) + rnd(roomheight(j) - 2) + 1;
                    }
                    if (dir == 3)
                    {
                        dx = roomx(j) + rnd(roomwidth(j) - 2) + 1;
                        dy = roomy(j);
                    }
                    if (dir == 0)
                    {
                        dx = roomx(j) + rnd(roomwidth(j) - 2) + 1;
                        dy = roomy(j) + roomheight(j) - 1;
                    }
                    if (x != 0)
                    {
                        if (map(dx, dy - 1, 0) == 3 || map(dx, dy + 1, 0) == 3)
                        {
                            continue;
                        }
                    }
                    if (y != 0)
                    {
                        if (map(dx - 1, dy, 0) == 3 || map(dx + 1, dy, 0) == 3)
                        {
                            continue;
                        }
                    }
                    break;
                }
                map(dx, dy, 0) = 3;
                roomexist(j) = 1;
                dx += x;
                dy += y;
                map(dx, dy, 0) = 100;
                if (j == cr)
                {
                    tx = dx;
                    ty = dy;
                }
            }
            ok = map_digtoentrance1(tx, ty, dx, dy, 1);
        }
        if (!ok)
        {
            roomexist(cr) = 0;
            roomexist(cr + 1) = 0;
            return 0;
        }
        ++cr;
    }
    return 1;
}



void map_makedoor()
{
    for (cr = 0; cr < roomsum; ++cr)
    {
        tx = 0;
        ty = 0;
        for (int cnt = 0, cnt_end = (roomheight(cr) * 2 + roomwidth(cr) * 2);
             cnt < cnt_end;
             ++cnt)
        {
            if (tx == 0)
            {
                if (cnt != 0)
                {
                    --ty;
                }
            }
            if (ty == roomheight(cr) - 1)
            {
                --tx;
            }
            if (tx == roomwidth(cr) - 1)
            {
                ++ty;
            }
            if (ty == 0)
            {
                ++tx;
            }
            dx = tx + roomx(cr);
            dy = ty + roomy(cr);
            if (map(dx, dy, 0) == 1)
            {
                continue;
            }
            cell_featset(
                dx,
                dy,
                tile_doorclosed,
                21,
                rnd(std::abs(gdata_current_dungeon_level * 3 / 2) + 1));
        }
    }
}



void generate_random_nefia()
{
    int rdtype = 0;
    int rdmonsterhouse = 0;
    int rdcreaturepack = 0;
    int rdy3 = 0;
    int rdx3 = 0;
    int mobdensity = 0;
    int itemdensity = 0;

    while (1)
    {
        randomize();
        ++rdtry;
        mdata(15) = 0;
        mdata(0) = 34 + rnd(15);
        mdata(1) = 22 + rnd(15);
        mdata(10) = mdata(0) * mdata(1) / 100;
        roomsum = 0;
        rdroomnum = mdata(0) * mdata(1) / 70;
        rdroomsizemin = 3;
        rdroomsizemax = 4;
        rdroomentrance = 1;
        rdhiddenpath = 20;
        rdval(2) = 2;
        rdtunnel = mdata(0) * mdata(1);
        rdextraroom = 10;
        rdtype = 1;
        if (rnd(30) == 0)
        {
            rdtype = 3;
        }
        if (adata(0, gdata_current_map) == 20)
        {
            rdtype = 2;
            if (rnd(4) == 0)
            {
                rdtype = 1;
            }
            if (rnd(6) == 0)
            {
                rdtype = 10;
            }
            if (rnd(10) == 0)
            {
                rdtype = 4;
            }
            if (rnd(25) == 0)
            {
                rdtype = 8;
            }
            if (rnd(20) == 0)
            {
                mdata(12) = 10;
            }
        }
        if (adata(0, gdata_current_map) == 22)
        {
            rdtype = 2;
            if (rnd(6) == 0)
            {
                rdtype = 1;
            }
            if (rnd(6) == 0)
            {
                rdtype = 10;
            }
            if (rnd(25) == 0)
            {
                rdtype = 8;
            }
            if (rnd(20) == 0)
            {
                rdtype = 4;
            }
        }
        if (adata(0, gdata_current_map) == 21)
        {
            rdtype = 1;
            if (rnd(5) == 0)
            {
                rdtype = 4;
            }
            if (rnd(10) == 0)
            {
                rdtype = 3;
            }
            if (rnd(25) == 0)
            {
                rdtype = 2;
            }
            if (rnd(40) == 0)
            {
                mdata(12) = 10;
            }
        }
        if (adata(0, gdata_current_map) == 23)
        {
            rdtype = 1;
            if (rnd(5) == 0)
            {
                rdtype = 4;
            }
            if (rnd(6) == 0)
            {
                rdtype = 5;
            }
            if (rnd(7) == 0)
            {
                rdtype = 2;
            }
            if (rnd(40) == 0)
            {
                mdata(12) = 10;
            }
        }
        if (adata(16, gdata_current_map) == 3)
        {
            mdata(10) += gdata_current_dungeon_level / 2;
            mdata(12) = 101;
            if (rnd(20) == 0)
            {
                mdata(12) = 10;
            }
            if (gdata_current_dungeon_level < 35)
            {
                mdata(12) = 0;
            }
            if (gdata_current_dungeon_level < 20)
            {
                mdata(12) = 100;
            }
            if (gdata_current_dungeon_level < 10)
            {
                mdata(12) = 200;
            }
            if (gdata_current_dungeon_level < 5)
            {
                mdata(12) = 0;
            }
            rdtype = 1;
            for (int cnt = 0; cnt < 1; ++cnt)
            {
                if (gdata_current_dungeon_level == 1)
                {
                    rdtype = 2;
                    break;
                }
                if (gdata_current_dungeon_level == 5)
                {
                    rdtype = 5;
                    break;
                }
                if (gdata_current_dungeon_level == 10)
                {
                    rdtype = 3;
                    break;
                }
                if (gdata_current_dungeon_level == 15)
                {
                    rdtype = 5;
                    break;
                }
                if (gdata_current_dungeon_level == 20)
                {
                    rdtype = 3;
                    break;
                }
                if (gdata_current_dungeon_level == 25)
                {
                    rdtype = 5;
                    break;
                }
                if (gdata_current_dungeon_level == 30)
                {
                    rdtype = 3;
                    break;
                }
                if (gdata_current_dungeon_level < 30)
                {
                    if (rnd(4) == 0)
                    {
                        rdtype = 2;
                    }
                }
                if (rnd(5) == 0)
                {
                    rdtype = 4;
                }
                if (rnd(20) == 0)
                {
                    rdtype = 8;
                }
                if (rnd(6) == 0)
                {
                    rdtype = 10;
                }
            }
        }
        if (adata(16, gdata_current_map) == 16)
        {
            mdata(10) += gdata_current_dungeon_level / 2;
            mdata(12) = 7;
            rdtype = 1;
        }
        if (adata(16, gdata_current_map) == 17)
        {
            mdata(10) += gdata_current_dungeon_level / 2;
            mdata(12) = 0;
            rdtype = 1;
        }
        if (adata(16, gdata_current_map) == 18)
        {
            mdata(10) += gdata_current_dungeon_level / 2;
            mdata(12) = 200;
            rdtype = 1;
        }
        if (adata(16, gdata_current_map) == 26)
        {
            rdtype = 8;
        }
        if (adata(16, gdata_current_map) == 27)
        {
            rdtype = 10;
        }
        if (adata(16, gdata_current_map) == 38)
        {
            rdtype = 9;
        }
        if (adata(16, gdata_current_map) == 13)
        {
            if (gdata_executing_immediate_quest_type == 1001)
            {
                mdata(12) = 300;
                mdata(0) = 28 + rnd(6);
                mdata(1) = 20 + rnd(6);
                rdtype = 6;
            }
            if (gdata_executing_immediate_quest_type == 1009)
            {
                initialize_quest_map_party();
                return;
            }
            if (gdata_executing_immediate_quest_type == 1006)
            {
                initialize_quest_map_crop();
                return;
            }
            if (gdata_executing_immediate_quest_type == 1008)
            {
                initialize_quest_map_town();
                return;
            }
            if (gdata_executing_immediate_quest_type == 1010)
            {
                initialize_quest_map_town();
                return;
            }
        }
        int stat = 1;
        if (rdtype == 2)
        {
            initialize_random_nefia_rdtype2();
        }
        if (rdtype == 1)
        {
            stat = initialize_random_nefia_rdtype1();
        }
        if (rdtype == 4)
        {
            initialize_random_nefia_rdtype4();
        }
        if (rdtype == 5)
        {
            initialize_random_nefia_rdtype5();
        }
        if (rdtype == 3)
        {
            initialize_random_nefia_rdtype3();
        }
        if (rdtype == 6)
        {
            mdata(14) = 2;
            initialize_random_nefia_rdtype6();
            return;
        }
        if (rdtype == 8)
        {
            initialize_random_nefia_rdtype8();
        }
        if (rdtype == 10)
        {
            _mclass = 5 + rnd(4);
            _bold = 2;
            initialize_random_nefia_rdtype10();
        }
        if (rdtype == 9)
        {
            _mclass = 12;
            _bold = 2;
            initialize_random_nefia_rdtype9();
        }
        if (stat != 0)
        {
            break;
        }
    }
    map_converttile();
    map_placeplayer();
    rdmonsterhouse = 0;
    rdcreaturepack = 0;
    for (int cnt = 0, cnt_end = (roomsum); cnt < cnt_end; ++cnt)
    {
        rx = roomx(cnt) + 1;
        rw = roomwidth(cnt) - 2;
        ry = roomy(cnt) + 1;
        rh = roomheight(cnt) - 2;
        rdsize = rw * rh;
        for (int cnt = 0, cnt_end = (rnd(rdsize / 8 + 2)); cnt < cnt_end; ++cnt)
        {
            if (rnd(2) == 0)
            {
                flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
                flttypemajor = fltsetdungeon();
                itemcreate(-1, 0, rnd(rw) + rx, rnd(rh) + ry, 0);
            }
            set_character_generation_filter();
            int stat = characreate(-1, 0, rnd(rw) + rx, rnd(rh) + ry);
            if (stat == 1)
            {
                if (gdata_current_dungeon_level > 3)
                {
                    if (creaturepack != 0)
                    {
                        if (rnd(rdcreaturepack * 5 + 5) == 0)
                        {
                            ++rdcreaturepack;
                            for (int cnt = 0, cnt_end = (10 + rnd(20));
                                 cnt < cnt_end;
                                 ++cnt)
                            {
                                flt(cdata[rc].level, calcfixlv(2));
                                flttypemajor = creaturepack;
                                characreate(-1, 0, rnd(rw) + rx, rnd(rh) + ry);
                            }
                            break;
                        }
                    }
                }
            }
        }
        if (cnt == rdroomdownstair)
        {
            continue;
        }
        if (cnt == rdroomupstair)
        {
            continue;
        }
        if (rdmonsterhouse == 0 || rdtype == 2)
        {
            if (rnd(8) == 0)
            {
                if (rw * rh < 40)
                {
                    ++rdmonsterhouse;
                    for (int cnt = ry, cnt_end = cnt + (rh); cnt < cnt_end;
                         ++cnt)
                    {
                        rdy3 = cnt;
                        for (int cnt = rx, cnt_end = cnt + (rw); cnt < cnt_end;
                             ++cnt)
                        {
                            rdx3 = cnt;
                            set_character_generation_filter();
                            characreate(-1, 0, rdx3, rdy3);
                        }
                    }
                    if (rdtype != 2)
                    {
                        for (int cnt = 0, cnt_end = (rnd(3) + 1); cnt < cnt_end;
                             ++cnt)
                        {
                            flt();
                            flttypemajor = 72000;
                            itemcreate(-1, 0, rnd(rw) + rx, rnd(rh) + ry, 0);
                        }
                    }
                }
            }
        }
    }
    mobdensity = mdata(10) / 4;
    itemdensity = mdata(10) / 4;
    if (rdtype == 3)
    {
        flt();
        flttypemajor = fsetwear(rnd(length(fsetwear)));
        fixlv = 4;
        itemcreate(-1, 0, -1, -1, 0);
        mobdensity = mdata(10) / 2;
        itemdensity = mdata(10) / 3;
    }
    if (rdtype == 8)
    {
        mobdensity = mdata(10) / 4;
        itemdensity = mdata(10) / 10;
    }
    if (rdtype == 10)
    {
        mobdensity = mdata(10) / 3;
        itemdensity = mdata(10) / 6;
    }
    if (rdtype == 9)
    {
        mobdensity = mdata(10) / 3;
        itemdensity = mdata(10) / 10;
    }
    for (int cnt = 0, cnt_end = (mobdensity); cnt < cnt_end; ++cnt)
    {
        set_character_generation_filter();
        characreate(-1, 0, -3, 0);
    }
    for (int cnt = 0, cnt_end = (itemdensity); cnt < cnt_end; ++cnt)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        flttypemajor = fltsetdungeon();
        itemcreate(-1, 0, -1, -1, 0);
    }
    for (int cnt = 0, cnt_end = (rnd(mdata(0) * mdata(1) / 80)); cnt < cnt_end;
         ++cnt)
    {
        map_trap(0, 0, gdata_current_dungeon_level);
    }
    if (rnd(5) == 0)
    {
        p = rnd(mdata(0) * mdata(1) / 40);
        if (rnd(5) == 0)
        {
            p = rnd(mdata(0) * mdata(1) / 5);
        }
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            map_web(0, 0, gdata_current_dungeon_level * 10 + 100);
        }
    }
    if (rnd(4) == 0)
    {
        p = clamp(rnd(mdata(0) * mdata(1) / 500 + 1) + 1, 3, 15);
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            map_barrel(0, 0);
        }
    }
    if (mdata(7) == 1)
    {
        if (rnd(15 + gdata_kill_count_of_little_sister * 2) == 0)
        {
            flt();
            characreate(-1, 318, -3, 0);
        }
    }
    if (adata(16, gdata_current_map) == 3)
    {
        if (gdata_current_dungeon_level == 3
            || gdata_current_dungeon_level == 17
            || gdata_current_dungeon_level == 25
            || gdata_current_dungeon_level == 44)
        {
            x = mdata(4) % 1000;
            y = mdata(4) / 1000;
            cell_featset(x, y, tile_downlocked, 11);
        }
    }
    return;
}



void initialize_random_nefia_rdtype6()
{
    map_initialize();
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            map(cnt, p, 0) = 3;
        }
    }
    for (int cnt = 0, cnt_end = (rnd(mdata(0) * mdata(1) / 30)); cnt < cnt_end;
         ++cnt)
    {
        x = rnd(mdata(0));
        y = rnd(mdata(1));
        map(x, y, 0) = 1;
    }
    if (gdata_previous_map2 == 33)
    {
        tile_room(0) = 45;
        tile_room(1) = 6;
    }
    map_converttile();
    map_placeplayer();
    mdata(10) = 0;
    for (int cnt = 0, cnt_end = (10 + rnd(6)); cnt < cnt_end; ++cnt)
    {
        set_character_generation_filter();
        int stat = characreate(-1, 0, -3, 0);
        if (stat != 0)
        {
            cdata[rc].relationship = -3;
            cdata[rc].original_relationship = -3;
        }
    }
    for (int cnt = 0, cnt_end = (10 + rnd(10)); cnt < cnt_end; ++cnt)
    {
        flt();
        flttypemajor = 80000;
        itemcreate(-1, 0, -1, -1, 0);
        inv[ci].own_state = 1;
    }
    return;
}



int initialize_quest_map_crop()
{
    gdata_left_minutes_of_executing_quest = 120;
    gdata(87) = 9999;
    mdata(14) = 2;
    mdata(12) = 4;
    mdata(0) = 58 + rnd(16);
    mdata(1) = 50 + rnd(16);
    map_initialize();
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            map(cnt, p, 0) = tile_default
                + (rnd(tile_default(2)) == 0) * rnd(tile_default(1));
        }
    }
    mdatan(0) = u8"街周辺の畑"s;
    map_randomtile(9, 10);
    map_randomtile(10, 10);
    map_randomtile(0, 30);
    map_randomtile(1, 4);
    map_randomtile(4, 2);
    map_randomtile(3, 2);
    map_randomtile(4, 2);
    map_randomtile(5, 2);
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        int w = rnd(5) + 5;
        int h = rnd(4) + 4;
        dx = rnd(mdata(0));
        dy = rnd(mdata(1));
        if (rnd(2))
        {
            tile = 30;
        }
        else
        {
            tile = 31;
        }
        size = clamp(dist(dx, dy, mdata(0) / 2, mdata(1) / 2) / 8, 0, 8);
        crop = isetcrop(rnd(length(isetcrop)));
        for (int cnt = dy, cnt_end = cnt + (h); cnt < cnt_end; ++cnt)
        {
            y = cnt;
            if (y >= mdata(1))
            {
                break;
            }
            for (int cnt = dx, cnt_end = cnt + (w); cnt < cnt_end; ++cnt)
            {
                x = cnt;
                if (x >= mdata(0))
                {
                    break;
                }
                map(x, y, 0) = tile;
                if (rnd(10) != 0 || map(x, y, 4) != 0)
                {
                    continue;
                }
                if (rnd(4))
                {
                    dbid = crop;
                }
                else
                {
                    dbid = isetcrop(rnd(length(isetcrop)));
                }
                flt();
                itemcreate(-1, dbid, x, y, 0);
                inv[ci].own_state = 4;
                p = clamp(size + rnd((rnd(4) + 1)), 0, 9);
                inv[ci].weight = inv[ci].weight * (80 + p * p * 100) / 100;
                inv[ci].subname = p;
            }
        }
    }
    gdata_entrance_type = 7;
    mapstartx = rnd(mdata(0) / 3) + mdata(0) / 3;
    mapstarty = rnd(mdata(1) / 3) + mdata(1) / 3;
    map_placeplayer();
    flt();
    itemcreate(-1, 560, cdata[0].position.x + 1, cdata[0].position.y, 0);
    inv[ci].own_state = 1;
    for (int cnt = 0, cnt_end = (70 + rnd(20)); cnt < cnt_end; ++cnt)
    {
        x = rnd(mdata(0));
        y = rnd(mdata(1));
        if (map(x, y, 0) != 30 && map(x, y, 0) != 31)
        {
            if (map(x, y, 4) == 0)
            {
                if (rnd(8))
                {
                    flt();
                    flttypemajor = 80000;
                    itemcreate(-1, 0, x, y, 0);
                    inv[ci].own_state = 1;
                }
                else
                {
                    cell_featset(x, y, tile_pot, 30);
                }
            }
        }
    }
    mdata(10) = 15;
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        set_character_generation_filter();
        characreate(-1, 0, -3, 0);
    }
    return 1;
}



int initialize_random_nefia_rdtype1()
{
    map_initialize();
    int stat = map_createroom(1);
    if (stat == 0)
    {
        return 0;
    }
    map_placeupstairs();
    {
        int stat = map_createroom(1);
        if (stat == 0)
        {
            return 0;
        }
    }
    map_placedownstairs();
    for (int cnt = 0, cnt_end = (rdroomnum); cnt < cnt_end; ++cnt)
    {
        map_createroom(1);
    }
    {
        int stat = map_connectroom();
        if (stat == 0)
        {
            return 0;
        }
    }
    map_makedoor();
    return 1;
}



int initialize_random_nefia_rdtype4()
{
    rdroomsizemin = 8;
    map_initialize();
    p = rdroomsizemin - 1;
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            map(x, y, 0) = 1;
            if (x > p && y > p && x + 1 < mdata(0) - p && y + 1 < mdata(1) - p)
            {
                map(x, y, 0) = 100;
            }
        }
    }
    int stat = map_createroom(2);
    if (stat == 0)
    {
        return 0;
    }
    map_placeupstairs();
    {
        int stat = map_createroom(2);
        if (stat == 0)
        {
            return 0;
        }
    }
    map_placedownstairs();
    for (int cnt = 0, cnt_end = (rdroomnum); cnt < cnt_end; ++cnt)
    {
        map_createroom(2);
    }
    if (rnd(2) == 0)
    {
        for (int cnt = 0, cnt_end = (rdroomnum / 4 + 1); cnt < cnt_end; ++cnt)
        {
            map_createroom(3);
        }
    }
    else
    {
        p = rdroomsizemin + 1 + rnd(3);
        for (int cnt = 0, cnt_end = (mdata(1) - p * 2); cnt < cnt_end; ++cnt)
        {
            y = p + cnt;
            for (int cnt = 0, cnt_end = (mdata(0) - p * 2); cnt < cnt_end;
                 ++cnt)
            {
                x = p + cnt;
                map(x, y, 0) = 1;
            }
        }
    }
    return 1;
}



int initialize_random_nefia_rdtype5()
{
    rdroomsizemin = 8;
    mdata(0) = 48 + rnd(20);
    mdata(1) = 22;
    mdata(10) = mdata(0) * mdata(1) / 20;
    map_initialize();
    p = rdroomsizemin - 1;
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            map(x, y, 0) = 1;
            if (x > p && y > p && x + 1 < mdata(0) - p && y + 1 < mdata(1) - p)
            {
                map(x, y, 0) = 100;
            }
        }
    }
    int stat = map_createroom(2);
    if (stat == 0)
    {
        return 0;
    }
    map_placeupstairs();
    {
        int stat = map_createroom(2);
        if (stat == 0)
        {
            return 0;
        }
    }
    map_placedownstairs();
    for (int cnt = 0, cnt_end = (rdroomnum); cnt < cnt_end; ++cnt)
    {
        map_createroom(2);
    }
    if (rnd(2) == 0)
    {
        for (int cnt = 0, cnt_end = (rdroomnum / 4 + 1); cnt < cnt_end; ++cnt)
        {
            map_createroom(3);
        }
    }
    else
    {
        p = rdroomsizemin + 1 + rnd(3);
        for (int cnt = 0, cnt_end = (mdata(1) - p * 2); cnt < cnt_end; ++cnt)
        {
            y = p + cnt;
            for (int cnt = 0, cnt_end = (mdata(0) - p * 2); cnt < cnt_end;
                 ++cnt)
            {
                x = p + cnt;
                map(x, y, 0) = 1;
            }
        }
    }
    return 1;
}



int initialize_random_nefia_rdtype2()
{
    rdroomsizemax = 3;
    map_initialize();
    dx = mdata(0) / 2;
    dy = mdata(1) / 2;
    map(dx, dy, 0) = 3;
    p = 0;
    for (int cnt = 0, cnt_end = (rdtunnel); cnt < cnt_end; ++cnt)
    {
        if (rnd(rdval(2)) == 0)
        {
            p = rnd(4);
        }
        if (p == 2)
        {
            ++dx;
            if (dx > mdata(0) - 2)
            {
                p = 0;
                dx = mdata(0) - 2;
            }
        }
        if (p == 1)
        {
            --dx;
            if (dx < 1)
            {
                p = 3;
                dx = 1;
            }
        }
        if (p == 0)
        {
            ++dy;
            if (dy > mdata(1) - 2)
            {
                p = 1;
                dy = mdata(1) - 2;
            }
        }
        if (p == 3)
        {
            --dy;
            if (dy < 1)
            {
                p = 2;
                dy = 1;
            }
        }
        map(dx, dy, 0) = 3;
    }
    int stat = map_createroom();
    if (stat == 0)
    {
        return 0;
    }
    map_placeupstairs();
    {
        int stat = map_createroom();
        if (stat == 0)
        {
            return 0;
        }
    }
    map_placedownstairs();
    for (int cnt = 0, cnt_end = (rdroomnum); cnt < cnt_end; ++cnt)
    {
        map_createroom(0);
    }
    for (int cnt = 0, cnt_end = (rdextraroom); cnt < cnt_end; ++cnt)
    {
        p = 0;
        for (int cnt = 0; cnt < 100; ++cnt)
        {
            x = rnd(mdata(0));
            y = rnd(mdata(1));
            if (map(x, y, 0) == 3)
            {
                dx = rnd(rdroomsizemax) + rdroomsizemin;
                dy = rnd(rdroomsizemax) + rdroomsizemin;
                rx = rnd(dx);
                ry = rnd(dy);
                if (x > 1 && y > 1 && x + dx < mdata(0) - 2
                    && y + dy < mdata(1) - 2)
                {
                    p = 1;
                    break;
                }
            }
        }
        if (p == 0)
        {
            continue;
        }
        dy = y;
        for (int cnt = 0, cnt_end = (ry); cnt < cnt_end; ++cnt)
        {
            dx = x;
            for (int cnt = 0, cnt_end = (rx); cnt < cnt_end; ++cnt)
            {
                map(dx, dy, 0) = 3;
                ++dx;
            }
            ++dy;
        }
    }
    return 1;
}



int initialize_random_nefia_rdtype3()
{
    mdata(0) = 48 + rnd(20);
    mdata(1) = 22;
    mdata(10) = mdata(0) * mdata(1) / 20;
    map_initialize();
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            if (x == 0 || y == 0 || x + 1 == mdata(0) || y + 1 == mdata(1))
            {
                continue;
            }
            map(x, y, 0) = 3;
        }
    }
    p(0) = rnd(mdata(0) / 2) + 2;
    p(1) = rnd(mdata(0) / 2) + mdata(0) / 2 - 2;
    if (rnd(2) == 0)
    {
        p(2) = p;
        p = p(1);
        p(1) = p(2);
    }
    map_placeupstairs(p, rnd(mdata(1) - 4) + 2);
    map_placedownstairs(p(1), rnd(mdata(1) - 4) + 2);
    return 1;
}



int initialize_quest_map_party()
{
    int roomdiff = 0;
    gdata_left_minutes_of_executing_quest = 60;
    gdata(87) = 9999;
    rdroomsizemin = 5;
    mdatan(0) = lang(u8"パーティー場"s, u8"Party Room"s);
    mdata(14) = 1;
    mdata(12) = 11;
    mdata(0) = 38;
    mdata(1) = 28;
    map_initialize();
    rdroomnum = 80;
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            if (x == 0 || y == 0 || x + 1 == mdata(0) || y + 1 == mdata(1))
            {
                continue;
            }
            map(x, y, 0) = 100;
        }
    }
    for (int cnt = 0, cnt_end = (rdroomnum); cnt < cnt_end; ++cnt)
    {
        map_createroom(4);
    }
    map_converttile();
    for (int cnt = 0; cnt < 500; ++cnt)
    {
        dx = rnd(mdata(0) - 5);
        dy = rnd(mdata(1) - 5);
        p(0) = 1;
        p(1) = 1;
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            y = dy + cnt;
            for (int cnt = 0; cnt < 4; ++cnt)
            {
                x = dx + cnt;
                if (map(x, y, 0) != tile_tunnel || map(x, y, 4) != 0)
                {
                    p(0) = 0;
                }
                if (map(x, y, 0) != tile_room || map(x, y, 4) != 0)
                {
                    p(1) = 0;
                }
            }
        }
        if (p(0) == 1)
        {
            int n = rnd(5);
            for (int cnt = 0; cnt < 4; ++cnt)
            {
                y = dy + cnt;
                int cnt2 = cnt;
                for (int cnt = 0; cnt < 4; ++cnt)
                {
                    x = dx + cnt;
                    if (n < 2)
                    {
                        if (cnt != 0 && cnt != 3 && cnt2 != 0 && cnt2 != 3)
                        {
                            map(x, y, 0) = 473;
                        }
                    }
                    if (n == 2)
                    {
                        if (cnt == 3 || cnt2 == 3)
                        {
                            break;
                        }
                        if (cnt == 1 && cnt2 == 1)
                        {
                            map(x, y, 0) = 664;
                        }
                        else
                        {
                            map(x, y, 0) = 206;
                            flt();
                            itemcreate(-1, 91, x, y, 0);
                        }
                    }
                    if (n == 3)
                    {
                        if (cnt == 1 && cnt2 == 1)
                        {
                            map(x, y, 0) = 204;
                            flt();
                            itemcreate(-1, 585, x, y, 0);
                        }
                    }
                    if (n == 4)
                    {
                        if (cnt == 1 && cnt2 == 1)
                        {
                            flt();
                            map(x, y, 0) = 69;
                            itemcreate(-1, 138, x, y, 0);
                        }
                    }
                }
            }
        }
        if (p(1) == 1)
        {
            flt();
            itemcreate(-1, 83, dx + 1, dy + 1, 0);
            if (rnd(2))
            {
                flt();
                itemcreate(-1, 92, dx + 1, dy, 0);
            }
            if (rnd(2))
            {
                flt();
                itemcreate(-1, 92, dx + 1, dy + 2, 0);
            }
            if (rnd(2))
            {
                flt();
                itemcreate(-1, 92, dx, dy + 1, 0);
            }
            if (rnd(2))
            {
                flt();
                itemcreate(-1, 92, dx + 2, dy + 1, 0);
            }
        }
    }
    list(0, 0) = 171;
    list(1, 0) = 9;
    list(2, 0) = 36;
    list(0, 1) = 269;
    list(1, 1) = 273;
    list(2, 1) = 35;
    list(0, 2) = 269;
    list(1, 2) = 174;
    list(2, 2) = 8;
    list(0, 3) = 174;
    list(1, 3) = 16;
    list(2, 3) = 239;
    list(0, 4) = 16;
    list(1, 4) = 185;
    list(2, 4) = 41;
    list(0, 5) = 185;
    list(1, 5) = 274;
    list(2, 5) = 184;
    list(0, 6) = 274;
    list(1, 6) = 272;
    list(2, 6) = 70;
    list(0, 7) = 272;
    list(1, 7) = 38;
    list(2, 7) = 1;
    list(0, 8) = 38;
    list(1, 8) = 206;
    list(2, 8) = 72;
    list(0, 9) = 206;
    list(1, 9) = 73;
    list(2, 9) = 69;
    for (int cnt = 0, cnt_end = (roomsum); cnt < cnt_end; ++cnt)
    {
        rx = roomx(cnt) + 1;
        rw = roomwidth(cnt) - 2;
        ry = roomy(cnt) + 1;
        rh = roomheight(cnt) - 2;
        rdsize = rw * rh;
        roomdiff =
            clamp(rnd(qdata(5, gdata_executing_immediate_quest) / 3 + 3), 0, 9);
        if (rnd(2) == 0)
        {
            x = rnd(rw) + rx;
            y = rnd(rh) + ry;
            if (map(x, y, 4) == 0)
            {
                flt();
                itemcreate(-1, 88, x, y, 0);
            }
        }
        if (rnd(3) == 0)
        {
            x = rnd(rw) + rx;
            y = rnd(rh) + ry;
            if (map(x, y, 4) == 0)
            {
                flt();
                itemcreate(-1, 313, x, y, 0);
            }
        }
        if (rnd(2) == 0)
        {
            x = rnd(rw) + rx;
            y = rnd(rh) + ry;
            if (map(x, y, 4) == 0)
            {
                flt();
                itemcreate(-1, 156, x, y, 0);
            }
        }
        if (rnd(3) == 0)
        {
            x = rnd(rw) + rx;
            y = rnd(rh) + ry;
            if (map(x, y, 4) == 0)
            {
                flt();
                itemcreate(-1, 606, x, y, 0);
            }
        }
        for (int cnt = 0,
                 cnt_end = cnt + (rnd(rdsize / 5 + 2) + rdsize / 5 + 3);
             cnt < cnt_end;
             ++cnt)
        {
            flt(roomdiff * 5, calcfixlv(2));
            initlv = roomdiff * 7 + rnd(5);
            dbid = list(rnd(3), roomdiff);
            characreate(-1, dbid, rnd(rw) + rx, rnd(rh) + ry);
            cdata[rc].character_role = 3;
            cdata[rc].relationship = -1;
            cdata[rc].original_relationship = -1;
            cdata[rc].gold = cdata[rc].level * (20 + rnd(20));
        }
    }
    gdata_entrance_type = 7;
    mapstartx = rnd(mdata(0) / 3) + mdata(0) / 3;
    mapstarty = rnd(mdata(1) / 3) + mdata(1) / 3;
    map_placeplayer();
    mdata(10) = 0;
    for (int cnt = 0, cnt_end = (25 + rnd(10)); cnt < cnt_end; ++cnt)
    {
        x = rnd(mdata(0));
        y = rnd(mdata(1));
        if (map(x, y, 4) != 0 || chipm(7, map(x, y, 0)) & 4)
        {
            continue;
        }
        flt();
        p(0) = 217;
        p(1) = 218;
        p(2) = 216;
        p(3) = 215;
        p(4) = 215;
        p(5) = 152;
        p(6) = 152;
        p(7) = 91;
        p(8) = 189;
        itemcreate(-1, p(rnd(9)), x, y, 0);
    }
    flt();
    characreate(-1, 29, -3, 0);
    cdata[rc].character_role = 3;
    cdata[rc].relationship = -1;
    cdata[rc].original_relationship = -1;
    flt();
    characreate(-1, 231, -3, 0);
    cdata[rc].character_role = 3;
    cdata[rc].relationship = -1;
    cdata[rc].original_relationship = -1;
    flt();
    characreate(-1, 31, -3, 0);
    cdata[rc].character_role = 3;
    cdata[rc].relationship = -1;
    cdata[rc].original_relationship = -1;
    flt();
    characreate(-1, 247, -3, 0);
    cdata[rc].character_role = 3;
    cdata[rc].relationship = -1;
    cdata[rc].original_relationship = -1;
    if (rnd(10) == 0)
    {
        flt();
        characreate(-1, 34, -3, 0);
        cdata[rc].character_role = 3;
        cdata[rc].relationship = -1;
        cdata[rc].original_relationship = -1;
    }
    if (rnd(10) == 0)
    {
        flt();
        characreate(-1, 28, -3, 0);
        cdata[rc].character_role = 3;
        cdata[rc].relationship = -1;
        cdata[rc].original_relationship = -1;
    }
    if (rnd(10) == 0)
    {
        flt();
        characreate(-1, 223, -3, 0);
        cdata[rc].character_role = 3;
        cdata[rc].relationship = -1;
        cdata[rc].original_relationship = -1;
    }
    if (rnd(10) == 0)
    {
        flt();
        characreate(-1, 252, -3, 0);
        cdata[rc].character_role = 3;
        cdata[rc].relationship = -1;
        cdata[rc].original_relationship = -1;
    }
    if (rnd(10) == 0)
    {
        flt();
        characreate(-1, 322, -3, 0);
        cdata[rc].character_role = 3;
        cdata[rc].relationship = -1;
        cdata[rc].original_relationship = -1;
    }
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number > 0)
        {
            inv[cnt].own_state = 1;
        }
    }
    return 1;
}



void initialize_quest_map_town()
{
    mdata(10) = 0;
    mdata(14) = 2;
    map_initcustom(mapfile(gdata_previous_map2));
    mdatan(0) = lang(u8"市街地"s, u8"Urban Area"s);
    randomize();
    gdata_entrance_type = 5;
    map_placeplayer();
    mdata(15) = 0;
    if (gdata_executing_immediate_quest_type == 1008)
    {
        gdata_left_minutes_of_executing_quest = 720;
        gdata(87) = 9999;
        flt();
        initlv = qdata(5, gdata_executing_immediate_quest);
        fixlv = 5;
        characreate(-1, qdata(12, gdata_executing_immediate_quest), -3, 0);
        cdata[rc].relationship = -3;
        cdata[rc].original_relationship = -3;
        qdata(13, gdata_executing_immediate_quest) = rc;
    }
    if (gdata_executing_immediate_quest_type == 1010)
    {
        for (int cnt = 0, cnt_end = (6 + rnd(4)); cnt < cnt_end; ++cnt)
        {
            flt();
            initlv = qdata(5, gdata_executing_immediate_quest) * 3 / 2;
            fixlv = 1;
            characreate(-1, qdata(12, gdata_executing_immediate_quest), -3, 0);
            cdata[rc].relationship = -3;
            cdata[rc].original_relationship = -3;
        }
    }
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        f = 0;
        if (inv[cnt].id == 109 || inv[cnt].id == 173)
        {
            inv[cnt].param1 = -10;
        }
        if (inv[cnt].id == 241)
        {
            inv[cnt].param1 = 0;
        }
    }
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            map(x, y, 6) = 0;
        }
    }
    return;
}



void initialize_random_nefia_rdtype8()
{
    mdata(0) = 30;
    mdata(1) = 60 + rnd(60);
    mdata(10) = mdata(0) * mdata(1) / 20;
    map_initialize();
    int w = 6;
    dx = mdata(0) / 2 - w / 2;
    p = 0;
    for (int cnt = 0, cnt_end = (mdata(1) - 4); cnt < cnt_end; ++cnt)
    {
        y = 2 + cnt;
        for (int cnt = 0, cnt_end = (w); cnt < cnt_end; ++cnt)
        {
            x = cnt + dx;
            map(x, y, 0) = 100;
        }
        if (p <= 0)
        {
            if (rnd(2))
            {
                p = rnd(12);
            }
        }
        if (rnd(2))
        {
            if (w > 4)
            {
                w -= rnd(2);
            }
        }
        if (p > 0)
        {
            if (p < 5)
            {
                if (w > 3)
                {
                    w -= rnd(2);
                    --p;
                }
            }
            if (p > 4)
            {
                if (w < 10)
                {
                    ++w;
                    --p;
                }
            }
        }
        if (dx > 1)
        {
            dx -= rnd(2);
        }
        if (dx + w < mdata(0) - 1)
        {
            dx += rnd(2);
        }
        if (dx + w > mdata(0))
        {
            w = mdata(0) - dx;
        }
    }
    while (1)
    {
        x = rnd(mdata(0));
        y = rnd(15);
        if (map(x, y, 0) == 100)
        {
            map_placeupstairs(x, y);
            break;
        }
    }
    while (1)
    {
        x = rnd(mdata(0));
        y = mdata(1) - rnd(15) - 1;
        if (map(x, y, 0) == 100)
        {
            map_placedownstairs(x, y);
            break;
        }
    }
    return;
}



void dimmix(elona_vector1<int>& prm_983)
{
    int mx_at_m172 = 0;
    int r_at_m172 = 0;
    mx_at_m172 = length(prm_983);
    for (int cnt = 0, cnt_end = (mx_at_m172); cnt < cnt_end; ++cnt)
    {
        r_at_m172 = cnt + rnd((mx_at_m172 - cnt));
        tmp_at_m172 = prm_983(r_at_m172);
        prm_983(r_at_m172) = prm_983(cnt);
        prm_983(cnt) = tmp_at_m172;
    }
    return;
}



void initialize_random_nefia_rdtype9()
{
    mdata(0) = _mclass * (_bold * 2) - _bold + 8;
    mdata(1) = mdata(0);
    mdata(10) = mdata(0) * mdata(1) / 12;
    map_initialize();
    label_1709();
    rdsecond = 1;
    label_1709();
    rdsecond = 0;
    return;
}



void label_1709()
{
    elona_vector1<int> maze;
    int mdig = 0;
    int _hole = 0;
    int sdigx = 0;
    int sdigy = 0;
    int digno = 0;
    int pmdig = 0;
    DIM2(maze, _mclass * _mclass);
    mdig = 0;
    _hole = 0;
    sdigx = _bold;
    sdigy = _bold;
    maze(mdig) = 7;
    elona_vector1<int> way;
    DIM2(way, 4);
    for (int cnt = 0; cnt < 4; ++cnt)
    {
        way(cnt) = cnt;
    }
    i = 0;
    while (1)
    {
        dimmix(way);
        digno = 0;
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            pmdig = mdig;
            if (way(cnt) == 0)
            {
                if (pmdig / _mclass == 0)
                {
                    continue;
                }
                else
                {
                    mdig -= _mclass;
                }
            }
            if (way(cnt) == 1)
            {
                if (pmdig % _mclass == _mclass - 1)
                {
                    continue;
                }
                else
                {
                    ++mdig;
                }
            }
            if (way(cnt) == 2)
            {
                if (pmdig / _mclass == _mclass - 1)
                {
                    continue;
                }
                else
                {
                    mdig += _mclass;
                }
            }
            if (way(cnt) == 3)
            {
                if (pmdig % _mclass == 0)
                {
                    continue;
                }
                else
                {
                    --mdig;
                }
            }
            if (maze(mdig) != _hole)
            {
                mdig = pmdig;
                continue;
            }
            ++i;
            sdigx = pmdig % _mclass * _bold * 2 + _bold;
            sdigy = pmdig / _mclass * _bold * 2 + _bold;
            if (way(cnt) == 0)
            {
                maze(mdig) = 3;
                for (int cnt = 0, cnt_end = (_bold * 2); cnt < cnt_end; ++cnt)
                {
                    y = sdigy - _bold * 2 + cnt - _bold + 4;
                    for (int cnt = 0, cnt_end = (_bold - 1); cnt < cnt_end;
                         ++cnt)
                    {
                        x = sdigx + cnt - _bold + 4;
                        map(x, y, 0) = 100;
                    }
                }
            }
            if (way(cnt) == 1)
            {
                maze(mdig) = 4;
                for (int cnt = 0, cnt_end = (_bold - 1); cnt < cnt_end; ++cnt)
                {
                    y = sdigy + cnt - _bold + 4;
                    for (int cnt = 0, cnt_end = (_bold * 3 - 1); cnt < cnt_end;
                         ++cnt)
                    {
                        x = sdigx + cnt - _bold + 4;
                        map(x, y, 0) = 100;
                    }
                }
            }
            if (way(cnt) == 2)
            {
                maze(mdig) = 1;
                for (int cnt = 0, cnt_end = (_bold * 3 - 1); cnt < cnt_end;
                     ++cnt)
                {
                    y = sdigy + cnt - _bold + 4;
                    for (int cnt = 0, cnt_end = (_bold - 1); cnt < cnt_end;
                         ++cnt)
                    {
                        x = sdigx + cnt - _bold + 4;
                        map(x, y, 0) = 100;
                    }
                }
            }
            if (way(cnt) == 3)
            {
                maze(mdig) = 2;
                for (int cnt = 0, cnt_end = (_bold - 1); cnt < cnt_end; ++cnt)
                {
                    y = sdigy + cnt - _bold + 4;
                    for (int cnt = 0, cnt_end = (_bold * 2); cnt < cnt_end;
                         ++cnt)
                    {
                        x = sdigx + cnt - _bold * 2 - _bold + 4;
                        map(x, y, 0) = 100;
                    }
                }
            }
            digno = 1;
            break;
        }
        if (digno == 1)
        {
            continue;
        }
        if (maze(mdig) == 7)
        {
            break;
        }
        if (maze(mdig) == 1)
        {
            mdig -= _mclass;
            continue;
        }
        if (maze(mdig) == 2)
        {
            ++mdig;
            continue;
        }
        if (maze(mdig) == 3)
        {
            mdig += _mclass;
            continue;
        }
        if (maze(mdig) == 4)
        {
            --mdig;
        }
    }
    if (rdsecond)
    {
        return;
    }
    for (int cnt = 0;; ++cnt)
    {
        x = rnd(mdata(0));
        y = rnd(mdata(1));
        if (map(x, y, 0) != 100)
        {
            continue;
        }
        dx = rnd(mdata(0));
        dy = rnd(mdata(1));
        if (map(dx, dy, 0) != 100)
        {
            continue;
        }
        if (dist(x, y, dx, dy) < 10)
        {
            if (cnt < 1000)
            {
                continue;
            }
        }
        map_placeupstairs(x, y);
        map_placedownstairs(dx, dy);
        break;
    }
    return;
}



void initialize_random_nefia_rdtype10()
{
    mdata(0) = _mclass * (_bold * 2) - _bold + 8;
    mdata(1) = mdata(0);
    mdata(10) = mdata(0) * mdata(1) / 12;
    map_initialize();
    label_1709();
    for (int cnt = 0; cnt < 50; ++cnt)
    {
        int cnt2 = cnt;
        t = 100 + cnt2 + 1;
        while (1)
        {
            x = rnd(mdata(0));
            y = rnd(mdata(1));
            if (map(x, y, 0) != 100)
            {
                continue;
            }
            int w = 10 + rnd(4);
            for (int cnt = 0, cnt_end = (w); cnt < cnt_end; ++cnt)
            {
                dy = cnt + y - w / 2;
                for (int cnt = 0, cnt_end = (w); cnt < cnt_end; ++cnt)
                {
                    dx = cnt + x - w / 2;
                    if (dx < 1 || dy < 1 || dx >= mdata(0) - 1
                        || dy >= mdata(1) - 1)
                    {
                        continue;
                    }
                    if (dist(x, y, dx, dy) >= w / 2)
                    {
                        continue;
                    }
                    tx = dx - 1;
                    ty = dy;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx + 1;
                    ty = dy;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx;
                    ty = dy - 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx;
                    ty = dy + 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx - 1;
                    ty = dy - 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx + 1;
                    ty = dy - 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx - 1;
                    ty = dy + 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    tx = dx + 1;
                    ty = dy + 1;
                    if (map(tx, ty, 0) != t)
                    {
                        if (map(tx, ty, 0) != 0)
                        {
                            if (map(tx, ty, 0) != 100)
                            {
                                continue;
                            }
                        }
                    }
                    map(dx, dy, 0) = t;
                }
            }
            break;
        }
    }
    for (int cnt = 0, cnt_end = (mdata(1) / 2 - 2); cnt < cnt_end; ++cnt)
    {
        y = cnt * 2;
        for (int cnt = 0, cnt_end = (mdata(0) / 2 - 2); cnt < cnt_end; ++cnt)
        {
            x = cnt * 2;
            if (map(x, y, 0) < 100)
            {
                continue;
            }
            if (map(x, y, 6) != 0)
            {
                continue;
            }
            if (map(x - 1, y, 0) >= 100)
            {
                if (map(x + 1, y, 0) >= 100)
                {
                    if (map(x, y - 1, 0) == 0)
                    {
                        if (map(x, y + 1, 0) == 0)
                        {
                            cell_featset(
                                x,
                                y,
                                tile_doorclosed,
                                21,
                                rnd(std::abs(
                                        gdata_current_dungeon_level * 3 / 2)
                                    + 1));
                        }
                    }
                    continue;
                }
            }
            if (map(x, y - 1, 0) >= 100)
            {
                if (map(x, y + 1, 0) >= 100)
                {
                    if (map(x - 1, y, 0) == 0)
                    {
                        if (map(x + 1, y, 0) == 0)
                        {
                            cell_featset(
                                x,
                                y,
                                tile_doorclosed,
                                21,
                                rnd(std::abs(
                                        gdata_current_dungeon_level * 3 / 2)
                                    + 1));
                        }
                    }
                    continue;
                }
            }
        }
    }
    return;
}



void initialize_home_mdata()
{
    if (gdata_home_scale == 0)
    {
        mdata(18) = 100;
        gdata_basic_point_of_home_rank = 1000;
    }
    if (gdata_home_scale == 1)
    {
        mdata(18) = 150;
        gdata_basic_point_of_home_rank = 3000;
    }
    if (gdata_home_scale == 2)
    {
        mdata(18) = 200;
        gdata_basic_point_of_home_rank = 5000;
    }
    if (gdata_home_scale == 3)
    {
        mdata(18) = 300;
        gdata_basic_point_of_home_rank = 7000;
    }
    if (gdata_home_scale == 4)
    {
        mdata(18) = 350;
        gdata_basic_point_of_home_rank = 8000;
        mdata(12) = 8;
    }
    if (gdata_home_scale == 5)
    {
        mdata(18) = 400;
        gdata_basic_point_of_home_rank = 10000;
    }
    return;
}



turn_result_t build_new_building()
{
    if (mdata(6) != 1)
    {
        txt(lang(
            u8"それはワールドマップでしか使えない。"s,
            u8"You can only use it in the world map."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    cell_featread(cdata[0].position.x, cdata[0].position.y);
    if (feat(0) != 0)
    {
        txt(lang(
            u8"その場所には建てられない。"s, u8"You can't build it here."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    area = -1;
    for (int cnt = 300; cnt < 450; ++cnt)
    {
        if (adata(16, cnt) == 0)
        {
            area = cnt;
            break;
        }
    }
    if (area == -1)
    {
        txt(lang(
            u8"もうこれ以上建物は建てられない。"s,
            u8"You can't build a building anymore."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    txt(lang(u8"本当にこの場所に建設する？ "s, u8"Really build it here? "s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    if (rtval != 0)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (inv[ci].id == 344)
    {
        gdata_home_scale = inv[ci].param1;
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        initialize_home_adata();
        midbk = mid;
        mid = ""s + 7 + u8"_"s + 101;
        ctrl_file(file_operation_t::_12);
        mid = midbk;
        label_1749();
        levelexitby = 2;
        gdata_destination_map = 7;
        gdata_destination_dungeon_level = 1;
        gdata_pc_home_x = adata(1, 7);
        gdata_pc_home_y = adata(2, 7);
        snd(58);
        txtef(2);
        txt(lang(u8"新しい家を建てた！ "s, u8"You've built a new house!"s));
        msg_halt();
        snd(49);
        return turn_result_t::exit_map;
    }
    ctrl_file(file_operation_t::_13);
    p = area;
    adata(1, p) = cdata[0].position.x;
    adata(2, p) = cdata[0].position.y;
    adata(0, p) = 5;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(18, p) = 3;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(4, p) = 1;
    adata(3, p) = 8;
    adata(30, p) = gdata(850);
    if (inv[ci].id == 521)
    {
        adata(16, p) = 101;
        adata(15, p) = 151;
        adata(21, p) = 1;
        s = lang(u8"博物館"s, u8"museum"s);
    }
    if (inv[ci].id == 522)
    {
        adata(16, p) = 102;
        adata(15, p) = 150;
        adata(21, p) = 1;
        s = lang(u8"店"s, u8"shop"s);
    }
    if (inv[ci].id == 542)
    {
        adata(16, p) = 103;
        adata(15, p) = 152;
        adata(21, p) = 2;
        s = lang(u8"畑"s, u8"crop"s);
    }
    if (inv[ci].id == 543)
    {
        adata(16, p) = 104;
        adata(15, p) = 153;
        adata(21, p) = 1;
        s = lang(u8"倉庫"s, u8"storage"s);
    }
    if (inv[ci].id == 572)
    {
        adata(16, p) = 31;
        adata(15, p) = 154;
        adata(21, p) = 2;
        adata(12, p) = 1;
        s = lang(u8"牧場"s, u8"ranch"s);
    }
    if (inv[ci].id == 712)
    {
        adata(16, p) = 39;
        adata(15, p) = 138;
        adata(21, p) = 1;
        adata(12, p) = 1;
        s = lang(u8"ダンジョン"s, u8"dungeon"s);
    }
    snd(58);
    txtef(5);
    txt(lang(
        u8"あなたは"s + s + u8"を建設した！ "s,
        u8"You've built a "s + s + u8"!"s));
    label_1749();
    --inv[ci].number;
    cell_refresh(inv[ci].position.x, inv[ci].position.y);
    return turn_result_t::turn_end;
}



void initialize_home_adata()
{
    p = 7;
    adata(15, p) = 143;
    if (gdata_home_scale == 0)
    {
        adata(15, p) = 138;
    }
    if (gdata_home_scale == 4)
    {
        adata(15, p) = 148;
    }
    if (gdata_home_scale == 5)
    {
        adata(15, p) = 144;
    }
    if (gdata_home_scale != 0)
    {
        adata(1, p) = cdata[0].position.x;
        adata(2, p) = cdata[0].position.y;
    }
    adata(30, p) = gdata(850);
    return;
}



turn_result_t show_house_board()
{
    int cxbk = 0;
    int cybk = 0;
    int tchome = 0;
    txtnew();
    if (mdata(6) != 5)
    {
        ++msgdup;
        txt(lang(
            u8"ここはあなたの家ではない。"s,
            u8"You can only use it in your home."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    p(0) = 0;
    p(1) = 0;
    p(2) = 0;
    for (const auto& cnt : items(-1))
    {
        ++p(2);
        if (inv[cnt].number != 0)
        {
            if (the_item_db[inv[cnt].id]->category != 60000)
            {
                ++p;
            }
            else
            {
                ++p(1);
            }
        }
    }
    if (mdata(18) != 0)
    {
        p(2) = mdata(18);
    }
    txt(lang(
        mapname(gdata_current_map) + u8"には"s + p + u8"個のアイテムと"s + p(1)
            + u8"個の家具がある(アイテム最大"s + p(2) + u8"個) "s,
        u8"There are "s + p + u8" items and "s + p(1) + u8" furniture in "s
            + mapname(gdata_current_map) + u8".(Max: "s + p(2) + u8") "s));
    if (adata(16, gdata_current_map) == 102)
    {
        if (getworker(gdata_current_map) != -1)
        {
            txt(lang(
                u8"現在の店主は"s + cdatan(0, getworker(gdata_current_map))
                    + u8"だ。"s,
                u8"Current shopkeeper is "s
                    + cdatan(0, getworker(gdata_current_map)) + u8"."s));
        }
        else
        {
            txt(lang(
                u8"現在店主はいない。"s,
                u8"You haven't assigned a shopkeeper yet."s));
        }
    }
    if (adata(16, gdata_current_map) == 31)
    {
        if (getworker(gdata_current_map) != -1)
        {
            txt(lang(
                u8"現在のブリーダーは"s
                    + cdatan(0, getworker(gdata_current_map)) + u8"だ。"s,
                u8"Current breeder is "s
                    + cdatan(0, getworker(gdata_current_map)) + u8"."s));
        }
        else
        {
            txt(lang(
                u8"現在ブリーダーはいない。"s,
                u8"You haven't assigned a breeder yet."s));
        }
    }
    if (gdata_current_map == 7)
    {
        p = 0;
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].state == 1 || cdata[cnt].state == 2)
            {
                if (cdata[cnt].character_role != 0)
                {
                    ++p;
                }
            }
        }
        txt(lang(
            u8"現在"s + p + u8"人の滞在者がいる(最大"s + (gdata_home_scale + 2)
                + u8"人) "s,
            ""s + p + u8" members are staying at your home. (Max: "s
                + (gdata_home_scale + 2) + u8")."s));
    }
    txtnew();
    txt(lang(u8"何をする？"s, u8"What do you want to do?"s));
    p = 0;
    if (adata(16, gdata_current_map) == 102)
    {
        ELONA_APPEND_PROMPT(
            lang(u8"仲間に店主を頼む"s, u8"Assign a shopkeeper"s),
            u8"null"s,
            ""s + 4);
        if (mdata(18) < 400)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"店を拡張"s, u8"Extend"s) + u8"("s + calcshopreform()
                    + u8" GP)"s,
                u8"null"s,
                ""s + 5);
        }
    }
    if (adata(16, gdata_current_map) == 31)
    {
        ELONA_APPEND_PROMPT(
            lang(u8"ブリーダーを任命する"s, u8"Assign a breeder"s),
            u8"null"s,
            ""s + 4);
    }
    ELONA_APPEND_PROMPT(
        lang(u8"家の模様替え"s, u8"Design"s), u8"null"s, ""s + 0);
    if (gdata_current_map == 7)
    {
        ELONA_APPEND_PROMPT(
            lang(u8"家の情報"s, u8"Home rank"s), u8"null"s, ""s + 2);
        ELONA_APPEND_PROMPT(
            lang(u8"仲間の滞在"s, u8"Allies in your home"s),
            u8"null"s,
            ""s + 4);
        if (gdata_current_dungeon_level == 1)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"使用人を募集する"s, u8"Recruit a servant"s),
                u8"null"s,
                ""s + 6);
        }
        ELONA_APPEND_PROMPT(
            lang(u8"滞在者の移動"s, u8"Move a stayer"s), u8"null"s, ""s + 3);
    }
    int stat = show_prompt(promptx, prompty, 240);
    if (stat == -1)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    rtval = stat;
    switch (rtval)
    {
    case 0:
        homemapmode = 1;
        cxbk = cdata[0].position.x;
        cybk = cdata[0].position.y;
        label_1723();
        txtnew();
        txt(lang(
            u8"マウスの左クリックでタイルの敷設、右クリックでタイルの取得、移動キーでスクリーン移動、決定キーでタイル一覧、キャンセルキーで終了。"s,
            u8"Left click to place the tile, right click to pick the tile under your mouse cursor, movement keys to move current position, hit the enter key to show the list of tiles, hit the cancel key to exit."s));
        tlocinitx = cdata[0].position.x;
        tlocinity = cdata[0].position.y;
        tile = 0;
        while (1)
        {
            await();
            int stat = target_position();
            if (stat == -1)
            {
                break;
            }
            if ((chipm(7, tile) & 4) == 0)
            {
                map(tlocx, tlocy, 0) = tile;
                map(tlocx, tlocy, 2) = tile;
            }
            else
            {
                efid = 438;
                magic();
            }
            tlocinitx = tlocx;
            tlocinity = tlocy;
        }
        homemapmode = 0;
        cdata[0].position.x = cxbk;
        cdata[0].position.y = cybk;
        break;
    case 2:
        gsel(4);
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(cnt % 4 * 180, cnt / 4 * 300);
            picload(
                filesystem::dir::graphic() / (u8"g"s + (cnt + 1) + u8".bmp"),
                1);
        }
        gsel(0);
        snd(26);
        pagesize = 0;
        keyrange = 0;
        key_list = key_cancel;
        s(0) = lang(u8"家の情報"s, u8"Home Value"s);
        s(1) = lang(u8"決定ｷｰ,"s, u8"Enter key,"s) + strhint3;
        windowshadow = 1;
        display_window(
            (windoww - 440) / 2 + inf_screenx, winposy(360), 440, 360);
        display_topic(lang(u8"価値"s, u8"Value"s), wx + 28, wy + 36);
        display_topic(
            lang(u8"家宝ランク"s, u8"Heirloom Rank"s), wx + 28, wy + 106);
        ++cmbg;
        x = ww / 5 * 2;
        y = wh - 80;
        gmode(4, 180, 300, 50);
        pos(wx + ww / 4, wy + wh / 2);
        grotate(4, cmbg / 4 % 4 * 180, cmbg / 4 / 4 % 2 * 300, 0, x, y);
        gmode(2);
        label_1730();
        s(0) = lang(u8"基本."s, u8"Base"s);
        s(1) = lang(u8"家具."s, u8"Deco"s);
        s(2) = lang(u8"家宝."s, u8"Heir"s);
        s(3) = lang(u8"総合."s, u8"Total"s);
        p(0) = gdata_basic_point_of_home_rank;
        p(1) = gdata(77);
        p(2) = gdata(78);
        p(3) = (p + p(1) + p(2)) / 3;
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            x = wx + 45 + cnt / 2 * 190;
            y = wy + 68 + cnt % 2 * 18;
            font(12 + sizefix - en * 2);
            pos(x, y);
            mes(s(cnt));
            font(14 - en * 2);
            for (int cnt = 0, cnt_end = cnt + (clamp(p(cnt) / 1000, 1, 10));
                 cnt < cnt_end;
                 ++cnt)
            {
                pos(x + 35 + cnt * 13 + en * 8, y - 2);
                bmes(lang(u8"★"s, u8"*"s), 255, 255, 50);
            }
        }
        font(12 + sizefix - en * 2);
        listmax = 10;
        sort_list_by_column1();
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            p = list(0, cnt);
            if (p == 0)
            {
                continue;
            }
            p(1) = inv[p].image % 1000;
            prepare_item_image(p(1), inv[p].color, inv[p].param1);
            pos(wx + 37, cnt * 16 + wy + 138);
            gmode(2, chipi(2, p(1)), chipi(3, p(1)));
            grotate(
                1,
                0,
                960,
                0,
                chipi(2, p(1)) * inf_tiles / chipi(3, p(1)),
                inf_tiles);
            pos(wx + 68, cnt * 16 + wy + 138);
            mes(""s + cnvrank((10 - cnt)) + lang(u8"位."s, ""s));
            pos(wx + 110, cnt * 16 + wy + 138);
            mes(itemname(p));
        }

        while (1)
        {
            redraw();
            await(config::instance().wait1);
            key_check();
            cursor_check();
            if (key == key_cancel)
            {
                break;
            }
        }
        break;
    case 3:
    label_1717_internal:
        txtnew();
        txt(lang(u8"誰を移動させる？"s, u8"Move who?"s));
        allyctrl = 0;
        {
            int stat = show_hire_menu();
            if (stat == -1)
            {
                goto label_1722_internal;
            }
        }
        if (cdata[stat].relationship <= -3)
        {
            txtnew();
            txtef(9);
            txt(cdatan(0, stat)
                + lang(u8"「触るな！」"s, (u8" "s + u8"\"Don't touch me!\""s)));
            goto label_1722_internal;
        }
        tchome = stat;
        tc = stat;
        snd(20);
    label_1718_internal:
        txtnew();
        txt(lang(
            cdatan(0, tc) + u8"をどこに移動させる？"s,
            u8"Where do you want to move "s + cdatan(0, tc) + u8"?"s));
        {
            int stat = target_position();
            if (stat == -1)
            {
                goto label_1717_internal;
            }
        }
        if (chipm(7, map(tlocx, tlocy, 0)) & 4 || map(tlocx, tlocy, 1) != 0)
        {
            txt(lang(
                u8"その場所には移動させることができない。"s,
                u8"The location is invalid."s));
            goto label_1718_internal;
        }
        tc = tchome;
        map(cdata[tc].position.x, cdata[tc].position.y, 1) = 0;
        map(tlocx, tlocy, 1) = tc + 1;
        cdata[tc].position.x = tlocx;
        cdata[tc].initial_position.x = tlocx;
        cdata[tc].position.y = tlocy;
        cdata[tc].initial_position.y = tlocy;
        rowactend(tc);
        txtnew();
        txt(lang(
            cdatan(0, tc) + u8"を移動させた。"s,
            cdatan(0, tc) + u8" "s + is(tc) + u8" moved to the location."s));
        snd(43);
        goto label_1717_internal;
        goto label_1718_internal;
        goto label_1717_internal;
        goto label_1722_internal;
    case 4:
        allyctrl = 3;
        {
            int stat = ctrl_ally();
            if (stat != -1)
            {
                int c = stat;
                snd(20);
                txtnew();
                if (getworker(gdata_current_map, c) == c)
                {
                    if (gdata_current_map == 7)
                    {
                        cdata[c].current_map = 0;
                        txt(lang(
                            cdatan(0, c) + u8"の滞在を取り消した。"s,
                            cdatan(0, c) + u8" "s + is(c)
                                + u8" no longer staying at your home."s));
                    }
                    else
                    {
                        removeworker(gdata_current_map);
                        txt(lang(
                            cdatan(0, c) + u8"を役目から外した。"s,
                            u8"You remove "s + cdatan(0, c) + u8" from "s
                                + his(c) + u8" job."s));
                    }
                }
                else
                {
                    if (gdata_current_map == 7)
                    {
                        cdata[c].initial_position.x = cdata[c].position.x;
                        cdata[c].initial_position.y = cdata[c].position.y;
                        txt(lang(
                            cdatan(0, c) + u8"を滞在させた。"s,
                            cdatan(0, c) + u8" stay"s + _s(c)
                                + u8" at your home now."s));
                    }
                    else
                    {
                        removeworker(gdata_current_map);
                        txt(lang(
                            cdatan(0, c) + u8"を任命した。"s,
                            cdatan(0, c) + u8" take"s + _s(c)
                                + u8" charge of the job now."s));
                    }
                    cdata[c].current_map = gdata_current_map;
                }
            }
        }
        break;
    case 5:
        txtnew();
        if (cdata[0].gold < calcshopreform())
        {
            txt(lang(
                u8"お金が足りない…"s, u8"You don't have enough money..."s));
        }
        else
        {
            snd(12);
            cdata[0].gold -= calcshopreform();
            mdata(18) = clamp(mdata(18) + 10, 1, 400);
            txtef(2);
            txt(lang(
                u8"店を拡張した！これからは"s + mdata(18)
                    + u8"個のアイテムを陳列できる。"s,
                u8"You extend your shop! You can display max of "s + mdata(18)
                    + u8" items now!"s));
        }
        break;
    case 6:
        txtnew();
        p = 0;
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].state == 1 || cdata[cnt].state == 2)
            {
                if (cdata[cnt].character_role != 0)
                {
                    ++p;
                }
            }
        }
        if (p >= gdata_home_scale + 2)
        {
            txt(lang(
                u8"家はすでに人であふれかえっている。"s,
                u8"You already have too many guests in your home."s));
            break;
        }
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            randomize(gdata_day + cnt);
            if (rnd(2))
            {
                continue;
            }
            if (cnt == 0)
            {
                hire = 0;
            }
            else
            {
                hire = rnd(length(isethire));
            }
            dbid = isethire(hire);
            randomize(gdata_day + cnt);
            flt(20);
            int stat = characreate(-1, dbid, -3, 0);
            if (stat == 0)
            {
                continue;
            }
            cdata[rc].state = 10;
            cdata[rc].character_role = isethirerole(hire);
            if (cdata[rc].id == 1)
            {
                p = rnd(6);
                if (p == 0)
                {
                    cdata[rc].character_role = 1001;
                    cdatan(0, rc) = lang(
                        u8"武具店の"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of armory"s);
                }
                if (p == 1)
                {
                    cdata[rc].character_role = 1006;
                    cdatan(0, rc) = lang(
                        u8"雑貨屋の"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of general store"s);
                }
                if (p == 2)
                {
                    cdata[rc].character_role = 1004;
                    cdatan(0, rc) = lang(
                        u8"魔法店の"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of magic store"s);
                }
                if (p == 3)
                {
                    cdata[rc].character_role = 1008;
                    cdatan(0, rc) = lang(
                        u8"何でも屋の"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of goods store"s);
                }
                if (p == 4)
                {
                    cdata[rc].character_role = 1001;
                    cdatan(0, rc) = lang(
                        u8"武具店の"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of armory"s);
                }
                if (p == 5)
                {
                    cdata[rc].character_role = 1007;
                    cdatan(0, rc) = lang(
                        u8"ブラックマーケットの"s + cdatan(0, rc),
                        cdatan(0, rc) + u8" of blackmarket"s);
                }
                randomize();
                cdata[rc].shop_rank = rnd(15) + 1;
            }
            for (int cnt = ELONA_MAX_PARTY_CHARACTERS;
                 cnt < ELONA_MAX_CHARACTERS;
                 ++cnt)
            {
                if (cnt == rc)
                {
                    continue;
                }
                if (cdatan(0, cnt) == cdatan(0, rc))
                {
                    chara_vanquish(rc);
                }
            }
        }
        randomize();
        txtnew();
        txt(lang(u8"誰を雇用する？"s, u8"Who do you want to hire?"s));
        allyctrl = 1;
        int stat = show_hire_menu();
        if (stat != -1)
        {
            tc = stat;
            txtnew();
            if (cdata[0].gold < calchirecost(tc) * 20)
            {
                txt(lang(
                    u8"お金が足りない…"s, u8"You don't have enough money..."s));
            }
            else
            {
                snd(12);
                cdata[0].gold -= calchirecost(tc) * 20;
                await(250);
                cdata[tc].state = 1;
                txtef(2);
                txt(lang(
                    cdatan(0, tc) + u8"を家に迎えた。"s,
                    u8"You hire "s + cdatan(0, tc) + u8"."s));
                snd(64);
            }
        }
        for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
        {
            if (cdata[cnt].state == 10)
            {
                chara_vanquish(cnt);
            }
        }
        calccosthire();
        break;
    }
label_1722_internal:
    tlocinitx = 0;
    tlocinity = 0;
    screenupdate = -1;
    update_screen();
    return turn_result_t::show_house_board;
}



void label_1723()
{
    p = 0;
    gsel(2);
    for (int cnt = 0; cnt < 2772; ++cnt)
    {
        f = 0;
        if (cnt < 231)
        {
            f = 1;
        }
        if (cnt >= 396)
        {
            if (cnt < 429)
            {
                f = 1;
            }
        }
        if (cnt >= 462)
        {
            if (cnt < 495)
            {
                f = 1;
            }
        }
        if (cnt >= 561)
        {
            if (cnt < 726)
            {
                f = 1;
            }
        }
        if (f == 0)
        {
            continue;
        }
        f = 1;
        pget(cnt % 33 * 48, cnt / 33 * 48);
        if (ginfo(16) == 0)
        {
            if (ginfo(17) == 0)
            {
                if (ginfo(18) == 0)
                {
                    f = 0;
                }
            }
        }
        if (chipm(0, cnt) == 2)
        {
            f = 0;
        }
        if (chipm(0, cnt) == 1)
        {
            f = 0;
        }
        if (chipm(1, cnt) == 5)
        {
            f = 0;
        }
        if (gdata_home_scale < 4)
        {
            if (chipm(0, cnt) == 3)
            {
                f = 0;
            }
        }
        if (f)
        {
            list(0, p) = cnt;
            ++p;
        }
        if (chipm(3, cnt) != 0)
        {
            cnt = cnt + chipm(3, cnt) - 1;
            continue;
        }
    }
    listmax = p;
    gsel(0);
    return;
}



void label_1724()
{
    area = -1;
    midbk = mid;
    for (int cnt = 300; cnt < 450; ++cnt)
    {
        if (adata(16, cnt) == 102)
        {
            area = cnt;
            mid = ""s + area + u8"_"s + 101;
            show_shop_log();
        }
    }
    mid = midbk;
    if (adata(16, gdata_current_map) == 102)
    {
        label_1726();
    }
    return;
}



void show_shop_log()
{
    int shoplv = 0;
    int customer = 0;
    int dblistmax = 0;
    worker = getworker(area);
    if (worker == -1)
    {
        txt(lang(
            u8"[店]店には店番がいない。"s,
            u8"[Shop]You shop doesn't have a shopkeeper."s));
        return;
    }
    sold = 0;
    income(0) = 0;
    income(1) = 0;
    listmax = 0;
    shoplv = 100 - gdata(125) / 100;
    customer = 0;
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        customer += rnd(shoplv / 3 + 5);
    }
    customer = customer * (80 + sdata(17, worker) * 3 / 2) / 100;
    if (customer < 1)
    {
        customer = 1;
    }
    if (gdata_current_map != area)
    {
        ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
        ctrl_file(file_operation2_t::_3, u8"inv_"s + mid + u8".s2");
    }
    mode = 6;
    dblistmax = 0;
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number <= 0)
        {
            continue;
        }
        if (inv[cnt].id == 561)
        {
            continue;
        }
        if (inv[cnt].id == 562)
        {
            continue;
        }
        if (inv[cnt].id == 24)
        {
            continue;
        }
        if (inv[cnt].id == 54)
        {
            continue;
        }
        if (inv[cnt].id == 555)
        {
            continue;
        }
        if (inv[cnt].id == 344)
        {
            continue;
        }
        if (inv[cnt].weight < 0)
        {
            continue;
        }
        if (inv[cnt].quality >= 6)
        {
            continue;
        }
        if (inv[cnt].value < 50)
        {
            continue;
        }
        int category = the_item_db[inv[cnt].id]->category;
        if (category == 60000)
        {
            continue;
        }
        dblist(0, dblistmax) = cnt;
        dblist(1, dblistmax) = category;
        ++dblistmax;
    }
    for (int cnt = 0, cnt_end = (customer); cnt < cnt_end; ++cnt)
    {
        if (dblistmax == 0)
        {
            break;
        }
        p = rnd(dblistmax);
        ci = dblist(0, p);
        int category = dblist(1, p);
        int val0 = calcitemvalue(ci, 2);
        val0 = val0 * int((10 + std::sqrt(sdata(156, worker) * 200))) / 100;
        if (val0 <= 1)
        {
            continue;
        }
        if (rnd(val0) > shoplv * 100 + 500)
        {
            continue;
        }
        if (inv[ci].number <= 0)
        {
            continue;
        }
        if (rnd(8))
        {
            continue;
        }
        in = rnd(inv[ci].number) + 1;
        inv[ci].number -= in;
        sold += in;
        val0 = val0 * in;
        if (rnd(4) == 0)
        {
            list(0, listmax) = the_item_db[inv[ci].id]->level;
            list(1, listmax) = inv[ci].quality;
            listn(0, listmax) = std::to_string(category);
            listn(1, listmax) = std::to_string(val0);
            ++listmax;
        }
        else
        {
            income += val0;
        }
        if (area == gdata_current_map)
        {
            for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (cdata[cnt].continuous_action_id == 0
                    || cdata[cnt].continuous_action_turn == 0)
                {
                    continue;
                }
                if (cdata[cnt].continuous_action_item == ci)
                {
                    rowactend(cnt);
                }
            }
        }
    }
    mode = 0;
    if (gdata_current_map != area)
    {
        ctrl_file(file_operation2_t::_4, u8"inv_"s + mid + u8".s2");
    }
    else
    {
        ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
    }
    if (fs::exists(filesystem::dir::tmp() / u8"shop5.s2"))
    {
        ctrl_file(file_operation2_t::_3, u8"shop5.s2");
    }
    else
    {
        for (const auto& cnt : items(-1))
        {
            inv[cnt].number = 0;
        }
    }
    mode = 6;
    if (income != 0)
    {
        flt();
        itemcreate(-1, 54, -1, -1, income);
    }
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        int cnt2 = cnt;
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            flt(list(0, cnt2), list(1, cnt2));
            flttypemajor = elona::stoi(listn(0, cnt2));
            int stat = itemcreate(-1, 0, -1, -1, 0);
            if (stat == 0)
            {
                f = 0;
                break;
            }
            if (inv[ci].value > elona::stoi(listn(1, cnt2)) * 2)
            {
                f = 1;
                break;
            }
            else
            {
                inv[ci].number = 0;
                if (cnt == 3)
                {
                    f = 0;
                    break;
                }
                else
                {
                    continue;
                }
            }
        }
        if (f == 0)
        {
            itemcreate(-1, 54, -1, -1, elona::stoi(listn(1, cnt)));
            income += elona::stoi(listn(1, cnt));
        }
        else
        {
            ++income(1);
        }
    }
    if (sold == 0)
    {
        if (config::instance().hideshopresult == 0)
        {
            txt(lang(
                u8"[店]"s + customer + u8"人が来客したが、"s + cdatan(0, worker)
                    + u8"はアイテムを一つも売れなかった。"s,
                u8"[Shop]"s + customer + u8" customers visited your shop but "s
                    + cdatan(0, worker) + u8" couldn't sell any item."s));
        }
    }
    else
    {
        if (config::instance().hideshopresult <= 1)
        {
            s = ""s + income + lang(u8"gold"s, u8" gold pieces"s);
            if (income(1) != 0)
            {
                s += lang(
                    u8"と"s + income(1) + u8"個のアイテム"s,
                    u8" and "s + income(1) + u8" items"s);
            }
            snd(24);
            txtef(5);
            txt(lang(
                u8"[店]"s + customer + u8"人の来客があり、"s + cdatan(0, worker)
                    + u8"は"s + sold + u8"個のアイテムを売却した。"s + s
                    + u8"が売り上げとして金庫に保管された。"s,
                u8"[Shop]"s + customer + u8" customers visited your shop and "s
                    + cdatan(0, worker) + u8" sold "s + sold + u8" items. "s
                    + cdatan(0, worker) + u8" put "s + s
                    + u8" in the shop strong box."s));
        }
        skillexp(156, worker, clamp(int(std::sqrt(income(0))) * 6, 25, 1000));
    }
    if (sold > (110 - gdata(125) / 100) / 10)
    {
        modrank(5, 30, 2);
    }
    mode = 0;
    ctrl_file(file_operation2_t::_4, u8"shop5.s2");
    ctrl_file(file_operation2_t::_3, u8"shoptmp.s2");
    return;
}



void label_1726()
{
    mdata(10) = (100 - gdata(125) / 100) / 4 + 1;
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            map(cnt, y, 4) = 0;
            map(cnt, y, 9) = 0;
        }
    }
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number <= 0)
        {
            continue;
        }
        x = inv[cnt].position.x;
        y = inv[cnt].position.y;
        if (x < 0 || x >= mdata(0) || y < 0 || y >= mdata(1))
        {
            continue;
        }
        cell_refresh(x, y);
    }
    return;
}



void label_1727(bool val0)
{
    rc = 56;
    fixlv = 2;
    dbmode = 3;
    access_character_info();
    ++dblist(val0 ? 1 : 0, cdata[56].id);
    if (fixlv == 6)
    {
        rtval = 70 + cdata[56].level;
    }
    else
    {
        rtval = cdata[56].level / 10 + 2;
        if (chipc(3, cdata[56].image % 1000) > inf_tiles)
        {
            rtval = rtval / 2 * 3 + 40;
        }
        p = the_character_db[cdata[56].id]->rarity / 1000;
        if (p < 80)
        {
            rtval = rtval + 80 - p;
        }
    }
    if (dblist(val0 ? 1 : 0, cdata[56].id) > 1)
    {
        rtval /= 3;
        if (rtval > 15)
        {
            rtval = 15;
        }
    }
    return;
}



void label_1728()
{
    rankorg = gdata(123);
    rankcur = 0;
    DIM3(dblist, 2, 800);
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        if (inv[cnt].id != 503 && inv[cnt].id != 504)
        {
            continue;
        }
        if (wpeek(map(inv[cnt].position.x, inv[cnt].position.y, 4), 0)
            != inv[cnt].image)
        {
            continue;
        }
        dbid = inv[cnt].subname;
        label_1727(inv[cnt].id != 503);
        if (inv[cnt].id == 503)
        {
            rankcur += rtval;
        }
        else
        {
            rankcur += rtval / 2;
        }
    }
    rankcur = 10000 - int(std::sqrt(rankcur) * 100);
    if (rankcur < 100)
    {
        rankcur = 100;
    }
    gdata(123) = rankcur;
    if (rankorg != rankcur)
    {
        if (rankorg > rankcur)
        {
            txtef(2);
        }
        else
        {
            txtef(8);
        }
        txtnew();
        txt(lang(
            u8"ランク変動("s + rankn(10, 3) + u8" "s + rankorg / 100
                + u8"位 → "s + rankcur / 100 + u8"位 )《"s + ranktitle(3)
                + u8"》"s,
            u8"Museum Rank:"s + cnvrank(rankorg / 100) + u8"->"s
                + cnvrank(rankcur / 100) + u8" Your museum is now known as <"s
                + ranktitle(3) + u8">."s));
    }
    mdata(10) = (100 - gdata(123) / 100) / 2 + 1;
    return;
}



void label_1729(int val0)
{
    int category = the_item_db[inv[val0].id]->category;
    if (category == 60000)
    {
        gdata(77) += clamp(inv[val0].value / 50, 50, 500);
    }
    p = inv[val0].value;
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (category == 60000)
        {
            p /= 20;
            break;
        }
        if (category == 80000)
        {
            p /= 10;
            break;
        }
        if (category == 77000)
        {
            p /= 10;
            break;
        }
        p /= 1000;
    }
    int n = 0;
    if (p > list(1, n))
    {
        list(0, n) = val0;
        list(1, n) = p;
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            if (list(1, cnt) < list(1, n))
            {
                n = cnt;
            }
        }
    }
    return;
}



void label_1730()
{
    if (gdata_current_dungeon_level != 1)
    {
        return;
    }
    rankorg = gdata(124);
    rankcur = 0;
    gdata(77) = 0;
    gdata(78) = 0;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        list(0, cnt) = 0;
        list(1, cnt) = 0;
    }
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        if (wpeek(map(inv[cnt].position.x, inv[cnt].position.y, 4), 0)
            != inv[cnt].image)
        {
            continue;
        }
        label_1729(cnt);
    }
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (list(0, cnt) != 0)
        {
            gdata(78) += clamp(list(1, cnt), 100, 2000);
        }
    }
    if (gdata(77) > 10000)
    {
        gdata(77) = 10000;
    }
    if (gdata(78) > 10000)
    {
        gdata(78) = 10000;
    }
    rankcur =
        10000 - (gdata_basic_point_of_home_rank + gdata(77) + gdata(78)) / 3;
    if (rankcur < 100)
    {
        rankcur = 100;
    }
    gdata(124) = rankcur;
    if (rankorg != rankcur)
    {
        if (rankorg > rankcur)
        {
            txtef(2);
        }
        else
        {
            txtef(8);
        }
        txtnew();
        txt(lang(
            u8"家具("s + gdata(77) / 100 + u8"点) 家宝("s + gdata(78) / 100
                + u8"点) ランク変動("s + rankn(10, 4) + u8" "s + rankorg / 100
                + u8"位 → "s + rankcur / 100 + u8"位 )《"s + ranktitle(4)
                + u8"》"s,
            u8"Furniture Value:"s + gdata(77) / 100 + u8" Heirloom Value:"s
                + gdata(78) / 100 + u8" Home Rank:"s + cnvrank(rankorg / 100)
                + u8"->"s + cnvrank(rankcur / 100)
                + u8" Your home is now known as <"s + ranktitle(4) + u8">."s));
    }
    return;
}



int cbreeder(int prm_984)
{
    std::string s_at_m173;
    int p_at_m173 = 0;
    s_at_m173 = refchara_str(cdata[prm_984].id, 8);
    p_at_m173 = the_race_db[cdatan(2, prm_984)]->breed_power;
    p_at_m173 = p_at_m173 * 100 / (100 + cdata[prm_984].level * 5);
    return p_at_m173;
}



void update_ranch()
{
    worker = getworker(gdata_current_map);
    livestock = 0;
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state != 1)
        {
            continue;
        }
        if (cdata[cnt].is_livestock() == 0)
        {
            continue;
        }
        ++livestock;
    }
    for (int cnt = 0, cnt_end = (renewmulti); cnt < cnt_end; ++cnt)
    {
        if (worker == -1)
        {
            goto label_1734_internal;
        }
        if (rnd(5000)
            > cbreeder(worker) * 100 / (100 + livestock * 20) - livestock * 2)
        {
            if (livestock != 0 || rnd(30) != 0)
            {
                goto label_1734_internal;
            }
        }
        flt(calcobjlv(cdata[worker].level), 1);
        if (rnd(2))
        {
            dbid = cdata[worker].id;
        }
        else
        {
            dbid = 0;
        }
        if (rnd(10) != 0)
        {
            fltnrace = cdatan(2, worker);
        }
        if (cdata[worker].id == 319)
        {
            dbid = 176;
        }
        {
            int stat = characreate(-1, dbid, 4 + rnd(11), 4 + rnd(8));
            if (stat != 0)
            {
                cdata[rc].is_livestock() = true;
                ++livestock;
            }
        }
    label_1734_internal:
        egg = 0;
        for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
            if (cdata[cnt].is_livestock() == 0)
            {
                continue;
            }
            x = rnd(11) + 4;
            y = rnd(8) + 4;
            if (map(x, y, 4) != 0)
            {
                continue;
            }
            flt(calcobjlv(cdata[cnt].level), 2);
            p = rnd(5);
            f = 0;
            if (rnd(egg + 1) > 2)
            {
                continue;
            }
            if (livestock > 10)
            {
                if (rnd(4) == 0)
                {
                    continue;
                }
            }
            if (livestock > 20)
            {
                if (rnd(4) == 0)
                {
                    continue;
                }
            }
            if (livestock > 30)
            {
                if (rnd(4) == 0)
                {
                    continue;
                }
            }
            if (livestock > 40)
            {
                if (rnd(4) == 0)
                {
                    continue;
                }
            }
            if (p == 0)
            {
                if (rnd(60) == 0)
                {
                    f = 1;
                }
                if (cdatan(2, cnt) == u8"chicken"s)
                {
                    if (rnd(20) == 0)
                    {
                        f = 1;
                    }
                }
                if (f)
                {
                    ++egg;
                    int stat = itemcreate(-1, 573, x, y, 0);
                    if (stat)
                    {
                        inv[ci].subname = cdata[cnt].id;
                        inv[ci].weight = cdata[cnt].weight * 10 + 250;
                        inv[ci].value = clamp(
                            cdata[cnt].weight * cdata[cnt].weight / 10000,
                            200,
                            40000);
                    }
                }
                continue;
            }
            if (p == 1)
            {
                if (rnd(60) == 0)
                {
                    f = 1;
                }
                if (cdatan(2, cnt) == u8"sheep"s)
                {
                    if (rnd(20) == 0)
                    {
                        f = 1;
                    }
                }
                if (f)
                {
                    ++egg;
                    int stat = itemcreate(-1, 574, x, y, 0);
                    if (stat)
                    {
                        inv[ci].subname = cdata[cnt].id;
                    }
                }
                continue;
            }
            if (p == 2)
            {
                if (rnd(80) == 0)
                {
                    f = 1;
                }
                if (f)
                {
                    int stat = itemcreate(-1, 575, x, y, 0);
                    if (stat)
                    {
                        inv[ci].subname = cdata[cnt].id;
                        inv[ci].weight = cdata[cnt].weight * 40 + 300;
                        inv[ci].value = clamp(
                            cdata[cnt].weight * cdata[cnt].weight / 5000,
                            1,
                            20000);
                    }
                }
                continue;
            }
            if (p == 3)
            {
                if (rnd(80) == 0)
                {
                    f = 1;
                }
                if (f)
                {
                    dbid = 222;
                    if (rnd(2))
                    {
                        dbid = 45;
                    }
                    itemcreate(-1, dbid, x, y, 0);
                }
                continue;
            }
        }
    }
    return;
}



void set_character_generation_filter()
{
    dbid = 0;
    if (gdata_current_map == 21)
    {
        flt(calcobjlv(10), calcfixlv(2));
        fltn(u8"sf"s);
        return;
    }
    if (mdata(6) == 3 || mdata(6) == 2)
    {
        flt(calcobjlv(10), calcfixlv(2));
        fltselect = 5;
        if (gdata_current_dungeon_level == 1)
        {
            if (gdata_current_map == 12)
            {
                if (rnd(2))
                {
                    dbid = 269;
                    return;
                }
            }
            if (gdata_current_map == 33)
            {
                if (rnd(3) == 0)
                {
                    dbid = 270;
                    return;
                }
            }
            if (gdata_current_map == 14)
            {
                if (rnd(3) == 0)
                {
                    dbid = 271;
                    return;
                }
                else if (rnd(2) == 0)
                {
                    dbid = 335;
                    return;
                }
            }
            if (gdata_current_map == 36)
            {
                if (rnd(3) == 0)
                {
                    dbid = 272;
                    return;
                }
            }
            if (gdata_current_map == 5)
            {
                if (rnd(2))
                {
                    dbid = 273;
                    return;
                }
            }
            if (gdata_current_map == 15)
            {
                if (rnd(3) == 0)
                {
                    dbid = 274;
                    return;
                }
            }
        }
        if (gdata_current_map == 36)
        {
            if (gdata_current_dungeon_level == 3)
            {
                dbid = 289;
            }
        }
        if (gdata_current_map == 14)
        {
            if (gdata_current_dungeon_level == 3)
            {
                dbid = 293;
            }
        }
        if (gdata_current_map == 11)
        {
            if (gdata_current_dungeon_level == 3)
            {
                dbid = 295;
            }
        }
        return;
    }
    if (gdata_current_map == 3)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        if (gdata_current_dungeon_level < 4)
        {
            if (objlv > 5)
            {
                objlv = 5;
            }
        }
        return;
    }
    if (gdata_current_map == 42)
    {
        flt(calcobjlv(gdata_current_dungeon_level % 50 + 5), calcfixlv(2));
        return;
    }
    if (gdata_current_map == 19)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        return;
    }
    if (gdata_current_map == 17)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        fltn(u8"undead"s);
        return;
    }
    if (gdata_current_map == 16)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        fltn(u8"fire"s);
        return;
    }
    if (gdata_current_map == 18)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        if (rnd(2) == 0)
        {
            fltn(u8"man"s);
        }
        return;
    }
    if (gdata_current_map == 37)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        flttypemajor = 13;
        return;
    }
    if (gdata_current_map == 10 || gdata_current_map == 20)
    {
        flt(calcobjlv(20), calcfixlv(2));
        fltselect = 4;
        return;
    }
    if (gdata_current_map == 13)
    {
        if (gdata_executing_immediate_quest_type >= 1000)
        {
            flt(calcobjlv(qdata(5, gdata_executing_immediate_quest) + 1),
                calcfixlv(2));
        }
        if (gdata_executing_immediate_quest_type == 1006)
        {
            fltn(u8"wild"s);
            objlv = clamp(objlv / 4, 1, 8);
        }
        return;
    }
    if (adata(16, gdata_current_map) == 28)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        if (rnd(2))
        {
            fltn(u8"yeek"s);
        }
        return;
    }
    if (adata(16, gdata_current_map) == 38)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        if (rnd(2))
        {
            fltn(u8"mino"s);
        }
        return;
    }
    if (mdata(6) >= 20)
    {
        flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(2));
        return;
    }
    if (adata(16, gdata_current_map) == 101
        || adata(16, gdata_current_map) == 102)
    {
        flt(calcobjlv(100), calcfixlv(2));
        if (rnd(1))
        {
            fltselect = 5;
        }
        else
        {
            fltselect = 7;
        }
        return;
    }
    flt(calcobjlv(cdata[0].level), calcfixlv(2));
    return;
}



void monster_respawn()
{
    if (adata(16, gdata_current_map) == 101
        || adata(16, gdata_current_map) == 102)
    {
        if (gdata_other_character_count < mdata(10) / 2)
        {
            if (rnd(2) == 0)
            {
                set_character_generation_filter();
                characreate(-1, dbid, -2, 0);
            }
        }
    }
    if (mdata(10) == 0)
    {
        return;
    }
    if (gdata_other_character_count < mdata(10) / 4)
    {
        if (rnd(2) == 0)
        {
            set_character_generation_filter();
            characreate(-1, dbid, -2, 0);
        }
    }
    if (gdata_other_character_count < mdata(10) / 2)
    {
        if (rnd(4) == 0)
        {
            set_character_generation_filter();
            characreate(-1, dbid, -2, 0);
        }
    }
    if (gdata_other_character_count < mdata(10))
    {
        if (rnd(8) == 0)
        {
            set_character_generation_filter();
            characreate(-1, dbid, -2, 0);
        }
    }
    return;
}



turn_result_t exit_map()
{
    int fixstart = 0;
    gdata_left_minutes_of_executing_quest = 0;
    gdata(171) = 0;
    if (mdata(6) == 5)
    {
        if (config::instance().extrahelp)
        {
            if (gdata(201) == 0)
            {
                if (mode == 0)
                {
                    if (cdata[0].continuous_action_turn == 0)
                    {
                        gdata(201) = 1;
                        ghelp = 1;
                        show_ex_help();
                    }
                }
            }
        }
    }
    msg_newline();
    msgtemp = u8"  "s;
    if (gdata_current_map == 35 || gdata_current_map == 6
        || gdata_current_map == 40)
    {
        usermapid = 0;
    }
    rdtry = 0;
    fixstart = 0;
    if (adata(16, gdata_current_map) == 8)
    {
        if (gdata_current_dungeon_level == adata(10, gdata_current_map))
        {
            if (adata(20, gdata_current_map) > 0)
            {
                chara_vanquish(adata(20, gdata_current_map));
                adata(20, gdata_current_map) = -1;
            }
        }
    }
    gdata_previous_map = gdata_current_map;
    if (gdata_previous_map == 30)
    {
        gdata_current_map = gdata_previous_map2;
        gdata_current_dungeon_level = gdata_previous_dungeon_level;
        mapstartx = gdata_previous_x;
        mapstarty = gdata_previous_y;
        gdata_entrance_type = 7;
        fixstart = 1;
        levelexitby = 5;
    }
    if (levelexitby == 4)
    {
        cell_featread(cdata[0].position.x, cdata[0].position.y);
        if (gdata_current_map == 7)
        {
            if (mapitemfind(cdata[cc].position.x, cdata[cc].position.y, 751)
                != -1)
            {
                feat(1) = 11;
                feat(2) = 0;
            }
            if (mapitemfind(cdata[cc].position.x, cdata[cc].position.y, 750)
                != -1)
            {
                feat(1) = 10;
                feat(2) = 0;
            }
        }
        f = 0;
        if (feat(1) == 11)
        {
            msgtemp +=
                lang(u8"階段を降りた。"s, u8"You walk down the stairs. "s);
            f = 1;
            gdata_entrance_type = 1;
            mdata(4) = cdata[0].position.y * 1000 + cdata[0].position.x;
            if (feat(2) == 0)
            {
                ++gdata_current_dungeon_level;
                gdata_current_dungeon_level -=
                    (adata(3, gdata_current_map) == 2) * 2;
            }
            else
            {
                gdata_current_dungeon_level = feat(2);
            }
        }
        if (feat(1) == 10)
        {
            msgtemp += lang(u8"階段を昇った。"s, u8"You walk up the stairs. "s);
            f = 1;
            gdata_entrance_type = 2;
            mdata(5) = cdata[0].position.y * 1000 + cdata[0].position.x;
            if (feat(2) == 0)
            {
                --gdata_current_dungeon_level;
                gdata_current_dungeon_level +=
                    (adata(3, gdata_current_map) == 2) * 2;
            }
            else
            {
                gdata_current_dungeon_level = feat(2);
            }
        }
        if (f == 0)
        {
            if (mdata(6) == 1)
            {
                gdata_pc_home_x = cdata[cc].position.x;
                gdata_pc_home_y = cdata[cc].position.y;
                gdata_current_dungeon_level = 1;
                if (feat(2) != 0 || feat(3) != 0)
                {
                    gdata_current_map = feat(2) + feat(3) * 100;
                    if (adata(16, gdata_current_map) == 42)
                    {
                        if (itemfind(0, 742) == -1)
                        {
                            txt(lang(
                                u8"あなたはこの洞窟の探索を許可されていない。"s,
                                u8"You are not permitted to explore this dungeon."s));
                            msg_halt();
                            gdata_current_map = 2;
                        }
                    }
                    if (adata(16, gdata_current_map) == 37)
                    {
                        if (gdata_pyramid_trial == 0)
                        {
                            txt(lang(
                                u8"あなたはピラミッドへの招待状を持っていない。"s,
                                u8"You don't have an invitation."s));
                            msg_halt();
                            gdata_current_map = 2;
                        }
                    }
                    if (adata(16, gdata_current_map) == 41)
                    {
                        txt(lang(
                            u8"あなたはガードに追い返された。"s,
                            u8"The guards turn you away from the jail."s));
                        msg_halt();
                        gdata_current_map = 2;
                    }
                }
                else
                {
                    gdata_current_map = 2;
                }
                if (feat(1) != 15)
                {
                    gdata_current_map = 2;
                }
            }
            if (mdata(6) == 3 || mdata(6) == 4 || mdata(6) == 5 || mdata(6) == 6
                || mdata(6) == 2)
            {
                gdata_current_map = gdata(850);
            }
        }
        if (mdata(6) >= 20 || mdata(6) == 6)
        {
            if (gdata_current_dungeon_level < adata(17, gdata_current_map))
            {
                gdata_current_map = gdata(850);
            }
        }
        if (adata(0, gdata_current_map) == 3)
        {
            if (gdata_current_map == gdata_previous_map)
            {
                if (gdata_current_dungeon_level == 1)
                {
                    msgtemp += lang(
                        mapname(gdata_current_map) + u8"の表層に戻った。"s,
                        u8"You returned to the surface of "s
                            + mapname(gdata_current_map));
                }
                else
                {
                    msgtemp += lang(
                        mapname(gdata_current_map) + u8"の表層を後にした。"s,
                        u8"You left the surface of "s
                            + mapname(gdata_current_map) + u8"."s);
                }
            }
        }
    }
    if (mdata(6) == 7)
    {
        rq = gdata_executing_immediate_quest;
        label_2674();
        gdata_current_map = gdata_previous_map2;
        gdata_current_dungeon_level = gdata_previous_dungeon_level;
        mapstartx = gdata_previous_x;
        mapstarty = gdata_previous_y;
        gdata_entrance_type = 7;
        fixstart = 1;
    }
    if (levelexitby == 2)
    {
        gdata_current_map = gdata_destination_map;
        gdata_current_dungeon_level = gdata_destination_dungeon_level;
        if (gdata_executing_immediate_quest_type == 0)
        {
            if (gdata_previous_map != 2)
            {
                gdata_pc_home_x = adata(1, gdata_current_map);
                gdata_pc_home_y = adata(2, gdata_current_map);
                label_2735();
            }
        }
        if (gdata_current_map == 41)
        {
            mapstartx = 29;
            mapstarty = 3;
            gdata_entrance_type = 7;
            fixstart = 1;
        }
    }
    if (cdata[0].state == 0)
    {
        rc = 0;
        label_1540();
        gdata_current_map = 7;
        gdata(850) = adata(30, 7);
        gdata_current_dungeon_level = 1;
    }
    if (rdtry > 1)
    {
        msgtemp += u8"(再生成"s + rdtry + u8"回)"s;
    }
    if (gdata_current_map != gdata_previous_map)
    {
        if (mdata(6) == 3 || gdata_departure_date == 0
            || gdata_previous_map == 7 || mdata(6) == 2)
        {
            gdata_departure_date = gdata_hour + gdata_day * 24
                + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12;
            gdata_distance_between_town = 0;
            gdata_left_town_map = gdata_previous_map;
        }
        if (adata(0, gdata_current_map) != 1 && adata(0, gdata_current_map) != 4
            && gdata_current_map != 35)
        {
            autosave = 1 * (gdata_current_map != 35);
        }
        if (mdata(6) != 1)
        {
            if (mdata(6) != 4 || mdata(6) == 5)
            {
                if (fixtransfermap == 0)
                {
                    gdata_pc_home_x = adata(1, gdata_previous_map);
                    gdata_pc_home_y = adata(2, gdata_previous_map);
                }
                else
                {
                    fixtransfermap = 0;
                }
            }
        }
        if (fixstart == 0)
        {
            gdata_entrance_type = adata(3, gdata_current_map);
        }
        if (evfind(6))
        {
            msgtemp += lang(
                u8"あなたは家まで運ばれた。"s,
                u8"You were delivered to your home."s);
            label_2735();
        }
        else if (adata(0, gdata_previous_map) == 1)
        {
            msgtemp += lang(
                mapname(gdata_current_map) + u8"に入った。"s,
                u8"You entered "s + mapname(gdata_current_map) + u8"."s);
        }
        else if (mdata(6) == 7)
        {
            msgtemp += lang(
                mapname(gdata_current_map) + u8"に戻った。"s,
                u8"You returned to "s + mapname(gdata_current_map));
        }
        else
        {
            msgtemp += lang(
                mapname(gdata_previous_map) + u8"を後にした。"s,
                u8"You left "s + mapname(gdata_previous_map) + u8"."s);
        }
        if (gdata_cargo_weight > gdata_current_cart_limit)
        {
            if (adata(0, gdata_current_map) == 1
                || adata(0, gdata_current_map) == 4)
            {
                msgtemp += lang(
                    u8"荷車の重量超過でかなり鈍足になっている！ "s,
                    u8"The weight of your cargo burdens your traveling speed."s);
            }
        }
    }
    if (gdata_current_map == 25)
    {
        if (gdata_current_dungeon_level == 2)
        {
            gdata_current_map = 26;
            gdata_current_dungeon_level = adata(10, gdata_current_map) - 1;
            gdata_entrance_type = 1;
            msgtemp += lang(
                u8"マウンテンパスに降りた。"s,
                u8"You entered the Mountain Pass."s);
        }
    }
    if (gdata_current_map == 26)
    {
        if (gdata_current_dungeon_level == adata(10, gdata_current_map))
        {
            gdata_current_map = 25;
            gdata_current_dungeon_level = 1;
            gdata_entrance_type = 2;
            msgtemp += lang(
                u8"ラーナの村に辿りついた。"s,
                u8"You reached the town of Larna."s);
        }
    }
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        cdata[cnt].hate = 0;
        cdata[cnt].enemy_id = 0;
        rowactend(cnt);
        if (cdata[cnt].state != 1)
        {
            if (cdata[cnt].state == 8)
            {
                cdata[cnt].state = 1;
            }
            continue;
        }
        map(cdata[cnt].position.x, cdata[cnt].position.y, 1) = 0;
        if (cnt != 0)
        {
            if (cdata[cnt].current_map != 0)
            {
                cdata[cnt].state = 9;
            }
        }
    }
    if (mdata(7) == 1)
    {
        label_1739();
    }
    else
    {
        label_1738();
        if (fs::exists(filesystem::dir::tmp() / (u8"mdata_"s + mid + u8".s2")))
        {
            ctrl_file(file_operation_t::_11);
        }
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].state != 0)
            {
                --npcmemory(1, cdata[cnt].id);
            }
        }
    }
    mode = 2;
    return turn_result_t::initialize_map;
}



void label_1738()
{
    for (int cnt = 0; cnt < 57; ++cnt)
    {
        rowactend(cnt);
        cdata[cnt].item_which_will_be_used = 0;
    }
    for (int cnt = 16; cnt < 55; ++cnt)
    {
        if (cdata[cnt].state == 1)
        {
            map(cdata[cnt].position.x, cdata[cnt].position.y, 1) = 0;
            cdata[cnt].state = 3;
        }
    }
    return;
}



void label_1739()
{
    label_1738();
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            map(cnt, y, 7) = 0;
        }
    }
    ctrl_file(file_operation_t::_2);
    ctrl_file(file_operation2_t::_4, u8"inv_"s + mid + u8".s2");
    return;
}



void label_1745()
{
    if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12
        >= adata(25, gdata_current_map))
    {
        adata(24, gdata_current_map) = rnd(10000);
        adata(25, gdata_current_map) = gdata_hour + gdata_day * 24
            + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12 + 24;
    }
    if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12
        >= mdata(3))
    {
        if (mdata(17) == 0)
        {
            if (mdata(3) != 0)
            {
                for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
                {
                    y = cnt;
                    for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end;
                         ++cnt)
                    {
                        if (map(cnt, y, 6) != 0)
                        {
                            cell_featread(cnt, y);
                            if (feat(1) >= 24 && feat(1) <= 28)
                            {
                                cell_featclear(cnt, y);
                            }
                        }
                    }
                }
                for (const auto& cnt : items(-1))
                {
                    if (inv[cnt].number == 0)
                    {
                        continue;
                    }
                    if (inv[cnt].id == 526)
                    {
                        if (inv[cnt].param1 < 10)
                        {
                            inv[cnt].param1 += 1;
                            inv[cnt].image = 591;
                            cell_refresh(
                                inv[cnt].position.x, inv[cnt].position.y);
                        }
                    }
                    if (mdata(6) == 3 || mdata(6) == 2)
                    {
                        if (inv[cnt].own_state < 0)
                        {
                            ++inv[cnt].own_state;
                        }
                        if (inv[cnt].own_state == 0)
                        {
                            inv[cnt].number = 0;
                            cell_refresh(
                                inv[cnt].position.x, inv[cnt].position.y);
                        }
                    }
                }
            }
            for (int cnt = ELONA_MAX_PARTY_CHARACTERS;
                 cnt < ELONA_MAX_CHARACTERS;
                 ++cnt)
            {
                rc = cnt;
                label_1539();
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (cdata[cnt].is_temporary() == 1)
                {
                    if (rnd(2))
                    {
                        cdata[cnt].state = 0;
                        map(cdata[cnt].position.x, cdata[cnt].position.y, 1) =
                            0;
                    }
                }
            }
            p = rnd(mdata(1) * mdata(0) / 400 + 3);
            if (mdata(6) == 1)
            {
                p = rnd(40);
            }
            if (mdata(6) == 3)
            {
                p = rnd(rnd(rnd(12) + 1) + 1);
            }
            if (mdata(6) == 2)
            {
                p = rnd(p + 1);
            }
            for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
            {
                map_randsite();
            }
        }
        mdata(3) = gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12 + 120;
    }
    if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12
        >= mdata(16))
    {
        if (mdata(16) == 0)
        {
            renewmulti = 1;
        }
        else
        {
            renewmulti = (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                          + gdata_year * 24 * 30 * 12 - mdata(16))
                    / 24
                + 1;
        }
        if (adata(16, gdata_current_map) == 31)
        {
            update_ranch();
        }
        if (adata(16, gdata_current_map) == 7)
        {
            for (int cnt = ELONA_MAX_PARTY_CHARACTERS;
                 cnt < ELONA_MAX_CHARACTERS;
                 ++cnt)
            {
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (cdata[cnt].is_temporary() == 1)
                {
                    cdata[cnt].state = 0;
                    map(cdata[cnt].position.x, cdata[cnt].position.y, 1) = 0;
                }
            }
        }
        if (mdata(17) == 0)
        {
            for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
            {
                y = cnt;
                for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
                {
                    if (map(cnt, y, 6) != 0)
                    {
                        cell_featread(cnt, y);
                        x = cnt;
                        if (feat(1) == 29)
                        {
                            for (int cnt = 0, cnt_end = (renewmulti);
                                 cnt < cnt_end;
                                 ++cnt)
                            {
                                if (feat >= tile_plant + 2)
                                {
                                    break;
                                }
                                label_2233(chipm(0, map(x, y, 0)) == 2 ? 1 : 0);
                            }
                            cell_featset(
                                cnt, y, feat, feat(1), feat(2), feat(3));
                        }
                    }
                }
            }
            if (mdata(6) == 3 || mdata(6) == 2 || gdata_current_map == 7)
            {
                for (int cnt = ELONA_MAX_PARTY_CHARACTERS;
                     cnt < ELONA_MAX_CHARACTERS;
                     ++cnt)
                {
                    if (cdata[cnt].state != 1)
                    {
                        continue;
                    }
                    generatemoney(cnt);
                    if (cdata[cnt].id == 326)
                    {
                        if (itemfind(cnt, 60005, 1) == -1)
                        {
                            if (rnd(150) == 0)
                            {
                                flt();
                                itemcreate(cnt, 707, -1, -1, 0);
                            }
                            else
                            {
                                flt(calcobjlv(cdata[cnt].level), calcfixlv());
                                flttypeminor = 60005;
                                itemcreate(cnt, 0, -1, -1, 0);
                            }
                        }
                    }
                    rc = cnt;
                    if (rnd(5) == 0)
                    {
                        supply_new_equipment();
                    }
                    if (rnd(2) == 0)
                    {
                        if (inv_sum(rc) < 8)
                        {
                            flt(calcobjlv(cdata[rc].level), calcfixlv(2));
                            int stat = itemcreate(rc, 0, -1, -1, 0);
                            if (stat != 0)
                            {
                                if (inv[ci].weight <= 0
                                    || inv[ci].weight >= 4000)
                                {
                                    inv[ci].number = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        mdata(16) = gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12 + 24;
    }
    return;
}



void label_1746()
{
    gsel(6);
    if (mdata(2) != mtilefilecur)
    {
        pos(0, 0);
        picload(
            filesystem::dir::graphic() / (u8"map"s + mdata(2) + u8".bmp"), 1);
        mtilefilecur = mdata(2);
        initialize_map_chip();
    }
    map_tileset(mdata(12));
    gsel(2);
    gmode(0);
    pos(0, 0);
    gcopy(6, 0, 0, 33 * inf_tiles, 25 * inf_tiles);
    p(0) = 5;
    p(1) = 5;
    p(2) = 5;
    shade = 15;
    if (mdata(14) == 2)
    {
        if (gdata_hour >= 24)
        {
            p(0) = 110;
            p(1) = 90;
            p(2) = 60;
            shade = 8;
        }
        if (gdata_hour >= 0 && gdata_hour < 4)
        {
            p(0) = 110;
            p(1) = 90;
            p(2) = 60;
            shade = 8;
        }
        if (gdata_hour >= 4 && gdata_hour < 10)
        {
            p(0) = 70 - (gdata_hour - 3) * 10;
            p(1) = 80 - (gdata_hour - 3) * 12;
            p(2) = 60 - (gdata_hour - 3) * 10;
            if (p < 10)
            {
                p = 10;
                shade = (gdata_hour - 3) * 2 + 8;
            }
        }
        if (gdata_hour >= 10 && gdata_hour < 12)
        {
            p(0) = 10;
            p(1) = 10;
            p(2) = 10;
            shade = 25;
        }
        if (gdata_hour >= 12 && gdata_hour < 17)
        {
            p(0) = 0;
            p(1) = 0;
            p(2) = 0;
            shade = 25;
        }
        if (gdata_hour >= 17 && gdata_hour < 21)
        {
            p(0) = 0 + (gdata_hour - 17) * 20;
            p(1) = 15 + (gdata_hour - 16) * 15;
            p(2) = 10 + (gdata_hour - 16) * 10;
            shade = 12;
        }
        if (gdata_hour >= 21 && gdata_hour < 24)
        {
            p(0) = 80 + (gdata_hour - 21) * 10;
            p(1) = 70 + (gdata_hour - 21) * 10;
            p(2) = 40 + (gdata_hour - 21) * 5;
            shade = 7;
        }
        if (gdata_weather == 3)
        {
            if (p < 40)
            {
                p(0) = 40;
                p(1) = 40;
                p(2) = 40;
            }
        }
        if (gdata_weather == 4)
        {
            if (p < 65)
            {
                p(0) = 65;
                p(1) = 65;
                p(2) = 65;
            }
        }
        if (gdata_current_map == 33)
        {
            if (gdata_hour >= 17 || gdata_hour < 7)
            {
                p += 35;
                p(1) += 35;
                p(2) += 35;
            }
        }
    }
    pos(0, 0);
    gfini(33 * inf_tiles, 25 * inf_tiles);
    gfdec2(p, p(1), p(2));
    gmode(4, -1, -1, 30);
    if (mdata(2) == 0)
    {
        pos(0, 192);
        gcopy(6, 0, 192, 1360, 48);
    }
    if (mdata(2) == 1)
    {
        pos(0, 1056);
        gcopy(6, 0, 1056, 1360, 48);
    }
    if (mdata(2) != 2)
    {
        pos(0, 336);
        gcopy(6, 0, 336, 1360, 48);
    }
    gmode(0);
    gsel(0);
    gmode(2, 24, 24);
    return;
}



int initialize_world_map()
{
    p = 0;
    for (int cnt = 450; cnt < 500; ++cnt)
    {
        if (adata(16, cnt) == 8)
        {
            if (adata(20, cnt) != -1)
            {
                ++p;
            }
        }
    }
    p = 40 - p;
    if (p < 1)
    {
        p = 1;
    }
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        cxinit = rnd(mdata(0));
        cyinit = rnd(mdata(1));
        label_1753();
    }
    label_1749();
    return 1;
}



void label_1748()
{
    if (gdata(79) == 1)
    {
        initialize_adata();
        label_1749();
        for (int cnt = 450; cnt < 500; ++cnt)
        {
            adata(16, cnt) = 0;
        }
    }
    p = 0;
    for (int cnt = 450; cnt < 500; ++cnt)
    {
        if (adata(16, cnt) == 0)
        {
            continue;
        }
        if (adata(16, cnt) == 8)
        {
            if (adata(20, cnt) != -1)
            {
                ++p;
            }
        }
    }
    if (p <= 25 || rnd(150) == 0 || gdata_diastrophism_flag != 0 || gdata(79))
    {
        gdata_diastrophism_flag = 0;
        msgtemp += lang(
            u8"この大陸に大きな地殻変動が起こった。"s,
            u8"A sudden diastrophism hits the continent."s);
        for (int cnt = 450; cnt < 500; ++cnt)
        {
            if (adata(16, cnt) == 8)
            {
                if (rnd(5) == 0 || adata(20, cnt) == -1)
                {
                    adata(16, cnt) = 0;
                }
            }
        }
        initialize_world_map();
        label_1749();
    }
    gdata(79) = 0;
    return;
}



void label_1749()
{
    label_1751();
    label_1750();
    return;
}



void label_1750()
{
    initialize_map_chip();
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        int cnt2 = cnt;
        if (gdata(850) != 4)
        {
            break;
        }
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            if (bddata(0, cnt2, cnt) != 0)
            {
                p = bddata(0, cnt2, cnt);
                cell_featset(
                    bddata(1, cnt2, cnt),
                    bddata(2, cnt2, cnt),
                    bddata(3, cnt2, cnt),
                    34,
                    cnt2,
                    cnt);
            }
        }
    }
    for (int cnt = 0; cnt < 500; ++cnt)
    {
        if (adata(16, cnt) == 0 || adata(15, cnt) == 0)
        {
            continue;
        }
        if (adata(30, cnt) != gdata(850))
        {
            continue;
        }
        if (adata(16, cnt) == 900)
        {
            adata(16, cnt) = 40;
            continue;
        }
        if (adata(16, cnt) >= 900)
        {
            adata(16, cnt) -= 800;
            continue;
        }
        if (adata(1, cnt) <= 0 || adata(2, cnt) <= 0
            || adata(1, cnt) >= mdata(0) || adata(2, cnt) >= mdata(1))
        {
            adata(1, cnt) = mdata(0) / 2;
            adata(2, cnt) = mdata(1) / 2;
        }
        p = cnt;
        if (chipm(7, map(adata(1, cnt), adata(2, cnt), 0)) & 4
            || map(adata(1, cnt), adata(2, cnt), 6) != 0)
        {
            for (int cnt = 0;; ++cnt)
            {
                await();
                dx = clamp(rnd(cnt / 4 + 1) + 1, 1, mdata(0));
                dy = clamp(rnd(cnt / 4 + 1) + 1, 1, mdata(1));
                x = adata(1, p) + rnd(dx) - rnd(dx);
                y = adata(2, p) + rnd(dy) - rnd(dy);
                if (x <= 0 || y <= 0 || x >= mdata(0) - 1 || y >= mdata(1) - 1)
                {
                    continue;
                }
                if (33 <= map(x, y, 0) && map(x, y, 0) < 66)
                {
                    continue;
                }
                if (chipm(7, map(x, y, 0)) & 4)
                {
                    continue;
                }
                if (map(x, y, 6) != 0)
                {
                    continue;
                }
                adata(1, p) = x;
                adata(2, p) = y;
                break;
            }
        }
        if ((33 > map(adata(1, cnt), adata(2, cnt), 0)
             || map(adata(1, cnt), adata(2, cnt), 0) >= 66)
            && chipm(0, map(adata(1, cnt), adata(2, cnt), 0)) != 4
            && chipm(1, map(adata(1, cnt), adata(2, cnt), 0)) != 9)
        {
            map(adata(1, cnt), adata(2, cnt), 0) = 33;
        }
        cell_featset(
            adata(1, cnt),
            adata(2, cnt),
            adata(15, cnt),
            15,
            cnt % 100,
            cnt / 100);
        if (adata(0, cnt) == 3 || adata(0, cnt) == 2)
        {
            map(adata(1, cnt), adata(2, cnt), 9) = 11;
        }
    }
    return;
}



void label_1751()
{
    for (int cnt = 0, cnt_end = (mdata(1)); cnt < cnt_end; ++cnt)
    {
        y = cnt;
        for (int cnt = 0, cnt_end = (mdata(0)); cnt < cnt_end; ++cnt)
        {
            x = cnt;
            cell_featread(x, y);
            if (feat(1) < 24 || feat(1) > 28)
            {
                map(x, y, 6) = 0;
            }
            map(x, y, 9) = 0;
        }
    }
    return;
}



void initialize_adata()
{
    p = 47;
    adata(16, p) = 47;
    adata(15, p) = 0;
    adata(0, p) = 1;
    adata(1, p) = 26;
    adata(2, p) = 23;
    adata(3, p) = 6;
    adata(4, p) = 2;
    adata(18, p) = 1;
    adata(9, p) = 50000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 47;
    p = 48;
    adata(16, p) = 48;
    adata(15, p) = 158;
    adata(0, p) = 2;
    adata(1, p) = 28;
    adata(2, p) = 1;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 47;
    p = 44;
    adata(16, p) = 44;
    adata(15, p) = 0;
    adata(0, p) = 1;
    adata(1, p) = 26;
    adata(2, p) = 23;
    adata(3, p) = 6;
    adata(4, p) = 2;
    adata(18, p) = 1;
    adata(9, p) = 50000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 44;
    p = 45;
    adata(16, p) = 45;
    adata(15, p) = 158;
    adata(0, p) = 2;
    adata(1, p) = 42;
    adata(2, p) = 1;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 44;
    p = 46;
    adata(16, p) = 46;
    adata(15, p) = 159;
    adata(0, p) = 2;
    adata(1, p) = 39;
    adata(2, p) = 13;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 44;
    p = 4;
    adata(16, p) = 4;
    adata(15, p) = 0;
    adata(0, p) = 1;
    adata(1, p) = 26;
    adata(2, p) = 23;
    adata(3, p) = 6;
    adata(4, p) = 2;
    adata(18, p) = 1;
    adata(9, p) = 50000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 5;
    adata(16, p) = 5;
    adata(15, p) = 132;
    adata(0, p) = 3;
    adata(1, p) = 26;
    adata(2, p) = 23;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 999;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 1;
    adata(30, p) = 4;
    p = 12;
    adata(16, p) = 12;
    adata(15, p) = 142;
    adata(0, p) = 3;
    adata(1, p) = 43;
    adata(2, p) = 32;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 999;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 2;
    adata(30, p) = 4;
    p = 15;
    adata(16, p) = 15;
    adata(15, p) = 136;
    adata(0, p) = 3;
    adata(1, p) = 53;
    adata(2, p) = 24;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 3;
    adata(30, p) = 4;
    p = 14;
    adata(16, p) = 14;
    adata(15, p) = 142;
    adata(0, p) = 3;
    adata(1, p) = 14;
    adata(2, p) = 35;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 999;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 4;
    adata(30, p) = 4;
    p = 11;
    adata(16, p) = 11;
    adata(15, p) = 132;
    adata(0, p) = 3;
    adata(1, p) = 3;
    adata(2, p) = 15;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 999;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 5;
    adata(30, p) = 4;
    p = 33;
    adata(16, p) = 33;
    adata(15, p) = 156;
    adata(0, p) = 3;
    adata(1, p) = 89;
    adata(2, p) = 14;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 6;
    adata(30, p) = 4;
    p = 36;
    adata(16, p) = 36;
    adata(15, p) = 132;
    adata(0, p) = 3;
    adata(1, p) = 61;
    adata(2, p) = 32;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 999;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(28, p) = 7;
    adata(30, p) = 4;
    p = 2;
    adata(16, p) = 2;
    adata(15, p) = 0;
    adata(0, p) = 4;
    adata(1, p) = 0;
    adata(2, p) = 0;
    adata(3, p) = 4;
    adata(4, p) = 1;
    adata(18, p) = 4;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 7;
    adata(16, p) = 7;
    adata(0, p) = 5;
    adata(3, p) = 8;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 10;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    if (gdata_home_scale == 0)
    {
        adata(15, p) = 138;
        adata(1, p) = 22;
        adata(2, p) = 21;
        adata(4, p) = 1;
        adata(18, p) = 3;
        adata(30, p) = 4;
    }
    p = 35;
    adata(16, p) = 35;
    adata(0, p) = 7;
    adata(3, p) = 8;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 1;
    adata(15, p) = 158;
    adata(1, p) = 35;
    adata(2, p) = 27;
    adata(4, p) = 1;
    adata(18, p) = 3;
    adata(30, p) = 4;
    p = 6;
    adata(16, p) = 6;
    adata(15, p) = 0;
    adata(0, p) = 7;
    adata(1, p) = 22;
    adata(2, p) = 21;
    adata(3, p) = 4;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 40;
    adata(16, p) = 40;
    adata(15, p) = 0;
    adata(0, p) = 7;
    adata(1, p) = 23;
    adata(2, p) = 21;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 13;
    adata(16, p) = 13;
    adata(15, p) = 0;
    adata(0, p) = 7;
    adata(1, p) = 22;
    adata(2, p) = 21;
    adata(3, p) = 4;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 3;
    adata(16, p) = 3;
    adata(15, p) = 139;
    adata(0, p) = 20;
    adata(1, p) = 23;
    adata(2, p) = 29;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 45;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 42;
    adata(16, p) = 42;
    adata(15, p) = 139;
    adata(0, p) = 20;
    adata(1, p) = 81;
    adata(2, p) = 51;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 50;
    adata(10, p) = 99999999;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 16;
    adata(16, p) = 16;
    adata(15, p) = 145;
    adata(0, p) = 21;
    adata(1, p) = 43;
    adata(2, p) = 4;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 15;
    adata(10, p) = 18;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 17;
    adata(16, p) = 17;
    adata(15, p) = 141;
    adata(0, p) = 20;
    adata(1, p) = 37;
    adata(2, p) = 20;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 25;
    adata(10, p) = 30;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 18;
    adata(16, p) = 18;
    adata(15, p) = 144;
    adata(0, p) = 23;
    adata(1, p) = 26;
    adata(2, p) = 44;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 17;
    adata(10, p) = 22;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 19;
    adata(16, p) = 19;
    adata(15, p) = 146;
    adata(0, p) = 20;
    adata(1, p) = 13;
    adata(2, p) = 32;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 30;
    adata(10, p) = 33;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 26;
    adata(16, p) = 26;
    adata(15, p) = 146;
    adata(0, p) = 20;
    adata(1, p) = 64;
    adata(2, p) = 43;
    adata(3, p) = 2;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 25;
    adata(10, p) = 29;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 27;
    adata(16, p) = 27;
    adata(15, p) = 146;
    adata(0, p) = 20;
    adata(1, p) = 29;
    adata(2, p) = 24;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 2;
    adata(10, p) = 5;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 38;
    adata(16, p) = 38;
    adata(15, p) = 146;
    adata(0, p) = 20;
    adata(1, p) = 43;
    adata(2, p) = 39;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 23;
    adata(10, p) = 27;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 28;
    adata(16, p) = 28;
    adata(15, p) = 146;
    adata(0, p) = 20;
    adata(1, p) = 38;
    adata(2, p) = 31;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 5;
    adata(10, p) = 5;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 37;
    adata(16, p) = 37;
    adata(15, p) = 160;
    adata(0, p) = 20;
    adata(1, p) = 4;
    adata(2, p) = 11;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 0;
    adata(9, p) = 10000;
    adata(17, p) = 20;
    adata(10, p) = 21;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 10;
    adata(16, p) = 10;
    adata(15, p) = 141;
    adata(0, p) = 6;
    adata(1, p) = 74;
    adata(2, p) = 31;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 4;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 20;
    adata(16, p) = 20;
    adata(15, p) = 147;
    adata(0, p) = 6;
    adata(1, p) = 51;
    adata(2, p) = 9;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 4;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 41;
    adata(16, p) = 41;
    adata(15, p) = 161;
    adata(0, p) = 6;
    adata(1, p) = 28;
    adata(2, p) = 37;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 12;
    adata(9, p) = 100000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    p = 21;
    adata(16, p) = 21;
    adata(15, p) = 148;
    adata(0, p) = 2;
    adata(1, p) = 21;
    adata(2, p) = 27;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 8;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 25;
    adata(16, p) = 25;
    adata(15, p) = 142;
    adata(0, p) = 2;
    adata(1, p) = 64;
    adata(2, p) = 47;
    adata(3, p) = 3;
    adata(4, p) = 1;
    adata(18, p) = 9;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 34;
    adata(16, p) = 34;
    adata(15, p) = 157;
    adata(0, p) = 2;
    adata(1, p) = 88;
    adata(2, p) = 25;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 29;
    adata(16, p) = 29;
    adata(15, p) = 162;
    adata(0, p) = 6;
    adata(1, p) = 18;
    adata(2, p) = 2;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 2;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 32;
    adata(16, p) = 32;
    adata(15, p) = 155;
    adata(0, p) = 2;
    adata(1, p) = 53;
    adata(2, p) = 21;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 43;
    adata(16, p) = 43;
    adata(15, p) = 158;
    adata(0, p) = 2;
    adata(1, p) = 27;
    adata(2, p) = 52;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 2;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 1;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 22;
    adata(16, p) = 22;
    adata(15, p) = 149;
    adata(0, p) = 6;
    adata(1, p) = 13;
    adata(2, p) = 43;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 33;
    adata(10, p) = 33;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 23;
    adata(16, p) = 23;
    adata(15, p) = 149;
    adata(0, p) = 6;
    adata(1, p) = 51;
    adata(2, p) = 32;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 33;
    adata(10, p) = 33;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 24;
    adata(16, p) = 24;
    adata(15, p) = 149;
    adata(0, p) = 6;
    adata(1, p) = 35;
    adata(2, p) = 10;
    adata(3, p) = 8;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 10000;
    adata(17, p) = 33;
    adata(10, p) = 33;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 30;
    adata(16, p) = 30;
    adata(15, p) = 0;
    adata(0, p) = 5;
    adata(1, p) = 35;
    adata(2, p) = 10;
    adata(3, p) = 1;
    adata(4, p) = 1;
    adata(18, p) = 100;
    adata(9, p) = 1000000;
    adata(17, p) = -999999;
    adata(10, p) = 999999;
    adata(21, p) = 1;
    adata(11, p) = 1;
    adata(12, p) = 1;
    adata(30, p) = 4;
    p = 9;
    adata(16, p) = 9;
    adata(15, p) = 0;
    adata(0, p) = 6;
    adata(1, p) = 20;
    adata(2, p) = 20;
    adata(3, p) = 4;
    adata(4, p) = 1;
    adata(18, p) = 4;
    adata(9, p) = 10000;
    adata(17, p) = 1;
    adata(10, p) = 45;
    adata(21, p) = 2;
    adata(11, p) = 0;
    adata(12, p) = 0;
    adata(30, p) = 4;
    return;
}



int label_1753()
{
    for (int cnt = 450; cnt < 500; ++cnt)
    {
        if (adata(16, cnt) != 0)
        {
            continue;
        }
        f = -1;
        for (int cnt = 0; cnt < 1000; ++cnt)
        {
            x = cxinit + rnd((cnt + 1)) - rnd((cnt + 1));
            y = cyinit + rnd((cnt + 1)) - rnd((cnt + 1));
            if (x <= 5 || y <= 5 || x >= mdata(0) - 6 || y >= mdata(1) - 6)
            {
                continue;
            }
            if (33 <= map(x, y, 0) && map(x, y, 0) < 66)
            {
                continue;
            }
            if (map(x, y, 0) > 19)
            {
                continue;
            }
            if (map(x, y, 6) % 1000 != 0)
            {
                continue;
            }
            p = 1;
            for (int cnt = 0; cnt < 500; ++cnt)
            {
                if (adata(16, cnt) == 0)
                {
                    continue;
                }
                if (x >= adata(1, cnt) - 2 && x <= adata(1, cnt) + 2)
                {
                    if (y >= adata(2, cnt) - 2 && y <= adata(2, cnt) + 2)
                    {
                        p = 0;
                        break;
                    }
                }
            }
            if (p == 0)
            {
                continue;
            }
            f = 1;
            break;
        }
        if (f == -1)
        {
            p = -1;
            break;
        }
        p = cnt;
        area = p;
        ctrl_file(file_operation_t::_13);
        adata(0, p) = 20 + rnd(4);
        adata(16, p) = 8;
        adata(15, p) = 133;
        adata(1, p) = x;
        adata(2, p) = y;
        adata(3, p) = 1;
        adata(4, p) = 1;
        adata(18, p) = 1;
        adata(9, p) = 10000;
        adata(21, p) = 1;
        adata(30, p) = gdata(850);
        if (rnd(3))
        {
            adata(17, p) = rnd(cdata[0].level + 5) + 1;
        }
        else
        {
            adata(17, p) = rnd(50) + 1;
            if (rnd(5) == 0)
            {
                adata(17, p) *= rnd(3) + 1;
            }
        }
        adata(10, p) = adata(17, p) + rnd(4) + 2;
        adata(11, p) = 1;
        adata(12, p) = 0;
        adata(20, p) = 0;
        adata(5, p) = rnd(length(mapnamerd));
        map(x, y, 6) = 1;
        if (adata(0, p) == 20)
        {
            adata(15, p) = 133;
            adata(18, p) = 0;
        }
        if (adata(0, p) == 21)
        {
            adata(15, p) = 137;
            adata(18, p) = 100;
        }
        if (adata(0, p) == 23)
        {
            adata(15, p) = 140;
            adata(18, p) = 200;
        }
        if (adata(0, p) == 22)
        {
            adata(15, p) = 135;
            adata(18, p) = 300;
        }
        break;
    }
    return p;
}



void label_1754()
{
    if (gdata_current_map == 33)
    {
        if (gdata_released_fire_giant == 1)
        {
            if (cdata[gdata_fire_giant].state == 1)
            {
                if (gdata_other_character_count < 30)
                {
                    if (rnd(4) == 0)
                    {
                        flt();
                        objlv = 1;
                        characreate(-1, 204, -3, 0);
                    }
                    if (rnd(10) == 0)
                    {
                        flt();
                        objlv = 1;
                        characreate(-1, 185, -3, 0);
                    }
                }
            }
        }
    }
    if (gdata_executing_immediate_quest_type == 1008)
    {
        if (qdata(8, gdata_executing_immediate_quest) != 3)
        {
            if (gdata_other_character_count
                < gdata_left_minutes_of_executing_quest / 600)
            {
                dbid = 0;
                if (rnd(4) == 0)
                {
                    dbid = 204;
                }
                if (rnd(10) == 0)
                {
                    dbid = 185;
                }
                if (dbid != 0)
                {
                    flt();
                    objlv = 1;
                    int stat = characreate(-1, dbid, -3, 0);
                    if (stat != 0)
                    {
                        cdata[rc].relationship = -1;
                        cdata[rc].original_relationship = -1;
                        cdata[rc].hate = 100;
                        cdata[rc].enemy_id =
                            qdata(13, gdata_executing_immediate_quest);
                    }
                }
            }
        }
    }
    if (gdata_current_map == 16)
    {
        if (rnd(5) == 0)
        {
            r = sdata(50, 0) / 50;
            if (r < 6)
            {
                dmg = (6 - r) * (6 - r) * 2;
                txtef(3);
                txt(lang(u8"熱い！"s, u8"It's hot!"s));
                dmghp(cc, dmg, -9);
            }
        }
        return;
    }
    if (gdata_current_map == 11)
    {
        if (gdata_current_dungeon_level == 25)
        {
            ++gdata_duration_of_kamikaze_attack;
            x = 1;
            y = rnd(mdata(1));
            if (rnd(4) == 0)
            {
                x = mdata(0) - 2;
                y = rnd(mdata(1));
            }
            if (rnd(5) == 0)
            {
                x = rnd(mdata(0));
                y = 1;
            }
            if (rnd(6) == 0)
            {
                x = rnd(mdata(0));
                y = mdata(1) - 2;
            }
            p = 237;
            if (gdata_duration_of_kamikaze_attack > 50)
            {
                if (rnd(10) == 0)
                {
                    p = 245;
                }
            }
            if (gdata_duration_of_kamikaze_attack > 100)
            {
                if (rnd(10) == 0)
                {
                    p = 244;
                }
            }
            if (gdata_duration_of_kamikaze_attack > 150)
            {
                if (rnd(10) == 0)
                {
                    p = 244;
                }
            }
            if (gdata_duration_of_kamikaze_attack == 250)
            {
                snd(44);
                txtef(2);
                txt(lang(
                    u8"ジャーナルが更新された。"s,
                    u8"Your journal has been updated."s));
                gdata_kamikaze_attack = 3;
                txtef(9);
                txt(lang(
                    u8"伝令「パルミア軍の撤退が完了しました！これ以上ここに留まる必要はありません。機を見て地下から退却してください！」"s,
                    u8"The messenger "s
                        + u8"\"The retreat of our army is over now. You don't need to fight them any more. Please leave at once!\""s));
                txt(lang(u8"階段が現れた。"s, u8"Suddenly, stairs appear."s));
                cell_featset(18, 9, tile_downstairs, 11, 1);
            }
            flt();
            characreate(-1, p, x, y);
            cdata[rc].hate = 1000;
            cdata[rc].enemy_id = 0;
            return;
        }
    }
    if (gdata_current_map == 41)
    {
        if (rnd(50) == 0)
        {
            if (cdata[0].karma < -30)
            {
                txt(lang(
                    u8"あなたは罪を悔いた。"s, u8"You repent of your sin."s));
                modify_karma(0, 1);
                p = rnd(8) + 10;
                if (sdata.get(p, 0).original_level >= 10)
                {
                    skillmod(p, 0, -300);
                }
            }
        }
        if (cdata[0].karma >= -30)
        {
            if (rnd(1000) == 0)
            {
                cell_featread(29, 6);
                if (feat(1) == 21)
                {
                    txt(lang(
                        u8"あなたはガードの足音が近づいてくるのに気付いた。"s,
                        u8"You hear footsteps coming towards your cell."s));
                    txt(lang(
                        u8"「そこのお前、もう反省したころだろう。出てもいいぞ」"s,
                        u8"\"Hey punk, our boss says you can leave the jail now. Do not come back, okay?\""s));
                    txt(lang(
                        u8"ガードは面倒くさそうにあなたの牢の扉を開けた。"s,
                        u8"A guard unenthusiastically unlocks your cell."s));
                    cell_featset(29, 6, tile_dooropen, 20, 0, -1);
                    snd(48);
                }
            }
        }
    }
    if (gdata_current_map == 30)
    {
        if (gdata_weather == 2 || gdata_weather == 4 || gdata_weather == 1)
        {
            if (cdata[0].nutrition < 5000)
            {
                if (cdata[0].has_anorexia() == 0)
                {
                    snd(18);
                    txt(lang(
                        u8"シェルターの貯蔵食品を食べた。"s,
                        u8"You eat stored food."s));
                    cdata[cc].nutrition += 5000;
                    label_2162();
                }
            }
            if (gdata_continuous_active_hours >= 15)
            {
                gdata_continuous_active_hours = 13;
            }
            mdata(9) = 1000000;
        }
        else if (mdata(9) == 1000000)
        {
            mdata(9) = 10000;
            for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                cdata[cnt].turn_cost = 0;
            }
            txt(lang(
                u8"もうシェルターの中にいる必要は無い。"s,
                u8"You don't need to stay in the shelter any longer."s));
        }
    }
    if (adata(16, gdata_current_map) == 101)
    {
        if (gdata_other_character_count > 0)
        {
            if (rnd(25) == 0)
            {
                txtef(9);
                txt(lang(u8" *ざわざわ* "s, u8"*noise*"s),
                    lang(u8"「ふむ…悪くないな」"s, u8"\"Hmm. Not bad.\""s),
                    lang(u8"「何だろう、これは」"s, u8"\"What's this?\""s),
                    lang(u8"「ほほう…」"s, u8"\"Ohh...\""s),
                    lang(
                        u8"「私も死んだらはく製に…」"s,
                        u8"\"I want to be stuffed...\""s),
                    lang(
                        u8"「ここが噂の…」"s,
                        u8"\"So this is the famous...\""s));
            }
            if (rnd(25) == 0)
            {
                txtef(9);
                txt(lang(u8" *がやがや* "s, u8"*murmur*"s),
                    lang(
                        u8"「やだっ気持ち悪い」"s, u8"\"Gross! Disgusting.\""s),
                    lang(
                        u8"「ねーねーこれ死んでるんでしょ？」"s,
                        u8"\"Hey. Is it really dead?\""s),
                    lang(u8"「かわ、いー♪」"s, u8"\"Scut!\""s),
                    lang(
                        u8"「今日はとことん見るぜ」"s,
                        u8"\"Absolutely amazing.\""s),
                    lang(u8"「触ってもいいの？」"s, u8"\"Can I touch?\""s));
            }
            if (rnd(15) == 0)
            {
                txtef(9);
                for (int cnt = 0; cnt < 1; ++cnt)
                {
                    if (en)
                    {
                        break;
                    }
                    if (gdata(123) > 8000)
                    {
                        txt(u8"「退屈ぅー」"s,
                            u8"「あまり見るものがないな」"s,
                            u8"「こんなので見物料とるの？」"s,
                            u8"館内は少し寂しい…"s);
                        break;
                    }
                    if (gdata(123) > 5000)
                    {
                        txt(u8"「いいんじゃない〜」"s,
                            u8"「まあ、普通の博物館だ」"s,
                            u8"「恋人を連れてくればよかったかも」"s,
                            u8"まあまあの客足だ。"s);
                        break;
                    }
                    if (gdata(123) > 2500)
                    {
                        txt(u8"「この雰囲気好きだなぁ」"s,
                            u8"「もう一度来ようよ」"s,
                            u8"「時間が経つのを忘れるね！」"s,
                            u8"館内はなかなか賑わっている。"s);
                        break;
                    }
                    if (gdata(123) > 500)
                    {
                        txt(u8"「来て良かった♪」"s,
                            u8"「よくこんなに集めたなあ」"s,
                            u8"「むぅ…興味深い」"s,
                            u8"客足が全く絶えない盛況ぶりだ。"s);
                        break;
                    }
                    txt(u8"「素晴らしいコレクションだ！」"s,
                        u8"「感動した」"s,
                        u8"「帰りたくないわ♪」"s,
                        u8"来客は食い入るように展示物を眺めている。"s);
                }
            }
            return;
        }
    }
    if (adata(16, gdata_current_map) == 102)
    {
        if (gdata_other_character_count > 0)
        {
            if (rnd(25) == 0)
            {
                txtef(9);
                txt(lang(u8" *ざわざわ* "s, u8"*murmur*"s),
                    lang(
                        u8"「これ欲しい〜」"s,
                        u8"\"I want this! I want this!\""s),
                    lang(u8"「何だろう、これは」"s, u8"\"Oh what's this?\""s),
                    lang(u8"「お買い物♪」"s, u8"\"I'm just watching\""s),
                    lang(u8"「金が足りん…」"s, u8"\"My wallet is empty...\""s),
                    lang(
                        u8"「ここが噂の…」"s,
                        u8"\"So this is the famous....\""s));
            }
            return;
        }
    }
    return;
}



void label_1755()
{
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].id == 555 || inv[cnt].id == 600)
        {
            continue;
        }
        inv[cnt].number = 0;
        cell_refresh(inv[cnt].position.x, inv[cnt].position.y);
    }
    if (adata(29, gdata_current_map) == 1)
    {
        flt();
        int stat = itemcreate(-1, 763, 29, 16, 0);
        if (stat != 0)
        {
            inv[ci].own_state = 1;
        }
        {
            flt();
            int stat = itemcreate(-1, 686, 29, 16, 0);
            if (stat != 0)
            {
                inv[ci].own_state = 1;
            }
        }
        {
            flt();
            int stat = itemcreate(-1, 171, 29, 17, 0);
            if (stat != 0)
            {
                inv[ci].param1 = 6;
                inv[ci].own_state = 1;
            }
        }
        {
            flt();
            int stat = itemcreate(-1, 756, 29, 17, 0);
            if (stat != 0)
            {
                inv[ci].own_state = 5;
            }
        }
        {
            flt();
            int stat = characreate(-1, 345, 48, 19);
            if (stat != 0)
            {
                cdata[rc].character_role = 3;
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 348, 30, 17);
            if (stat != 0)
            {
                cdata[rc].character_role = 3;
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 174, 38, 19);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
                cdata[rc].is_hung_on_sand_bag() = true;
                cdatan(0, rc) =
                    lang(u8"オパートスの信者"s, u8"Opatos Fanatic"s);
                if (rnd(2))
                {
                    cdatan(0, rc) = lang(u8"マニの信者"s, u8"Mani Fanatic"s);
                }
                else
                {
                    cdatan(0, rc) =
                        lang(u8"エヘカトルの信者"s, u8"Ehekatl Fanatic"s);
                }
            }
        }
        {
            flt();
            int stat = characreate(-1, 347, 35, 19);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 347, 37, 18);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 347, 37, 21);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 347, 39, 20);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 347, 38, 21);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 70, 17, 8);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].only_christmas() = true;
                cdata[rc].character_role = 1002;
                cdata[rc].shop_rank = 10;
                cdatan(0, rc) = snfood(cdatan(0, rc));
            }
        }
        {
            flt();
            int stat = characreate(-1, 239, 25, 8);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].relationship = 0;
                cdata[rc].original_relationship = 0;
                cdata[rc].only_christmas() = true;
                cdata[rc].character_role = 1018;
                cdata[rc].shop_rank = 30;
                cdatan(0, rc) = randomname();
                cdatan(0, rc) = lang(
                    u8"おみやげ屋の"s + cdatan(0, rc),
                    sncnv(cdatan(0, rc)) + u8"the souvenir vendor"s);
            }
        }
        {
            flt();
            int stat = characreate(-1, 271, 24, 22);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].relationship = 0;
                cdata[rc].original_relationship = 0;
                cdata[rc].only_christmas() = true;
                cdata[rc].character_role = 1018;
                cdata[rc].shop_rank = 30;
                cdatan(0, rc) = randomname();
                cdatan(0, rc) = lang(
                    u8"おみやげ屋の"s + cdatan(0, rc),
                    sncnv(cdatan(0, rc)) + u8"the souvenir vendor"s);
            }
        }
        {
            flt();
            int stat = characreate(-1, 1, 38, 12);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].character_role = 1007;
                cdata[rc].shop_rank = 10;
                cdatan(0, rc) = snblack(cdatan(0, rc));
                cdata[rc].only_christmas() = true;
            }
        }
        {
            flt();
            int stat = characreate(-1, 271, 28, 9);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].relationship = 0;
                cdata[rc].original_relationship = 0;
                cdata[rc].only_christmas() = true;
                cdata[rc].character_role = 1022;
                cdata[rc].shop_rank = 30;
                cdatan(0, rc) = randomname();
                cdatan(0, rc) = lang(
                    u8"屋台商人の"s + cdatan(0, rc),
                    sncnv(cdatan(0, rc)) + u8"the street vendor"s);
            }
        }
        {
            flt();
            int stat = characreate(-1, 271, 29, 24);
            if (stat != 0)
            {
                cdata[rc].ai_calm = 3;
                cdata[rc].relationship = 0;
                cdata[rc].original_relationship = 0;
                cdata[rc].only_christmas() = true;
                cdata[rc].character_role = 1022;
                cdata[rc].shop_rank = 30;
                cdatan(0, rc) = randomname();
                cdatan(0, rc) = lang(
                    u8"屋台商人屋の"s + cdatan(0, rc),
                    sncnv(cdatan(0, rc)) + u8"the street vendor"s);
            }
        }
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            flt();
            int stat = characreate(-1, 349, -3, 0);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
            flt();
            {
                int stat = characreate(-1, 350, -3, 0);
                if (stat != 0)
                {
                    cdata[rc].only_christmas() = true;
                }
            }
        }
        for (int cnt = 0; cnt < 15; ++cnt)
        {
            flt();
            int stat = characreate(-1, 326, -3, 0);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
        }
        for (int cnt = 0; cnt < 7; ++cnt)
        {
            flt();
            int stat = characreate(-1, 335, -3, 0);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
            {
                flt();
                int stat = characreate(-1, 185, -3, 0);
                if (stat != 0)
                {
                    cdata[rc].only_christmas() = true;
                }
            }
            {
                flt();
                int stat = characreate(-1, 274, -3, 0);
                if (stat != 0)
                {
                    cdata[rc].only_christmas() = true;
                }
            }
            {
                flt();
                int stat = characreate(-1, 174, -3, 0);
                if (stat != 0)
                {
                    cdata[rc].only_christmas() = true;
                }
            }
        }
        for (int cnt = 0; cnt < 3; ++cnt)
        {
            flt();
            int stat = characreate(-1, 332, -3, 0);
            if (stat != 0)
            {
                cdata[rc].only_christmas() = true;
            }
            {
                flt();
                int stat = characreate(-1, 185, -3, 0);
                if (stat != 0)
                {
                    cdata[rc].only_christmas() = true;
                }
            }
        }
    }
    else
    {
        for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
             ++cnt)
        {
            if (cdata[cnt].only_christmas() == 1)
            {
                chara_vanquish(cnt);
            }
        }
    }
    return;
}



int random_material(int prm_1028, int prm_1029)
{
    int f_at_m174 = 0;
    int lv_at_m174 = 0;
    int rare_at_m174 = 0;
    int loc_at_m174 = 0;
    int p_at_m174 = 0;
    int f2_at_m174 = 0;
    int p2_at_m174 = 0;
    f_at_m174 = 0;
    lv_at_m174 = prm_1028;
    rare_at_m174 = prm_1029;
    loc_at_m174 = atxspot;
    for (int cnt = 0; cnt < 500; ++cnt)
    {
        p_at_m174 = rnd(55);
        if (p_at_m174 == 0)
        {
            continue;
        }
        if (cnt % 10 == 0)
        {
            ++lv_at_m174;
            ++rare_at_m174;
        }
        if (matref(0, p_at_m174) > lv_at_m174)
        {
            continue;
        }
        if (matref(1, p_at_m174) > rare_at_m174)
        {
            continue;
        }
        f2_at_m174 = 0;
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            p2_at_m174 = matspot(cnt, p_at_m174);
            if (p2_at_m174 == 0)
            {
                break;
            }
            if (p2_at_m174 == loc_at_m174 || p2_at_m174 == 18)
            {
                f2_at_m174 = 1;
                break;
            }
        }
        if (f2_at_m174 == 0)
        {
            continue;
        }
        if (rnd(matref(1, p_at_m174)) == 0)
        {
            f_at_m174 = p_at_m174;
            break;
        }
    }
    return f_at_m174;
}



void matgetmain(int prm_1030, int prm_1031, int prm_1032)
{
    n_at_m174 = prm_1031;
    if (n_at_m174 == 0)
    {
        n_at_m174 = 1;
    }
    mat(prm_1030) += n_at_m174;
    snd(21);
    if (en)
    {
        s_at_m174 =
            u8"You get "s + n_at_m174 + u8" "s + matname(prm_1030) + u8". "s;
    }
    else
    {
        s_at_m174 = u8"マテリアル:"s + matname(prm_1030) + u8"を"s + n_at_m174
            + u8"個"s;
        if (prm_1032 == 1)
        {
            s_at_m174 += u8"掘り当てた"s;
        }
        if (prm_1032 == 2)
        {
            s_at_m174 += u8"釣り上げた。"s;
        }
        if (prm_1032 == 3)
        {
            s_at_m174 += u8"採取した。"s;
        }
        if (prm_1032 == 5)
        {
            s_at_m174 += u8"見つけた。"s;
        }
        if (prm_1032 == 0)
        {
            s_at_m174 += u8"入手した"s;
        }
    }
    txtef(4);
    txt(s_at_m174 + u8"("s + mat(prm_1030) + u8") "s);
    return;
}



void matdelmain(int prm_1033, int prm_1034)
{
    n_at_m174 = prm_1034;
    if (n_at_m174 == 0)
    {
        n_at_m174 = 1;
    }
    mat(prm_1033) -= n_at_m174;
    s_at_m174 = u8"マテリアル:"s + matname(prm_1033) + u8"を"s + n_at_m174
        + u8"個失った"s;
    txtef(4);
    txt(s_at_m174 + u8"(残り "s + mat(prm_1033) + u8"個) "s);
    return;
}



void label_18552()
{
    int matuse = 0;
label_18551_internal:
    listmax = 0;
    page = 0;
    pagesize = 10;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    page_load();
    if (invctrl == 0)
    {
        for (int cnt = 0, cnt_end = (maxitemid); cnt < cnt_end; ++cnt)
        {
            matid = cnt;
            int stat = get_required_craft_materials();
            if (stat == -1)
            {
                continue;
            }
            if (prodtype == 2)
            {
                if (matval != 178)
                {
                    continue;
                }
            }
            if (prodtype == 1)
            {
                if (matval != 176)
                {
                    continue;
                }
            }
            if (prodtype == 3)
            {
                if (matval != 179)
                {
                    continue;
                }
            }
            if (prodtype == 4)
            {
                if (matval != 177)
                {
                    continue;
                }
            }
            if (sdata(matval, 0) + 3 < matval(1))
            {
                continue;
            }
            listn(0, listmax) = ""s + prodcheck();
            list(0, listmax) = cnt;
            list(1, listmax) = 0;
            ++listmax;
        }
    }
    else
    {
        for (int cnt = 0; cnt < 50; ++cnt)
        {
            listn(0, listmax) = ""s + prodcheck();
            list(0, listmax) = 630;
            list(1, listmax) = cnt;
            ++listmax;
        }
    }
    windowshadow = 1;
label_1857_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    s(0) = lang(u8"生産品の選択"s, u8"Production"s);
    s(1) = strhint2 + strhint3b;
    display_window((windoww - 640) / 2 + inf_screenx, winposy(448), 640, 448);
    display_topic(lang(u8"生産品"s, u8"Product"s), wx + 28, wy + 36);
    display_topic(lang(u8"説明"s, u8"Detail"s), wx + 296, wy + 36);
    display_topic(lang(u8"詳細"s, u8"Requirement"s), wx + 28, wy + 258);
    display_topic(lang(u8"必要素材"s, u8"Material"s), wx + 28, wy + 304);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(540, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    cs_listbk();
    f = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i(0) = list(0, p);
        i(1) = list(1, p);
        if (cs == cnt)
        {
            matid = i;
            if (invctrl == 0)
            {
                get_required_craft_materials();
                font(13 - en * 2);
                s = lang(u8"必要スキル: "s, u8"Skill needed: "s);
                if (matval == 178)
                {
                    s += lang(u8"錬金術"s, u8"Alchemy"s);
                }
                if (matval == 176)
                {
                    s += lang(u8"大工"s, u8"Carpentory"s);
                }
                if (matval == 179)
                {
                    s += lang(u8"宝石細工"s, u8"Jewelling"s);
                }
                if (matval == 177)
                {
                    s += lang(u8"裁縫"s, u8"Tailoring"s);
                }
                s += u8" "s + matval(1) + u8"("s + sdata(matval, 0) + u8")"s;
                if (matval(1) <= sdata(matval, 0))
                {
                    color(30, 30, 200);
                }
                else
                {
                    color(200, 30, 30);
                }
                pos(wx + 37, wy + 288);
                mes(s + u8" "s);
                color(0, 0, 0);
            }
            for (int cnt = 0; cnt < 6; ++cnt)
            {
                int j0 = matneed(cnt * 2);
                int j1 = matneed(cnt * 2 + 1);
                if (j0 == -1)
                {
                    break;
                }
                s = matname(j0) + lang(u8" ? "s, u8" x "s) + j1 + u8"("s
                    + mat(j0) + u8")"s;
                if (mat(j0) >= j1)
                {
                    color(30, 30, 200);
                }
                else
                {
                    color(200, 30, 30);
                }
                pos(wx + 37 + cnt % 3 * 192, wy + 334 + cnt / 3 * 16);
                mes(s);
                color(0, 0, 0);
            }
            f = 1;
        }
        s = ioriginalnameref(i);
        p(1) = ipicref(i);
        prepare_item_image(p(1), 0);
        s(1) = lang(u8"アイテム["s + s + u8"]"s, u8"Make ["s + s + u8"]"s);
        font(14 - en * 2);
        if (elona::stoi(listn(0, p)) == -1)
        {
            p(2) = 3;
        }
        else
        {
            p(2) = 0;
        }
        cs_list(cs == cnt, cnven(s), wx + 86, wy + 66 + cnt * 19 - 1, 0, p(2));
        pos(wx + 308, wy + 66 + cnt * 19 + 2);
        mes(s(1));
        pos(wx + 37, wy + 69 + cnt * 19 + 2);
        gmode(2, inf_tiles, inf_tiles);
        grotate(1, 0, 960, 0, chipi(2, p(1)), chipi(3, p(1)));
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    if (f == 1 || listmax == 0)
    {
        redraw();
    }
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        matid = p;
        get_required_craft_materials();
        s = ioriginalnameref(matid);
        if (prodcheck() == -1)
        {
            snd(27);
            txt(lang(
                u8"生産の条件を満たしてない。"s,
                u8"You don't meet requirements to create the item."s));
            goto label_1857_internal;
        }
        if (!inv_getspace(0))
        {
            snd(27);
            txt(lang(
                u8"バックパックが一杯だ。"s, u8"Your inventory is full."s));
            goto label_1857_internal;
        }
        matuse = 0;
        for (int cnt = 0; cnt < 6; ++cnt)
        {
            int j0 = matneed(cnt * 2);
            int j1 = matneed(cnt * 2 + 1);
            if (j0 == -1)
            {
                break;
            }
            mat(j0) -= j1;
            matuse += j1;
        }
        snd(58);
        fixlv = 2;
        if (rnd(200 + matval(1) * 2) < sdata(matval, 0) + 20)
        {
            fixlv = 4;
        }
        if (rnd(100 + matval(1) * 2) < sdata(matval, 0) + 20)
        {
            fixlv = 3;
        }
        flt(calcobjlv(sdata(matval, 0)), calcfixlv(fixlv));
        itemcreate(0, p, -1, -1, 0);
        txt(lang(
            itemname(ci, 1) + u8"を製造した。"s,
            u8"You producted "s + itemname(ci, 1) + u8"."s));
        r2 = matuse;
        label_1472(matval);
        refresh_character(0);
        render_hud();
        page_save();
        goto label_18551_internal;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1857_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1857_internal;
        }
    }
    if (key == key_cancel)
    {
        return;
    }
    goto label_1857_internal;
}



menu_result menu_materials()
{
    menu_result result = { false, false, turn_result_t::none };
    listmax = 0;
    page = 0;
    pagesize = 15;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    curmenu = 3;
    for (int cnt = 0; cnt < 400; ++cnt)
    {
        if (mat(cnt) != 0)
        {
            list(0, listmax) = cnt;
            ++listmax;
        }
    }
    gsel(7);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"ie_scroll.bmp");
    gsel(0);
    snd(92);
    drawmenu();
    wx = (windoww - 600) / 2 + inf_screenx;
    wy = winposy(430);
    ww = 600;
    wh = 430;
    windowanime(wx, wy, ww, wh, 10, 4);
    windowshadow = 1;
label_1860_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    drawmenu();
label_1861_internal:
    s = strhint2 + strhint3b;
    showscroll(s, wx, wy, ww, wh);
    display_topic(lang(u8"所持マテリアル"s, u8"Name"s), wx + 38, wy + 36);
    display_topic(lang(u8"説明"s, u8"Detail"s), wx + 296, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(490, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 68, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        s = ""s + matname(i) + lang(u8" × "s, u8" x "s) + mat(i);
        cs_list(cs == cnt, s, wx + 96, wy + 66 + cnt * 19 - 1, 0, 0);
        s = matdesc(i);
        pos(wx + 308, wy + 66 + cnt * 19 + 2);
        mes(s);
        p(1) = matref(2, i);
        prepare_item_image(p(1), 0);
        pos(wx + 47, wy + 69 + cnt * 19 + 2);
        gmode(2, inf_tiles, inf_tiles);
        grotate(1, 0, 960, 0, chipi(2, p(1)), chipi(3, p(1)));
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 3)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 3;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    csctrl = 0;
                    result.turn_result = turn_result_t::menu_character_sheet;
                    return result;
                }
                if (curmenu == 1)
                {
                    result.turn_result = turn_result_t::menu_equipment;
                    return result;
                }
                if (curmenu == 2)
                {
                    result.turn_result = turn_result_t::menu_feats;
                    return result;
                }
                if (curmenu == 3)
                {
                    result.turn_result = turn_result_t::menu_materials;
                    return result;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1860_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1860_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        result.turn_result = turn_result_t::pc_turn_user_error;
        return result;
    }
    goto label_1861_internal;
}



void atxinit()
{
    if (atxthrough == 0)
    {
        atbuff = "";
        notesel(atbuff);
    }
    atxthrough = 0;
    listmax = 0;
    cs = 0;
    page = 0;
    cc = 0;
    cs_bk = -1;
    pagesize = 16;
    chatesc = -1;
    if (atxbg != atxbgbk)
    {
        mode = 0;
        screenupdate = -1;
        update_screen();
        mode = 9;
        atxbgbk = atxbg;
        gsel(4);
        gmode(0);
        pos(0, 0);
        picload(filesystem::dir::graphic() / (atxbg + u8".bmp"s), 1);
        pos(0, inf_msgh);
        gzoom(4, 0, 0, 240, 160, windoww, windowh - inf_verh - inf_msgh);
        gmode(2);
        p = windoww / 192;
        for (int cnt = 0, cnt_end = (p + 1); cnt < cnt_end; ++cnt)
        {
            if (cnt == p)
            {
                sx = windoww % 192;
            }
            else
            {
                sx = 192;
            }
            pos(cnt * 192, 0);
            gcopy(3, 496, 528, sx, inf_msgh);
        }
        window2(windoww - 208, 0, 208, 98, 0, 0);
        pos(windoww - 204, 4);
        gzoom(0, 120, 88, windoww - 120, windowh - inf_verh - 112, 200, 90);
        gsel(0);
    }
    return;
}



void begintempinv()
{
    ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
    for (const auto& cnt : items(-1))
    {
        inv[cnt].number = 0;
    }
    return;
}



void exittempinv()
{
    ctrl_file(file_operation2_t::_3, u8"shoptmp.s2");
    return;
}



void casino_dealer()
{
    begintempinv();
    atxthrough = 0;
    atxpic = 0;
    snd(39);
    mode = 9;
    atxbg = u8"bg13"s;
    atxbgbk = "";
    SDIM3(atxinfon, 80, 5);
    if (atxid == 2)
    {
        casino_random_site();
        return;
    }
    if (atxid == 1)
    {
        txt(lang(u8"ディーラーに話しかけた。"s, u8"You talk to the dealer."s));
        play_music(77);
        casino_wrapper();
        return;
    }
    if (atxid == 4)
    {
        play_music(77);
        casino_wrapper();
        return;
    }
    casino_acquire_items();
    return;
}



void casino_choose_card()
{
label_18671_internal:
    screenupdate = -1;
    update_screen();
    if (atxid >= 2)
    {
        txtadvmsgfix = 136;
    }
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(s, cnt);
        if (strmid(s, 0, 1) == u8"@"s)
        {
            s(1) = strmid(s, 1, 2);
            s = strmid(s, 3, s(0).size() - 3);
            font(16 - en * 2);
            color(250, 240, 230);
            if (s(1) == u8"BL"s)
            {
                color(130, 130, 250);
            }
            if (s(1) == u8"GR"s)
            {
                color(130, 250, 130);
            }
            if (s(1) == u8"QM"s)
            {
                color(0, 100, 0);
            }
        }
        else
        {
            font(16 - en * 2);
            color(250, 240, 230);
        }
        pos(170, cnt * 20 + 120 + txtadvmsgfix);
        mes(s);
        color(0, 0, 0);
    }
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    gsel(2);
    gmode(0);
    pos(0, 0);
    gcopy(0, 0, 0, windoww, windowh);
    gsel(0);
    gmode(2);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
    }
    label_1870();
label_1868_internal:
    x(0) = 170;
    x(1) = 400;
    y(0) = noteinfo() * 20 + 120 + txtadvmsgfix + 16;
    y(1) = 20 * listmax;
    gmode(0);
    pos(x, y);
    gcopy(2, x, y, x(1), y(1));
    gmode(2);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        display_key(
            170, noteinfo() * 20 + 120 + txtadvmsgfix + 16 + cnt * 20, cnt);
        s = listn(0, p);
        cs_list(
            cs == cnt,
            s,
            200,
            noteinfo() * 20 + 120 + txtadvmsgfix + 16 + cnt * 20,
            0,
            2);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(rtval, snd(40));
    if (chatesc != -1)
    {
        if (key == key_cancel)
        {
            snd(40);
            rtval = chatesc;
        }
    }
    if (rtval != -1)
    {
        label_1871();
        atxpic = 0;
        return;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_18671_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_18671_internal;
        }
    }
    goto label_1868_internal;
}



void label_1870()
{
    label_1872();
    if (mattile != -1)
    {
        mattile = rnd(mattile(2)) + mattile(1);
    }
    for (int cnt = 0; cnt < 12; ++cnt)
    {
        x(0) = 170;
        x(1) = 300;
        y(0) = noteinfo() * 20 + 120 + txtadvmsgfix + 16;
        y(1) = 20 * listmax;
        gmode(0);
        pos(x - 50, y - 50);
        gcopy(2, x - 50, y - 50, 100 + x(1), y(1) + 100);
        if (cnt == 11)
        {
            break;
        }
        gmode(4, x(1), y(1), cnt * 25);
        pos(x + x(1) / 2 - 10 + cnt, y + y(1) / 2);
        grotate(2, 0, 0, 0, x(1), y(1));
        if (atxpic != 0)
        {
            x(0) = 345;
            x(1) = atxpic(2) + 120;
            y(0) = 170;
            y(1) = atxpic(3);
            gmode(0);
            pos(x - atxpic(2) / 2, y - atxpic(3) / 2);
            gcopy(2, x - atxpic(2) / 2, y - atxpic(3) / 2, x(1), y(1));
            pos(x, y);
            gmode(2, inf_tiles, inf_tiles);
            double p_double;
            if (cnt == 10)
            {
                p_double = 0;
            }
            else
            {
                p_double = 0.6222 * cnt;
            }
            p(1) = 1;
            if (atxpic == 2)
            {
                p(1) = 5;
            }
            grotate(
                p(1),
                atxpic(1) % 33 * 32,
                atxpic(1) / 33 * 32,
                p_double,
                cnt * (atxpic(2) / 10),
                cnt * (atxpic(3) / 10));
        }
        if (mattile != -1)
        {
            int cnt2 = cnt;
            for (int cnt = 0; cnt < 2; ++cnt)
            {
                x(0) = cnt * 250 + 170;
                x(1) = 96;
                y(0) = 120;
                y(1) = 96;
                gmode(0);
                pos(x, y);
                gcopy(2, x, y, x(1), y(1));
                pos(x + x(1) / 2, y + y(1) / 2);
                gmode(2, inf_tiles, inf_tiles);
                grotate(
                    1,
                    mattile % 33 * 32,
                    mattile / 33 * 32,
                    0,
                    cnt2 * 9,
                    cnt2 * 9);
            }
        }
        await(20);
        redraw();
    }
    gmode(2);
    atxpic = 0;
    return;
}



void label_1871()
{
    label_1872();
    for (int cnt = 0; cnt < 11; ++cnt)
    {
        x = 170;
        y(0) = noteinfo() * 20 + 120 + txtadvmsgfix + 16;
        y(1) = 20 * listmax;
        gmode(0);
        pos(x - 50, y - 50);
        gcopy(2, x - 50, y - 50, 100 + x(1), y(1) + 100);
        gmode(4, x(1), y(1), 250 - cnt * 25);
        pos(x + x(1) / 2 - 2 * cnt, y + y(1) / 2);
        grotate(2, 0, 0, 0, x(1), y(1));
        await(15);
        redraw();
    }
    return;
}



void label_1872()
{
    x(1) = 300;
    cs = -1;
    boxf(
        170,
        noteinfo() * 20 + 120 + txtadvmsgfix + 16,
        170 + x(1),
        noteinfo() * 20 + 120 + txtadvmsgfix + 16 + 20 * listmax);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        display_key(
            170, noteinfo() * 20 + 120 + txtadvmsgfix + 16 + cnt * 20, cnt);
        s = listn(0, p);
        gmode(2);
        cs_list(
            cs == cnt,
            s,
            200,
            noteinfo() * 20 + 120 + txtadvmsgfix + 16 + cnt * 20,
            0,
            2);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    gsel(2);
    gmode(0);
    pos(0, 0);
    gcopy(
        0, 170, noteinfo() * 20 + 120 + txtadvmsgfix + 16, x(1), 20 * listmax);
    gsel(0);
    gmode(2);
    cs = 0;
    return;
}



void casino_acquire_items()
{
    mtilefilecur = -1;
    label_1746();
    f = 0;
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].number != 0)
        {
            f = 1;
        }
    }
    if (f == 1)
    {
        if (cdata[0].hp >= 0)
        {
            txt(lang(
                u8"幾つかの戦利品がある。"s,
                u8"There're some items you can acquire."s));
            screenupdate = -1;
            update_screen();
            invsubroutine = 1;
            invctrl(0) = 22;
            invctrl(1) = 0;
            ctrl_inventory();
        }
    }
    mode = 0;
    atxid = 0;
    exittempinv();
    await(100);
    snd(39);
    play_music();
    return;
}



void casino_random_site()
{
    int atxrefval1 = 0;
    atxap = 10;
    atxspot = 19;
    atxinfon(0) = u8"ランダムサイト"s;
    atxinit();
    atxthrough = 1;
    if (atxid(1) == 0)
    {
        atxid(1) = 3;
        atxlv = gdata_current_dungeon_level;
        if (mdata(6) == 20)
        {
            atxid(1) = 1;
        }
        if (mdata(6) == 21)
        {
            atxid(1) = 4;
        }
        if (mdata(6) == 22)
        {
            atxid(1) = 2;
        }
        if (mdata(6) == 23)
        {
            atxid(1) = 4;
        }
        if (mdata(6) == 1)
        {
            atxlv = cdata[0].level;
            if (4 <= gdata(62) && gdata(62) < 9)
            {
                atxid(1) = 2;
            }
            if (264 <= gdata(62) && gdata(62) < 363)
            {
                atxid(1) = 3;
            }
            if (9 <= gdata(62) && gdata(62) < 13)
            {
                atxid(1) = 2;
            }
            if (13 <= gdata(62) && gdata(62) < 17)
            {
                atxid(1) = 3;
            }
        }
    }
    if (atxid(1) == 8)
    {
        atxbg = u8"bg21"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 16;
        noteadd(u8"この辺りは残骸やら遺品やらでごちゃごちゃだ。"s);
    }
    if (atxid(1) == 7)
    {
        atxbg = u8"bg20"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 15;
        noteadd(u8"この辺りには見たこともない植物がたくさんある。"s);
    }
    if (atxid(1) == 6)
    {
        atxbg = u8"bg19"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 14;
        noteadd(u8"天然の鉱石の宝庫だ。"s);
    }
    if (atxid(1) == 5)
    {
        atxbg = u8"bg18"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 13;
        noteadd(u8"綺麗な泉がある。"s);
    }
    if (atxid(1) == 1)
    {
        atxbg = u8"bg13"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 9;
    }
    if (atxid(1) == 4)
    {
        atxbg = u8"bg17"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 12;
    }
    if (atxid(1) == 2)
    {
        atxbg = u8"bg15"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 10;
    }
    if (atxid(1) == 3)
    {
        atxbg = u8"bg16"s;
        mattile(0) = 0;
        mattile(1) = 495;
        mattile(2) = 3;
        atxspot = 11;
    }
label_1875:
    if (atxap <= 0 || cdata[0].hp < 0)
    {
        label_1877();
        return;
    }
    atxinit();
    noteadd(u8"何をしよう？"s);
    list(0, listmax) = 1;
    listn(0, listmax) = u8"探索"s;
    ++listmax;
    list(0, listmax) = 3;
    listn(0, listmax) = u8"去る"s;
    ++listmax;
    atxinfon(1) = u8"行動回数残り "s + atxap + u8"回\n"s;
    chatesc = 3;
    txtadvmsgfix = 0;
    txtadvscreenupdate = 1;
    casino_choose_card();
    if (rtval == 1)
    {
        goto label_1876_internal;
        return;
    }
    if (rtval == 2)
    {
        goto label_1876_internal;
        return;
    }
    if (rtval == 3)
    {
        label_1877();
        return;
    }
    goto label_1875;
label_1876_internal:
    --atxap;
    atxinit();
    if (rnd(1) == 0)
    {
        atxrefval1 = -1;
        if (atxid(1) == 7)
        {
            atxpic(0) = 1;
            atxpic(1) = 171;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"茂みを見つけた。"s);
            list(0, listmax) = 1;
            listn(0, listmax) = u8"調べる"s;
            ++listmax;
            list(0, listmax) = 2;
            listn(0, listmax) = u8"採取する("s
                + i18n::_(u8"ability", std::to_string(180), u8"name") + u8": "s
                + sdata(180, 0) + u8")"s;
            ++listmax;
            atxrefval1 = 7;
        }
        if (atxid(1) == 6)
        {
            atxpic(0) = 1;
            atxpic(1) = 219;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"鉱石の岩がある。"s);
            list(0, listmax) = 1;
            listn(0, listmax) = u8"調べる"s;
            ++listmax;
            list(0, listmax) = 2;
            listn(0, listmax) = u8"掘る("s
                + i18n::_(u8"ability", std::to_string(163), u8"name") + u8": "s
                + sdata(163, 0) + u8")"s;
            ++listmax;
            atxrefval1 = 7;
        }
        if (atxid(1) == 5)
        {
            atxpic(0) = 1;
            atxpic(1) = 439;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"泉がある。"s);
            list(0, listmax) = 1;
            listn(0, listmax) = u8"飲む"s;
            ++listmax;
            list(0, listmax) = 2;
            listn(0, listmax) = u8"釣る("s
                + i18n::_(u8"ability", std::to_string(185), u8"name") + u8": "s
                + sdata(185, 0) + u8")"s;
            ++listmax;
            atxrefval1 = 7;
        }
        if (atxid(1) == 8)
        {
            atxpic(0) = 1;
            atxpic(1) = 199;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"残骸を見つけた。"s);
            list(0, listmax) = 1;
            listn(0, listmax) = u8"あさる"s;
            ++listmax;
            list(0, listmax) = 2;
            listn(0, listmax) = u8"解剖する("s
                + i18n::_(u8"ability", std::to_string(161), u8"name") + u8": "s
                + sdata(161, 0) + u8")"s;
            ++listmax;
            atxrefval1 = 7;
        }
        if (atxrefval1 == -1)
        {
            noteadd(u8"壁に何やら怪しいひび割れがある…"s);
            list(0, listmax) = 1;
            listn(0, listmax) = u8"叩く(筋力)"s;
            ++listmax;
            list(0, listmax) = 2;
            listn(0, listmax) = u8"調べる(感知)"s;
            ++listmax;
        }
        atxinfon(1) = u8"行動回数残り "s + atxap + u8"回\n"s;
        chatesc = 1;
        txtadvmsgfix = 0;
        txtadvscreenupdate = 1;
        casino_choose_card();
        atxinit();
        if (rtval == 1)
        {
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                p = random_material(atxlv);
                atxpic(0) = 1;
                atxpic(1) = matref(2, p);
                atxpic(2) = 96;
                atxpic(3) = 96;
                snd(41);
                mat(p) += 1;
                noteadd(lang(
                    u8"@BL"s + matname(p) + u8"を"s + 1
                        + u8"個手に入れた！(所持数:"s + mat(p) + u8"個)"s,
                    u8"@BLYou get "s + 1 + u8" "s + matname(p)
                        + u8"(s)! (Total:"s + mat(p) + u8")"s));
            }
            atxthrough = 1;
            goto label_1875;
        }
        if (rtval == 2)
        {
            atxthrough = 1;
            goto label_1875;
        }
    }
    if (rnd(8) == 0)
    {
        if (rnd(4) == 0)
        {
            noteadd(u8"あれ…？"s);
            noteadd(u8"道に迷った！ (行動回数-2)"s);
            atxap -= 2;
            atxthrough = 1;
            goto label_1875;
        }
        if (rnd(2) == 0)
        {
            atxpic(0) = 2;
            atxpic(1) = 205;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"幽霊に脅かされた！ (行動回数-1)"s);
            snd(70);
            atxap -= 1;
            atxthrough = 1;
            goto label_1875;
        }
        if (rnd(2) == 0)
        {
            atxpic(0) = 1;
            atxpic(1) = 424;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"小石につまづいてころんでしまった！ (行動回数-1)"s);
            snd(70);
            atxap -= 1;
            atxthrough = 1;
            goto label_1875;
        }
    }
    if (rnd(8) == 0)
    {
        if (rnd(4) == 0)
        {
            atxpic(0) = 1;
            atxpic(1) = 200;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"ふかふかの藁を見つけた。"s);
            noteadd(u8"ふかふかして気持ちいい。（行動回数+3)"s);
            atxap += 2;
            atxthrough = 1;
            goto label_1875;
        }
        if (rnd(2) == 0)
        {
            atxpic(0) = 1;
            atxpic(1) = 294;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"切り株がある。"s);
            noteadd(u8"腰を下ろして疲れを癒した。（行動回数+2)"s);
            atxap += 2;
            atxthrough = 1;
            goto label_1875;
        }
        if (rnd(2) == 0)
        {
            atxpic(0) = 1;
            atxpic(1) = 127;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"綺麗な花を見つけた。"s);
            noteadd(u8"心がなごんだ…（行動回数+2)"s);
            atxap += 2;
            atxthrough = 1;
            goto label_1875;
        }
    }
    if (rnd(7) == 0)
    {
        if (rnd(3))
        {
            atxpic(0) = 2;
            atxpic(1) = 210;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"痛っ！蚊に刺された。"s);
            snd(2);
            dmghp(0, cdata[0].max_hp * 5 / 100, -10);
        }
        else
        {
            atxpic(0) = 2;
            atxpic(1) = 216;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"うっ！ヘビに噛まれた。"s);
            snd(2);
            dmghp(0, cdata[0].max_hp * 10 / 100, -10);
        }
        atxthrough = 1;
        goto label_1875;
    }
    if (rnd(3) == 0)
    {
        if (rnd(3))
        {
            atxpic(0) = 2;
            atxpic(1) = 210;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"痛っ！蚊に刺された。"s);
            snd(2);
            dmghp(0, cdata[0].max_hp * 5 / 100, -10);
        }
        else
        {
            atxpic(0) = 2;
            atxpic(1) = 216;
            atxpic(2) = 96;
            atxpic(3) = 96;
            noteadd(u8"うっ！ヘビに噛まれた。"s);
            snd(2);
            dmghp(0, cdata[0].max_hp * 10 / 100, -10);
        }
        atxthrough = 1;
        goto label_1875;
    }
    if (rnd(2) == 0)
    {
        atxpic(0) = 1;
        atxpic(1) = 220;
        atxpic(2) = 96;
        atxpic(3) = 96;
        noteadd(u8"宝箱がある。"s);
        list(0, listmax) = 1;
        listn(0, listmax) = u8"錠を解体する("s
            + i18n::_(u8"ability", std::to_string(158), u8"name") + u8": "s
            + sdata(158, 0) + u8")"s;
        ++listmax;
        list(0, listmax) = 3;
        listn(0, listmax) = u8"叩き割る(筋力: "s + sdata(10, 0) + u8")"s;
        ++listmax;
        atxinfon(1) = u8"行動回数残り "s + atxap + u8"回\n"s;
        chatesc = 1;
        txtadvmsgfix = 0;
        txtadvscreenupdate = 1;
        casino_choose_card();
        atxinit();
        goto label_1875;
    }
    if (rnd(2) == 0)
    {
        p = random_material(atxlv);
        atxpic(0) = 1;
        atxpic(1) = matref(2, p);
        atxpic(2) = 96;
        atxpic(3) = 96;
        snd(41);
        mat(p) += 1;
        noteadd(lang(
            u8"@BL"s + matname(p) + u8"を"s + 1 + u8"個手に入れた！(所持数:"s
                + mat(p) + u8"個)"s,
            u8"@BLYou get "s + 1 + u8" "s + matname(p) + u8"(s)! (Total:"s
                + mat(p) + u8")"s));
        atxthrough = 1;
        goto label_1875;
    }
    if (rnd(3) == 0)
    {
        noteadd(u8"何も見つからなかった…"s);
        atxthrough = 1;
        goto label_1875;
    }
    noteadd(u8"何も見つからなかった…"s);
    atxthrough = 1;
    goto label_1875;
}



void label_1877()
{
    atxinit();
    if (cdata[0].hp >= 0)
    {
        noteadd(u8"探索を終えた。"s);
        list(0, listmax) = 0;
        listn(0, listmax) = u8"戻る"s;
        ++listmax;
    }
    else
    {
        noteadd(u8"ぐふ…"s);
        list(0, listmax) = 0;
        listn(0, listmax) = u8"(断末魔の叫び)"s;
        ++listmax;
    }
    atxinfon(1) = u8"行動回数残り "s + atxap + u8"回\n"s;
    chatesc = 0;
    txtadvmsgfix = 0;
    txtadvscreenupdate = 1;
    casino_choose_card();
    casino_acquire_items();
    return;
}


void casino_wrapper()
{
    bool finished = false;
    while(!finished)
    {
        finished = casino_start();
    }
}

bool casino_start()
{
    bool finished = false;
    atxbg = u8"bg14"s;
    mattile = -1;
    atxinfon(0) = lang(
        u8"カジノ《フォーチュンクッキー》"s, u8"Casino <<Fortune Cookie>>"s);
    atxinit();
    noteadd(lang(
        u8"カジノ《フォーチュンクッキー》へようこそ。"s,
        u8"Welcome to the casino, Fortune cookie!"s));
    noteadd(lang(
        u8"チップマテリアルと引き換えにゲームをすることができます。"s,
        u8"You can bet the casino chips you have and play some games."s));
    noteadd(lang(u8"ごゆっくりお楽しみ下さい。"s, u8"Enjoy your stay."s));
    if (gdata_used_casino_once == 0)
    {
        noteadd(""s);
        noteadd(lang(
            u8"お客様は初めてのご利用のようですね。"s,
            u8"Looks like you play for the first time, sir."s));
        noteadd(lang(
            u8"当店からチップマテリアルを10枚進呈します。"s,
            u8"We're offering you 10 free casino chips to try our games."s));
        gdata_used_casino_once = 1;
        snd(41);
        mat(1) += 10;
        noteadd(lang(
            u8"@BL"s + matname(1) + u8"を"s + 10 + u8"個手に入れた！(所持数:"s
                + mat(1) + u8"個)"s,
            u8"@BLYou get "s + 10 + u8" "s + matname(1) + u8"(s)! (Total:"s
                + mat(1) + u8")"s));
    }
    atxinfon(1) = lang(
        u8"カジノチップ残り "s + mat(1) + u8"枚\n"s,
        u8"Casino chips left: "s + mat(1) + u8"\n"s);
    atxinfon(2) = "";
    list(0, listmax) = 0;
    listn(0, listmax) = lang(u8"店を出る"s, u8"Later."s);
    ++listmax;
    list(0, listmax) = 1;
    listn(0, listmax) =
        lang(u8"ブラックジャック"s, u8"I want to play Blackjack."s);
    ++listmax;
    chatesc = 0;
    txtadvmsgfix = 0;
    txtadvscreenupdate = 1;
    casino_choose_card();
    if (rtval == 0)
    {
        casino_acquire_items();
        return true;
    }
    else if (rtval == 1)
    {
        while(!finished)
        {
            finished = casino_blackjack();
        }
        return false;
    }
    return true;
}



bool casino_blackjack()
{
    int stake = 0;
    int winrow = 0;
    int cardround = 0;
    int winner = 0;
    atxinit();
    noteadd(lang(
        u8"ブラックジャックは、カードの合計を21に近づけるゲームです。"s,
        u8"In Blackjack, the hand with the highest total wins as long as it"s));
    noteadd(lang(
        u8"J,Q,Kは10に、Aは1または11に数えられます。21を越えると負けです。"s,
        u8"doesn't exceed 21. J,Q,K are counted as 10 and A is counted as 1 or 11."s));
    noteadd(lang(
        u8"では、賭けるチップを宣言してください。"s,
        u8"More bets means better rewards."s));
    noteadd(lang(
        u8"チップが多いほど、景品の質があがります。"s,
        u8"How many tips would you like to bet?"s));
    atxinfon(1) = lang(
        u8"カジノチップ残り "s + mat(1) + u8"枚\n"s,
        u8"Casino chips left: "s + mat(1) + u8"\n"s);
    atxinfon(2) = "";
    if (mat(1) <= 0)
    {
        noteadd(""s);
        noteadd(lang(
            u8"お客様はチップをもっていません。"s,
            u8"Sorry sir, you don't seem to have casino chips."s));
    }
    list(0, listmax) = 0;
    listn(0, listmax) = lang(u8"やめる"s, u8"I quit."s);
    ++listmax;
    if (mat(1) >= 1)
    {
        list(0, listmax) = 1;
        listn(0, listmax) =
            lang(""s + 1 + u8"枚賭ける"s, u8"Bet "s + 1 + u8" chips."s);
        ++listmax;
    }
    if (mat(1) >= 5)
    {
        list(0, listmax) = 5;
        listn(0, listmax) =
            lang(""s + 5 + u8"枚賭ける"s, u8"Bet "s + 5 + u8" chips."s);
        ++listmax;
    }
    if (mat(1) >= 20)
    {
        list(0, listmax) = 20;
        listn(0, listmax) =
            lang(""s + 20 + u8"枚賭ける"s, u8"Bet "s + 20 + u8" chips."s);
        ++listmax;
    }
    chatesc = 0;
    txtadvmsgfix = 0;
    txtadvscreenupdate = 1;
    casino_choose_card();
    if (rtval == 0)
    {
        return false;
    }
    stake = rtval;
    winrow = 0;
    cardround = 0;
    autosave = 1 * (gdata_current_map != 35);
    for (int cnt = 0;; ++cnt)
    {
        screenupdate = -1;
        update_screen();
        atxinit();
        if (cnt == 0)
        {
            mat(1) -= stake;
            noteadd(lang(
                matname(1) + u8"を"s + stake + u8"個失った(残り:"s + mat(1)
                    + u8"個)"s,
                u8"You lose "s + stake + u8" "s + matname(1) + u8"(s). (Total:"s
                    + mat(1) + u8")"s));
        }
        if (cardround == 0)
        {
            nojoker = 1;
            initcard(60, 160);
            cardplayerinit(2, 5);
            cardplayeradd(0, 220, 124);
            cardplayeradd(1, 220, 240);
        }
        font(14 - en * 2, snail::font_t::style_t::bold);
        color(255, 255, 255);
        pos(152, 154);
        mes(lang(u8"　親"s, u8"Dealer"s));
        pos(152, 270);
        mes(lang(u8"あなた"s, u8"   You"s));
        color(0, 0, 0);
        showcardpile();
        showcardholder();
        showcard();
        if (cardround == 0)
        {
            for (int cnt = 0; cnt < 4; ++cnt)
            {
                int stat = servecard(cnt % 2);
                if (cnt != 2)
                {
                    opencard2(stat);
                }
            }
            for (int cnt = 0; cnt < 1; ++cnt)
            {
                if (cpcardnum(0) >= 5)
                {
                    break;
                }
                if (cpscore(0) < cpscore(1) || cpscore(0) - rnd(5) <= 11)
                {
                    int stat = servecard(0);
                    opencard2(stat);
                    --cnt;
                    continue;
                }
            }
        }
        noteadd(lang(
            u8"あなたの合計は"s + cpscore(1) + u8"です。"s,
            u8"Your hand is "s + cpscore(1) + u8"."s));
        if (cardround == -1)
        {
            noteadd(lang(
                u8"親の合計は"s + cpscore(0) + u8"です。"s,
                u8"The dealer's hand is "s + cpscore(0) + u8"."s));
            winner = -1;
            if (cpscore(0) <= 21)
            {
                if (cpscore(1) > 21 || cpscore(0) > cpscore(1))
                {
                    winner = 0;
                }
            }
            if (cpscore(1) <= 21)
            {
                if (cpscore(0) > 21 || cpscore(1) > cpscore(0))
                {
                    winner = 1;
                }
            }
            if (winner == -1)
            {
                noteadd(
                    lang(u8"勝負は引き分けです。"s, u8"The match is a draw."s));
            }
            if (winner == 0)
            {
                noteadd(lang(u8"あなたの負けです。"s, u8"You lose."s));
            }
            if (winner == 1)
            {
                noteadd(lang(
                    u8"おめでとうございます。あなたの勝ちです。"s,
                    u8"Congratulations, you win."s));
            }
        }
        atxinfon(1) = lang(
            u8"カジノチップ残り "s + mat(1) + u8"枚\n"s,
            u8"Casino chips left: "s + mat(1) + u8"\n"s);
        atxinfon(2) = lang(
            u8"賭けチップ "s + stake + u8"枚 現在"s + winrow + u8"連勝中"s,
            u8"Bets: "s + stake + u8" Wins: "s + winrow + ""s);
        if (cardround == -1)
        {
            if (winner == 1)
            {
                ++winrow;
            }
            if (winner != 0)
            {
                list(0, listmax) = 0;
                listn(0, listmax) =
                    lang(u8"次の勝負へ"s, u8"To the next round."s);
                ++listmax;
            }
            if (winner == 0)
            {
                list(0, listmax) = 0;
                listn(0, listmax) = lang(u8"戻る"s, u8"Bah...!"s);
                ++listmax;
            }
            chatesc = -1;
            txtadvmsgfix = 240;
            txtadvscreenupdate = 0;
            casino_choose_card();
            if (winner == 0)
            {
                break;
            }
            cardround = 0;
            continue;
        }
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"これに決める"s, u8"Stay."s);
        ++listmax;
        if (pileremain() > 10)
        {
            if (cpcardnum(1) < 5)
            {
                list(0, listmax) = 1;
                listn(0, listmax) =
                    lang(u8"もう一枚引く(運)"s, u8"Hit me. (Luck)"s);
                ++listmax;
            }
            list(0, listmax) = 2;
            listn(0, listmax) = lang(u8"イカサマ(器用"s, u8"Cheat. (Dex:"s)
                + sdata(12, 0) + u8")"s;
            ++listmax;
        }
        chatesc = -1;
        txtadvmsgfix = 240;
        txtadvscreenupdate = 0;
        casino_choose_card();
        if (rtval == 0)
        {
            opencard2(cpblackcard(0));
            cardround = -1;
            continue;
        }
        if (rtval == 1)
        {
            int stat = servecard(1);
            p = stat;
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                if (cpscore(1) >= 22)
                {
                    if (pileremain() > 10)
                    {
                        if (rnd(sdata(19, 0)) > 40)
                        {
                            txt(lang(
                                u8"このカードは悪い予感がする…"s,
                                u8"I have a bad feeling about this card..."s));
                            trashcard(p);
                            int stat = servecard(1);
                            p = stat;
                        }
                    }
                }
            }
            opencard2(p);
        }
        if (rtval == 2)
        {
            trashcard(lastcard(1));
            int stat = servecard(1);
            opencard2(stat);
            p = 20;
            if (stake == 5)
            {
                p = 40;
            }
            if (stake == 20)
            {
                p = 60;
            }
            if (rnd(sdata(12, 0)) < rnd(p))
            {
                atxinit();
                noteadd(lang(u8"イカサマだ！"s, u8"Cheater!"s));
                atxinfon(1) = lang(
                    u8"カジノチップ残り "s + mat(1) + u8"枚\n"s,
                    u8"Casino chips left: "s + mat(1) + u8"\n"s);
                atxinfon(2) = lang(
                    u8"賭けチップ "s + stake + u8"枚 現在"s + winrow
                        + u8"連勝中"s,
                    u8"Bets: "s + stake + u8" Wins: "s + winrow + ""s);
                winrow = 0;
                txt(lang(
                    u8"イカサマが見つかってしまった…"s,
                    u8"You are caught in cheating..."s));
                modify_karma(0, -5);
                list(0, listmax) = 0;
                listn(0, listmax) = lang(u8"濡れ衣だ！"s, u8"I didn't do it!"s);
                ++listmax;
                chatesc = -1;
                txtadvmsgfix = 0;
                txtadvscreenupdate = 1;
                casino_choose_card();
                break;
            }
        }
        ++cardround;
    }
    if (winrow > 0)
    {
        atxinit();
        noteadd(lang(
            u8"おめでとうございます。あなたは"s + winrow + u8"連勝しました。"s,
            u8"Congratulations! You've won "s + winrow
                + u8" times in a row."s));
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            i = 2;
            if (winrow > 2)
            {
                i = 3;
            }
            if (winrow > 7)
            {
                if (stake >= 5)
                {
                    i = 4;
                }
            }
            if (winrow > 15)
            {
                if (stake >= 20)
                {
                    i = 5;
                }
            }
            flt(calcobjlv(rnd(stake + winrow * 2) + winrow * 3 / 2 + stake / 2),
                i);
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            itemcreate(-1, 0, -1, -1, 0);
            if (inv[ci].number == 0)
            {
                --cnt;
                continue;
            }
        }
        snd(41);
        noteadd(lang(
            u8"@GRアイテム："s + itemname(ci, inv[ci].number)
                + u8"を戦利品に加えた！"s,
            u8"@GR"s + itemname(ci, inv[ci].number)
                + u8" has been added to your loot list!"s));
        if (winrow > 3)
        {
            if (rnd(200) < winrow * 5 + 5)
            {
                flt();
                itemcreate(-1, 559, -1, -1, 0);
                snd(41);
                noteadd(lang(
                    u8"@GRアイテム："s + itemname(ci, inv[ci].number)
                        + u8"を戦利品に加えた！"s,
                    u8"@GR"s + itemname(ci, inv[ci].number)
                        + u8" has been added to your loot list!"s));
            }
        }
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"戻る"s, u8"Great."s);
        ++listmax;
        chatesc = 0;
        txtadvmsgfix = 0;
        txtadvscreenupdate = 1;
        casino_choose_card();
        winrow = 0;
    }
    return true;
}



int modpiety(int prm_1035)
{
    if (gdata_god_rank == 4)
    {
        if (cdata[0].piety_point >= 4000)
        {
            ++gdata_god_rank;
            txtgod(cdata[0].god_id, 8);
        }
    }
    if (gdata_god_rank == 2)
    {
        if (cdata[0].piety_point >= 2500)
        {
            ++gdata_god_rank;
            txtgod(cdata[0].god_id, 7);
        }
    }
    if (gdata_god_rank == 0)
    {
        if (cdata[0].piety_point >= 1500)
        {
            ++gdata_god_rank;
            txtgod(cdata[0].god_id, 7);
        }
    }
    if (sdata(181, 0) * 100 < cdata[0].piety_point)
    {
        txt(lang(
            u8"あなたの信仰は既に限界まで高まっている。"s,
            u8" Your God becomes indifferent to your gift."s));
        return 0;
    }
    cdata[0].piety_point += prm_1035 / (1 + (gdata_current_map == 35) * 9);
    return 1;
}



void set_npc_religion()
{
    if (!cdata[tc].god_id.empty() || cdata[tc].has_learned_words() || tc == 0)
    {
        return;
    }
    randomize(gdata_random_seed + gdata_current_map);
    cdata[tc].god_id = core_god::int2godid(rnd(8));
    randomize();
    if (cdata[tc].god_id.empty() || rnd(4) == 0)
    {
        cdata[tc].has_learned_words() = true;
    }
    return;
}



void apply_god_blessing(int cc)
{
    if (cdata[cc].god_id == core_god::mani)
    {
        if (sdata(12, cc) > 0)
        {
            sdata(12, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 8 + sdata(181, 0) / 10);
        }
        if (sdata(13, cc) > 0)
        {
            sdata(13, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 14 + sdata(181, 0) / 10);
        }
        if (sdata(154, cc) > 0)
        {
            sdata(154, cc) +=
                clamp(cdata[cc].piety_point / 500, 1, 8 + sdata(181, 0) / 10);
        }
        if (sdata(110, cc) > 0)
        {
            sdata(110, cc) +=
                clamp(cdata[cc].piety_point / 250, 1, 18 + sdata(181, 0) / 10);
        }
        if (sdata(159, cc) > 0)
        {
            sdata(159, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 8 + sdata(181, 0) / 10);
        }
        if (sdata(158, cc) > 0)
        {
            sdata(158, cc) +=
                clamp(cdata[cc].piety_point / 250, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(176, cc) > 0)
        {
            sdata(176, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 10 + sdata(181, 0) / 10);
        }
        if (sdata(179, cc) > 0)
        {
            sdata(179, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 12 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::lulwy)
    {
        if (sdata(13, cc) > 0)
        {
            sdata(13, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 10 + sdata(181, 0) / 10);
        }
        if (sdata(18, cc) > 0)
        {
            sdata(18, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 30 + sdata(181, 0) / 10);
        }
        if (sdata(108, cc) > 0)
        {
            sdata(108, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(109, cc) > 0)
        {
            sdata(109, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(157, cc) > 0)
        {
            sdata(157, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(174, cc) > 0)
        {
            sdata(174, cc) +=
                clamp(cdata[cc].piety_point / 550, 1, 8 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::itzpalt)
    {
        if (sdata(16, cc) > 0)
        {
            sdata(16, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 18 + sdata(181, 0) / 10);
        }
        if (sdata(155, cc) > 0)
        {
            sdata(155, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 15 + sdata(181, 0) / 10);
        }
        if (sdata(50, cc) > 0)
        {
            sdata(50, cc) +=
                clamp(cdata[cc].piety_point / 50, 1, 200 + sdata(181, 0) / 10);
        }
        if (sdata(51, cc) > 0)
        {
            sdata(51, cc) +=
                clamp(cdata[cc].piety_point / 50, 1, 200 + sdata(181, 0) / 10);
        }
        if (sdata(52, cc) > 0)
        {
            sdata(52, cc) +=
                clamp(cdata[cc].piety_point / 50, 1, 200 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::ehekatl)
    {
        if (sdata(17, cc) > 0)
        {
            sdata(17, cc) +=
                clamp(cdata[cc].piety_point / 250, 1, 20 + sdata(181, 0) / 10);
        }
        if (sdata(19, cc) > 0)
        {
            sdata(19, cc) +=
                clamp(cdata[cc].piety_point / 100, 1, 50 + sdata(181, 0) / 10);
        }
        if (sdata(173, cc) > 0)
        {
            sdata(173, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 15 + sdata(181, 0) / 10);
        }
        if (sdata(164, cc) > 0)
        {
            sdata(164, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 17 + sdata(181, 0) / 10);
        }
        if (sdata(185, cc) > 0)
        {
            sdata(185, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(158, cc) > 0)
        {
            sdata(158, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 8 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::opatos)
    {
        if (sdata(10, cc) > 0)
        {
            sdata(10, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 11 + sdata(181, 0) / 10);
        }
        if (sdata(11, cc) > 0)
        {
            sdata(11, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(168, cc) > 0)
        {
            sdata(168, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 15 + sdata(181, 0) / 10);
        }
        if (sdata(153, cc) > 0)
        {
            sdata(153, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(163, cc) > 0)
        {
            sdata(163, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(174, cc) > 0)
        {
            sdata(174, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 8 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::jure)
    {
        if (sdata(15, cc) > 0)
        {
            sdata(15, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(154, cc) > 0)
        {
            sdata(154, cc) +=
                clamp(cdata[cc].piety_point / 250, 1, 18 + sdata(181, 0) / 10);
        }
        if (sdata(155, cc) > 0)
        {
            sdata(155, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 10 + sdata(181, 0) / 10);
        }
        if (sdata(161, cc) > 0)
        {
            sdata(161, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 9 + sdata(181, 0) / 10);
        }
        if (sdata(184, cc) > 0)
        {
            sdata(184, cc) +=
                clamp(cdata[cc].piety_point / 450, 1, 8 + sdata(181, 0) / 10);
        }
        if (sdata(174, cc) > 0)
        {
            sdata(174, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 10 + sdata(181, 0) / 10);
        }
        if (sdata(164, cc) > 0)
        {
            sdata(164, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 12 + sdata(181, 0) / 10);
        }
    }
    if (cdata[cc].god_id == core_god::kumiromi)
    {
        if (sdata(13, cc) > 0)
        {
            sdata(13, cc) +=
                clamp(cdata[cc].piety_point / 400, 1, 8 + sdata(181, 0) / 10);
        }
        if (sdata(12, cc) > 0)
        {
            sdata(12, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(14, cc) > 0)
        {
            sdata(14, cc) +=
                clamp(cdata[cc].piety_point / 250, 1, 16 + sdata(181, 0) / 10);
        }
        if (sdata(180, cc) > 0)
        {
            sdata(180, cc) +=
                clamp(cdata[cc].piety_point / 300, 1, 12 + sdata(181, 0) / 10);
        }
        if (sdata(178, cc) > 0)
        {
            sdata(178, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 10 + sdata(181, 0) / 10);
        }
        if (sdata(177, cc) > 0)
        {
            sdata(177, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 9 + sdata(181, 0) / 10);
        }
        if (sdata(150, cc) > 0)
        {
            sdata(150, cc) +=
                clamp(cdata[cc].piety_point / 350, 1, 8 + sdata(181, 0) / 10);
        }
    }
}



void get_god_description()
{
    buff = u8" "s;
    if (inv[ci].param1 == 1)
    {
        buff = lang(
            u8"マニは機械仕掛けの神です。マニを信仰した者は、機械や罠に対する膨大な知識を得、またそれらを効果的に利用する術を知ります。<p><p>"s,
            u8"Mani is a clockwork god of machinery. Those faithful to Mani<br>receive immense knowledge of machines and learn a way to use them<br>effectively.<p>"s);
        buff += lang(
            u8"　捧げ物: 死体 / 銃器 / 機械<p>"s,
            u8"Offering: Corpses/Guns/Machinery<p>"s);
        buff += lang(
            u8"ボーナス: 器用 / 感覚 / 銃 / 治癒 / 探知 / 宝石細工 / 鍵開け / 大工<p>"s,
            u8"   Bonus: DEX/PER/Gun/Jeweller/Lockpick/Carpentry<p>"s);
        buff += lang(
            u8"特殊能力: マニの分解術(自動:罠からマテリアルを取り出す)<p>"s,
            u8" Ability: Mani's decomposition (Passive: Extract materials<br>from traps.)<p>"s);
    }
    if (inv[ci].param1 == 2)
    {
        buff = lang(
            u8"ルルウィは風を司る女神です。ルルウィを信仰した者は、風の恩恵を受け素早く動くことが可能になります。<p><p>"s,
            u8"Lulwy is a goddess of wind. Those faithful to Lulwy receive<br>the blessing of wind and can move swiftly.<p>"s);
        buff +=
            lang(u8"　捧げ物: 死体 / 弓<p>"s, u8"Offering: Corpses/Bows<p>"s);
        buff += lang(
            u8"ボーナス: 感覚 / 速度 / 弓 / クロスボウ / 隠密 / 魔道具<p>"s,
            u8"   Bonus: PER/SPD/Bow/Crossbow/Stealth/Magic Device<p>"s);
        buff += lang(
            u8"特殊能力: ルルウィの憑依(スキル:瞬間的に高速になる)<p>"s,
            u8" Ability: Lulwy's trick (Boost your speed for a short time.)<p>"s);
    }
    if (inv[ci].param1 == 3)
    {
        buff = lang(
            u8"イツパロトルは元素を司る神です。イツパロトルを信仰した者は、魔力を大気から吸収し、元素に対する保護を受けることができます。<p><p>"s,
            u8"Itzpalt is a god of elements. Those faithful to Itzpalt are<br>protected from elemental damages and learn to absorb mana from<br>their surroundings.<p>"s);
        buff +=
            lang(u8"　捧げ物: 死体 / 杖<p>"s, u8"Offering: Corpses/Staves<p>"s);
        buff += lang(
            u8"ボーナス: 魔力 / 瞑想 / 火炎耐性 / 冷気耐性 / 電撃耐性<p>"s,
            u8"   Bonus: MAG/Meditation/RES Fire/RES Cold/RES Lightning<p>"s);
        buff += lang(
            u8"特殊能力: マナの抽出(スキル:周囲の空気からマナを吸い出す)<p>"s,
            u8" Ability: Absorb mana (Absorb mana from the air.)<p>"s);
    }
    if (inv[ci].param1 == 4)
    {
        buff = lang(
            u8"エヘカトルは幸運の女神です。エヘカトルを信仰した者は、運を味方につけます。<p><p>"s,
            u8"Ehekatl is a goddess of luck. Those faithful to Ehekatl are<br>really lucky.<p><p>"s);
        buff +=
            lang(u8"　捧げ物: 死体 / 魚<p>"s, u8"Offering: Corpses/Fish<p>"s);
        buff += lang(
            u8"ボーナス: 魅力 / 運 / 回避 / 魔力の限界 / 釣り/ 鍵開け<p>"s,
            u8"   Bonus: CHR/LUCK/Evasion/Magic Capacity/Fishing/Lockpick<p>"s);
        buff += lang(
            u8"特殊能力: エヘカトル流魔術(自動:マナの消費がランダムになる)<p>"s,
            u8" Ability: Ehekatl school of magic (Passive: Randomize casting mana<br>cost.)<p>"s);
    }
    if (inv[ci].param1 == 5)
    {
        buff = lang(
            u8"オパートスは大地の神です。オパートスを信仰した者は、高い防御力と破壊力を身につけます。<p><p>"s,
            u8"Opatos is a god of earth. Those faithful to Opatos have massive<br>strength and defense.<p><p>"s);
        buff +=
            lang(u8"　捧げ物: 死体 / 鉱石<p>"s, u8"Offering: Corpses/Ores<p>"s);
        buff += lang(
            u8"ボーナス: 腕力 / 耐久 / 盾 / 重量挙げ / 採掘 / 魔道具<p>"s,
            u8"   Bonus: STR/CON/Shield/Weight Lifting/Mining/Magic Device<p>"s);
        buff += lang(
            u8"特殊能力: オパートスの甲殻(自動:受ける物理ダメージを減らす)<p>"s,
            u8" Ability: Opatos' shell (Passive: Reduce any physical damage you<br>receive.)<p>"s);
    }
    if (inv[ci].param1 == 6)
    {
        buff = lang(
            u8"ジュアは癒しの女神です。ジュアを信仰した者は、傷ついた身体を癒すことができます。<p><p>"s,
            u8"Jure is a god of healing. Those faithful to Jure can heal wounds.<p><p>"s);
        buff +=
            lang(u8"　捧げ物: 死体 / 鉱石<p>"s, u8"Offering: Corpses/Ores<p>"s);
        buff += lang(
            u8"ボーナス: 意思 / 治癒 / 瞑想 / 解剖学 / 料理 / 魔道具 / 魔力の限界<p>"s,
            u8"   Bonus: WIL/Healing/Anatomy/Cooking/Magic Device/Magic Capacity<p>"s);
        buff += lang(
            u8"特殊能力: ジュアの祈り(スキル:失った体力を回復)<p>"s,
            u8" Ability: Prayer of Jure (Heal yourself.)<p>"s);
    }
    if (inv[ci].param1 == 7)
    {
        buff = lang(
            u8"クミロミは収穫の神です。クミロミを信仰した者は、大地の恵みを収穫し、それを加工する術を知ります。<p><p>"s,
            u8"Kumiromi is a god of harvest. Those faithful to Kumiromi receive<br>the blessings of nature.<p><p>"s);
        buff += lang(
            u8"　捧げ物: 死体 / 野菜<p>"s,
            u8"Offering: Corpses/Vegetables<p>"s);
        buff += lang(
            u8"ボーナス: 感覚 / 器用 / 習得 / 栽培 / 錬金術 / 裁縫 / 読書<p>"s,
            u8"   Bonus: PER/DEX/LER/Gardening/Alchemy/Tailoring/Literacy<p>"s);
        buff += lang(
            u8"特殊能力: 生命の輪廻(自動：腐った作物から種を取り出す)<p>"s,
            u8" Ability: Kumiromi's recycle (Passive: Extract seeds from rotten foods.)<p>"s);
    }
    return;
}



void label_1886()
{
    cs = 0;
    page = 0;
    pagemax = 0;
    pagesize = 16;
    cs_bk = -1;
    key = "";
    objprm(0, ""s);
    keylog = "";
    listmax = 0;
    chatesc = 2;
    if (!cdata[0].god_id.empty())
    {
        if (inv[ci].param1 == 0)
        {
            s = lang(u8"信仰を捨てる"s, u8"Abandon God"s);
        }
        else
        {
            s = lang(
                i18n::_(u8"god", core_god::int2godid(inv[ci].param1), u8"name")
                    + u8"に改宗する"s,
                u8"Convert to "s
                    + i18n::_(
                          u8"god",
                          core_god::int2godid(inv[ci].param1),
                          u8"name"));
        }
        list(0, listmax) = 0;
        listn(0, listmax) = s;
        ++listmax;
    }
    else
    {
        list(0, listmax) = 0;
        listn(0, listmax) = lang(
            i18n::_(u8"god", core_god::int2godid(inv[ci].param1), u8"name")
                + u8"を信仰する"s,
            u8"Believe in "s
                + i18n::_(
                      u8"god", core_god::int2godid(inv[ci].param1), u8"name"));
        ++listmax;
    }
    list(0, listmax) = 2;
    listn(0, listmax) = lang(u8"やめる"s, u8"Cancel"s);
    ++listmax;
    snd(62);
    gsel(4);
    gmode(0);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"bg_altar.bmp", 1);
    pos(0, 0);
    gzoom(4, 0, 0, 600, 400, windoww, windowh - inf_verh);
    gsel(0);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
    }
label_1887_internal:
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh - inf_verh);
    gmode(2);
    render_hud();
    dx = 520;
    dy = 270;
    window2((windoww - dx) / 2 + inf_screenx, winposy(dy), dx, dy, 4, 6);
    wx = (windoww - dx) / 2 + inf_screenx;
    wy = winposy(dy);
    font(18 - en * 2, snail::font_t::style_t::bold);
    pos(wx + 20, wy + 20);
    bmes(
        lang(u8"《 "s, u8"< "s)
            + i18n::_(u8"god", core_god::int2godid(inv[ci].param1), u8"name")
            + lang(u8" 》"s, u8" >"s),
        255,
        255,
        255);
    get_god_description();
    gmes(buff, wx + 23, wy + 60, dx - 60, {30, 30, 30}, true);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        i = list(0, p);
        display_key(wx + 50, wy + dy + cnt * 20 - listmax * 20 - 18, cnt);
        s = listn(0, p);
        cs_list(cs == cnt, s, wx + 80, wy + dy + cnt * 20 - listmax * 20 - 18);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(rtval, snd(40));
    if (chatesc != -1)
    {
        if (key == key_cancel)
        {
            snd(40);
            rtval = chatesc;
        }
    }
    if (rtval != -1)
    {
        label_1888();
        return;
    }
    goto label_1887_internal;
}



void label_1888()
{
    if (rtval == 0)
    {
        gmode(0);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh - inf_verh);
        gmode(2);
        render_hud();
        redraw();
        if (!cdata[0].god_id.empty())
        {
            mode = 9;
            txtef(8);
            txt(lang(
                i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"は激怒した。"s,
                i18n::_(u8"god", cdata[0].god_id, u8"name")
                    + u8" is enraged."s));
            txtgod(cdata[0].god_id, 1);
            redraw();
            efid = 622;
            efp = 10000;
            tc = 0;
            magic();
            snd(63);
            mode = 0;
            await(500);
        }
        cdata[0].god_id = core_god::int2godid(inv[ci].param1);
        switch_religion();
        msg_halt();
    }
    refresh_character(0);
    return;
}



void switch_religion()
{
    cdata[0].piety_point = 0;
    cdata[0].praying_point = 500;
    gdata_god_rank = 0;
    spact(23) = 0;
    spact(24) = 0;
    spact(25) = 0;
    if (cdata[0].god_id.empty())
    {
        txtef(5);
        txt(lang(
            u8"あなたは今や無信仰者だ。"s, u8"You are an unbeliever now."s));
    }
    else
    {
        animode = 100;
        play_animation(19);
        snd(51);
        txtef(5);
        txt(lang(
            u8"あなたは今や"s + i18n::_(u8"god", cdata[0].god_id, u8"name")
                + u8"の信者だ！"s,
            u8"You become a follower of "s
                + i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"!"s));
        if (cdata[0].god_id == core_god::itzpalt)
        {
            spact(24) = 1;
        }
        if (cdata[0].god_id == core_god::jure)
        {
            spact(23) = 1;
        }
        if (cdata[0].god_id == core_god::lulwy)
        {
            spact(25) = 1;
        }
        txtgod(cdata[0].god_id, 5);
    }
    return;
}



turn_result_t do_pray()
{
    if (cdata[0].god_id.empty())
    {
        txt(lang(
            name(0) + u8"は神を信仰していないが、試しに祈ってみた。"s,
            u8"You don't believe in God."s));
        return turn_result_t::turn_end;
    }
    txtnew();
    txt(lang(u8"あなたの神に祈りを乞う？"s, u8"Really pray to your God?"s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    if (rtval != 0)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    txt(lang(
        i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"に祈った。"s,
        u8"You pray to "s + i18n::_(u8"god", cdata[0].god_id, u8"name")
            + u8"."s));
    if (cdata[0].piety_point < 200 || cdata[0].praying_point < 1000)
    {
        txt(lang(
            i18n::_(u8"god", cdata[0].god_id, u8"name")
                + u8"はあなたに無関心だ。"s,
            i18n::_(u8"god", cdata[0].god_id, u8"name")
                + u8" is indifferent to you."s));
        return turn_result_t::turn_end;
    }
    animode = 100;
    play_animation(19);
    snd(120);
    efid = 1120;
    efp = 100;
    tc = 0;
    magic();
    efid = 451;
    efp = 200;
    tc = 0;
    magic();
    cdata[0].praying_point = 0;
    cdata[0].piety_point = cdata[0].piety_point * 85 / 100;
    if (gdata_god_rank % 2 == 1)
    {
        txtgod(cdata[0].god_id, 6);
        if (gdata_god_rank == 1)
        {
            f = 0;
            p = 0;
            for (int cnt = 1; cnt < 16; ++cnt)
            {
                if (cdata[cnt].state != 0)
                {
                    if (cdatan(2, cnt) == u8"servant"s)
                    {
                        ++p;
                        if (p >= 2)
                        {
                            f = 1;
                            txt(lang(
                                u8"神の使徒は2匹までしか仲間にできない。"s,
                                u8"No more than 2 God's servants are allowed in your party."s));
                            break;
                        }
                    }
                }
            }
            if (f == 0)
            {
                if (get_freeally() == 0)
                {
                    f = 1;
                    txt(lang(
                        u8"仲間が一杯で、神からの贈り物を受け取ることができなかった。"s,
                        u8"Your party is full. The gift is reserved."s));
                }
            }
            if (f)
            {
                txt(lang(
                    u8"この贈り物を諦める？"s,
                    u8"Do you want to decline this gift?"s));
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                if (rtval == 0)
                {
                    ++gdata_god_rank;
                }
                return turn_result_t::turn_end;
            }
            flt();
            dbid = 0;
            txtef(4);
            if (cdata[0].god_id == core_god::mani)
            {
                dbid = 262;
                txt(lang(
                    u8"このアンドロイドはブーストした時に恐るべき力を発揮するようだ。"s,
                    u8"This android shows enormous strength when boosting."s));
            }
            if (cdata[0].god_id == core_god::lulwy)
            {
                dbid = 263;
                txt(lang(
                    u8"この黒天使はブーストした時に恐るべき力を発揮するようだ。"s,
                    u8"This black angel shows enormous strength when boosting."s));
            }
            if (cdata[0].god_id == core_god::itzpalt)
            {
                dbid = 264;
                txt(lang(
                    u8"この追放者は連続魔法を使えるようだ。"s,
                    u8"This exile can cast several spells in a row."s));
            }
            if (cdata[0].god_id == core_god::ehekatl)
            {
                dbid = 260;
                txt(lang(
                    u8"この猫に舐められた武具は、エヘカトルの祝福を授かるようだ。祝福を受けた武具にはエンチャントが一つ付与される。"s,
                    u8"Weapons and armor licked by this cat receive a blessing of Ehekatl which adds an extra enchantment."s));
            }
            if (cdata[0].god_id == core_god::opatos)
            {
                dbid = 265;
                txt(lang(
                    u8"この騎士はある程度重いものをもたせても文句をいわないようだ。"s,
                    u8"This knight can hold really heavy stuff for you."s));
            }
            if (cdata[0].god_id == core_god::jure)
            {
                dbid = 266;
                txt(lang(
                    u8"この防衛者は致死ダメージを受けた仲間をレイハンドで回復できるようだ。レイハンドは眠るたびに再使用可能になる。"s,
                    u8"This defender can use Lay on hand to heal a mortally wounded ally. The ability becomes re-useable after sleeping."s));
            }
            if (cdata[0].god_id == core_god::kumiromi)
            {
                dbid = 261;
                txt(lang(
                    u8"この妖精は食後に種を吐き出すようだ。"s,
                    u8"This fairy generates a seed after eating."s));
            }
            novoidlv = 1;
            characreate(56, dbid, -3, 0);
            rc = 56;
            new_ally_joins();
        }
        if (gdata_god_rank == 3)
        {
            flt();
            dbid = 0;
            if (cdata[0].god_id == core_god::lulwy)
            {
                dbid = 680;
            }
            if (cdata[0].god_id == core_god::jure)
            {
                dbid = 681;
            }
            if (cdata[0].god_id == core_god::kumiromi)
            {
                dbid = 682;
            }
            if (cdata[0].god_id == core_god::mani)
            {
                dbid = 683;
            }
            if (dbid != 0)
            {
                if (itemmemory(1, dbid))
                {
                    dbid = 559;
                }
                itemcreate(
                    -1, dbid, cdata[0].position.x, cdata[0].position.y, 0);
            }
            else
            {
                nostack = 1;
                itemcreate(
                    -1, 672, cdata[0].position.x, cdata[0].position.y, 0);
                if (cdata[0].god_id == core_god::itzpalt)
                {
                    inv[ci].param1 = 165;
                }
                if (cdata[0].god_id == core_god::ehekatl)
                {
                    inv[ci].param1 = 163;
                }
                if (cdata[0].god_id == core_god::opatos)
                {
                    inv[ci].param1 = 164;
                }
            }
            if (cdata[0].god_id == core_god::jure)
            {
                flt();
                nostack = 1;
                itemcreate(
                    -1, 672, cdata[0].position.x, cdata[0].position.y, 0);
                inv[ci].param1 = 166;
            }
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
        }
        if (gdata_god_rank == 5)
        {
            flt();
            dbid = 0;
            if (cdata[0].god_id == core_god::mani)
            {
                dbid = 674;
            }
            if (cdata[0].god_id == core_god::lulwy)
            {
                dbid = 673;
            }
            if (cdata[0].god_id == core_god::itzpalt)
            {
                dbid = 676;
            }
            if (cdata[0].god_id == core_god::ehekatl)
            {
                dbid = 678;
            }
            if (cdata[0].god_id == core_god::opatos)
            {
                dbid = 679;
            }
            if (cdata[0].god_id == core_god::jure)
            {
                dbid = 677;
            }
            if (cdata[0].god_id == core_god::kumiromi)
            {
                dbid = 675;
            }
            if (itemmemory(1, dbid))
            {
                dbid = 621;
            }
            itemcreate(-1, dbid, cdata[0].position.x, cdata[0].position.y, 0);
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
        }
        ++gdata_god_rank;
    }
    return turn_result_t::turn_end;
}



turn_result_t do_offer()
{
    if (cdata[0].god_id.empty())
    {
        txt(lang(
            u8"あなたは神を信仰していないが、試しに捧げてみた。"s,
            u8"You don't believe in God."s));
        return turn_result_t::turn_end;
    }
    rowact_item(ci);
    item_separate(ci);
    txt(lang(
        u8"あなたは"s + itemname(ci) + u8"を"s
            + i18n::_(u8"god", cdata[0].god_id, u8"name")
            + u8"に捧げ、その名を唱えた。"s,
        u8"You put "s + itemname(ci)
            + u8" on the altar and mutter the name of "s
            + i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"."s));
    snd(121);
    play_animation(7);
    int stat = item_find(60002);
    if (stat != -1)
    {
        ti = stat;
    }
    else
    {
        return turn_result_t::turn_end;
    }
    if (inv[ci].id == 204)
    {
        i = clamp(inv[ci].weight / 200, 1, 50);
        if (inv[ci].param3 < 0)
        {
            i = 1;
        }
    }
    else
    {
        i = 25;
    }
    if (core_god::int2godid(inv[ti].param1) != cdata[0].god_id)
    {
        f = 0;
        if (inv[ti].param1 == 0)
        {
            f = 1;
            txt(lang(
                u8"異世界で、"s + i18n::_(u8"god", cdata[0].god_id, u8"name")
                    + u8"が空白の祭壇の権利を主張した。"s,
                i18n::_(u8"god", cdata[0].god_id, u8"name")
                    + u8" claims the empty altar."s));
        }
        else
        {
            txt(lang(
                u8"異様な霧が現れ、"s
                    + i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"と"s
                    + i18n::_(
                          u8"god",
                          core_god::int2godid(inv[ti].param1),
                          u8"name")
                    + u8"の幻影がせめぎあった。"s,
                u8"Strange fogs surround all over the place. You see shadows of "s
                    + i18n::_(u8"god", cdata[0].god_id, u8"name") + u8" and "s
                    + i18n::_(
                          u8"god",
                          core_god::int2godid(inv[ti].param1),
                          u8"name")
                    + u8" make a fierce dance."s));
            if (rnd(17) <= i)
            {
                f = 1;
            }
            else
            {
                f = 0;
            }
        }
        if (f == 1)
        {
            modpiety(i * 5);
            cdata[0].praying_point += i * 30;
            animode = 100;
            play_animation(19);
            snd(120);
            if (inv[ti].param1 != 0)
            {
                txt(lang(
                    u8"あなたの神の幻影は、次第に色濃くなった。"s,
                    u8"The shadow of your god slowly gets bolder."s));
            }
            txtef(5);
            txt(lang(
                i18n::_(u8"god", cdata[0].god_id, u8"name") + u8"は"s
                    + itemname(ti) + u8"を支配した。"s,
                i18n::_(u8"god", cdata[0].god_id, u8"name")
                    + u8" takes over the altar."s));
            txtgod(cdata[0].god_id, 2);
            inv[ti].param1 = core_god::godid2int(cdata[0].god_id);
        }
        else
        {
            txt(lang(
                i18n::_(u8"god", core_god::int2godid(inv[ti].param1), u8"name")
                    + u8"は祭壇を守りきった。"s,
                i18n::_(u8"god", core_god::int2godid(inv[ti].param1), u8"name")
                    + u8" keeps the altar."s));
            txtgod(core_god::int2godid(inv[ti].param1), 3);
            label_1892();
        }
    }
    else
    {
        txtef(2);
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (i >= 15)
            {
                txt(lang(
                    itemname(ci) + u8"はまばゆく輝いて消えた。"s,
                    itemname(ci) + u8" shine"s + _s2(inv[ci].number)
                        + u8" all around and disappear"s + _s2(inv[ci].number)
                        + u8"."s));
                txtgod(cdata[0].god_id, 4);
                break;
            }
            if (i >= 10)
            {
                txt(lang(
                    itemname(ci)
                        + u8"は輝いて消え、三つ葉のクローバーがふってきた。"s,
                    itemname(ci) + u8" shine"s + _s2(inv[ci].number)
                        + u8" for a moment and disappear"s + _s2(inv[ci].number)
                        + u8". A three-leaved falls from the altar."s));
                break;
            }
            if (i >= 5)
            {
                txt(lang(
                    itemname(ci) + u8"は一瞬輝いて消えた。"s,
                    itemname(ci) + u8" shine"s + _s2(inv[ci].number)
                        + u8" for a moment and disappear"s + _s2(inv[ci].number)
                        + u8"."s));
                break;
            }
            if (i >= 1)
            {
                txt(lang(
                    itemname(ci) + u8"は消えた。"s,
                    itemname(ci) + u8" disappear"s + _s2(inv[ci].number)
                        + u8"."s));
                break;
            }
        }
        modpiety(i);
        cdata[0].praying_point += i * 7;
    }
    removeitem(ci, inv[ci].number);
    return turn_result_t::turn_end;
}



void label_1892()
{
    efid = 1114;
    efp = 500;
    tc = 0;
    magic();
    if (rnd(2))
    {
        efid = 622;
        efp = 250;
        tc = 0;
        magic();
        snd(63);
    }
    if (rnd(2))
    {
        efid = 1106;
        efp = 100;
        tc = 0;
        magic();
    }
    return;
}



int proc_random_event()
{
    int id0 = 0;
    int id1 = 0;
    if (gspd < 10)
    {
        return 0;
    }
    if (dbg_skipevent)
    {
        return 0;
    }
    if (mode == 12)
    {
        return 0;
    }
    if (mode == 9)
    {
        if (!cdata[0].god_id.empty())
        {
            if (rnd(12) == 0)
            {
                id0 = 18;
            }
        }
        if (rnd(80) == 0)
        {
            id0 = 4;
            id1 = 120;
        }
        if (rnd(20) == 0)
        {
            id0 = 3;
        }
        if (rnd(25) == 0)
        {
            id0 = 2;
        }
        if (rnd(100) == 0)
        {
            id0 = 5;
            id1 = 65;
        }
        if (rnd(20) == 0)
        {
            id0 = 6;
        }
        if (rnd(20) == 0)
        {
            id0 = 7;
        }
        if (rnd(250) == 0)
        {
            if (inv_getfreeid(0) != -1)
            {
                id0 = 19;
            }
        }
        if (rnd(10000) == 0)
        {
            if (inv_getfreeid(0) != -1)
            {
                id0 = 21;
            }
        }
        if (rnd(70) == 0)
        {
            id0 = 8;
            id1 = 40;
        }
        if (rnd(200) == 0)
        {
            id0 = 20;
        }
        if (rnd(50) == 0)
        {
            id0 = 23;
        }
        if (rnd(300) == 0)
        {
            id0 = 24;
        }
        if (rnd(90) == 0)
        {
            id0 = 22;
            id1 = 70;
        }
        goto label_1894_internal;
    }
    if (mdata(6) != 1)
    {
        if (cdata[0].continuous_action_id != 0)
        {
            return 0;
        }
    }
    if (mdata(6) == 5)
    {
        return 0;
    }
    if (rnd(30) == 0)
    {
        id0 = 17;
    }
    if (rnd(25) == 0)
    {
        id0 = 16;
    }
    if (rnd(25) == 0)
    {
        id0 = 12;
    }
    if (rnd(50) == 0)
    {
        id0 = 9;
    }
    if (rnd(80) == 0)
    {
        id0 = 14;
    }
    if (rnd(50) == 0)
    {
        id0 = 8;
        id1 = 40;
    }
    if (rnd(80) == 0)
    {
        id0 = 13;
        id1 = 45;
    }
    if (mdata(6) == 3)
    {
        if (rnd(25) == 0)
        {
            id0 = 15;
            id1 = 80;
        }
        goto label_1894_internal;
    }
    if (mdata(6) == 1)
    {
        if (rnd(40))
        {
            return 0;
        }
        goto label_1894_internal;
    }
    if (rnd(25) == 0)
    {
        id0 = 10;
    }
    if (rnd(25) == 0)
    {
        id0 = 11;
    }
label_1894_internal:
    if (id0 == 0)
    {
        return 0;
    }
    cc = 0;
    tc = 0;
    listmax = 0;
    if (id1 != 0)
    {
        if (rnd(sdata(19, 0) + 1) > id1)
        {
            id0 = 1;
        }
    }
    switch (id0)
    {
    case 15:
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            p = rnd(gdata_other_character_count + 1) + 57;
            if (p >= ELONA_MAX_CHARACTERS)
            {
                --cnt;
                continue;
            }
            if (cdata[p].state == 1)
            {
                txt(lang(
                    name(p) + u8"「ぎゃぁーー！」"s,
                    name(p) + u8" screams, "s + u8"\"Ahhhhhhh!\""s));
                dmghp(p, 99999, -11);
                break;
            }
        }
        s = lang(u8"殺人鬼"s, u8"Murderer"s);
        buff = lang(
            u8"街のどこかで悲鳴があがった。あなたはガードが慌しく走っていくのを目撃した。「人殺し、人殺しだ！！」"s,
            u8"Suddenly, a painful shriek rises from somewhere in the town. You see several guards hastily run by."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"なむ…"s, u8"Sorry for you."s);
        ++listmax;
        show_random_event_window(u8"bg_re9");
        break;
    case 14:
        s = lang(u8"謎のご馳走"s, u8"Strange Feast"s);
        buff = lang(
            u8"あなたは目の前にご馳走をみつけた。"s,
            u8"You come across a strange feast."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"食べる"s, u8"(Eat)"s);
        ++listmax;
        list(0, listmax) = 2;
        listn(0, listmax) = lang(u8"立ち去る"s, u8"(Leave)"s);
        ++listmax;
        show_random_event_window(u8"bg_re10");
        if (rtval == 1)
        {
            cdata[0].nutrition = 15000;
            txt(lang(u8"なかなか美味しかった。"s, u8"It was tasty."s),
                lang(u8"悪くない。"s, u8"Not bad at all."s),
                lang(u8"あなたは舌鼓をうった。"s, u8"You smack your lips."s));
            label_2162();
            chara_anorexia(0);
        }
        break;
    case 13:
        s = lang(u8"ご馳走の匂い"s, u8"Smell of Food"s);
        buff = lang(
            u8"どこからともなく漂うご馳走の匂いで、あなたの胃は不満を叫び始めた。"s,
            u8"A sweet smell of food floats from nowhere. Your stomach growls but you can't find out where it comes from."s);
        cdata[0].nutrition -= 5000;
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"腹減った…"s, u8"I'm hungry now!"s);
        ++listmax;
        show_random_event_window(u8"bg_re10");
        break;
    case 1:
        s = lang(u8"不運の回避"s, u8"Avoiding Misfortune"s);
        buff = lang(
            u8"あなたは一瞬嫌な予感がしたが、それはやがて消えた。"s,
            u8"You sense a bad feeling for a moment but it fades away quickly."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"よし"s, u8"Good."s);
        ++listmax;
        show_random_event_window(u8"bg_re8");
        break;
    case 24:
        efid = 1113;
        tc = 0;
        magic();
        s = lang(u8"才能の開花"s, u8"Your Potential"s);
        buff = lang(
            u8"突然あなたの才能は開花した！"s,
            u8"Suddenly you develop your gift!"s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ワァオー"s, u8"Woohoo!"s);
        ++listmax;
        show_random_event_window(u8"bg_re4");
        break;
    case 18:
        skillexp(181, 0, 1000, 6, 1000);
        s = lang(u8"信仰の深まり"s, u8"Gaining Faith"s);
        buff = lang(
            u8"夢の中で、あなたは偉大なる者の穏やかな威光に触れた。"s,
            u8"In your dream, a saint comes out and blesses you."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"神よ"s, u8"Great."s);
        ++listmax;
        show_random_event_window(u8"bg_re12");
        break;
    case 12:
        s = lang(u8"マテリアルの発見"s, u8"Small Luck"s);
        buff = lang(
            u8"石ころにつまずいて転んだ拍子に、あなたは幾つかのマテリアルを見つけた。"s,
            u8"You stumble over a stone and find some materials on the ground. "s);
        efid = 1117;
        efp = 100;
        tc = 0;
        magic();
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"よし"s, u8"Nice."s);
        ++listmax;
        show_random_event_window(u8"bg_re3");
        break;
    case 23:
        efid = 1117;
        efp = 200;
        tc = 0;
        magic();
        s = lang(u8"夢の中の収穫"s, u8"Dream Harvest"s);
        buff = lang(
            u8"夢の中で、あなたはのんきにマテリアルを採取していた"s,
            u8"In your dream, you harvest materials peacefully."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"るん♪"s, u8"Sweet."s);
        ++listmax;
        show_random_event_window(u8"bg_re3");
        break;
    case 10:
        s = lang(u8"野営跡の発見"s, u8"Camping Site"s);
        buff = lang(
            u8"あなたは何者かが野営した跡を見つけた。辺りには食べ残しやがらくたが散らばっている。もしかしたら、何か役に立つものがあるかもしれない。"s,
            u8"You discover a camping site someone left behind. Chunks of leftovers and junks remain here. You may possibly find some useful items."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"調べる"s, u8"(Search)"s);
        ++listmax;
        list(0, listmax) = 2;
        listn(0, listmax) = lang(u8"立ち去る"s, u8"(Leave)"s);
        ++listmax;
        show_random_event_window(u8"bg_re3");
        if (rtval == 1)
        {
            for (int cnt = 0, cnt_end = (1 + rnd(4)); cnt < cnt_end; ++cnt)
            {
                flt();
                flttypemajor = fsetremain(rnd(length(fsetremain)));
                itemcreate(-1, 0, cdata[0].position.x, cdata[0].position.y, 0);
            }
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
        }
        break;
    case 4:
        snd(116);
        efid = 1118;
        efp = 100;
        tc = 0;
        magic();
        s = lang(u8"不気味な夢"s, u8"Creepy Dream"s);
        buff = lang(
            u8"あなたは不気味な夢をみた。陰気な幾つもの瞳があなたを凝視し、どこからともなく笑い声がこだました。「ケラケラケラ…ミツケタヨ…ケラケラ」あなたが二度寝返りをうった後、その夢は終わった。"s,
            u8"In your dreams, several pairs of gloomy eyes stare at you and laughter seemingly from nowhere echoes around you.  \"Keh-la keh-la keh-la I found you...I found you.. keh-la keh-la keh-la\" After tossing around a couple times, the dream is gone."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"おかしな夢だ"s, u8"Strange..."s);
        ++listmax;
        show_random_event_window(u8"bg_re5");
        break;
    case 22:
        snd(116);
        efid = 454;
        efp = 100;
        tc = 0;
        magic();
        s = lang(u8"怪物の夢"s, u8"Monster Dream"s);
        buff = lang(
            u8"あなたは怪物と戦っていた。醜い化け物に斬りかかろうとした時、怪物は悲鳴をあげた。「オレハオマエダ！オマエハオレダ！」あなたは自分の呻き声に起こされた。"s,
            u8"You are fighting an ugly monster. You are about to thrust a dagger into the neck of the monster. And the monster screams. \"You are me! I am you!\" You are awakened by your own low moan."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ううぅん…"s, u8"Urrgh..hh.."s);
        ++listmax;
        show_random_event_window(u8"bg_re2");
        break;
    case 19:
        flt();
        itemcreate(0, 621, -1, -1, 0);
        txt(lang(
            itemname(ci, 1) + u8"をバックパックに入れた。"s,
            u8"You put "s + itemname(ci, 1) + u8" in your backpack."s));
        s = lang(u8"宝を埋める夢"s, u8"Treasure of Dream"s);
        buff = lang(
            u8"あなたは夢の中で宝を埋めた。あなたはすぐに飛び起き、その場所を紙に書き留めた"s,
            u8"You buried treasure in your dream. You quickly get up and write down the location."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ワァオー"s, u8"Woohoo!"s);
        ++listmax;
        show_random_event_window(u8"bg_re15");
        break;
    case 20:
        addbuff(tc, 19, 777, 1500);
        s = lang(u8"幸運の日"s, u8"Lucky Day"s);
        buff = lang(u8"うみみゃぁ！"s, u8"Mewmewmew!"s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ワァオー"s, u8"Woohoo!"s);
        ++listmax;
        show_random_event_window(u8"bg_re12");
        break;
    case 21:
        flt();
        itemcreate(0, 721, -1, -1, 0);
        txt(lang(
            itemname(ci, 1) + u8"をバックパックに入れた。"s,
            u8"You put "s + itemname(ci, 1) + u8" in your backpack."s));
        s = lang(u8"運命の気まぐれ"s, u8"Quirk of Fate"s);
        buff =
            lang(u8"うみみゃっ、見つけたね！"s, u8"Mewmew? You've found me!"s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ワァオー"s, u8"Woohoo!"s);
        ++listmax;
        show_random_event_window(u8"bg_re15");
        break;
    case 5:
        if (trait(42))
        {
            txt(lang(
                u8"あなたは祈祷を捧げ呪いのつぶやきを無効にした。"s,
                u8"Your prayer nullifies the curse."s));
        }
        else
        {
            f = 0;
            tc = 0;
            for (int i = 0; i < 30; ++i)
            {
                if (cdata_body_part(tc, i) % 10000 == 0)
                {
                    continue;
                }
                else
                {
                    f = 1;
                }
            }
            if (f)
            {
                efid = 1114;
                efp = 200;
                magic();
            }
            else if (evid() == -1)
            {
                evadd(26);
            }
        }
        s = lang(u8"呪いのつぶやき"s, u8"Cursed Whispering"s);
        buff = lang(
            u8"どこからともなく聞こえる呪いのつぶやきが、あなたの眠りを妨げた。"s,
            u8"Your sleep is disturbed by a harshly whispering that comes from nowhere."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"眠れない…"s, u8"Can't...sleep..."s);
        ++listmax;
        show_random_event_window(u8"bg_re5");
        break;
    case 8:
        p = rnd(cdata[0].gold / 8 + 1);
        if (cdata[0].is_protected_from_thieves())
        {
            p = 0;
        }
        if (p > 0)
        {
            txt(lang(
                u8"金貨"s + p + u8"枚を失った。"s,
                u8"You lose "s + p + u8" gold pieces."s));
            cdata[0].gold -= p;
        }
        else
        {
            txt(lang(
                u8"損害はなかった。"s,
                u8"The thief fails to steal money from you."s));
        }
        s = lang(u8"悪意ある手"s, u8"Malicious Hand"s);
        buff = lang(
            u8"悪意のある手が忍び寄り、あなたが気付かない間に金貨を奪って逃げた。"s,
            u8"A malicious hand slips and steals your money."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"盗人め…"s, u8"Bloody thieves..."s);
        ++listmax;
        show_random_event_window(u8"bg_re9");
        break;
    case 11:
        s = lang(u8"冒険者の遺骸"s, u8"Corpse"s);
        buff = lang(
            u8"この場所で力尽きた冒険者の遺骸を見つけた。既に朽ちかけている骨と、身に着けていたと思われる幾つかの装備が散らばっている。"s,
            u8"You find a corpse of an adventurer. There're bones and equipment scatters on the ground waiting to decay."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"あさる"s, u8"(Loot)"s);
        ++listmax;
        list(0, listmax) = 2;
        listn(0, listmax) = lang(u8"埋葬する"s, u8"(Bury)"s);
        ++listmax;
        show_random_event_window(u8"bg_re7");
        if (rtval == 1)
        {
            txt(lang(
                u8"あなたは遺留品をあさった。"s, u8"You loot the remains."s));
            modify_karma(0, -2);
            for (int cnt = 0, cnt_end = (1 + rnd(3)); cnt < cnt_end; ++cnt)
            {
                flt(0, calcfixlv(3));
                if (rnd(3) == 0)
                {
                    flttypemajor = fsetwear(rnd(length(fsetwear)));
                }
                else
                {
                    flttypemajor = fsetremain(rnd(length(fsetremain)));
                }
                itemcreate(-1, 0, cdata[0].position.x, cdata[0].position.y, 0);
            }
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
        }
        else
        {
            txt(lang(
                u8"あなたは骨と遺留品を埋葬した。"s,
                u8"You bury the corpse with respect."s));
            modify_karma(0, 5);
        }
        break;
    case 2:
        efid = 1104;
        efp = 100;
        tc = 0;
        magic();
        s = lang(u8"魔法使いの夢"s, u8"Wizard's Dream"s);
        buff = lang(
            u8"夢の中であなたは赤い髪の魔術師に出会った。「誰じゃ、お主は？ふむ、間違った者の夢に現れてしまったようじゃ。すまぬな。お詫びといってはなんじゃが…」魔法使いは指をくるりと回した。あなたは軽い頭痛を覚えた。"s,
            u8"In your dream, you meet a wizard with a red mustache. \"Who are you? Hmm, I guess I picked up the wrong man's dream. My apology for disturbing your sleep. To make up for this...\" The wizard draws a circle in the air and vanishs. You feel the effects of a faint headache."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"おかしな夢だ"s, u8"A weird dream."s);
        ++listmax;
        show_random_event_window(u8"bg_re6");
        break;
    case 3:
        efid = 1119;
        efp = 100;
        tc = 0;
        magic();
        s = lang(u8"成長のきざし"s, u8"Development"s);
        buff = lang(
            u8"長年の鍛錬の成果が実ったようだ。なかなか眠りにつけず考えごとをしていたあなたは、ふと、自らの技術に関する新しいアイデアを思いついた。"s,
            u8"You lie awake, sunk deep into thought. As memories of your journey flow from one into another, you chance upon a new theory to improve one of your skills."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"よし！"s, u8"Good!"s);
        ++listmax;
        show_random_event_window(u8"bg_re4");
        break;
    case 6:
        skillexp(154, 0, 1000);
        s = lang(u8"自然治癒力の向上"s, u8"Regeneration"s);
        buff = lang(
            u8"身体が妙に火照ってあなたは目を覚ました。気がつくと、腕にあった傷跡が完全に消えていた。"s,
            u8"Your entire body flushes. When you wake up, a scar in your arm is gone."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"よし"s, u8"Good."s);
        ++listmax;
        show_random_event_window(u8"bg_re4");
        break;
    case 7:
        skillexp(155, 0, 1000);
        s = lang(u8"瞑想力の向上"s, u8"Meditation"s);
        buff = lang(
            u8"あなたは、夢の中でも驚くほど理性を保っていた。まるで瞑想を行っている時のように、あなたは心の平和を感じた。"s,
            u8"In your dream, you meditate and feel inner peace."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"よし"s, u8"Good."s);
        ++listmax;
        show_random_event_window(u8"bg_re4");
        break;
    case 9:
        ++cdata[0].platinum_coin;
        s = lang(u8"路上に転がる幸運"s, u8"Great Luck"s);
        buff = lang(
            u8"下を向いて歩いていると、幸運にもプラチナ硬貨を見つけた。"s,
            u8"You stumble over a stone and find a platinum coin."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ラッキー！"s, u8"What a luck!"s);
        ++listmax;
        show_random_event_window(u8"bg_re1");
        break;
    case 16:
        p = rnd(cdata[0].gold / 10 + 1000) + 1;
        cdata[0].gold += p;
        txt(lang(
            u8"金貨"s + p + u8"枚を手に入れた。"s,
            u8"You pick up "s + p + u8" gold pieces."s));
        s = lang(u8"発狂した金持ち"s, u8"Mad Millionaire"s);
        buff = lang(
            u8"発狂した金持ちが、何か叫びながら金貨をばらまいている…"s,
            u8"A rich mad man is scattering his money all over the ground."s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ラッキー！"s, u8"What a luck!"s);
        ++listmax;
        show_random_event_window(u8"bg_re1");
        break;
    case 17:
        efid = 451;
        efp = 800;
        tc = 0;
        magic();
        s = lang(u8"辻プリースト"s, u8"Wandering Priest"s);
        buff = lang(
            u8"突然、向かいからやって来た一人の神官が、すれ違いざまにあなたに魔法をかけた。「ノープロブレム」"s,
            u8"A priest comes up to you and casts a spell on you. \"No problem.\""s);
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"ありがとう"s, u8"Thanks."s);
        ++listmax;
        show_random_event_window(u8"bg_re11");
        break;
    }

    cc = 0;
    label_1422();
    return 1;
}



int show_random_event_window(const std::string& file)
{
    if (config::instance().skiprandevents)
    {
        if (listmax <= 1)
        {
            snd(62);
            txt(""s + buff);
            txt(lang(u8"「"s, u8"\""s) + listn(0, 0) + lang(u8"」"s, u8"\""s));
            rtval = -1;
            return rtval;
        }
    }
    keyhalt = 1;
    cs = 0;
    page = 0;
    pagemax = 0;
    pagesize = 16;
    cs_bk = -1;
    key = "";
    objprm(0, ""s);
    keylog = "";
    if (listmax <= 1)
    {
        chatesc = 0;
    }
    else
    {
        chatesc = -1;
    }
    gsel(7);
    gmode(0);
    pos(0, 0);
    picload(filesystem::dir::graphic() / (u8""s + file + u8".bmp"), 0);
    tx = ginfo(12);
    ty = ginfo(13);
    gsel(0);
    snd(62);
    dx = tx + 36;
    talk_conv(buff, (dx - 80) / (7 - en) - en * 4);
    notesel(buff);
    dy = ty + noteinfo() * 15 + 80 + listmax * 20;
label_1897_internal:
    gmode(2);
    window(
        (windoww - dx) / 2 + inf_screenx + 4, winposy(dy) - 12, dx, dy, 0, -1);
    window((windoww - dx) / 2 + inf_screenx, winposy(dy) - 16, dx, dy);
    wx = (windoww - dx) / 2 + inf_screenx;
    wy = winposy(dy);
    gmode(0);
    pos(wx + 12, wy + 6);
    gcopy(7, 0, 0, tx, ty);
    gmode(2);
    color(240, 230, 220);
    boxl(wx + 12, wy + 6, wx + tx + 12, wy + ty + 6);
    color(0, 0, 0);
    font(14 - en * 2);
    q = lang(u8"《 "s + s + u8" 》"s, u8" < "s + s + u8" > "s);
    pos(wx + 40, wy + 16);
    color(30, 20, 10);
    bmes(q, 245, 235, 225);
    color(0, 0, 0);
    font(14 - en * 2);
    color(30, 30, 30);
    pos(wx + 24, wy + ty + 20);
    mes(buff);
    color(0, 0, 0);
    keyrange = 0;
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
    }
    font(14 - en * 2);
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        i = list(0, p);
        display_key(wx + 30, wy + dy + cnt * 20 - listmax * 20 - 52, cnt);
        q = listn(0, p);
        cs_list(cs == cnt, q, wx + 60, wy + dy + cnt * 20 - listmax * 20 - 52);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(rtval, snd(40));
    if (chatesc != -1)
    {
        if (key == key_cancel)
        {
            snd(40);
            rtval = chatesc;
        }
    }
    if (rtval != -1)
    {
        label_1898();
        return 0;
    }
    goto label_1897_internal;
}



int label_1898()
{
    key = "";
    return rtval;
}



int calcincome(int prm_1036)
{
    int p_at_m176 = 0;
    p_at_m176 = 100 - gdata((120 + prm_1036)) / 100;
    if (p_at_m176 == 99)
    {
        p_at_m176 = p_at_m176 * 70;
    }
    else
    {
        p_at_m176 = p_at_m176 * 50;
    }
    if (prm_1036 == 2)
    {
        p_at_m176 = p_at_m176 * 120 / 100;
    }
    if (prm_1036 == 4)
    {
        p_at_m176 = p_at_m176 * 60 / 100;
    }
    if (prm_1036 == 0)
    {
        p_at_m176 = p_at_m176 * 80 / 100;
    }
    if (prm_1036 == 1)
    {
        p_at_m176 = p_at_m176 * 70 / 100;
    }
    if (prm_1036 == 6)
    {
        p_at_m176 = p_at_m176 * 25 / 100;
    }
    if (prm_1036 == 5)
    {
        p_at_m176 = p_at_m176 * 20 / 100;
    }
    if (prm_1036 == 8)
    {
        p_at_m176 = p_at_m176 * 15 / 100;
    }
    return p_at_m176;
}



void label_1901()
{
    invfile = 4;
    ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
    if (fs::exists(filesystem::dir::tmp() / u8"shop4.s2"s))
    {
        ctrl_file(file_operation2_t::_3, u8"shop4.s2"s);
    }
    else
    {
        for (const auto& cnt : items(-1))
        {
            inv[cnt].number = 0;
        }
    }
    mode = 6;
    income(0) = 0;
    income(1) = 0;
    for (int cnt = 0; cnt < 9; ++cnt)
    {
        if (gdata(120 + cnt) >= 10000)
        {
            continue;
        }
        p = calcincome(cnt) + rnd((calcincome(cnt) / 3 + 1))
            - rnd((calcincome(cnt) / 3 + 1));
        income += p;
        flt();
        itemcreate(-1, 54, -1, -1, p);
        if (cnt == 5 || cnt == 6)
        {
            continue;
        }
        if (cnt == 5 || cnt == 6 || cnt == 3)
        {
            continue;
        }
        p = rnd(rnd(3) + 1) + 1;
        int cnt2 = cnt;
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            dbid = 0;
            flt(calcobjlv((100 - gdata((120 + cnt2)) / 100) / 2 + 1),
                calcfixlv(3 + (rnd(12) < trait(39))));
            flttypemajor = fsetincome(rnd(length(fsetincome)));
            if (rnd(5) == 0)
            {
                flttypemajor = fsetwear(rnd(length(fsetwear)));
            }
            if (rnd(100 + gdata((120 + cnt2)) / 5) < 2)
            {
                dbid = 559;
            }
            itemcreate(-1, dbid, -1, -1, 0);
            ++income(1);
        }
    }
    if (cdata[0].fame > 0)
    {
        p = clamp(cdata[0].fame / 10, 100, 25000);
        if (cdata[0].fame >= 25000)
        {
            p += (cdata[0].fame - 25000) / 100;
        }
        income += p;
        flt();
        itemcreate(-1, 54, -1, -1, p);
    }
    s = ""s + income + lang(u8"gold"s, u8" gold pieces"s);
    if (income(1) != 0)
    {
        s += lang(
            u8"と"s + income(1) + u8"個のアイテム"s,
            u8" and "s + income(1) + u8" items"s);
    }
    if (income != 0 || income(1) != 0)
    {
        snd(24);
        txtef(5);
        txt(lang(
            s + u8"が給料として振り込まれた。"s,
            u8"As a salary, "s + s + u8" have been sent to your house."s));
        autosave = 1 * (gdata_current_map != 35);
    }
    if (gdata_day == 1)
    {
        if (cdata[0].level > 5)
        {
            autosave = 1 * (gdata_current_map != 35);
            p = -1;
            for (const auto& cnt : items(-1))
            {
                if (inv[cnt].number == 0)
                {
                    p = cnt;
                    break;
                }
            }
            if (p == -1)
            {
                item_compress(-1);
            }
            flt();
            itemcreate(-1, 615, -1, -1, 0);
            inv[ci].subname =
                gdata_cost_to_hire + calccostbuilding() + calccosttax();
            inv[ci].subname = inv[ci].subname * (100 + rnd(20)) / 100;
            mode = 0;
            ++gdata_left_bill;
            txt(lang(
                u8"請求書が送られてきた。"s,
                u8"A bill has been sent to your house."s));
            if (gdata_left_bill > 1)
            {
                if (gdata_left_bill <= 4)
                {
                    txtef(3);
                    if (gdata_left_bill > 3)
                    {
                        s(0) = lang(u8"警告！！"s, u8"Warning!! "s);
                        s(1) = lang(
                            u8"早急にパルミア大使館まで行き、税金を納めなければならない。"s,
                            u8"You have to go to the Embassy of Palmia and pay tax at once. "s);
                    }
                    else
                    {
                        s(0) = lang(u8"注意！"s, u8"Caution! "s);
                        s(1) = "";
                    }
                    txt(s
                        + lang(
                              (u8"税金を"s + (gdata_left_bill - 1)
                               + u8"ヶ月分滞納している。"s),
                              (u8"You are in arrears with your tax for "s
                               + (gdata_left_bill - 1) + u8" months."s))
                        + s(1));
                }
            }
            if (gdata_left_bill > 4)
            {
                txtef(3);
                txt(lang(
                    u8"あなたは税金を"s + (gdata_left_bill - 1)
                        + u8"ヶ月滞納した罪で訴えられた。"s,
                    u8"You have been accused for being in arrears with your tax for"s
                        + (gdata_left_bill - 1) + u8" months."s));
                int stat = decfame(0, 50);
                p = stat;
                txtef(3);
                txt(lang(
                    u8"名声値を"s + p + u8"失った。"s,
                    u8"You lose "s + p + u8" fame."s));
                modify_karma(0, -30 * 2);
            }
        }
        else
        {
            txt(lang(
                u8"レベルが6に達していないので納税の義務はない。"s,
                u8"You don't have to pay tax until you hit level 6."s));
        }
    }
    ctrl_file(file_operation2_t::_4, u8"shop"s + invfile + u8".s2");
    ctrl_file(file_operation2_t::_3, u8"shoptmp.s2");
    mode = 0;
    if (config::instance().extrahelp)
    {
        if (gdata(216) == 0)
        {
            if (mode == 0)
            {
                if (cdata[0].continuous_action_turn == 0)
                {
                    gdata(216) = 1;
                    ghelp = 16;
                    show_ex_help();
                }
            }
        }
    }
    return;
}



std::string rpmatname(int prm_1037)
{
    std::string s_at_m177;
    int p_at_m177 = 0;
    s_at_m177 = u8"?????"s;
    if (rpdata(20 + prm_1037, rpid) < 9000)
    {
        s_at_m177 = ioriginalnameref(rpdata(20 + prm_1037, rpid));
    }
    else if (rpdata(20 + prm_1037, rpid) < 10000)
    {
        s_at_m177 = rfnameorg(1, rpdata(20 + prm_1037, rpid) - 9000);
    }
    else
    {
        s_at_m177 = fltname(rpdata(20 + prm_1037, rpid));
    }
    if (rpdata(40 + prm_1037, rpid) == 0)
    {
        return s_at_m177;
    }
    if (rpdata(40 + prm_1037, rpid) >= 10000)
    {
        p_at_m177 = rpdata((40 + prm_1037), rpid) % 10000;
        if (p_at_m177 < 0 || p_at_m177 >= 800)
        {
            s_at_m177 += u8"/bugged/"s;
            return s_at_m177;
        }
        s_at_m177 =
            refchara_str(p_at_m177, 2) + lang(u8"の死体"s, u8" corpse"s);
        return s_at_m177;
    }
    return s_at_m177;
}



int blendcheckext(int prm_1038, int prm_1039)
{
    int p_at_m178 = 0;
    if (rpdata(40 + prm_1039, rpid) >= 10000)
    {
        p_at_m178 = rpdata((40 + prm_1039), rpid) % 10000;
        if (p_at_m178 < 0 || p_at_m178 >= 800)
        {
            return 0;
        }
        if (inv[prm_1038].subname == p_at_m178)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    return 0;
}



std::string rpsuccessrate(int prm_1040)
{
    if (prm_1040 == 100)
    {
        return lang(u8"もう完璧！"s, u8"Perfect!"s);
    }
    if (prm_1040 >= 90)
    {
        return lang(u8"朝飯前！"s, u8"A piece of cake!"s);
    }
    if (prm_1040 >= 80)
    {
        return lang(u8"かんたんね"s, u8"Very likely"s);
    }
    if (prm_1040 >= 70)
    {
        return lang(u8"まず大丈夫"s, u8"No problem"s);
    }
    if (prm_1040 >= 60)
    {
        return lang(u8"たぶんいける"s, u8"Probably OK"s);
    }
    if (prm_1040 >= 50)
    {
        return lang(u8"ちょっと不安"s, u8"Maybe"s);
    }
    if (prm_1040 >= 40)
    {
        return lang(u8"だめかも"s, u8"Bad"s);
    }
    if (prm_1040 >= 30)
    {
        return lang(u8"やばい"s, u8"Very bad"s);
    }
    if (prm_1040 >= 20)
    {
        return lang(u8"まず無理"s, u8"Almost impossible"s);
    }
    return lang(u8"絶対ムリ！"s, u8"Impossible!"s);
}



int rpdiff(int, int prm_1042, int prm_1043)
{
    int p1_at_m180 = 0;
    int f_at_m180 = 0;
    int f2_at_m180 = 0;
    int i_at_m180 = 0;
    int d_at_m180 = 0;
    int p_at_m180 = 0;
    p1_at_m180 = 80;
    f_at_m180 = 100;
    if (prm_1042 > 0)
    {
        for (int cnt = 0, cnt_end = (prm_1042); cnt < cnt_end; ++cnt)
        {
            f2_at_m180 = 0;
            if (rpref(10 + cnt * 2) == -1)
            {
                break;
            }
            i_at_m180 = rpref(10 + cnt * 2);
            if (inv[i_at_m180].curse_state == curse_state_t::blessed)
            {
                f2_at_m180 -= 10;
            }
            if (is_cursed(inv[i_at_m180].curse_state))
            {
                f2_at_m180 += 20;
            }
            f_at_m180 += f2_at_m180;
            if (prm_1043 == cnt)
            {
                while (1)
                {
                    if (f2_at_m180 < 0)
                    {
                        txtef(2);
                        txt(lang(
                            u8"調合の成功率が上がった。"s,
                            u8"The success rate goes up."s));
                        break;
                    }
                    if (f2_at_m180 > 0)
                    {
                        txtef(3);
                        txt(lang(
                            u8"調合の成功率が下がった。"s,
                            u8"The success rate goes down."s));
                        break;
                    }
                    break;
                }
            }
        }
    }
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        if (rpdata(10 + cnt * 2, rpid) == 0)
        {
            break;
        }
        if (sdata(rpdata(10 + cnt * 2, rpid), 0) <= 0)
        {
            p1_at_m180 -= 125;
            continue;
        }
        d_at_m180 = rpdata(11 + cnt * 2, rpid);
        if (prm_1042 > 0)
        {
            d_at_m180 = d_at_m180 * f_at_m180 / 100;
            if (d_at_m180 < 1)
            {
                d_at_m180 = 1;
            }
        }
        p_at_m180 =
            (d_at_m180 * 200 / sdata(rpdata((10 + cnt * 2), rpid), 0) - 200)
            * -1;
        if (p_at_m180 > 0)
        {
            p_at_m180 /= 5;
        }
        if (p_at_m180 < -125)
        {
            p_at_m180 = -125;
        }
        p1_at_m180 += p_at_m180;
    }
    if (p1_at_m180 < 25)
    {
        p1_at_m180 = 0;
    }
    if (p1_at_m180 > 100)
    {
        p1_at_m180 = 100;
    }
    return p1_at_m180;
}



int blendcheckmat(int prm_1044)
{
    int f_at_m181 = 0;
    int step_at_m181 = 0;
    int id_at_m181 = 0;
    int rp_at_m181 = 0;
    int o_at_m181 = 0;
    rpid = prm_1044;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (rpdata(20 + cnt, rpid) == 0)
        {
            break;
        }
        f_at_m181 = 0;
        step_at_m181 = cnt;
        id_at_m181 = rpdata(20 + cnt, rpid);
        rp_at_m181 = cnt;
        for (int cnt = 0; cnt < 2; ++cnt)
        {
            if (cnt == 0)
            {
                o_at_m181 = -1;
            }
            if (cnt == 1)
            {
                o_at_m181 = 0;
            }
            for (const auto& cnt : items(o_at_m181))
            {
                if (inv[cnt].number <= 0)
                {
                    continue;
                }
                if ((rpdata(2, rpid) <= 0 || step_at_m181 != 0)
                    && inv[cnt].own_state > 0)
                {
                    continue;
                }
                if (o_at_m181 == -1)
                {
                    if (dist(
                            inv[cnt].position.x,
                            inv[cnt].position.y,
                            cdata[0].position.x,
                            cdata[0].position.y)
                        > 4)
                    {
                        continue;
                    }
                }
                if (rpdata(40 + rp_at_m181, rpid))
                {
                    int stat = blendcheckext(cnt, rp_at_m181);
                    if (stat == 0)
                    {
                        continue;
                    }
                }
                if (id_at_m181 < 9000)
                {
                    if (inv[cnt].id == id_at_m181)
                    {
                        f_at_m181 = 1;
                        break;
                    }
                    continue;
                }
                if (id_at_m181 < 10000)
                {
                    if (instr(
                            the_item_db[inv[cnt].id]->rffilter,
                            0,
                            u8"/"s + rfnameorg(0, (id_at_m181 - 9000)) + u8"/"s)
                            != -1
                        || id_at_m181 == 9004)
                    {
                        f_at_m181 = 1;
                        break;
                    }
                    continue;
                }
                if (the_item_db[inv[cnt].id]->category == id_at_m181)
                {
                    f_at_m181 = 1;
                    break;
                }
            }
            if (f_at_m181 == 1)
            {
                break;
            }
        }
        if (f_at_m181 == 0)
        {
            break;
        }
    }
    return f_at_m181;
}



int blendmatnum(int prm_1045, int prm_1046)
{
    int m_at_m182 = 0;
    int o_at_m182 = 0;
    m_at_m182 = 0;
    for (int cnt = 0; cnt < 2; ++cnt)
    {
        if (cnt == 0)
        {
            o_at_m182 = -1;
        }
        if (cnt == 1)
        {
            o_at_m182 = 0;
        }
        for (const auto& cnt : items(o_at_m182))
        {
            if (inv[cnt].number <= 0)
            {
                continue;
            }
            if ((rpdata(2, rpid) <= 0 || prm_1046 != 0)
                && inv[cnt].own_state > 0)
            {
                continue;
            }
            if (o_at_m182 == -1)
            {
                if (dist(
                        inv[cnt].position.x,
                        inv[cnt].position.y,
                        cdata[0].position.x,
                        cdata[0].position.y)
                    > 4)
                {
                    continue;
                }
            }
            if (rpdata(40 + prm_1046, rpid))
            {
                int stat = blendcheckext(cnt, prm_1046);
                if (stat == 0)
                {
                    continue;
                }
            }
            if (prm_1045 < 9000)
            {
                if (inv[cnt].id == prm_1045)
                {
                    m_at_m182 += inv[cnt].number;
                }
                continue;
            }
            if (prm_1045 < 10000)
            {
                if (instr(
                        the_item_db[inv[cnt].id]->rffilter,
                        0,
                        u8"/"s + rfnameorg(0, (prm_1045 - 9000)) + u8"/"s)
                        != -1
                    || prm_1045 == 9004)
                {
                    m_at_m182 += inv[cnt].number;
                }
                continue;
            }
            if (the_item_db[inv[cnt].id]->category == prm_1045)
            {
                m_at_m182 += inv[cnt].number;
                continue;
            }
        }
    }
    return m_at_m182;
}



int blendlist(elona_vector2<int>& prm_1047, int prm_1048)
{
    int id_at_m183 = 0;
    int m_at_m183 = 0;
    int o_at_m183 = 0;
    int reftype_at_m183 = 0;
    int f_at_m183 = 0;
    id_at_m183 = rpdata(20 + prm_1048, rpid);
    m_at_m183 = 0;
    for (int cnt = 0; cnt < 2; ++cnt)
    {
        if (cnt == 0)
        {
            o_at_m183 = -1;
        }
        if (cnt == 1)
        {
            o_at_m183 = 0;
        }
        for (const auto& cnt : items(o_at_m183))
        {
            if (m_at_m183 >= 500)
            {
                break;
            }
            if (inv[cnt].number <= 0)
            {
                continue;
            }
            if ((rpdata(2, rpid) <= 0 || step != 0) && inv[cnt].own_state > 0)
            {
                continue;
            }
            if (o_at_m183 == -1)
            {
                if (dist(
                        inv[cnt].position.x,
                        inv[cnt].position.y,
                        cdata[0].position.x,
                        cdata[0].position.y)
                    > 4)
                {
                    continue;
                }
            }
            reftype_at_m183 = the_item_db[inv[cnt].id]->category;
            if (rpdata(40 + prm_1048, rpid))
            {
                int stat = blendcheckext(cnt, prm_1048);
                if (stat == 0)
                {
                    continue;
                }
            }
            if (id_at_m183 < 9000)
            {
                if (inv[cnt].id != id_at_m183)
                {
                    continue;
                }
            }
            else if (id_at_m183 < 10000)
            {
                if (instr(
                        the_item_db[inv[cnt].id]->rffilter,
                        0,
                        u8"/"s + rfnameorg(0, (id_at_m183 - 9000)) + u8"/"s)
                        == -1
                    && id_at_m183 != 9004)
                {
                    continue;
                }
            }
            else if (reftype_at_m183 != id_at_m183)
            {
                continue;
            }
            if (step > 0)
            {
                f_at_m183 = cnt;
                for (int cnt = 0, cnt_end = (step); cnt < cnt_end; ++cnt)
                {
                    if (rpref(10 + cnt * 2) == f_at_m183)
                    {
                        f_at_m183 = -999;
                        break;
                    }
                }
                if (f_at_m183 == -999)
                {
                    continue;
                }
            }
            prm_1047(0, m_at_m183) = cnt;
            prm_1047(1, m_at_m183) = reftype_at_m183 * 1000 + inv[cnt].id;
            ++m_at_m183;
        }
    }
    return m_at_m183;
}



void window_recipe2(int val0)
{
    int x_at_m183 = 0;
    int w_at_m183 = 0;
    int dx_at_m183 = 0;
    int dy_at_m183 = 0;
    std::string s_at_m183;
    int p_at_m183 = 0;
    x_at_m183 = wx + ww;
    w_at_m183 = 400;
    gmode(2);
    pos(x_at_m183 + w_at_m183 - 520, 0);
    gcopy(3, 960, 288, 480, 68);
    dx_at_m183 = x_at_m183 + w_at_m183 - 500;
    dy_at_m183 = 10;
    font(15 - en * 2, snail::font_t::style_t::bold);
    s_at_m183 = ""s + rpsuccessrate(rpdiff(rpid, step, -1));
    pos(dx_at_m183 + 140, dy_at_m183);
    color(30, 30, 30);
    bmes(lang(u8"成功率: "s, u8"Success Rate: "s) + s_at_m183, 235, 235, 235);
    color(0, 0, 0);
    p_at_m183 = rpdata(1, rpid);
    if (rpmode)
    {
        if (p_at_m183 < 10000)
        {
            p_at_m183 = p_at_m183 * val0;
        }
        else
        {
            p_at_m183 = p_at_m183 % 10000;
        }
        p_at_m183 += rpdata(1, rpid) / 10000 * val0 * 10000;
    }
    s_at_m183 = ""s + p_at_m183 % 10000 + lang(u8"ターン"s, u8" turns"s);
    if (p_at_m183 >= 10000)
    {
        s_at_m183 += lang(u8"と"s, u8" and "s) + p_at_m183 / 10000
            + lang(u8"時間"s, u8" hours"s);
    }
    pos(dx_at_m183 + 140, dy_at_m183 + 20);
    color(40, 40, 40);
    bmes(lang(u8"必要時間: "s, u8"Time: "s) + s_at_m183, 235, 235, 235);
    color(0, 0, 0);
    return;
}



void window_recipe_(
    int prm_1050,
    int prm_1051,
    int prm_1052,
    int prm_1053,
    int prm_1054)
{
    elona_vector1<std::string> s_at_m184;
    int xfix2_at_m184 = 0;
    int dx_at_m184 = 0;
    int dy_at_m184 = 0;
    int i_at_m184 = 0;
    int p_at_m184 = 0;
    int cnt2_at_m184 = 0;
    SDIM1(s_at_m184);
    if (windowshadow == 1)
    {
        window(
            prm_1051 + 4,
            prm_1052 + 4,
            prm_1053,
            prm_1054 - prm_1054 % 8,
            0,
            -1);
        pos(prm_1051 + prm_1053 - 522, 0);
        gfini(486, 69);
        gfdec(40, 40, 40);
        windowshadow = 0;
    }
    window(prm_1051, prm_1052, prm_1053, prm_1054 - prm_1054 % 8, 0, 0);
    window_recipe2();
    gmode(2);
    color(194, 170, 146);
    line(
        prm_1051 + 50 + 0,
        prm_1052 + prm_1054 - 48 - prm_1054 % 8,
        prm_1051 + prm_1053 - 40,
        prm_1052 + prm_1054 - 48 - prm_1054 % 8);
    color(0, 0, 0);
    color(234, 220, 188);
    line(
        prm_1051 + 50 + 0,
        prm_1052 + prm_1054 - 49 - prm_1054 % 8,
        prm_1051 + prm_1053 - 40,
        prm_1052 + prm_1054 - 49 - prm_1054 % 8);
    color(0, 0, 0);
    s_at_m184(0) = u8"Page."s + (rppage + 1) + u8"/"s + (rppage(1) + 1);
    s_at_m184(1) = ""s + key_prev + u8","s + key_next + ""s
        + lang(u8"[ページ切替]  "s, u8"[Page]  "s);
    if (step == -1)
    {
        s_at_m184(1) += strhint3;
    }
    else
    {
        s_at_m184(1) += strhint3b;
    }
    font(12 + sizefix - en * 2);
    pos(prm_1051 + 25 + 0, prm_1052 + prm_1054 - 43 - prm_1054 % 8);
    mes(s_at_m184(1));
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    pos(prm_1051 + prm_1053 - strlen_u(s_at_m184) * 7 - 40 - xfix2_at_m184,
        prm_1052 + prm_1054 - 65 - prm_1054 % 8);
    mes(s_at_m184);
    dx_at_m184 = prm_1051 + 35;
    dy_at_m184 = y + 48;
    font(12 - en * 2, snail::font_t::style_t::bold);
    pos(dx_at_m184 - 10, dy_at_m184);
    mes(lang(u8"調合の手順"s, u8"Blending Procedure"s));
    dy_at_m184 = dy_at_m184 + 18;
    font(13 - en * 2);
    i_at_m184 = 1;
    pos(dx_at_m184 - 10, dy_at_m184 - 2);
    gfini(prm_1053 - 60, 17);
    if (step == i_at_m184 - 2)
    {
        gfdec2(10, 20, 30);
    }
    else if (step > i_at_m184 - 2)
    {
        gfdec2(25, 30, 35);
    }
    if (step == -1)
    {
        pos(dx_at_m184, dy_at_m184);
        mes(""s + i_at_m184 + u8"."s
            + lang(u8"レシピを選ぶ"s, u8"Choose a recipe"s));
    }
    else
    {
        pos(dx_at_m184, dy_at_m184);
        mes(""s + i_at_m184 + u8"."s
            + lang(
                  (rpname(rpid) + u8"のレシピを選んだ"s),
                  (u8"Chose the recipe of "s + rpname(rpid))));
    }
    dy_at_m184 += 17;
    ++i_at_m184;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (rpdata(20 + cnt, rpid) == 0)
        {
            break;
        }
        pos(dx_at_m184 - 10, dy_at_m184 - 2);
        gfini(prm_1053 - 60, 17);
        if (step == i_at_m184 - 2)
        {
            gfdec2(10, 20, 30);
        }
        else if (step > i_at_m184 - 2)
        {
            gfdec2(25, 30, 35);
        }
        if (step <= cnt)
        {
            int stat = blendmatnum(rpdata(20 + cnt, rpid), cnt);
            p_at_m184 = stat;
            s_at_m184 = lang(
                            rpmatname(cnt) + u8"を加える"s,
                            u8"Add "s + rpmatname(cnt) + ""s)
                + u8"("s + lang(u8"所持:"s, u8"Stock:"s) + p_at_m184 + u8")"s;
        }
        else
        {
            s_at_m184 = lang(""s, u8"Selected "s)
                + itemname(rpref((10 + cnt * 2))) + lang(u8"を選んだ"s, ""s);
            s_at_m184 = strmid(s_at_m184, 0, 44);
        }
        pos(dx_at_m184, dy_at_m184);
        mes(""s + i_at_m184 + u8"."s + s_at_m184);
        dy_at_m184 += 17;
        ++i_at_m184;
    }
    pos(wx + ww + 243, wy - 4);
    gcopy(3, 1040, 96, 160, 70);
    pos(dx_at_m184 - 10, dy_at_m184 - 2);
    gfini(prm_1053 - 60, 17);
    if (step == i_at_m184 - 2)
    {
        gfdec2(10, 20, 30);
    }
    else if (step > i_at_m184 - 2)
    {
        gfdec2(25, 30, 35);
    }
    pos(dx_at_m184, dy_at_m184);
    mes(""s + i_at_m184 + u8"."s
        + lang(u8"調合を始める！"s, u8"Start blending!"s));
    dy_at_m184 += 30;
    if (rppage == 0)
    {
        font(12 - en * 2, snail::font_t::style_t::bold);
        pos(dx_at_m184 - 10, dy_at_m184);
        mes(lang(
            rpname(rpid) + u8"のレシピ"s, u8"The recipe of "s + rpname(rpid)));
        dy_at_m184 += 20;
        pos(dx_at_m184 - 10, dy_at_m184);
        mes(lang(u8"必要なスキル:"s, u8"Required Skills:"s));
        dy_at_m184 = dy_at_m184 + 18;
        font(13 - en * 2);
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            if (rpdata(10 + cnt * 2, rpid) == 0)
            {
                break;
            }
            if (rpdata(11 + cnt * 2, rpid)
                > sdata(rpdata(10 + cnt * 2, rpid), 0))
            {
                color(150, 0, 0);
            }
            else
            {
                color(0, 120, 0);
            }
            pos(dx_at_m184 + cnt % 2 * 140, dy_at_m184 + cnt / 2 * 17);
            mes(i18n::_(
                    u8"ability",
                    std::to_string(rpdata(10 + cnt * 2, rpid)),
                    u8"name")
                + u8"  "s + rpdata((11 + cnt * 2), rpid) + u8"("s
                + sdata(rpdata((10 + cnt * 2), rpid), 0) + u8")"s);
            color(0, 0, 0);
        }
        dy_at_m184 += 50;
        font(12 - en * 2, snail::font_t::style_t::bold);
        pos(dx_at_m184 - 10, dy_at_m184);
        mes(lang(u8"必要な機材:"s, u8"Required equipment:"s));
        return;
    }
    if (prm_1050 == -1)
    {
        return;
    }
    font(12 - en * 2, snail::font_t::style_t::bold);
    pos(dx_at_m184 - 10, dy_at_m184);
    mes(itemname(prm_1050));
    dy_at_m184 += 20;
    font(13 - en * 2);
    if (inv[prm_1050].identification_state
        <= identification_state_t::partly_identified)
    {
        pos(dx_at_m184, dy_at_m184);
        mes(lang(
            u8"このアイテムは鑑定されていない。"s,
            u8"You haven't identified it yet."s));
        dy_at_m184 += 16;
        return;
    }
    getinheritance(prm_1050, inhlist_at_m184, p_at_m184);
    if (p_at_m184 > 0)
    {
        for (int cnt = 0, cnt_end = (p_at_m184); cnt < cnt_end; ++cnt)
        {
            cnt2_at_m184 = inhlist_at_m184(cnt);
            if (inv[prm_1050].enchantments[cnt2_at_m184].id == 0)
            {
                break;
            }
            get_enchantment_description(
                inv[prm_1050].enchantments[cnt2_at_m184].id,
                inv[prm_1050].enchantments[cnt2_at_m184].power,
                the_item_db[inv[prm_1050].id]->category);
            color(0, 0, 100);
            if (inv[prm_1050].enchantments[cnt2_at_m184].power < 0)
            {
                color(180, 0, 0);
            }
            pos(dx_at_m184, dy_at_m184);
            mes(cnven(s));
            color(0, 0, 0);
            dy_at_m184 += 16;
        }
    }
    else
    {
        pos(dx_at_m184, dy_at_m184);
        mes(lang(u8"継承効果なし"s, u8"No inheritance effects"s));
        dy_at_m184 += 16;
        ++p_at_m184;
    }
    return;
}



void clear_rprefmat()
{
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        rpref(10 + cnt * 2) = -1;
    }
    return;
}



void initialize_recipememory()
{
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        recipememory(200 + cnt) = 1;
    }
    return;
}



void initialize_recipe()
{
    DIM3(rpdata, 100, 1200);
    SDIM4(rfnameorg, 20, 2, 6);
    SDIM3(rpdatan, 40, 1200);
    DIM2(rpref, 100);
    rpsourcelist(0) = 0;
    rpsourcelist(1) = 898;
    rpsourcelist(2) = 1156;
    rpsourcelist(3) = 1187;
    rpsourcelist(4) = 209;
    rpsourcelist(5) = 210;
    rpid = 200;
    rpdatan(rpid) = lang(u8"媚薬混入食品"s, u8"love food"s);
    rpdata(0, rpid) = 10000;
    rpdata(1, rpid) = 10;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 8;
    rpdata(12, rpid) = 178;
    rpdata(13, rpid) = 3;
    rpdata(20, rpid) = 57000;
    rpdata(21, rpid) = 620;
    rpid = 201;
    rpdatan(rpid) = lang(u8"染色"s, u8"dyeing"s);
    rpdata(0, rpid) = 10001;
    rpdata(1, rpid) = 4;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 6;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 519;
    rpid = 202;
    rpdatan(rpid) = lang(u8"特製毒入り食品"s, u8"poisoned food"s);
    rpdata(0, rpid) = 10002;
    rpdata(1, rpid) = 7;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 3;
    rpdata(20, rpid) = 57000;
    rpdata(21, rpid) = 262;
    rpid = 203;
    rpdatan(rpid) = lang(u8"耐火コーティング"s, u8"fireproof coating"s);
    rpdata(0, rpid) = 10003;
    rpdata(1, rpid) = 15;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 18;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 736;
    rpid = 204;
    rpdatan(rpid) = lang(u8"耐酸コーティング"s, u8"acidproof coating"s);
    rpdata(0, rpid) = 10004;
    rpdata(1, rpid) = 15;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 10;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 566;
    rpid = 205;
    rpdatan(rpid) = lang(u8"釣り餌の装着"s, u8"bait attachment"s);
    rpdata(0, rpid) = 10005;
    rpdata(1, rpid) = 10;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 185;
    rpdata(11, rpid) = 2;
    rpdata(12, rpid) = 12;
    rpdata(13, rpid) = 10;
    rpdata(20, rpid) = 342;
    rpdata(21, rpid) = 617;
    rpid = 206;
    rpdatan(rpid) = lang(u8"アイテムの祝福"s, u8"blessed item"s);
    rpdata(0, rpid) = 10006;
    rpdata(1, rpid) = 5;
    rpdata(2, rpid) = 1;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 5;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 516;
    rpid = 207;
    rpdatan(rpid) = lang(u8"井戸水の回復"s, u8"well refill"s);
    rpdata(0, rpid) = 10007;
    rpdata(1, rpid) = 3;
    rpdata(2, rpid) = 2;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 3;
    rpdata(20, rpid) = 60001;
    rpdata(21, rpid) = 52000;
    rpid = 208;
    rpdatan(rpid) = lang(u8"天然ポーション"s, u8"natural potion"s);
    rpdata(0, rpid) = 10008;
    rpdata(1, rpid) = 16;
    rpdata(2, rpid) = 2;
    rpdata(10, rpid) = 12;
    rpdata(11, rpid) = 24;
    rpdata(20, rpid) = 60001;
    rpdata(21, rpid) = 601;
    rpid = 209;
    rpdatan(rpid) = lang(u8"2種アーティファクト合成"s, u8"2 artifacts fusion"s);
    rpdata(0, rpid) = 10009;
    rpdata(1, rpid) = 16;
    rpdata(2, rpid) = 2;
    rpdata(10, rpid) = 178;
    rpdata(11, rpid) = 999;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 9004;
    rpid = 210;
    rpdatan(rpid) = lang(u8"3種アーティファクト合成"s, u8"3 artifacts fusion"s);
    rpdata(0, rpid) = 10009;
    rpdata(1, rpid) = 16;
    rpdata(2, rpid) = 2;
    rpdata(10, rpid) = 178;
    rpdata(11, rpid) = 999;
    rpdata(20, rpid) = 9004;
    rpdata(21, rpid) = 9004;
    rpdata(22, rpid) = 9004;
    rpid = 898;
    rpdata(0, rpid) = 498;
    rpdata(1, rpid) = 150060;
    rpdata(10, rpid) = 175;
    rpdata(11, rpid) = 4;
    rpdata(12, rpid) = 457;
    rpdata(13, rpid) = 20;
    rpdata(14, rpid) = 12;
    rpdata(15, rpid) = 8;
    rpdata(30, rpid) = 0;
    rpdata(20, rpid) = 260;
    rpdata(21, rpid) = 9001;
    rpid = 1156;
    rpdata(0, rpid) = 756;
    rpdata(1, rpid) = 20020;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 4;
    rpdata(12, rpid) = 179;
    rpdata(13, rpid) = 20;
    rpdata(14, rpid) = 157;
    rpdata(15, rpid) = 8;
    rpdata(30, rpid) = 0;
    rpdata(20, rpid) = 260;
    ++rpid;
    rpid = 1187;
    rpdata(0, rpid) = 787;
    rpdata(1, rpid) = 30;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 10;
    rpdata(12, rpid) = 178;
    rpdata(13, rpid) = 5;
    rpdata(30, rpid) = 0;
    rpdata(20, rpid) = 9004;
    rpid = 1191;
    rpdata(0, rpid) = 791;
    rpdata(1, rpid) = 160045;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 10;
    rpdata(12, rpid) = 178;
    rpdata(13, rpid) = 65;
    rpdata(14, rpid) = 10;
    rpdata(15, rpid) = 105;
    rpdata(30, rpid) = 0;
    rpdata(20, rpid) = 10000;
    rpdata(21, rpid) = 748;
    rpdata(22, rpid) = 716;
    rpid = 1192;
    rpdata(0, rpid) = 792;
    rpdata(1, rpid) = 10024;
    rpdata(10, rpid) = 184;
    rpdata(11, rpid) = 20;
    rpdata(12, rpid) = 0;
    rpdata(13, rpid) = 10;
    rpdata(14, rpid) = 151;
    rpdata(15, rpid) = 5;
    rpdata(30, rpid) = 0;
    rpdata(20, rpid) = 204;
    rpdata(21, rpid) = 9005;
    rpdata(40, rpid) = 10003;
    rpdata(50, rpid) = 10017;
    rpdata(51, rpid) = 500;
    rpdata(52, rpid) = 60017;
    rpdata(53, rpid) = 500;
    rpdata(54, rpid) = 10010;
    rpdata(55, rpid) = 100;
    rpdata(56, rpid) = 60010;
    rpdata(57, rpid) = 100;
    rpdata(58, rpid) = 10016;
    rpdata(59, rpid) = 300;
    rpdata(60, rpid) = 60016;
    rpdata(61, rpid) = 300;
    rpdata(62, rpid) = 10011;
    rpdata(63, rpid) = 200;
    rpdata(64, rpid) = 60011;
    rpdata(65, rpid) = 200;
    rfnameorg(0, 1) = u8"flavor"s;
    rfnameorg(1, 1) = lang(u8"適当な調味料"s, u8"suitable flavoring"s);
    rfnameorg(0, 2) = u8"ore"s;
    rfnameorg(1, 2) = lang(u8"適当な鉱石"s, u8"any ore"s);
    rfnameorg(0, 3) = u8"wood"s;
    rfnameorg(1, 3) = lang(u8"木材を含む何か"s, u8"something made of wood"s);
    rfnameorg(0, 5) = u8"fish"s;
    rfnameorg(1, 5) = lang(u8"魚介類"s, u8"fish"s);
    rfnameorg(0, 4) = "";
    rfnameorg(1, 4) = lang(u8"何か物体"s, u8"any item"s);
    return;
}



turn_result_t crafting_menu()
{
    elona_vector1<int> blendchecklist;
    step = -1;
    rpid = 0;
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_blend.bmp", 1);
    gsel(0);
    clear_rprefmat();
label_1923:
    if (step != -1)
    {
        if (rpdata(20 + step, rpid) == 0)
        {
            rppage = 0;
            window_recipe(list2, -1, wx + ww, wy, 400, wh);
            txtnew();
            txt(lang(
                u8"幾つ作る？"s, u8"How many items do you want to create?"s));
            ELONA_APPEND_PROMPT(
                lang(u8"調合を始める"s, u8"Start blending"s),
                u8"a"s,
                ""s + promptmax);
            ELONA_APPEND_PROMPT(
                lang(u8"前に戻る"s, u8"Go back"s), u8"b"s, ""s + promptmax);
            ELONA_APPEND_PROMPT(
                lang(u8"最初から"s, u8"From the start"s),
                u8"c"s,
                ""s + promptmax);
            p = 10;
            for (int cnt = 0; cnt < 10; ++cnt)
            {
                if (rpref(10 + cnt * 2) == -1)
                {
                    break;
                }
                if (rpdata(2, rpid) == 2 && cnt == 0)
                {
                    continue;
                }
                if (inv[rpref(10 + cnt * 2)].number < p)
                {
                    p = inv[rpref(10 + cnt * 2)].number;
                }
            }
            rpmode = 1;
            rtval = show_prompt(
                promptx, prompty, 220, show_prompt_type::with_number, p);
            rpmode = 0;
            if (rtval == 0)
            {
                rpref(1) = TODO_show_prompt_val;
                rpref(2) = rpdata(1, rpid);
                rpref(3) = rpdiff(rpid, step, -1);
                label_19342();
                return turn_result_t::turn_end;
            }
            if (rtval == 2)
            {
                step = -1;
                goto label_1923;
            }
            --step;
            goto label_1923;
        }
    }
    page = 0;
    pagesize = 16;
    listmax = 0;
    cs = 0;
    cs_bk = -1;
    cc = 0;
    screenupdate = -1;
    update_screen();
    if (step == -1)
    {
        rppage(0) = 0;
        rppage(1) = 0;
        listmax = 0;
        for (int cnt = 0; cnt < 1200; ++cnt)
        {
            if (rpdata(0, cnt) == 0)
            {
                continue;
            }
            if (recipememory(cnt) > 0)
            {
                list(0, listmax) = cnt;
                list(1, listmax) = cnt;
                ++listmax;
            }
        }
        sort_list_by_column1();
        windowshadow(1) = 1;
        txtnew();
        txt(lang(
            u8"(製作中)だめまだ"s,
            u8"(*) The feature is not implemented yet."s));
        txtnew();
        txt(lang(
            u8"どのレシピを使う？"s, u8"Which recipe do you want to use?"s));
        goto label_1924_internal;
    }
    rppage = 1;
    {
        int stat = blendlist(list, step);
        listmax = stat;
    }
    sort_list_by_column1();
    goto label_1927_internal;
label_1924_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    DIM2(blendchecklist, pagesize);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        blendchecklist(cnt) = blendcheckmat(list(0, p));
    }
label_1925_internal:
    s(0) = lang(u8"レシピの選択"s, u8"Choose a recipe"s);
    s(1) = strhint2;
    windowshadow = windowshadow(1);
    display_window(
        (windoww - 780) / 2 + inf_screenx, winposy(445), 380, 432, 74);
    display_topic(lang(u8"レシピの名称"s, u8"Name"s), wx + 28, wy + 30);
    s = ""s + listmax + u8" recipes"s;
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    pos(wx + 130, wy + wh - 65 - wh % 8);
    mes(s);
    keyrange = 0;
    gmode(2);
    prepare_item_image(550, 0);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 60 + cnt * 19);
            gfini(ww - 100, 18);
            gfdec2(12, 14, 16);
        }
        pos(wx + 37, wy + 70 + cnt * 19);
        gmode(2, chipi(2, 550), chipi(3, 550));
        grotate(1, 0, 960, 0, inf_tiles, inf_tiles);
        pos(wx + 330, wy + 53 + cnt * 19);
        if (blendchecklist(cnt) == 1)
        {
            gcopy(3, 336, 360, 24, 24);
        }
        rpid = list(0, p);
        pos(wx + 317, wy + 60 + cnt * 19);
        gcopy(3, 64 + (4 - rpdiff(rpid, -1, -1) / 25) * 16, 624, 16, 16);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        p = list(0, p);
        rpid = p;
        s = lang(""s, u8"Recipe of "s) + cnven(rpname(rpid))
            + lang(u8"のレシピ"s, ""s);
        display_key(wx + 58, wy + 60 + cnt * 19 - 2, cnt);
        cs_list(cs == cnt, s, wx + 84, wy + 60 + cnt * 19 - 1, 0, 0, p);
    }
    if (cs_bk != cs)
    {
        rpid = list(0, pagesize * page + cs);
        windowshadow = windowshadow(1);
        window_recipe(list2, -1, wx + ww, wy, 400, wh);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    windowshadow(1) = 0;
    pos(wx + 10, wy + wh - 100);
    gcopy(3, 960, 96, 80, 90);
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        rpid = p;
        step = 0;
        rppage(0) = 1;
        rppage(1) = 1;
        rpref(0) = rpid;
        goto label_1923;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1924_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1924_internal;
        }
    }
    if (key == key_cancel)
    {
        screenupdate = 0;
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_1925_internal;
label_1927_internal:
    windowshadow(1) = 1;
    txtnew();
    txt(lang(
        rpmatname(step) + u8"を追加しよう。"s,
        u8"Add \""s + rpmatname(step) + u8"\"."s));
label_1928_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    if (jp)
    {
        s = rpmatname(step) + u8"を追加"s;
    }
    else
    {
        s = u8"Add "s + rpmatname(step);
    }
    s(1) = strhint2;
    windowshadow = windowshadow(1);
    display_window(
        (windoww - 780) / 2 + inf_screenx, winposy(445), 380, 432, 74);
    display_topic(lang(u8"アイテムの名称"s, u8"Name"s), wx + 28, wy + 30);
    s = ""s + listmax + u8" items"s;
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    pos(wx + 130, wy + wh - 65 - wh % 8);
    mes(s);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 60 + cnt * 19);
            gfini(ww - 100, 18);
            gfdec2(12, 14, 16);
        }
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        p = list(0, p);
        s = itemname(p, inv[p].number);
        s = strmid(s, 0, 28);
        if (p >= 5080)
        {
            s += lang(u8"(地面)"s, u8" (Ground)"s);
        }
        display_key(wx + 58, wy + 60 + cnt * 19 - 2, cnt);
        p(1) = inv[p].image % 1000;
        prepare_item_image(p(1), inv[p].color, inv[p].param1);
        pos(wx + 37, wy + 69 + cnt * 19);
        gmode(2, chipi(2, p(1)), chipi(3, p(1)));
        grotate(
            1,
            0,
            960,
            0,
            chipi(2, p(1)) * inf_tiles / chipi(3, p(1)),
            inf_tiles);
        if (inv[p].body_part != 0)
        {
            pos(wx + 46, wy + 72 + cnt * 18 - 3);
            gcopy(3, 12, 348, 12, 12);
        }
        cs_list(cs == cnt, s, wx + 84, wy + 60 + cnt * 19 - 1, 0, 1, p);
    }
    p = list(0, pagesize * page + cs);
    if (listmax == 0)
    {
        p = -1;
    }
    if (cs_bk != cs)
    {
        windowshadow = windowshadow(1);
        window_recipe(list2, p, wx + ww, wy, 400, wh);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    windowshadow(1) = 0;
    pos(wx + 10, wy + wh - 100);
    gcopy(3, 960, 96, 80, 90);
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1928_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1928_internal;
        }
    }
    if (p != -1)
    {
        snd(17);
        ci = p;
        rpref(10 + step * 2 + 0) = ci;
        rpref(10 + step * 2 + 1) = inv[ci].id;
        txt(lang(
            itemname(ci) + u8"を選んだ。"s,
            u8"You add "s + itemname(ci) + u8"."s));
        ++step;
        p = rpdiff(rpid, step, step - 1);
        goto label_1923;
    }
    if (key == key_prev)
    {
        snd(1);
        --rppage;
        cs_bk = -1;
        if (rppage < 0)
        {
            rppage = rppage(1);
        }
    }
    if (key == key_next)
    {
        snd(1);
        ++rppage;
        cs_bk = -1;
        if (rppage > rppage(1))
        {
            rppage = 0;
        }
    }
    if (key == key_cancel)
    {
        --step;
        goto label_1923;
    }
    goto label_1928_internal;
}



int label_1931()
{
    f = 1;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (rpref(10 + cnt * 2) == -1)
        {
            break;
        }
        if (rpref(10 + cnt * 2) == -2)
        {
            f = 0;
            break;
        }
        if (inv[rpref(10 + cnt * 2)].number <= 0
            || inv[rpref(10 + cnt * 2)].id != rpref(11 + cnt * 2))
        {
            f = 0;
            break;
        }
    }
    return f;
}



int label_1932()
{
    p = 0;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (rpref(10 + cnt * 2) == -1)
        {
            break;
        }
        if (rpref(10 + cnt * 2) == -2)
        {
            continue;
        }
        if ((rpdata(2, rpid) <= 0 || cnt != 0) && rpresult)
        {
            --inv[rpref(10 + cnt * 2)].number;
        }
        else if (rnd(3) == 0)
        {
            txt(lang(
                itemname(rpref(10 + cnt * 2), 1) + u8"を失った。"s,
                u8"You lose "s + itemname(rpref((10 + cnt * 2)), 1) + u8"."s));
            --inv[rpref(10 + cnt * 2)].number;
        }
        if (chara_unequip(rpref(10 + cnt * 2)))
        {
            refresh_character(0);
        }
        cell_refresh(
            inv[rpref(10 + cnt * 2)].position.x,
            inv[rpref(10 + cnt * 2)].position.y);
    }
    refresh_burden_state();
    return 1;
}



void label_1933()
{
    rpresult = 1;
    if (rpdiff(rpid, -1, -1) < rnd(100))
    {
        rpresult = 0;
        txtef(3);
        txt(lang(u8"調合失敗！"s, u8"The blending attempt failed!"s));
    }
    else
    {
        if (rpdata(0, rpid) >= 10000)
        {
            label_1935();
        }
        else
        {
            flt();
            nostack = 1;
            int stat = itemcreate(
                -1,
                rpdata(0, rpid),
                cdata[0].position.x,
                cdata[0].position.y,
                0);
            if (stat != 0)
            {
                for (int cnt = 0;; ++cnt)
                {
                    if (rpdata(50 + cnt * 2, rpid) == 0)
                    {
                        break;
                    }
                    encadd(
                        ci,
                        rpdata(50 + cnt * 2, rpid),
                        rpdata(51 + cnt * 2, rpid),
                        0,
                        1);
                }
            }
            txtef(2);
            txt(lang(
                itemname(ci, 1) + u8"の作成に成功した！"s,
                u8"You successfully create "s + itemname(ci, 1) + u8"!"s));
            snd(17);
        }
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            if (rpdata(10 + cnt * 2, rpid) == 0)
            {
                break;
            }
            skillexp(
                rpdata(10 + cnt * 2, rpid),
                0,
                50 + rpdata((11 + cnt * 2), rpid) + rpref(2) / 10000 * 25,
                2,
                50);
        }
    }
    --rpref(1);
    label_1932();
    return;
}



void label_19342()
{
label_19341_internal:
    rpid = rpref(0);
    if (rpid == 0)
    {
        rowactend(cc);
        return;
    }
    if (cdata[cc].continuous_action_id == 0)
    {
        txtnew();
        txt(lang(
            name(cc) + u8"は"s + rpname(rpid) + u8"の調合をはじめた。"s,
            name(cc) + u8" start"s + _s(cc) + u8" blending of "s + rpname(rpid)
                + u8"."s));
        cdata[cc].continuous_action_id = 12;
        cdata[cc].continuous_action_turn = rpref(2) % 10000;
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (rnd(30) == 0)
        {
            txtef(4);
            txt(lang(u8" *こねこね* "s, u8"*pug*"s),
                lang(u8" *トントン* "s, u8"*clank*"s));
        }
        return;
    }
    if (rpref(2) >= 10000)
    {
        cdata[cc].continuous_action_turn = rpref(2) / 10000;
        for (int cnt = 0;; ++cnt)
        {
            mode = 12;
            ++gdata_hour;
            label_2736();
            render_hud();
            if (cnt % 5 == 0)
            {
                txtef(4);
                txt(lang(u8" *こねこね* "s, u8"*pug*"s),
                    lang(u8" *トントン* "s, u8"*clank*"s));
            }
            for (int cnt = 0; cnt < 20; ++cnt)
            {
                redraw();
                await(30);
            }
            gdata_minute = 0;
            cc = 0;
            --cdata[cc].continuous_action_turn;
            if (cdata[cc].continuous_action_turn <= 0)
            {
                int stat = label_1931();
                if (stat == 0)
                {
                    txt(lang(
                        u8"調合に必要な材料が見つからない。"s,
                        u8"A required material cannot be found."s));
                    break;
                }
                label_1933();
                if (rpref(1) > 0)
                {
                    cdata[cc].continuous_action_turn = rpref(2) / 10000;
                    cnt = 0 - 1;
                    continue;
                }
                else
                {
                    break;
                }
            }
        }
        rowactend(cc);
        mode = 0;
        return;
    }
    int stat = label_1931();
    if (stat == 0)
    {
        txt(lang(
            u8"調合に必要な材料が見つからない。"s,
            u8"A required material cannot be found."s));
        rowactend(cc);
        return;
    }
    label_1933();
    if (rpref(1) > 0)
    {
        cdata[cc].continuous_action_id = 0;
        goto label_19341_internal;
    }
    rowactend(cc);
    return;
}



void label_1935()
{
    ci = rpref(10);
    ti = rpref(12);
    if (rpdata(2, rpid) == 2)
    {
        item_separate(ci);
    }
    else if (inv[ci].number <= 1)
    {
        rpref(10) = -2;
    }
    else
    {
        int stat = item_separate(ci);
        if (rpref(10) == stat)
        {
            rpref(10) = -2;
        }
        else
        {
            rpref(10) = stat;
        }
    }
    switch (rpdata(0, rpid))
    {
    case 10000:
        ibitmod(6, ci, 1);
        txtef(2);
        txt(lang(
            itemname(ci, 1) + u8"の作成に成功した！"s,
            u8"You successfully create "s + itemname(ci, 1) + u8"!"s));
        txt(lang(
            u8"あなたはうしろめたさを感じた…"s,
            u8"You kind of feel guilty..."s));
        snd(65);
        break;
    case 10001:
        inv[ci].color = inv[ti].color;
        txtef(2);
        txt(lang(
            u8"あなたは"s + itemname(ci) + u8"を染めた。"s,
            u8"You dye "s + itemname(ci) + u8"."s));
        snd(17);
        break;
    case 10002:
        ibitmod(14, ci, 1);
        txtef(2);
        txt(lang(
            itemname(ci, 1) + u8"の作成に成功した！"s,
            u8"You successfully create "s + itemname(ci, 1) + u8"!"s));
        txt(lang(u8"あなたはにやりと口元を歪めた。"s, u8"You grin."s));
        snd(65);
        break;
    case 10003:
        txtef(2);
        txt(lang(
            itemname(ci) + u8"に"s + itemname(ti, 1) + u8"を塗りたくった。"s,
            u8"You put "s + itemname(ti, 1) + u8" on "s + itemname(ci)
                + u8"."s));
        if (inv[ci].id == 567)
        {
            txt(lang(u8"いいアイデアだ！しかし…"s, u8"A good idea! But..."s));
        }
        else
        {
            ibitmod(2, ci, 1);
            txt(lang(
                itemname(ci) + u8"は熱から守られた。"s,
                itemname(ci) + u8" gain"s + _s2(in) + u8" fireproof."s));
        }
        snd(17);
        break;
    case 10004:
        txtef(2);
        txt(lang(
            itemname(ci) + u8"に"s + itemname(ti, 1) + u8"を塗りたくった。"s,
            u8"You put "s + itemname(ti, 1) + u8" on "s + itemname(ci)
                + u8"."s));
        ibitmod(1, ci, 1);
        txt(lang(
            itemname(ci) + u8"は酸から守られた。"s,
            itemname(ci) + u8" gain"s + _s2(in) + u8" acidproof."s));
        snd(17);
        break;
    case 10005:
        txtef(2);
        txt(lang(
            itemname(ti, 1) + u8"を"s + itemname(ci) + u8"に装着した。"s,
            u8"You bait "s + itemname(ci) + u8" with "s + itemname(ti, 1)
                + u8"."s));
        if (inv[ci].param4 == inv[ti].param1)
        {
            inv[ci].count += rnd(10) + 15;
        }
        else
        {
            inv[ci].count = rnd(10) + 15;
            inv[ci].param4 = inv[ti].param1;
        }
        snd(13);
        break;
    case 10006:
        txtef(2);
        txt(lang(
            itemname(ti, 1) + u8"を"s + itemname(ci) + u8"に降りかけた。"s,
            u8"You shower "s + itemname(ci) + u8" on "s + itemname(ti, 1)
                + u8"."s));
        if (inv[ti].curse_state == curse_state_t::blessed)
        {
            txtef(5);
            txt(lang(
                itemname(ci) + u8"は銀色に輝いた。"s,
                itemname(ci) + u8" shine"s + _s2(inv[ci].number)
                    + u8" silvery."s));
            inv[ci].curse_state = curse_state_t::blessed;
        }
        if (is_cursed(inv[ti].curse_state))
        {
            txtef(8);
            txt(lang(
                itemname(ci) + u8"は黒いオーラに包まれた。"s,
                itemname(ci) + u8" "s + is2(inv[ci].number)
                    + u8" wrapped by a dark aura."s));
            inv[ci].curse_state = curse_state_t::cursed;
        }
        snd(17);
        break;
    case 10007:
        txt(lang(
            itemname(ti, 1) + u8"を"s + itemname(ci) + u8"に放り込んだ。"s,
            u8"You throw "s + itemname(ci) + u8" into "s + itemname(ti, 1)
                + u8"."s));
        if (inv[ti].id == 601)
        {
            txt(lang(
                u8"空き瓶の割れる音がした。"s,
                u8"You hear the sound of the empty bottle shatters."s));
            break;
        }
        snd(17);
        if (inv[ci].id == 602)
        {
            txt(lang(u8"井戸は汚れた。"s, u8"The holy well is polluted."s));
            break;
        }
        if (inv[ci].param3 >= 20)
        {
            txt(lang(
                itemname(ci) + u8"は完全に枯れている。"s,
                itemname(ci) + u8" is completely dry."s));
            break;
        }
        txtef(2);
        txt(lang(
            itemname(ci) + u8"は一瞬輝いた。"s,
            itemname(ci) + u8" shines for a moment."s));
        if (inv[ti].id == 587)
        {
            txt(lang(u8"しかしこんな量では… "s, u8"But the snow just melts."s));
        }
        else
        {
            inv[ci].param1 += rnd(3);
        }
        break;
    case 10008:
        if (inv[ci].param1 < -5 || inv[ci].param3 >= 20
            || (inv[ci].id == 602 && gdata_holy_well_count <= 0))
        {
            const auto valn = itemname(ci);
            txt(lang(valn + u8"は涸れている。"s, valn + u8" is dry."s));
            txt(lang(
                u8"あっ！空き瓶を井戸に落としてしまった…"s,
                u8"Ops! You drop the empty bottle into the well..."s));
            break;
        }
        cibk = ci;
        if (inv[ci].id == 602)
        {
            --gdata_holy_well_count;
            flt();
            int stat = itemcreate(0, 516, -1, -1, 0);
            if (stat != 0)
            {
                inv[ci].curse_state = curse_state_t::blessed;
            }
        }
        else
        {
            inv[ci].param1 -= 3;
            flt(20);
            flttypemajor = 52000;
            itemcreate(0, 0, -1, -1, 0);
        }
        txt(lang(
            u8"空き瓶に水をすくった。"s,
            u8"You draw water from the well into the empty bottle."s));
        txtef(2);
        txt(lang(
            itemname(ci, 1) + u8"を手に入れた。"s,
            u8"You get "s + itemname(ci, 1) + u8"."s));
        item_stack(0, ci, 1);
        item_stack(0, ci);
        ci = cibk;
        snd(17);
        break;
    }

    item_stack(0, ci);
    if (inv[ci].body_part != 0)
    {
        create_pcpic(0, true);
    }
    if (inv_getowner(ci) == -1)
    {
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
    }
    refresh_character(0);
    return;
}



std::string txtitemoncell(int prm_1055, int prm_1056)
{
    elona_vector1<int> p_at_m185;
    elona_vector1<int> i_at_m185;
    const auto item_info = cell_itemoncell({prm_1055, prm_1056});
    const auto number = item_info.first;
    const auto item = item_info.second;

    if (number <= 3)
    {
        if (map(prm_1055, prm_1056, 5) < 0)
        {
            rtvaln = "";
            p_at_m185(0) = -map(prm_1055, prm_1056, 5);
            p_at_m185(1) = 0;
            i_at_m185(0) = p_at_m185 % 1000 + 5080;
            i_at_m185(1) = p_at_m185 / 1000 % 1000 + 5080;
            i_at_m185(2) = p_at_m185 / 1000000 % 1000 + 5080;
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                if (i_at_m185(cnt) == 6079)
                {
                    continue;
                }
                if (p_at_m185(1) != 0)
                {
                    rtvaln += lang(u8"と"s, u8" and "s);
                }
                rtvaln += itemname(i_at_m185(cnt));
                ++p_at_m185(1);
            }
        }
        else
        {
            rtvaln = itemname(item);
        }
        if (inv[item].own_state <= 0)
        {
            return lang(
                rtvaln + u8"が落ちている。"s,
                u8"You see "s + rtvaln + u8" here."s);
        }
        else if (inv[item].own_state == 3)
        {
            return lang(
                rtvaln + u8"が設置されている。"s,
                ""s + rtvaln + u8" is constructed here."s);
        }
        else
        {
            return lang(
                rtvaln + u8"がある。"s,
                u8"You see "s + rtvaln + u8" placed here."s);
        }
    }
    else
    {
        return lang(
            u8"ここには"s + number + u8"種類のアイテムがある。"s,
            u8"There are "s + number + u8" items lying here."s);
    }
}



void txttargetnpc(int prm_1057, int prm_1058, int prm_1059)
{
    int dy_at_m186 = 0;
    int i_at_m186 = 0;
    int p_at_m186 = 0;
    dy_at_m186 = 0;
    font(14 - en * 2);
    if (prm_1059 == 0)
    {
        if (fov_los(
                cdata[0].position.x, cdata[0].position.y, prm_1057, prm_1058)
                == 0
            || dist(
                   cdata[0].position.x, cdata[0].position.y, prm_1057, prm_1058)
                > cdata[0].vision_distance / 2)
        {
            pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
            ++dy_at_m186;
            bmes(
                lang(u8"視界範囲外"s, u8"This location is out of sight."s),
                255,
                2552,
                255);
            cansee = 0;
            return;
        }
    }
    if (map(prm_1057, prm_1058, 1) != 0)
    {
        i_at_m186 = map(prm_1057, prm_1058, 1) - 1;
        if (cdata[i_at_m186].is_invisible() == 0 || cdata[0].can_see_invisible()
            || cdata[i_at_m186].wet)
        {
            tc = i_at_m186;
            s = txttargetlevel(cc, tc);
            pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
            ++dy_at_m186;
            bmes(s, 255, 2552, 255);
            pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
            ++dy_at_m186;
            bmes(
                lang(u8"現在のターゲットは"s, u8"You are targeting "s)
                    + name(i_at_m186) + lang(u8" (距離 "s, u8".(Distance "s)
                    + dist(
                          cdata[0].position.x,
                          cdata[0].position.y,
                          cdata[i_at_m186].position.x,
                          cdata[i_at_m186].position.y)
                    + u8")"s,
                255,
                2552,
                255);
        }
    }
    if (map(prm_1057, prm_1058, 5) != 0)
    {
        pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
        ++dy_at_m186;
        bmes(txtitemoncell(prm_1057, prm_1058), 255, 2552, 255);
    }
    if (map(prm_1057, prm_1058, 6) != 0)
    {
        if (mdata(6) == 1)
        {
            if (map(prm_1057, prm_1058, 6) / 1000 % 100 == 15)
            {
                p_at_m186 = map(prm_1057, prm_1058, 6) / 100000 % 100
                    + map(prm_1057, prm_1058, 6) / 10000000 * 100;
                pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
                ++dy_at_m186;
                bmes(mapname(p_at_m186, true), 255, 2552, 255);
            }
            if (map(prm_1057, prm_1058, 6) / 1000 % 100 == 34)
            {
                pos(100, windowh - inf_verh - 45 - dy_at_m186 * 20);
                ++dy_at_m186;
                bmes(
                    txtbuilding(
                        map(prm_1057, prm_1058, 6) / 100000 % 100,
                        map(prm_1057, prm_1058, 6) / 10000000),
                    255,
                    2552,
                    255);
            }
        }
    }
    cansee = 1;
    return;
}



int key_direction()
{
    kdx = 0;
    kdy = 0;
    if (key == key_north)
    {
        --kdy;
        return 1;
    }
    if (key == key_south)
    {
        ++kdy;
        return 1;
    }
    if (key == key_west)
    {
        --kdx;
        return 1;
    }
    if (key == key_east)
    {
        ++kdx;
        return 1;
    }
    if (key == key_northwest)
    {
        --kdx;
        --kdy;
        return 1;
    }
    if (key == key_northeast)
    {
        ++kdx;
        --kdy;
        return 1;
    }
    if (key == key_southwest)
    {
        --kdx;
        ++kdy;
        return 1;
    }
    if (key == key_southeast)
    {
        ++kdx;
        ++kdy;
        return 1;
    }
    return 0;
}



turn_result_t step_into_gate()
{
    if (config::instance().extrahelp)
    {
        if (gdata(217) == 0)
        {
            if (mode == 0)
            {
                if (cdata[0].continuous_action_turn == 0)
                {
                    gdata(217) = 1;
                    ghelp = 17;
                    show_ex_help();
                    screenupdate = -1;
                    update_screen();
                    return turn_result_t::pc_turn_user_error;
                }
            }
        }
    }
    if (1 && gdata_wizard == 0)
    {
        snd(44);
        save_game();
        txtef(5);
        txt(lang(u8" *保存* "s, u8"*saving*"s));
    }
    txt(lang(
        u8"あなたはゲートに足を踏み入れた。ゲートはあなたの背後で消滅した。"s,
        u8"You stepped into the gate. The gate disappears."s));
    --inv[ci].number;
    cell_refresh(inv[ci].position.x, inv[ci].position.y);
    txt(lang(
        u8"ネット機能をONにする必要がある。"s,
        u8"You have to turn on network setting."s));
    update_screen();
    return turn_result_t::pc_turn_user_error;
}



int label_19432()
{
label_19431_internal:
    if (1 && gdata_wizard == 0)
    {
        snd(44);
        save_game();
        txtef(5);
        txt(lang(u8" *保存* "s, u8"*saving*"s));
    }
    snd(26);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    SDIM2(headtemp, 1024);
    const auto pattern =
        comctrl == 1 ? std::regex{u8R"(.*\.ept)"} : std::regex{u8R"(.*\.eum)"};
    for (const auto& entry :
         filesystem::dir_entries{filesystem::dir::user(),
                                 filesystem::dir_entries::type::file,
                                 pattern})
    {
        const auto path = entry.path();
        if (path == filesystem::path(u8"temp.enum")
            || path == filesystem::path(u8"temp.ept"))
            continue;
        bload(path, headtemp, 1024);
        notesel(headtemp);
        noteget(s, 0);
        noteget(s(1), 1);
        noteget(s(2), 4);
        list(0, listmax) = listmax;
        list(1, listmax) = 0;
        list(2, listmax) = elona::stoi(s(2));
        listn(0, listmax) = u8"("s
            + filesystem::make_preferred_path_in_utf8(path.filename()) + u8") "s
            + s + u8" "s + s(1);
        listn(1, listmax) = filesystem::to_utf8_path(path.filename());
        ++listmax;
        noteunsel();
    }
    if (config::instance().net != 0)
    {
        if (comctrl == 1)
        {
            net_dllist(u8".ept"s, 1);
        }
        if (comctrl == 2)
        {
            net_dllist(u8".eum"s, 1);
        }
    }
    if (comctrl == 0 || comctrl == 2)
    {
        txt(lang(
            u8"どのルームを訪問する？ "s,
            u8"Which room do you want to visit? "s));
    }
    if (comctrl == 1)
    {
        txt(lang(
            u8"どのチームと対戦する？"s,
            u8"Which team do you want to play a match? "s));
    }
    windowshadow = 1;
label_1944_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1945_internal:
    if (comctrl == 0 || comctrl == 2)
    {
        s = lang(u8"ルーム一覧"s, u8"Room List"s);
    }
    if (comctrl == 1)
    {
        s = lang(u8"ペットチーム一覧"s, u8"Team List"s);
    }
    s(1) = lang(u8"BackSpace [削除]  "s, u8"BackSpace [Delete]  "s) + strhint2
        + strhint3;
    display_window((windoww - 640) / 2 + inf_screenx, winposy(448), 640, 448);
    if (comctrl == 0 || comctrl == 2)
    {
        s = lang(u8"ルームの名称"s, u8"Name"s);
    }
    if (comctrl == 1)
    {
        s = lang(u8"チームの名称"s, u8"Name"s);
    }
    display_topic(s, wx + 28, wy + 36);
    display_topic(u8"Ver"s, wx + 534, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(540, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        s = listn(0, p);
        cutname(s, 64);
        cs_list(cs == cnt, s, wx + 84, wy + 66 + cnt * 19 - 1);
        pos(wx + 570, wy + 66 + cnt * 19);
        mes(""s + (list(2, p) % 1000 + 1) + u8".0"s);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        if (p == -999)
        {
            snd(27);
            txt(lang(
                u8"互換性のないバージョンのファイルです。"s,
                u8"Selected item is incompatible."s));
            goto label_1944_internal;
        }
        if (listn(1, p) == u8"net"s)
        {
            if (comctrl == 1)
            {
                s = u8".ept"s;
            }
            else
            {
                s = u8".eum"s;
            }
            int stat = net_dl(""s + list(1, p) + s, u8"temp"s + s);
            usermapid = list(1, p);
            if (stat == 0)
            {
                txt(lang(
                    u8"ファイルの取得に失敗した。"s,
                    u8"Failed to retrieve designated files."s));
                goto label_1944_internal;
            }
            userfile = u8"temp"s + s;
        }
        else
        {
            userfile = listn(1, p);
        }
        bload(filesystem::dir::user() / userfile, headtemp, 1024);
        notesel(headtemp);
        noteget(s, 5);
        noteget(s(1), 6);
        if (comctrl == 0 || comctrl == 2)
        {
            username = ""s + s;
            userrelation = elona::stoi(s(1));
        }
        if (comctrl == 1)
        {
            rtval(0) = elona::stoi(s(0));
            rtval(1) = elona::stoi(s(1));
        }
        return 1;
    }
    if (ginfo(2) == 0)
    {
        if (noteinfo() != 0)
        {
            if (getkey(snail::key::backspace))
            {
                userfile = listn(1, cs + pagesize * page);
                if (!fs::exists(filesystem::path(u8"./user/"s + userfile)))
                {
                    goto label_1944_internal;
                }
                txt(lang(
                    u8"本当に"s + userfile + u8"を削除する？ "s,
                    u8"Do you really want to delete "s + userfile + u8"? "s));
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                if (rtval == 0)
                {
                    elona_delete(filesystem::path(u8"./user/"s + userfile));
                    goto label_19431_internal;
                }
                goto label_1944_internal;
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1944_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1944_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return 0;
    }
    goto label_1945_internal;
}



int target_position()
{
    if (tlocinitx != 0 || tlocinity != 0)
    {
        tlocx = tlocinitx;
        tlocy = tlocinity;
    }
    else
    {
        tlocx = cdata[cc].position.x;
        tlocy = cdata[cc].position.y;
    }
    if (homemapmode)
    {
        scposval = 0;
    }
    else
    {
        scposval = 1;
        if (cdata[0].enemy_id == 0)
        {
            label_2072();
        }
        label_2076();
        if (listmax == 0)
        {
            txt(lang(
                u8"視界内にターゲットは存在しない。"s,
                u8"You look around and find nothing."s));
        }
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (list(0, cnt) == 0)
            {
                continue;
            }
            if (list(0, cnt) == cdata[0].enemy_id)
            {
                tlocx = cdata[list(0, cnt)].position.x;
                tlocy = cdata[list(0, cnt)].position.y;
                break;
            }
        }
    }
label_1948_internal:
    screenupdate = -1;
    update_screen();
    dx = (tlocx - scx) * inf_tiles + inf_screenx;
    dy = (tlocy - scy) * inf_tiles + inf_screeny;
    if (dy + inf_tiles <= windowh - inf_verh)
    {
        pos(dx, dy * (dy > 0));
        snail::application::instance().get_renderer().set_blend_mode(
            snail::blend_mode_t::blend);
        snail::application::instance().get_renderer().set_draw_color(
            {127, 127, 255, 50});
        snail::application::instance().get_renderer().fill_rect(
            dx,
            dy * (dy > 0),
            inf_tiles - (dx + inf_tiles > windoww) * (dx + inf_tiles - windoww),
            inf_tiles + (dy < 0) * inf_screeny
                - (dy + inf_tiles > windowh - inf_verh)
                    * (dy + inf_tiles - windowh + inf_verh));
    }
    if (homemapmode == 1)
    {
        pos(windoww - 80, 20);
        gcopy(
            2,
            tile % 33 * inf_tiles,
            tile / 33 * inf_tiles,
            inf_tiles,
            inf_tiles);
    }
    else
    {
        rc = -1;
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (map(tlocx, tlocy, 1) <= 1)
            {
                break;
            }
            rc = map(tlocx, tlocy, 1) - 1;
            if (is_in_fov(rc) == 0)
            {
                break;
            }
            if (fov_los(
                    cdata[cc].position.x,
                    cdata[cc].position.y,
                    cdata[rc].position.x,
                    cdata[rc].position.y)
                == 0)
            {
                break;
            }
            if ((cdata[rc].is_invisible() == 0 || cdata[0].can_see_invisible()
                 || cdata[rc].wet)
                == 0)
            {
                break;
            }
            get_route(
                cdata[cc].position.x,
                cdata[cc].position.y,
                cdata[rc].position.x,
                cdata[rc].position.y);
            dx = (tlocx - scx) * inf_tiles + inf_screenx;
            dy = (tlocy - scy) * inf_tiles + inf_screeny;
            if (maxroute != 0)
            {
                dx = cdata[cc].position.x;
                dy = cdata[cc].position.y;
                for (int cnt = 0; cnt < 100; ++cnt)
                {
                    int stat = route_info(dx, dy, cnt);
                    if (stat == 0)
                    {
                        break;
                    }
                    else if (stat == -1)
                    {
                        continue;
                    }
                    sx = (dx - scx) * inf_tiles + inf_screenx;
                    sy = (dy - scy) * inf_tiles + inf_screeny;
                    if (sy + inf_tiles <= windowh - inf_verh)
                    {
                        pos(sx, sy * (sy > 0));
                        snail::application::instance()
                            .get_renderer()
                            .set_blend_mode(snail::blend_mode_t::blend);
                        snail::application::instance()
                            .get_renderer()
                            .set_draw_color({255, 255, 255, 25});
                        snail::application::instance().get_renderer().fill_rect(
                            sx,
                            sy * (sy > 0),
                            inf_tiles
                                - (sx + inf_tiles > windoww)
                                    * (sx + inf_tiles - windoww),
                            inf_tiles + (sy < 0) * inf_screeny
                                - (sy + inf_tiles > windowh - inf_verh)
                                    * (sy + inf_tiles - windowh + inf_verh));
                    }
                }
            }
        }
    }
    txttargetnpc(tlocx, tlocy);
    redraw();
    await(config::instance().wait1);
    key_check();
    if (homemapmode == 1)
    {
        if (key == key_enter)
        {
            label_1955();
            keyrelease();
            goto label_1948_internal;
        }
        int a{};
        stick(a, 768);
        if (a == 256)
        {
            key = key_enter;
        }
        if (a == 512)
        {
            if (chipm(0, map(tlocx, tlocy, 0)) == 2
                || chipm(0, map(tlocx, tlocy, 0)) == 1)
            {
                snd(27);
                keyrelease();
                goto label_1948_internal;
            }
            tile = map(tlocx, tlocy, 0);
            snd(5);
            keyrelease();
        }
        tx = clamp((mousex - inf_screenx), 0, windoww) / 48;
        ty = clamp((mousey - inf_screeny), 0, (windowh - inf_verh)) / 48;
        int stat = key_direction();
        if (stat == 1)
        {
            cdata[0].position.x += kdx;
            cdata[0].position.y += kdy;
            if (cdata[0].position.x < 0)
            {
                cdata[0].position.x = 0;
            }
            else if (cdata[0].position.x >= mdata(0))
            {
                cdata[0].position.x = mdata(0) - 1;
            }
            if (cdata[0].position.y < 0)
            {
                cdata[0].position.y = 0;
            }
            else if (cdata[0].position.y >= mdata(1))
            {
                cdata[0].position.y = mdata(1) - 1;
            }
        }
        tlocx = tx + scx;
        if (tlocx < 0)
        {
            tlocx = 0;
        }
        else if (tlocx >= mdata(0))
        {
            tlocx = mdata(0) - 1;
        }
        tlocy = ty + scy;
        if (tlocy < 0)
        {
            tlocy = 0;
        }
        else if (tlocy >= mdata(1))
        {
            tlocy = mdata(1) - 1;
        }
    }
    else
    {
        int stat = key_direction();
        if (stat == 1)
        {
            x = tlocx + kdx;
            y = tlocy + kdy;
            if (x >= 0 && y >= 0 && x < mdata(0) && y < mdata(1))
            {
                tlocx += kdx;
                tlocy += kdy;
            }
        }
    }
    if (findlocmode == 1)
    {
        if (rc == -1)
        {
            i = 0;
        }
        else
        {
            i = rc;
        }
        f = 0;
        p = 0;
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (cdata[list(0, cnt)].position.x == cdata[i].position.x)
            {
                if (cdata[list(0, cnt)].position.y == cdata[i].position.y)
                {
                    p = cnt;
                    break;
                }
            }
        }
        if (key == key_pageup)
        {
            ++p;
            f = 1;
            if (p >= listmax)
            {
                p = 0;
            }
        }
        if (key == key_pagedown)
        {
            --p;
            f = 1;
            if (p < 0)
            {
                p = listmax - 1;
                if (p < 0)
                {
                    p = 0;
                }
            }
        }
        i = list(0, p);
        if (f)
        {
            snd(5);
            tlocx = cdata[list(0, p)].position.x;
            tlocy = cdata[list(0, p)].position.y;
        }
    }
    if (key == key_enter)
    {
        if (findlocmode == 1)
        {
            if (cansee == 0 || chipm(7, map(tlocx, tlocy, 0)) & 4)
            {
                txt(lang(
                    u8"その場所は見えない。"s,
                    u8"You can't see the location."s));
                goto label_1948_internal;
            }
            snd(20);
            if (rc > 0)
            {
                cdata[0].enemy_id = rc;
                txt(lang(
                    name(rc) + u8"をターゲットにした。"s,
                    u8"You target "s + name(rc) + u8"."s));
            }
            else
            {
                tgloc = 1;
                tglocx = tlocx;
                tglocy = tlocy;
                txt(lang(
                    u8"地面をターゲットにした。"s,
                    u8"You target the ground."s));
            }
        }
        else if (homemapmode == 0)
        {
            snd(5);
        }
        scposval = 0;
        if (tlocinitx == 0 && tlocinity == 0)
        {
            scposval = 0;
            update_screen();
        }
        tlocinitx = 0;
        tlocinity = 0;
        return cansee;
    }
    if (key == key_cancel)
    {
        tlocinitx = 0;
        tlocinity = 0;
        scposval = 0;
        update_screen();
        return -1;
    }
    goto label_1948_internal;
}



turn_result_t do_look_command()
{
    page = 0;
    pagesize = 16;
    cs_bk = -1;
    label_2076();
    if (listmax == 0)
    {
        ++msgdup;
        txt(lang(
            u8"視界内にターゲットは存在しない。"s,
            u8"You look around and find nothing."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    cs = 0;
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        if (list(0, cnt) == cdata[0].enemy_id)
        {
            cs = cnt % pagesize;
            page = cnt / pagesize;
        }
    }
label_1952_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1953_internal:
    if (cs != cs_bk)
    {
        screenupdate = -1;
        update_screen();
        keyrange = 0;
        font(20 - en * 2, snail::font_t::style_t::bold);
        for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
        {
            p = pagesize * page + cnt;
            if (p >= listmax)
            {
                break;
            }
            key_list(cnt) = key_select(cnt);
            ++keyrange;
            x = list(1, p) - scx;
            y = list(2, p) - scy;
            if (cs == cnt)
            {
                i = p;
                get_route(
                    cdata[cc].position.x,
                    cdata[cc].position.y,
                    cdata[list(0, p)].position.x,
                    cdata[list(0, p)].position.y);
                dx = (tlocx - scx) * inf_tiles + inf_screenx;
                dy = (tlocy - scy) * inf_tiles + inf_screeny;
                if (maxroute != 0)
                {
                    dx = cdata[cc].position.x;
                    dy = cdata[cc].position.y;
                    for (int cnt = 0; cnt < 100; ++cnt)
                    {
                        int stat = route_info(dx, dy, cnt);
                        if (stat == 0)
                        {
                            break;
                        }
                        else if (stat == -1)
                        {
                            continue;
                        }
                        sx = (dx - scx) * inf_tiles + inf_screenx;
                        sy = (dy - scy) * inf_tiles + inf_screeny;
                        if (sy + inf_tiles <= windowh - inf_verh)
                        {
                            pos(sx, sy * (sy > 0));
                            snail::application::instance()
                                .get_renderer()
                                .set_blend_mode(snail::blend_mode_t::blend);
                            snail::application::instance()
                                .get_renderer()
                                .set_draw_color({255, 255, 255, 25});
                            snail::application::instance()
                                .get_renderer()
                                .fill_rect(
                                    sx,
                                    sy * (sy > 0),
                                    inf_tiles
                                        - (sx + inf_tiles > windoww)
                                            * (sx + inf_tiles - windoww),
                                    inf_tiles + (sy < 0) * inf_screeny
                                        - (sy + inf_tiles > windowh - inf_verh)
                                            * (sy + inf_tiles - windowh
                                               + inf_verh));
                        }
                        await();
                    }
                }
                sx = x * inf_tiles + inf_screenx;
                sy = y * inf_tiles + inf_screeny;
                if (sy + inf_tiles <= windowh - inf_verh)
                {
                    pos(sx, sy * (sy > 0));
                    snail::application::instance()
                        .get_renderer()
                        .set_blend_mode(snail::blend_mode_t::blend);
                    snail::application::instance()
                        .get_renderer()
                        .set_draw_color({127, 127, 255, 50});
                    snail::application::instance().get_renderer().fill_rect(
                        sx,
                        sy * (sy > 0),
                        inf_tiles,
                        inf_tiles + (sy < 0) * inf_screeny
                            - (sy + inf_tiles > windowh - inf_verh)
                                * (sy + inf_tiles - windowh + inf_verh));
                }
            }
            display_key(
                x * inf_tiles + inf_screenx - 12,
                y * inf_tiles + inf_screeny - 12,
                cnt);
        }
        color(0, 0, 0);
        txttargetnpc(
            cdata[list(0, i)].position.x, cdata[list(0, i)].position.y);
        cs_bk = cs;
        render_hud();
        redraw();
    }
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (key == key_target)
    {
        key = key_list(cs);
    }
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        cdata[0].enemy_id = p;
        snd(20);
        txt(lang(
            name(p) + u8"をターゲットにした。"s,
            u8"You target "s + name(p) + u8"."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1952_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1952_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_1953_internal;
}



void label_1955()
{
    ww = 33;
    wh = 20;
    wx = 0;
    wy = 0;
    snd(26);
label_1956_internal:
    gmode(0);
    p = 0;
    for (int cnt = 0, cnt_end = (wh); cnt < cnt_end; ++cnt)
    {
        int cnt2 = cnt;
        for (int cnt = 0, cnt_end = (ww); cnt < cnt_end; ++cnt)
        {
            if (p < listmax)
            {
                pos(wx + cnt * 24, wy + cnt2 * 24);
                gzoom(
                    2,
                    list(0, p) % ww * 48,
                    list(0, p) / ww * 48,
                    48,
                    48,
                    24,
                    24);
                if (chipm(7, list(0, p)) & 4)
                {
                    color(240, 230, 220);
                    boxl(
                        wx + cnt * 24,
                        wy + cnt2 * 24,
                        wx + cnt * 24 + 24,
                        wy + cnt2 * 24 + 24);
                    color(0, 0, 0);
                }
            }
            ++p;
        }
    }
    gmode(2);
    redraw();
    await(config::instance().wait1);
    int a{};
    stick(a);
    if (a == 256)
    {
        p = mousex / 24 + mousey / 24 * ww;
        if (p >= listmax)
        {
            snd(27);
            goto label_1956_internal;
        }
        tile = list(0, p);
        snd(20);
        label_1958();
        return;
    }
    if (a == 512)
    {
        label_1958();
        return;
    }
    goto label_1956_internal;
}



void label_1958()
{
    screenupdate = -1;
    update_screen();
    return;
}



int ctrl_ally()
{
    snd(26);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    if (allyctrl == 2)
    {
        list(0, listmax) = 99;
        list(1, listmax) = -9999;
        ++listmax;
    }
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            continue;
        }
        if (allyctrl == 1)
        {
            if (cdata[cnt].state == 6)
            {
                continue;
            }
        }
        if (allyctrl == 3 || allyctrl == 5)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
        }
        if (allyctrl == 5)
        {
            if (cnt == rc)
            {
                continue;
            }
        }
        if (cdata[cnt].current_map != 0)
        {
            if (allyctrl == 1 || allyctrl == 2)
            {
                continue;
            }
        }
        if (allyctrl != 1)
        {
            if (cdata[cnt].is_escorted() == 1)
            {
                continue;
            }
        }
        if (cdata[cnt].is_ridden())
        {
            continue;
        }
        if (cnt == 0)
        {
            continue;
        }
        list(0, listmax) = cnt;
        list(1, listmax) = -cdata[cnt].level;
        ++listmax;
    }
    sort_list_by_column1();
    if (allyctrl == 2)
    {
        p = 0;
        DIM2(followerin, 16);
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (cnt == 0)
            {
                continue;
            }
            i = list(0, cnt);
            if (cdata[i].state != 6)
            {
                followerin(i) = 1;
                ++p;
                if (p == arenaop(1))
                {
                    break;
                }
            }
        }
    }
    windowshadow = 1;
label_1960_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
        txtnew();
    }
    if (allyctrl == 0)
    {
        txt(lang(u8"誰を呼び戻す？"s, u8"Call who?"s));
        s(10) = lang(u8"呼び戻す仲間"s, u8"Ally List"s);
        s(11) = strhint2 + strhint3;
        s(12) = lang(u8"仲間の情報"s, u8"Name"s);
        s(13) = lang(u8"状態"s, u8"Status"s);
        x = 0;
    }
    if (allyctrl == 1)
    {
        txt(lang(u8"誰を売り飛ばす？"s, u8"Sell who?"s));
        s(10) = lang(u8"売り飛ばす仲間"s, u8"Ally List"s);
        s(11) = strhint2 + strhint3;
        s(12) = lang(u8"仲間の情報"s, u8"Name"s);
        s(13) = lang(u8"値段"s, u8"Value"s);
        x = 20;
    }
    if (allyctrl == 2)
    {
        i = 0;
        for (int cnt = 0; cnt < 16; ++cnt)
        {
            i += followerin(cnt) == 1;
        }
        if (i < arenaop(1))
        {
            txtef(3);
        }
        else
        {
            txtef(4);
        }
        txt(lang(u8"試合の規定人数: "s, u8"Participant: "s) + i + u8" / "s
            + arenaop(1));
        s(10) = lang(u8"出場する仲間"s, u8"Ally List"s);
        s(11) = strhint2 + strhint3;
        s(12) = lang(u8"仲間の情報"s, u8"Name"s);
        s(13) = lang(u8"状態"s, u8"Status"s);
        x = 20;
    }
    if (allyctrl == 3)
    {
        if (adata(16, gdata_current_map) == 102)
        {
            txt(lang(
                u8"誰を店長にする？"s, u8"Who takes the role of shopkeeper?"s));
            s(10) = lang(u8"店長候補"s, u8"Ally List"s);
            s(11) = strhint2 + strhint3;
            s(12) = lang(u8"仲間の情報"s, u8"Name"s);
            s(13) = lang(u8"魅力/交渉"s, u8"CHR/Negotiation"s);
        }
        if (adata(16, gdata_current_map) == 31)
        {
            txt(lang(
                u8"誰をブリーダーにする？"s,
                u8"Who takes the role of breeder?"s));
            s(10) = lang(u8"ブリーダー候補"s, u8"Ally List"s);
            s(11) = strhint2 + strhint3;
            s(12) = lang(u8"仲間の情報"s, u8"Name"s);
            s(13) = lang(u8"繁殖力"s, u8"Breed Power"s);
        }
        if (gdata_current_map == 7)
        {
            txt(lang(u8"誰を滞在させる？"s, u8"Who stays in your home?"s));
            s(10) = lang(u8"滞在状態の変更"s, u8"Ally List"s);
            s(11) = strhint2 + strhint3;
            s(12) = lang(u8"仲間の情報"s, u8"Name"s);
            s(13) = lang(u8"状態"s, u8"Status"s);
        }
        x = 20;
    }
    if (allyctrl == 4 || allyctrl == 5)
    {
        txt(lang(u8"対象にする仲間は？"s, u8"Who is the subject?"s));
        s(10) = lang(u8"仲間"s, u8"Ally List"s);
        s(11) = strhint2 + strhint3;
        s(12) = lang(u8"仲間の情報"s, u8"Name"s);
        s(13) = lang(u8"状態"s, u8"Status"s);
        if (allyctrl == 5)
        {
            if (rc != 0)
            {
                s(13) = lang(u8"獲得部位/技能"s, u8"Body/Skill"s);
            }
        }
        x = 0;
    }
label_1961_internal:
    s(0) = s(10);
    s(1) = s(11);
    display_window((windoww - 620) / 2 + inf_screenx, winposy(400), 620, 400);
    display_topic(s(12), wx + 28, wy + 36);
    display_topic(s(13), wx + 350 + x, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(500, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        if (list(0, p) != 99)
        {
            i(0) = cdata[list(0, p)].image % 1000;
            i(1) = cdata[list(0, p)].image / 1000;
            chara_preparepic(i, i(1));
            pos(wx + 40, wy + 74 + cnt * 19 - 8);
            gmode(2, chipc(2, i), chipc(3, i));
            grotate(
                5,
                0,
                960,
                0,
                chipc(2, i) / (1 + (chipc(3, i) > inf_tiles)),
                inf_tiles);
        }
        i = list(0, p);
        if (i == 99)
        {
            cs_list(
                cs == cnt,
                lang(u8"決定"s, u8"Proceed"s),
                wx + 84,
                wy + 66 + cnt * 19 - 1);
            continue;
        }
        if (allyctrl == 0 || allyctrl == 2 || allyctrl == 3 || allyctrl == 4
            || allyctrl == 5)
        {
            s = ""s + cdatan(1, i) + u8" "s + cdatan(0, i);
            if (cdata[i].current_map != 0)
            {
                s = s + u8"("s + mapname(cdata[i].current_map) + u8")"s;
            }
            if (allyctrl == 2)
            {
                if (followerin(i) == 1)
                {
                    s += lang(u8" *出場* "s, u8" *In* "s);
                }
            }
            int n = 0;
            if (allyctrl == 5)
            {
                if (cdata[i].level > sdata(151, 0) + 5)
                {
                    n = 3;
                }
            }
            cs_list(cs == cnt, s, wx + 84, wy + 66 + cnt * 19 - 1, 0, n);
            if (allyctrl != 3 || (allyctrl == 3 && gdata_current_map == 7))
            {
                s = u8"Lv."s + cdata[i].level + u8" "s;
                if (cdata[i].state == 6)
                {
                    s += lang(u8"(死んでいる)"s, u8"(Dead"s);
                }
                if (cdata[i].state == 7)
                {
                    if (allyctrl == 0)
                    {
                        s += lang(u8"(待機している)"s, u8"(Waiting)"s);
                    }
                    else
                    {
                        s += u8"(Hp: "s + cdata[i].hp * 100 / cdata[i].max_hp
                            + u8"%) "s + lang(u8"待機"s, u8"Waiting"s);
                    }
                }
                if (cdata[i].state == 1)
                {
                    if (allyctrl == 0)
                    {
                        s += lang(u8"(生きている)"s, u8"(Alive)"s);
                    }
                    else
                    {
                        s += u8"(Hp: "s + cdata[i].hp * 100 / cdata[i].max_hp
                            + u8"%)"s;
                    }
                }
            }
            else
            {
                if (adata(16, gdata_current_map) == 102)
                {
                    s = u8"   "s + sdata(17, i) + u8" / " + s + sdata(156, i);
                }
                if (adata(16, gdata_current_map) == 31)
                {
                    s = u8"   "s + cbreeder(i);
                }
            }
            if (allyctrl == 5)
            {
                if (rc != 0)
                {
                    tc = i;
                    {
                        int stat = label_2231();
                        if (stat == -1)
                        {
                            s = lang(u8"なし"s, u8"None"s);
                        }
                        else
                        {
                            s = i18n::_(u8"ui", u8"body_part", u8"_"s + rtval);
                        }
                    }
                    s += u8"/"s;
                    {
                        int stat = label_2230();
                        if (stat == 0)
                        {
                            s += lang(u8"なし"s, u8"None"s);
                        }
                        else
                        {
                            s += ""s
                                + i18n::_(
                                      u8"ability",
                                      std::to_string(rtval),
                                      u8"name");
                            if (rtval(1) != -1)
                            {
                                s += u8", "s
                                    + i18n::_(
                                          u8"ability",
                                          std::to_string(rtval(1)),
                                          u8"name");
                            }
                        }
                    }
                }
            }
            pos(wx + 370, wy + 66 + cnt * 19 + 2);
            mes(s);
        }
        if (allyctrl == 1)
        {
            s = ""s + cdatan(1, i) + u8" "s + cdatan(0, i);
            s += u8" Lv."s + cdata[i].level;
            cs_list(cs == cnt, s, wx + 84, wy + 66 + cnt * 19 - 1);
            s = ""s + calcslavevalue(i) * 2 / 3 + i18n::_(u8"ui", u8"gold");
            pos(wx + 390, wy + 66 + cnt * 19 + 2);
            mes(s);
        }
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        if (allyctrl == 5)
        {
            if (cdata[p].level > sdata(151, 0) + 5)
            {
                snd(27);
                txt(lang(
                    u8"遺伝子学のスキルが足りない。"s,
                    u8"You need to be a better gene engineer."s));
                goto label_1960_internal;
            }
        }
        if (allyctrl == 2)
        {
            i = 0;
            for (int cnt = 0; cnt < 16; ++cnt)
            {
                if (followerin(cnt) == 1)
                {
                    ++i;
                }
            }
            if (p == 99)
            {
                if (i == 0)
                {
                    txt(lang(
                        u8"最低でも一人の参加者が必要だ。"s,
                        u8"You need at least 1 pet to start the battle."s));
                    snd(27);
                    goto label_1961_internal;
                }
                snd(20);
                return 1;
            }
            if (cdata[p].state == 6)
            {
                txt(lang(
                    u8"死んでいる。"s, he(p) + u8" "s + is(p) + u8" dead."s));
                snd(27);
                goto label_1961_internal;
            }
            if (followerin(p) == 0)
            {
                if (i >= arenaop(1))
                {
                    snd(27);
                    txt(lang(
                        u8"参加枠を超えている。"s,
                        u8"Too many participants."s));
                    goto label_1961_internal;
                }
                else
                {
                    followerin(p) = 1;
                    snd(20);
                }
            }
            else
            {
                followerin(p) = 0;
                snd(20);
            }
            goto label_1960_internal;
        }
        return p;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1960_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1960_internal;
        }
    }
    if (key == key_cancel)
    {
        return -1;
    }
    goto label_1961_internal;
}



void label_1964()
{
    // TODO: untranslated
    if (rc < 0)
    {
        rc = tc;
        if (rc < 0)
        {
            rc = 0;
        }
    }
    listmax = 0;
    page = 0;
    pagesize = 14;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    snd(26);
    buff = "";
    notesel(buff);
    del_chara(56);
    cdata[56].piety_point = cdata[0].piety_point;
    cdata[56].god_id = cdata[0].god_id;
    for (int cnt = 0; cnt < 600; ++cnt)
    {
        sdata(cnt, rc) = 1;
    }
    apply_god_blessing(56);
    if (!cdata[0].god_id.empty())
    {
        buff += u8"<title1>◆ "s + i18n::_(u8"god", cdata[0].god_id, u8"name")
            + u8"による能力の恩恵<def>\n"s;
        for (int cnt = 0; cnt < 600; ++cnt)
        {
            p = sdata(cnt, rc) - 1;
            cnvbonus(cnt, p);
        }
    }
    refreshmode = 1;
    refresh_character(0);
    refreshmode = 0;
    buff += u8"\n"s;
    buff += u8"<title1>◆ 特徴と特殊状態による能力の恩恵<def>\n"s;
    listmax = noteinfo();
label_1965_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    s(0) = u8"自己の分析"s;
    s(1) = strhint2 + strhint3b;
    display_window((windoww - 400) / 2 + inf_screenx, winposy(448), 400, 448);
    s = u8"分析結果"s;
    display_topic(s, wx + 28, wy + 36);
    font(14 - en * 2);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        noteget(s, p);
        pos(wx + 54, wy + 66 + cnt * 19 + 2);
        gmes(s, wx, wy + 66 + cnt * 19 + 2, 600, {30, 30, 30}, false);
    }
    redraw();
label_1966_internal:
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    p = -1;
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1965_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1965_internal;
        }
    }
    if (key == key_cancel)
    {
        return;
    }
    goto label_1966_internal;
}



menu_result menu_feats()
{
    deco_traits_menu();
    return menu_feats_internal();
}



menu_result label_1969()
{
    return menu_feats_internal();
}



void deco_traits_menu()
{
    listmax = 0;
    page = 0;
    pagesize = 15;
    cs = 0;
    tc = 0;
    cs_bk = -1;
    curmenu = 2;
    snd(96);
    drawmenu();
    ww = 700;
    wh = 400;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
    windowanime(wx, wy, ww, wh, 10, 4);
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_feat.bmp", 1);
    gsel(0);
    windowshadow = 1;
}



menu_result menu_feats_internal()
{
    menu_result result = { false, false, turn_result_t::none };
    int featrq = 0;
label_196901_internal:
    listmax = 0;
    if (tc == 0 && gdata_acquirable_feat_count > 0)
    {
        list(0, listmax) = -1;
        list(1, listmax) = 0;
        ++listmax;
    }
    f = 0;
    for (int cnt = 0; cnt < 217; ++cnt)
    {
        if (tc != 0)
        {
            break;
        }
        int stat = get_trait_info(0, cnt);
        if (stat == 0)
        {
            continue;
        }
        if (stat == 1)
        {
            if (traitref == 0)
            {
                if (gdata_acquirable_feat_count > 0)
                {
                    list(0, listmax) = cnt;
                    list(1, listmax) = cnt + 1;
                    ++listmax;
                }
            }
        }
        if (trait(cnt) != 0)
        {
            list(0, listmax) = cnt;
            list(1, listmax) = 10000 + cnt + 1;
            ++listmax;
            ++f;
        }
    }
    if (f != 0)
    {
        list(0, listmax) = -2;
        list(1, listmax) = 10000;
        ++listmax;
    }
    sort_list_by_column1();
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        i = list(0, cnt);
        if (i < 0)
        {
            if (i == -1)
            {
                if (jp)
                {
                    s = u8"◆ 取得できるフィート"s;
                }
                else
                {
                    s = u8"[Available feats]"s;
                }
            }
            if (i == -2)
            {
                if (jp)
                {
                    s = u8"◆ 特徴と体質"s;
                }
                else
                {
                    s = u8"[Feats and traits]"s;
                }
            }
            listn(0, cnt) = s;
            continue;
        }
        int tid = i;
        int stat = get_trait_info(0, tid);
        featrq = stat;
        s = "";
        if (list(1, cnt) < 10000)
        {
            if (trait(tid) < traitref(2))
            {
                s = traitrefn2(trait(tid));
            }
            else
            {
                s = traitrefn2(traitref(2) - 1) + u8"(MAX)"s;
            }
            if (featrq == -1)
            {
                if (jp)
                {
                    s += u8"(条件不足)"s;
                }
                else
                {
                    s += u8"(requirement)"s;
                }
            }
            pos(wx + 30, wy + 61 + cnt * 19);
            x = 84;
        }
        else
        {
            pos(wx + 45, wy + 61 + cnt * 19);
            x = 70;
            if (traitref == 0)
            {
                if (jp)
                {
                    s = u8"[フィート]"s;
                }
                else
                {
                    s = u8"[Feat]"s;
                }
            }
            if (traitref == 1)
            {
                if (jp)
                {
                    s = u8"[変異]"s;
                }
                else
                {
                    s = u8"[Mutation]"s;
                }
            }
            if (traitref == 2)
            {
                if (jp)
                {
                    s = u8"[先天]"s;
                }
                else
                {
                    s = u8"[Race]"s;
                }
            }
            if (traitref == 3)
            {
                if (jp)
                {
                    s = u8"[ｴｰﾃﾙ病]"s;
                }
                else
                {
                    s = u8"[Disease]"s;
                }
            }
            s += traitrefn(2 + std::abs(trait(tid)));
        }
        listn(0, cnt) = s;
    }
    if (cdata[tc].is_incognito() == 1)
    {
        list(0, listmax) = 1;
        list(1, listmax) = 99999;
        listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
            + lang(u8"あなたは変装している"s,
                   u8"You are disguising yourself."s);
        ++listmax;
    }
    if (cdata[tc].is_pregnant() == 1)
    {
        list(0, listmax) = 1;
        list(1, listmax) = 99999;
        listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
            + lang(u8"あなたは寄生されている"s, u8"You are pregnant."s);
        ++listmax;
    }
    if (cdata[tc].has_anorexia() == 1)
    {
        list(0, listmax) = 1;
        list(1, listmax) = 99999;
        listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
            + lang(u8"あなたは拒食症だ"s, u8"You have anorexia."s);
        ++listmax;
    }
    if (cdata[tc].speed_correction_value != 0)
    {
        list(0, listmax) = 1;
        list(1, listmax) = 99999;
        listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
            + lang((u8"あなたは複雑な体をしている[速度-"s
                    + cdata[tc].speed_correction_value + u8"%]"s),
                   (u8"Your body is complicated. [SPD-"s
                    + cdata[tc].speed_correction_value + u8"%]"s));
        ++listmax;
    }
    if (tc == 0 && gdata_ether_disease_speed != 0)
    {
        if (gdata_ether_disease_speed > 0)
        {
            list(0, listmax) = 1;
            list(1, listmax) = 99999;
            listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
                + lang(u8"あなたのエーテル病の進行は早い。"s,
                       u8"Your Ether disease grows fast."s);
            ++listmax;
        }
        else
        {
            list(0, listmax) = 1;
            list(1, listmax) = 99999;
            listn(0, listmax) = lang(u8"[その他]"s, u8"[ETC]"s)
                + lang(u8"あなたのエーテル病の進行は遅い。"s,
                       u8"Your Ether disease grows slow."s);
            ++listmax;
        }
    }
    if (dump_return == 1)
    {
        dump_return = 0;
        result.succeeded = false;
        return result;
    }
    xnotesel(buff);
    buff = "";
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(tc, i) % 10000 != 0)
        {
            ci = cdata_body_part(tc, i) % 10000 - 1;
            int cnt = 0;
            for (int cnt_end = cnt + (15); cnt < cnt_end; ++cnt)
            {
                if (inv[ci].enchantments[cnt].id == 0)
                {
                    break;
                }
                get_enchantment_description(
                    inv[ci].enchantments[cnt].id,
                    inv[ci].enchantments[cnt].power,
                    0,
                    true);
                if (s == ""s)
                {
                    continue;
                }
                xnoteadd(s);
            }
        }
    }
    notesel(buff);
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(s, cnt);
        list(0, listmax) = 1;
        list(1, listmax) = 99999;
        listn(0, listmax) =
            lang(his(tc, 1) + u8"装備は"s, cnven(his(tc, 1)) + u8" equipment "s)
            + s;
        ++listmax;
    }
    if (tc != 0)
    {
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (jp)
            {
                cnv_str(listn(0, cnt), u8"あなた"s, he(tc, 1));
            }
            if (en)
            {
                cnv_str(listn(0, cnt), u8" your"s, his(tc, 1));
                cnv_str(listn(0, cnt), u8" you"s, him(tc, 1));
            }
        }
    }
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    if (cs < 0)
    {
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            if (list(1, cnt) >= 10000)
            {
                if (list(0, cnt) - 10000 == cs)
                {
                    page = cnt / pagesize;
                    cs = cnt % pagesize;
                    break;
                }
            }
        }
        if (cs < 0)
        {
            cs = 0;
        }
    }
label_1970_internal:
    s(0) = lang(u8"特徴と体質"s, u8"Feats and Traits"s);
    s(1) = lang(
               u8"決定 [フィート取得]  "s + strhint2 + strhint3,
               u8"Enter [Gain Feat]  "s + strhint2 + strhint3)
        + u8"z,x ["s + lang(u8"仲間"s, u8"Ally"s) + u8"]"s;
    if (mode == 1)
    {
        i = 1;
    }
    else
    {
        i = 0;
    }
    display_window(
        (windoww - 730) / 2 + inf_screenx,
        winposy(430, i) + i * 15,
        730,
        430,
        55,
        40);
    if (jp)
    {
        s(0) = u8"特徴の名称"s;
        s(1) = u8"段階"s;
        s(2) = u8"特徴の効果"s;
    }
    else
    {
        s(0) = u8"Name"s;
        s(1) = u8"Level"s;
        s(2) = u8"Detail"s;
    }
    display_topic(s, wx + 46, wy + 36);
    display_topic(s(2), wx + 255, wy + 36);
    pos(wx + 46, wy - 16);
    gcopy(3, 816, 48, 48, 48);
    pos(wx + ww - 56, wy + wh - 198);
    gcopy(3, 960, 96, 48, 192);
    pos(wx, wy);
    gcopy(3, 1008, 96, 48, 144);
    pos(wx + ww - 108, wy);
    gcopy(3, 960, 288, 96, 72);
    pos(wx, wy + wh - 70);
    gcopy(3, 1008, 240, 96, 48);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (list(0, p) < 0)
        {
            continue;
        }
        if (cnt % 2 == 0)
        {
            pos(wx + 57, wy + 66 + cnt * 19);
            gfini(640, 18);
            gfdec2(12, 14, 16);
        }
        if (list(1, p) >= 10000 || list(0, p) < 0)
        {
            continue;
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    if (tc == 0)
    {
        s = lang(
            u8"残り "s + gdata_acquirable_feat_count
                + u8"個のフィートを取得できる"s,
            u8"You can acquire "s + gdata_acquirable_feat_count + u8" feats"s);
    }
    else
    {
        s = cnven(cdatan(0, tc)) + lang(u8"の特性"s, u8"'s Trait"s);
    }
    display_note(s, 50);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        if (i < 0)
        {
            cs_list(
                cs == cnt,
                listn(0, p),
                wx + 114,
                wy + 66 + cnt * 19 - 1,
                0,
                -1);
            continue;
        }
        if (list(1, p) != 99999)
        {
            int stat = get_trait_info(0, i);
            featrq = stat;
            if (trait(i) == 0)
            {
            }
            else if (trait(i) > 0)
            {
                color(0, 0, 200);
            }
            else
            {
                color(200, 0, 0);
            }
        }
        else
        {
            traitref = 5;
        }
        if (list(1, p) < 10000)
        {
            pos(wx + 30, wy + 61 + cnt * 19);
            x = 84;
        }
        else
        {
            pos(wx + 45, wy + 61 + cnt * 19);
            x = 70;
        }
        gcopy(3, 384 + traitref * 24, 336, 24, 24);
        cs_list(cs == cnt, listn(0, p), wx + x, wy + 66 + cnt * 19 - 1, 0, -1);
        if (list(1, p) < 10000)
        {
            pos(wx + 270, wy + 66 + cnt * 19 + 2);
            mes(traitrefn(2));
        }
        color(0, 0, 0);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_INDEX(p);
    if (tc == 0)
    {
        if (gdata_acquirable_feat_count > 0)
        {
            if (p > 0)
            {
                if (list(1, p) < 10000)
                {
                    int tid = list(0, p);
                    get_trait_info(0, tid);
                    if (traitref(2) <= trait(tid))
                    {
                        if (mode != 1)
                        {
                            txt(lang(
                                u8"これ以上取得できない。"s,
                                u8"You already have maxed out the feat."s));
                        }
                        goto label_196901_internal;
                    }
                    --gdata_acquirable_feat_count;
                    cs = -10000 + tid;
                    snd(61);
                    ++trait(tid);
                    refresh_character(tc);
                    if (mode == 1)
                    {
                        if (gdata_acquirable_feat_count == 0)
                        {
                            result.succeeded = true;
                            return result;
                        }
                    }
                    else
                    {
                        render_hud();
                    }
                    goto label_196901_internal;
                }
            }
        }
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 3)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 3;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    csctrl = 0;
                    result.turn_result = turn_result_t::menu_character_sheet;
                    return result;
                }
                if (curmenu == 1)
                {
                    result.turn_result = turn_result_t::menu_equipment;
                    return result;
                }
                if (curmenu == 2)
                {
                    result.turn_result = turn_result_t::menu_feats;
                    return result;
                }
                if (curmenu == 3)
                {
                    result.turn_result = turn_result_t::menu_materials;
                    return result;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_196901_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_196901_internal;
        }
    }
    if (key == u8"z"s || key == u8"x"s)
    {
        p = tc;
        for (int cnt = 0; cnt < 16; ++cnt)
        {
            if (key == u8"z"s)
            {
                --p;
                if (p < 0)
                {
                    p = 15;
                }
            }
            if (key == u8"x"s)
            {
                ++p;
                if (p == 16)
                {
                    p = 0;
                }
            }
            if (cdata[p].state != 1)
            {
                continue;
            }
            break;
        }
        tc = p;
        snd(1);
        page = 0;
        cs = 0;
        goto label_196901_internal;
    }
    if (key == key_cancel)
    {
        if (mode == 1)
        {
            result.succeeded = false;
            return result;
        }
        update_screen();
        result.turn_result = turn_result_t::pc_turn_user_error;
        return result;
    }
    if (mode == 1)
    {
        if (getkey(snail::key::f1))
        {
            show_game_help();
            result.pressed_f1 = true;
            return result;
        }
    }
    goto label_1970_internal;
}



menu_result menu_journal()
{
    menu_result result = { false, false, turn_result_t::none };
    curmenu = 1;
    listmax = 0;
    page = 99;
    pagesize = 40;
    cs = 0;
    cc = 0;
    listmax = noteinfo();
    keyrange = 0;
    key_list(0) = key_enter;
    buff = newsbuff;
    if (newsbuff == ""s)
    {
        buff = u8"No news"s;
    }
    notesel(buff);
    noteadd(u8" - News - "s, 0);
    noteadd(""s, 1);
    if (noteinfo() / (pagesize / 2) % 2 == 1)
    {
        for (int cnt = 0, cnt_end = (pagesize / 2); cnt < cnt_end; ++cnt)
        {
            noteadd(""s, 2);
        }
    }
    page = noteinfo() / pagesize;
    for (int cnt = 0,
             cnt_end = cnt + (pagesize / 2 - noteinfo() % (pagesize / 2));
         cnt < cnt_end;
         ++cnt)
    {
        noteadd(""s);
    }
    noteadd(u8" - Quest - "s);
    noteadd(""s);
    update_main_quest_journal();
    for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
         cnt < cnt_end;
         ++cnt)
    {
        if (qdata(8, cnt) == 0)
        {
            continue;
        }
        rq = cnt;
        set_quest_data(2);
    }
    append_subquest_journal(0);
    for (int cnt = 0,
             cnt_end = cnt + (pagesize / 2 - noteinfo() % (pagesize / 2));
         cnt < cnt_end;
         ++cnt)
    {
        noteadd(""s);
    }
    noteadd(u8" - Quest Item - "s);
    noteadd(""s);
    append_quest_item_journal();
    for (int cnt = 0,
             cnt_end = cnt + (pagesize / 2 - noteinfo() % (pagesize / 2));
         cnt < cnt_end;
         ++cnt)
    {
        noteadd(""s);
    }
    gold = 0;
    p = clamp(cdata[0].fame / 10, 100, 25000);
    if (cdata[0].fame >= 25000)
    {
        p += (cdata[0].fame - 25000) / 100;
    }
    gold += p;
    noteadd(u8" - Title & Ranking - "s);
    noteadd(""s);
    noteadd(lang(u8"名声: "s, u8"Fame: "s) + cdata[0].fame);
    noteadd(""s);
    for (int cnt = 0; cnt < 9; ++cnt)
    {
        if (gdata(120 + cnt) < 10000)
        {
            noteadd(
                ""s + ranktitle(cnt) + u8" Rank."s + gdata((120 + cnt)) / 100);
            s = lang(
                u8"給料: 約 "s + calcincome(cnt) + u8" gold  "s,
                u8"Pay: About "s + calcincome(cnt) + u8" gold pieces "s);
            gold += calcincome(cnt);
            if (cnt != 3 && cnt != 4 && cnt != 5 && cnt != 8)
            {
                s += lang(u8"ノルマ: "s, u8"\nDeadline: "s) + gdata((140 + cnt))
                    + lang(u8"日以内"s, u8" Days left"s);
            }
            noteadd(s);
            noteadd(""s);
        }
    }
    noteadd(lang(
        u8"EXバトル: 勝利 "s + gdata(802) + u8"回 最高Lv"s
            + gdata_ex_arena_level,
        u8"EX Arena Wins:"s + gdata(802) + u8"  Highest Level:"s
            + cnvrank(gdata_ex_arena_level)));
    noteadd(""s);
    for (int cnt = 0,
             cnt_end = cnt + (pagesize / 2 - noteinfo() % (pagesize / 2));
         cnt < cnt_end;
         ++cnt)
    {
        noteadd(""s);
    }
    noteadd(u8" - Income & Expense - "s);
    noteadd(""s);
    if (jp)
    {
        noteadd(u8"◆ 給料(毎月1日と15日に支給)"s);
        noteadd(u8"@BL　合計　　 : 約 "s + gold + i18n::_(u8"ui", u8"gold"));
        noteadd(""s);
        noteadd(u8"◆ 請求書内訳(毎月1日に発行)"s);
        noteadd(
            u8"@RE　人件費  : 約 "s + gdata_cost_to_hire
            + i18n::_(u8"ui", u8"gold"));
        noteadd(
            u8"@RE　運営費  : 約 "s + calccostbuilding()
            + i18n::_(u8"ui", u8"gold"));
        noteadd(
            u8"@RE　税金    : 約 "s + calccosttax()
            + i18n::_(u8"ui", u8"gold"));
        noteadd(
            u8"@RE　合計　  : 約 "s
            + (gdata_cost_to_hire + calccostbuilding() + calccosttax())
            + i18n::_(u8"ui", u8"gold"));
        noteadd(""s);
        noteadd(u8"現在未払いの請求書は"s + gdata_left_bill + u8"枚"s);
    }
    else
    {
        noteadd(u8"Salary (Paid every 1st and 15th day)"s);
        noteadd(u8"@BL  Sum    : About "s + gold + u8" GP"s);
        noteadd(""s);
        noteadd(u8"Bills  (Issued every 1st day)"s);
        noteadd(u8"@RE  Labor  : About "s + gdata_cost_to_hire + u8" GP"s);
        noteadd(u8"@RE  Maint. : About "s + calccostbuilding() + u8" GP"s);
        noteadd(u8"@RE  Tax    : About "s + calccosttax() + u8" GP"s);
        noteadd(
            u8"@RE  Sum    : About "s
            + (gdata_cost_to_hire + calccostbuilding() + calccosttax())
            + u8" GP"s);
        noteadd(""s);
        noteadd(u8"You have "s + gdata_left_bill + u8" unpaid bills."s);
    }
    for (int cnt = 0,
             cnt_end = cnt + (pagesize / 2 - noteinfo() % (pagesize / 2));
         cnt < cnt_end;
         ++cnt)
    {
        noteadd(""s);
    }
    noteadd(u8" - Completed Quests - "s);
    noteadd(""s);
    append_subquest_journal(1);
    listmax = noteinfo();
    showtitle(lang(u8"ジャーナル"s, u8"Journal"s), strhint2 + strhint3, 236, 1);
    drawmenu(2);
    wx = (windoww - 736) / 2 + inf_screenx;
    wy = winposy(448);
    snd(59);
    windowanime(wx, wy, 736, 448, 10, 4);
label_1973_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"book.bmp", 1);
    gsel(0);
    pos(wx, wy);
    gcopy(4, 0, 0, 736, 448);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        x = wx + 80 + cnt / 20 * 306;
        y = wy + 45 + cnt % 20 * 16;
        noteget(s, p);
        if (strmid(s, 0, 1) == u8"@"s)
        {
            s(1) = strmid(s, 1, 2);
            s = strmid(s, 3, s(0).size() - 3);
            font(10 + en - en * 2, snail::font_t::style_t::bold);
            color(0, 0, 200);
            if (s(1) == u8"QL"s)
            {
                color(100, 100, 0);
            }
            if (s(1) == u8"QC"s)
            {
                color(0, 100, 100);
            }
            if (s(1) == u8"QM"s)
            {
                color(0, 100, 0);
            }
            if (s(1) == u8"RE"s)
            {
                color(100, 0, 0);
                font(12 + sizefix - en * 2);
            }
            if (s(1) == u8"BL"s)
            {
                color(0, 0, 100);
                font(12 + sizefix - en * 2);
            }
        }
        else
        {
            font(12 + sizefix - en * 2);
        }
        pos(x, y);
        mes(s);
        color(0, 0, 0);
        if (p % 20 == 0)
        {
            font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
            pos(x + 90, y + 330);
            mes(u8"- "s + (p / 20 + 1) + u8" -"s);
            if (p % 40 == 20)
            {
                if (page < pagemax)
                {
                    pos(x + 200, y + 330);
                    mes(u8"(more)"s);
                }
            }
        }
    }
label_1974_internal:
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    result.turn_result = turn_result_t::show_message_log;
                    return result;
                }
                if (curmenu == 1)
                {
                    result.turn_result = turn_result_t::menu_journal;
                    return result;
                }
                if (curmenu == 2)
                {
                    result.turn_result = turn_result_t::show_chat_history;
                    return result;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(71);
            ++page;
            goto label_1973_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(71);
            --page;
            goto label_1973_internal;
        }
    }
    if (key == key_cancel || key == key_enter)
    {
        menucycle = 0;
        update_screen();
        result.turn_result = turn_result_t::pc_turn_user_error;
        return result;
    }
    goto label_1974_internal;
}



turn_result_t show_quest_board()
{
    if (config::instance().extrahelp)
    {
        if (gdata(204) == 0)
        {
            if (mode == 0)
            {
                if (cdata[0].continuous_action_turn == 0)
                {
                    gdata(204) = 1;
                    ghelp = 4;
                    show_ex_help();
                    screenupdate = -1;
                    update_screen();
                }
            }
        }
    }
    label_2671();
    listmax = 0;
    page = 0;
    pagesize = 4;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
         cnt < cnt_end;
         ++cnt)
    {
        if (qdata(1, cnt) != gdata_current_map)
        {
            continue;
        }
        if (qdata(3, cnt) == 0)
        {
            continue;
        }
        if (qdata(8, cnt) != 0)
        {
            continue;
        }
        rc = qdata(0, cnt);
        if (cdata[rc].state != 1)
        {
            continue;
        }
        list(0, listmax) = cnt;
        list(1, listmax) = qdata(5, cnt);
        ++listmax;
    }
    if (listmax == 0)
    {
        txt(lang(
            u8"新しい依頼は掲示されていないようだ。"s,
            u8"It seems there are no new notices."s));
        return turn_result_t::turn_end;
    }
    sort_list_by_column1();
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_board.bmp", 1);
    gsel(0);
    gsel(4);
    fillbg(3, 960, 96, 128, 128);
    ww = 560;
    int h = 140;
    wh = h * 4;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
    for (int cnt = 0; cnt < 4; ++cnt)
    {
        y = wy + cnt * 120;
        window(wx + 4, y + 4, ww, h, 0, -1);
        window(wx, y, ww, h);
        pos(wx + 20, y + 8);
        gcopy(3, 960, 240, 48, 84);
    }
    render_hud();
    gsel(0);
label_1977_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1978_internal:
    s(0) = lang(u8"掲載されている依頼"s, u8"Notice Board"s);
    s(1) = strhint2 + strhint3b;
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, inf_ver);
    gmode(2);
    font(16 - en * 2);
    pos(wx + ww + 20, wy);
    bmes(u8"Page "s + (page + 1) + u8"/"s + (pagemax + 1), 255, 255, 255);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        y = wy + cnt * 120 + 20;
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        pos(wx + 70, y);
        gfini(460, 18);
        gfdec2(12, 14, 16);
        display_key(wx + 70, y - 2, cnt);
    }
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        y = wy + cnt * 120 + 20;
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        rq = list(0, p);
        tc = qdata(0, rq);
        set_quest_data(0);
        p = pagesize * page + cnt;
        font(14 - en * 2);
        cs_list(cs == cnt, s(3), wx + 96, y - 1, 19);
        s(2) = u8"("s + nquestdate + u8")"s;
        pos(wx + 344, y + 2);
        mes(s(2));
        s(4) = cdatan(0, tc);
        cutname(s(4), 20);
        pos(wx + 392, y + 2);
        mes(s(4));
        talk_conv(buff, 70);
        p(0) = qdata(5, rq) / 5 + 1;
        p(1) = 14;
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (cdata[0].level * 2 < qdata(5, rq))
            {
                color(205, 0, 0);
                break;
            }
            if (cdata[0].level * 3 / 2 < qdata(5, rq))
            {
                color(140, 80, 0);
                break;
            }
            if (cdata[0].level < qdata(5, rq))
            {
                color(0, 0, 205);
                break;
            }
            color(0, 155, 0);
        }
        if (p < 11)
        {
            dy = 0;
            if (p > 5)
            {
                font(10 - en * 2);
                dy = -3;
            }
            for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
            {
                pos(wx + 270 + cnt % 5 * 13, y + dy + cnt / 5 * 8 + 2);
                mes(lang(u8"★"s, u8"$"s));
            }
        }
        else
        {
            pos(wx + 270, y + 2);
            mes(lang(u8"★?"s, u8"$ x "s) + p);
        }
        color(0, 0, 0);
        font(13 - en * 2);
        pos(wx + 20, y + 20);
        mes(buff);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        txtnew();
        txt(lang(u8"依頼主に会う？"s, u8"Do you want to meet the client?"s));
        ELONA_YES_NO_PROMPT();
        rtval = show_prompt(promptx, prompty, 160);
        if (rtval != 0)
        {
            goto label_1977_internal;
        }
        tc = qdata(0, p);
        rq = p;
        client = tc;
        efid = 619;
        magic();
        tc = client;
        questteleport = 1;
        speak_to_npc();
        if (chatteleport == 1)
        {
            chatteleport = 0;
            return turn_result_t::exit_map;
        }
        return turn_result_t::turn_end;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1977_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1977_internal;
        }
    }
    if (key == key_cancel)
    {
        return turn_result_t::turn_end;
    }
    goto label_1978_internal;
}



int show_hire_menu()
{
    snd(26);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (allyctrl == 2)
        {
            if (cdata[cnt].state != 6 && cdata[cnt].state != 2)
            {
                continue;
            }
        }
        else
        {
            if (allyctrl == 1)
            {
                if (allyctrl == 1)
                {
                    if (cdata[cnt].state != 10)
                    {
                        continue;
                    }
                }
            }
            else if (cdata[cnt].state != 1)
            {
                continue;
            }
            if (cnt < 16)
            {
                if (cdata[cnt].current_map != gdata_current_map)
                {
                    continue;
                }
            }
        }
        if (cnt == 0)
        {
            continue;
        }
        if (cdata[cnt].is_escorted_in_sub_quest() == 1)
        {
            continue;
        }
        list(0, listmax) = cnt;
        list(1, listmax) = -cdata[cnt].level;
        ++listmax;
    }
    sort_list_by_column1();
    windowshadow = 1;
label_1981_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1982_internal:
    s(0) = lang(u8"NPC一覧"s, u8"NPC List"s);
    s(1) = strhint2 + strhint3;
    display_window((windoww - 700) / 2 + inf_screenx, winposy(448), 700, 448);
    if (allyctrl == 0)
    {
        s = lang(u8"給料"s, u8"Wage"s);
    }
    else
    {
        s = lang(u8"雇用費(給料)"s, u8"Init. Cost(Wage)"s);
    }
    display_topic(lang(u8"NPCの名前"s, u8"Name"s), wx + 28, wy + 36);
    display_topic(lang(u8"情報"s, u8"Info"s), wx + 350, wy + 36);
    if (allyctrl != 2)
    {
        display_topic(s, wx + 490, wy + 36);
    }
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(600, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i(0) = cdata[list(0, p)].image % 1000;
        i(1) = cdata[list(0, p)].image / 1000;
        chara_preparepic(i, i(1));
        pos(wx + 40, wy + 74 + cnt * 19 - 8);
        gmode(2, chipc(2, i), chipc(3, i));
        grotate(
            5,
            0,
            960,
            0,
            chipc(2, i) / (1 + (chipc(3, i) > inf_tiles)),
            inf_tiles);
        i = list(0, p);
        s = cdatan(0, i);
        cutname(s, 36);
        cs_list(cs == cnt, s, wx + 84, wy + 66 + cnt * 19 - 1);
        s = u8"Lv."s + cdata[i].level + u8" "s;
        if (cdata[i].sex == 0)
        {
            s += cnven(i18n::_(u8"ui", u8"male"));
        }
        else
        {
            s += cnven(i18n::_(u8"ui", u8"female"));
        }
        s += lang(u8" "s, u8"("s) + calcage(i) + ""s + lang(u8"歳"s, u8")"s);
        pos(wx + 372, wy + 66 + cnt * 19 + 2);
        mes(s);
        if (allyctrl != 2)
        {
            if (allyctrl == 1)
            {
                s = ""s + calchirecost(i) * 20 + u8"("s + calchirecost(i)
                    + u8")"s;
            }
            else
            {
                s = ""s + calchirecost(i);
            }
            pos(wx + 512, wy + 66 + cnt * 19 + 2);
            mes(s + lang(u8" gold"s, u8"gp"s));
        }
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        return p;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1981_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1981_internal;
        }
    }
    if (key == key_cancel)
    {
        return -1;
    }
    goto label_1982_internal;
}



int show_spell_writer_menu()
{
    snd(26);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    for (int cnt = 0; cnt < 800; ++cnt)
    {
        if (itemmemory(2, cnt) == 0)
        {
            continue;
        }
        list(0, listmax) = cnt;
        list(1, listmax) = cnt;
        ++listmax;
    }
    sort_list_by_column1();
    windowshadow = 1;
label_1985_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1986_internal:
    s(0) = lang(u8"予約リスト"s, u8"Reserve List"s);
    s(1) = strhint2 + strhint3;
    display_window((windoww - 540) / 2 + inf_screenx, winposy(448), 540, 448);
    display_topic(lang(u8"アイテムの名前"s, u8"Name"s), wx + 28, wy + 36);
    display_topic(lang(u8"予約状況"s, u8"Status"s), wx + 390, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(440, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        prepare_item_image(429, 0);
        pos(wx + 38, wy + 73 + cnt * 19);
        gmode(2, inf_tiles, inf_tiles);
        grotate(1, 0, 960, 0, inf_tiles, inf_tiles);
        s = ioriginalnameref(i);
        cs_list(cs == cnt, s, wx + 84, wy + 66 + cnt * 19 - 1);
        pos(wx + 400, wy + 66 + cnt * 19 + 2);
        if (itemmemory(2, i) == 1)
        {
            color(120, 120, 120);
            mes(lang(u8"入荷なし"s, u8"-"s));
            color(0, 0, 0);
        }
        else
        {
            color(55, 55, 255);
            mes(lang(u8"入荷予定"s, u8"Reserved"s));
            color(0, 0, 0);
        }
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        if (p == 289 || p == 732)
        {
            snd(27);
            txt(lang(
                u8"「その本は入手できないね」"s,
                u8"\"Ah, that book is unavailable.\""s));
            goto label_1985_internal;
        }
        snd(20);
        if (itemmemory(2, p) == 1)
        {
            itemmemory(2, p) = 2;
        }
        else
        {
            itemmemory(2, p) = 1;
        }
        goto label_1985_internal;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1985_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1985_internal;
        }
    }
    if (key == key_cancel)
    {
        return -1;
    }
    goto label_1986_internal;
}



void list_adventurers()
{
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    for (int cnt = 0; cnt < 56; ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            continue;
        }
        list(0, listmax) = cnt;
        list(1, listmax) = -cdata[cnt].fame;
        ++listmax;
    }
    sort_list_by_column1();
    windowshadow = 1;
label_1989_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_1990_internal:
    s(0) = lang(u8"冒険者ランク"s, u8"Adventurer Rank"s);
    s(1) = strhint2 + strhint3;
    display_window((windoww - 640) / 2 + inf_screenx, winposy(448), 640, 448);
    display_topic(
        lang(u8"冒険者の名前とランク"s, u8"Name and Rank"s), wx + 28, wy + 36);
    display_topic(lang(u8"名声(Lv)"s, u8"Fame(Lv)"s), wx + 320, wy + 36);
    display_topic(lang(u8"現在地"s, u8"Location"s), wx + 420, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(540, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i(0) = cdata[list(0, p)].image % 1000;
        i(1) = cdata[list(0, p)].image / 1000;
        chara_preparepic(i, i(1));
        pos(wx + 40, wy + 74 + cnt * 19 - 8);
        gmode(2, chipc(2, i), chipc(3, i));
        grotate(
            5,
            0,
            960,
            0,
            chipc(2, i) / (1 + (chipc(3, i) > inf_tiles)),
            inf_tiles);
        pos(wx + 84, wy + 66 + cnt * 19 + 2);
        mes(cnvrank(p + 1) + lang(u8"位"s, ""s));
        i = list(0, p);
        s = ""s + cdatan(1, i) + u8" "s + cdatan(0, i);
        cutname(s, 26);
        cs_list(cs == cnt, s, wx + 118, wy + 66 + cnt * 19 - 1);
        s = ""s + cdata[i].fame + u8"("s + cdata[i].level + u8")"s;
        pos(wx + 402 - strlen_u(s) * 7, wy + 66 + cnt * 19 + 2);
        mes(s);
        s = mapname(cdata[i].current_map);
        if (s == ""s)
        {
            s = lang(u8"不明"s, u8"Unknown"s);
        }
        if (cdata[i].state == 4)
        {
            s = lang(u8"病院"s, u8"Hospital"s);
        }
        pos(wx + 435, wy + 66 + cnt * 19 + 2);
        mes(s);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_1989_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_1989_internal;
        }
    }
    if (key == key_cancel)
    {
        return;
    }
    goto label_1990_internal;
}



int select_alias(int val0)
{
    cs = 0;
    cs_bk = -1;
    list(0, 0) = -1;
    windowshadow = 1;
    i = 10500;

    while (1)
    {
        if (cs != cs_bk)
        {
            s(0) = lang(u8"異名の選択"s, u8"Alias Selection"s);
            s(1) = strhint3b;
            display_window(
                (windoww - 400) / 2 + inf_screenx, winposy(458), 400, 458);
            display_topic(
                lang(u8"異名の候補"s, u8"Alias List"s), wx + 28, wy + 30);
            font(14 - en * 2);
            for (int cnt = 0; cnt < 17; ++cnt)
            {
                key_list(cnt) = key_select(cnt);
                keyrange = cnt + 1;
                if (val0 == 3)
                {
                    randomize(i + cnt);
                }
                if (list(0, 0) == -1)
                {
                    listn(0, cnt) = random_title(val0);
                    list(1, cnt) = i + cnt;
                }
                if (cnt == 0)
                {
                    listn(0, cnt) = lang(u8"別の名前を考える"s, u8"Reroll"s);
                }
                pos(wx + 38, wy + 66 + cnt * 19 - 2);
                gcopy(3, cnt * 24 + 72, 30, 24, 18);
                cs_list(
                    cs == cnt, listn(0, cnt), wx + 64, wy + 66 + cnt * 19 - 1);
            }
            i += 17;
            cs_bk = cs;
            list(0, 0) = 0;
        }
        redraw();
        await(config::instance().wait1);
        key_check();
        cursor_check();
        ELONA_GET_SELECTED_INDEX_THIS_PAGE(p);
        if (p != -1)
        {
            if (key == key_select(0))
            {
                list(0, 0) = -1;
                snd(103);
                cs_bk = -1;
            }
            else
            {
                if (val0 == 3)
                {
                    return p;
                }
                cmaka = listn(0, p);
                return 1;
            }
        }
        if (key == key_cancel)
        {
            snd(26);
            return 0;
        }
    }
}



turn_result_t do_short_cut()
{
    menucycle = 0;
    if (gdata(40 + sc) == 0)
    {
        ++msgdup;
        txt(lang(
            u8"そのキーにはショートカットが割り当てられていない。"s,
            u8"The key is unassigned."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (gdata(40 + sc) >= 10000)
    {
        invsc = gdata((40 + sc)) % 10000;
        invctrl(0) = gdata((40 + sc)) / 10000;
        invctrl(1) = 0;
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    efid = gdata(40 + sc);
    if (efid >= 300 && efid < 400)
    {
        return do_use_magic();
    }
    if (efid >= 600)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            return turn_result_t::pc_turn_user_error;
        }
        if (efid < 661)
        {
            if (spact(efid - 600) == 0)
            {
                txt(lang(
                    u8"もうその行動はできない。"s,
                    u8"You can't use this shortcut any more."s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
        }
        return do_use_magic();
    }
    if (efid >= 400)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            return turn_result_t::pc_turn_user_error;
        }
        if (spell(efid - 400) <= 0)
        {
            ++msgdup;
            txt(lang(
                u8"その魔法はもう使えない。"s,
                u8"You can't use that spell anymore."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        return do_cast_command();
    }
    return turn_result_t::pc_turn_user_error;
}



turn_result_t do_dig_command()
{
    txt(lang(
        u8"どの方向を掘る？ "s, u8"Which direction do you want to dig? "s));
    int stat = ask_direction();
    if (stat == 0)
    {
        txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    refx = x;
    refy = y;
    tlocx = x;
    tlocy = y;
    if (tlocx == cdata[0].position.x)
    {
        if (tlocy == cdata[0].position.y)
        {
            rowactre = 0;
            spot_digging();
            return turn_result_t::turn_end;
        }
    }
    if ((chipm(7, map(x, y, 0)) & 4) == 0 || chipm(0, map(x, y, 0)) == 3
        || mdata(6) == 1)
    {
        txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    screenupdate = -1;
    update_screen();
    return do_dig_after_sp_check();
}



turn_result_t do_bash_command()
{
    txt(lang(
        u8"どの方向に体当たりする？ "s,
        u8"Which direction do you want to bash? "s));
    int stat = ask_direction();
    if (stat == 0)
    {
        txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    return do_bash();
}



turn_result_t do_use_magic()
{
    int stat = label_2174();
    if (stat == 0)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    return turn_result_t::turn_end;
}



turn_result_t show_skill_list()
{
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    cs = commark(0) % 1000;
    page = commark(0) / 1000;
    curmenu = 1;
    for (int cnt = 300; cnt < 400; ++cnt)
    {
        if (sdata(cnt, cc) > 0)
        {
            list(0, listmax) = cnt;
            list(1, listmax) =
                the_ability_db[cnt]->related_basic_attribute * 1000 + cnt;
            ++listmax;
        }
    }
    for (int cnt = 0; cnt < 61; ++cnt)
    {
        if (spact(cnt) != 0)
        {
            list(0, listmax) = cnt + 600;
            list(1, listmax) =
                the_ability_db[cnt + 600]->related_basic_attribute * 1000 + cnt;
            ++listmax;
        }
    }
    sort_list_by_column1();
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_skill.bmp", 1);
    gsel(0);
    windowshadow = 1;
label_2008_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    drawmenu(1);
label_2009_internal:
    s(0) = lang(u8"能力の発動"s, u8"Skill"s);
    s(1) = strhint2 + strhint3 + strhint7;
    display_window(
        (windoww - 600) / 2 + inf_screenx, winposy(438), 600, 438, 0, 60);
    display_topic(lang(u8"能力の名称"s, u8"Name"s), wx + 28, wy + 36);
    display_topic(lang(u8"コスト"s, u8"Cost"s), wx + 220, wy + 36);
    display_topic(lang(u8"能力の効果"s, u8"Detail"s), wx + 320, wy + 36);
    pos(wx + 46, wy - 16);
    gcopy(3, 960, 48, 48, 48);
    pos(wx + ww - 78, wy + wh - 165);
    gcopy(3, 960, 96, 72, 144);
    pos(wx + ww - 168, wy);
    gcopy(3, 1032, 96, 102, 48);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(490, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        pos(wx + 40, wy + 74 + cnt * 19);
        gmode(2, inf_tiles, inf_tiles);
        grotate(
            1,
            (the_ability_db[list(0, p)]->related_basic_attribute - 10)
                * inf_tiles,
            672,
            0,
            inf_tiles,
            inf_tiles);
        s = "";
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            if (gdata(40 + cnt) == list(0, p))
            {
                s = u8"{"s + cnt + u8"}"s;
            }
        }
        cs_list(
            cs == cnt,
            i18n::_(u8"ability", std::to_string(list(0, p)), u8"name") + s,
            wx + 84,
            wy + 66 + cnt * 19 - 1);
        s = ""s + the_ability_db[list(0, p)]->cost + u8" Sp"s;
        pos(wx + 288 - strlen_u(s) * 7, wy + 66 + cnt * 19 + 2);
        mes(s);
        label_2031();
        pos(wx + 325, wy + 66 + cnt * 19 + 2);
        mes(strmid(s, 0, 34));
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    commark(0) = page * 1000 + cs;
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        menucycle = 0;
        efid = p;
        screenupdate = -1;
        update_screen();
        return do_use_magic();
    }
    if (key == u8"sc"s)
    {
        snd(20);
        p = list(0, pagesize * page + cs);
        if (gdata(40 + sc) == p)
        {
            gdata(40 + sc) = 0;
            goto label_2008_internal;
        }
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            if (gdata(40 + cnt) == p)
            {
                gdata(40 + cnt) = 0;
            }
        }
        gdata(40 + sc) = p;
        txt(lang(
            u8"{"s + sc + u8"}キーにショートカットを割り当てた。"s,
            u8"You have assigned the shortcut to {"s + sc + u8"} key."s));
        display_msg(inf_screeny + inf_tiles);
        goto label_2008_internal;
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 1)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 1;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    snd(102);
                    return turn_result_t::show_spell_list;
                }
                if (curmenu == 1)
                {
                    snd(101);
                    return turn_result_t::show_skill_list;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2008_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2008_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_2009_internal;
}



turn_result_t do_give_command()
{
    txt(lang(u8"どの方向に？ "s, u8"Which direction? "s));
    update_screen();
    int stat = ask_direction();
    if (stat == 0)
    {
        txt(i18n::_(u8"ui", u8"invalid_target"));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    tc = map(x, y, 1);
    if (tc == 0)
    {
        txt(i18n::_(u8"ui", u8"invalid_target"));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    tc -= 1;
    if (tc == 0)
    {
        if (gdata_mount != 0)
        {
            tc = gdata_mount;
        }
    }
    if (tc != 0)
    {
        if (tc < 16)
        {
            if (cdata[tc].is_escorted() == 0)
            {
                return try_interact_with_npc();
            }
        }
        update_screen();
        invctrl = 10;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    txt(i18n::_(u8"ui", u8"invalid_target"));
    update_screen();
    return turn_result_t::pc_turn_user_error;
}



turn_result_t do_interact_command()
{
    txt(lang(
        u8"操作する対象の方向は？"s, u8"Choose the direction of the target."s));
    int stat = ask_direction();
    if (stat == 0)
    {
        txt(i18n::_(u8"ui", u8"invalid_target"));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    tc = map(x, y, 1);
    if (tc == 0)
    {
        txt(i18n::_(u8"ui", u8"invalid_target"));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    tc -= 1;
    txt(lang(
        name(tc) + u8"に何をする？ "s,
        u8"What action do you want to perform to "s + him(tc) + u8"? "s));
    p = 0;
    if (tc != 0)
    {
        if (cdata[0].confused == 0)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"話しかける"s, u8"Talk"s), u8"null"s, ""s + 0);
            ELONA_APPEND_PROMPT(
                lang(u8"攻撃する"s, u8"Attack"s), u8"null"s, ""s + 1);
        }
        if (cdata[tc].is_escorted() == 0)
        {
            if (cdata[tc].is_escorted_in_sub_quest() == 0)
            {
                if (tc < 16)
                {
                    ELONA_APPEND_PROMPT(
                        lang(u8"所持品"s, u8"Inventory"s), u8"null"s, ""s + 4);
                }
                else
                {
                    ELONA_APPEND_PROMPT(
                        lang(u8"何かを渡す"s, u8"Give"s), u8"null"s, ""s + 2);
                }
                if (cdata[tc].is_livestock() == 1)
                {
                    ELONA_APPEND_PROMPT(
                        lang(u8"連れ出す"s, u8"Bring Out"s),
                        u8"null"s,
                        ""s + 5);
                }
                if (tc < 16)
                {
                    ELONA_APPEND_PROMPT(
                        lang(u8"着替えさせる"s, u8"Appearance"s),
                        u8"null"s,
                        ""s + 8);
                }
            }
        }
        ELONA_APPEND_PROMPT(
            lang(u8"言葉を教える"s, u8"Teach Words"s), u8"null"s, ""s + 7);
        ELONA_APPEND_PROMPT(
            lang(u8"口調を変える"s, u8"Change Tone"s), u8"null"s, ""s + 10);
        if (gdata_current_map != 35)
        {
            if (cdata[tc].is_hung_on_sand_bag())
            {
                ELONA_APPEND_PROMPT(
                    lang(u8"縄を解く"s, u8"Release"s), u8"null"s, ""s + 9);
            }
        }
    }
    ELONA_APPEND_PROMPT(lang(u8"名前をつける"s, u8"Name"s), u8"null"s, ""s + 3);
    if (0 || gdata_wizard)
    {
        ELONA_APPEND_PROMPT(lang(u8"情報"s, u8"Info"s), u8"null"s, ""s + 6);
    }
    {
        int stat = show_prompt(promptx, prompty, 200);
        if (stat == -1)
        {
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        rtval = stat;
    }
    screenupdate = -1;
    p = rtval;
    if (p == 0)
    {
        update_screen();
        speak_to_npc();
        if (chatteleport == 1)
        {
            chatteleport = 0;
            return turn_result_t::exit_map;
        }
        else
        {
            return turn_result_t::turn_end;
        }
    }
    if (p == 1)
    {
        update_screen();
        try_to_melee_attack();
        return turn_result_t::turn_end;
    }
    if (p == 2)
    {
        update_screen();
        invctrl = 10;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (p == 3)
    {
        update_screen();
        return call_npc();
    }
    if (p == 4)
    {
        return try_interact_with_npc();
    }
    if (p == 5)
    {
        rc = tc;
        new_ally_joins();
        update_screen();
        return turn_result_t::turn_end;
    }
    if (p == 6)
    {
        csctrl = 4;
        snd(26);
        cc = tc;
        menu_character_sheet();
        cc = 0;
        return turn_result_t::pc_turn_user_error;
    }
    if (p == 7)
    {
        txt(lang(
            u8"どんな言葉を教えようか。"s,
            u8"What sentence should "s + name(tc) + u8" learn? "s));
        inputlog = "";
        input_text_dialog((windoww - 360) / 2 + inf_screenx, winposy(90), 20);
        cdata[tc].has_custom_talk() = false;
        if (inputlog == ""s)
        {
            cdatan(4, tc) = "";
        }
        else
        {
            cdatan(4, tc) = inputlog;
            txtef(9);
            txt(""s + cdatan(4, tc));
        }
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (p == 8)
    {
        gsel(4);
        pos(0, 0);
        picload(filesystem::dir::graphic() / u8"face1.bmp", 1);
        gsel(0);
        ccbk = cc;
        cc = tc;
        change_appearance();
        cc = ccbk;
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (p == 9)
    {
        snd(58);
        cdata[tc].is_hung_on_sand_bag() = false;
        txt(lang(
            name(tc) + u8"の縄を解いた。"s,
            u8"You release "s + name(tc) + u8"."s));
        flt();
        itemcreate(-1, 733, cdata[tc].position.x, cdata[tc].position.y, 0);
    }
    if (p == 10)
    {
        change_npc_tone();
    }
    update_screen();
    return turn_result_t::pc_turn_user_error;
}



turn_result_t call_npc()
{
    txt(lang(
        name(tc) + u8"を何と呼ぶ？ "s,
        u8"What do you want to call "s + him(tc) + u8"? "s));
    inputlog = "";
    input_mode = 1;
    input_text_dialog((windoww - 220) / 2 + inf_screenx, winposy(90), 12);
    if (inputlog == ""s)
    {
        txt(lang(u8"名前をつけるのはやめた。"s, u8"You changed your mind."s));
    }
    else
    {
        cdatan(0, tc) = ""s + inputlog;
        cdata[tc].has_own_name() = true;
        txt(lang(
            ""s + cdatan(0, tc) + u8"という名前で呼ぶことにした。"s,
            u8"You named "s + him(tc) + u8" "s + cdatan(0, tc) + u8"."s));
    }
    label_1416();
    return turn_result_t::pc_turn_user_error;
}



int change_npc_tone()
{
    gsel(4);
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        pos(cnt % 4 * 180, cnt / 4 * 300);
        picload(
            filesystem::dir::graphic() / (u8"g"s + (cnt + 1) + u8".bmp"), 1);
    }
    gsel(0);
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    list(0, 0) = -999;
    listn(0, 0) = lang(u8"デフォルトの口調"s, u8"Default Tone"s);
    ++listmax;
    const auto base_dir = filesystem::dir::user() / u8"talk";
    for (const auto& entry :
         filesystem::dir_entries{base_dir,
                                 filesystem::dir_entries::type::file,
                                 std::regex{u8R"(.*\.txt)"}})
    {
        list(0, listmax) = listmax;
        listn(0, listmax) =
            filesystem::to_utf8_path(fs::relative(entry.path(), base_dir));
        ++listmax;
    }
    windowshadow = 1;
label_2015_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2016_internal:
    s(0) = lang(u8"口調一覧"s, u8"Tone of Voice"s);
    s(1) = lang(u8"決定 [口調の変更]  "s, u8"Enter [Change Tone] "s) + strhint2
        + strhint3;
    display_window((windoww - 500) / 2 + inf_screenx, winposy(400), 500, 400);
    x = ww / 5 * 3;
    y = wh - 80;
    gmode(4, 180, 300, 50);
    pos(wx + ww / 3 * 2, wy + wh / 2);
    grotate(4, cmbg / 4 % 4 * 180, cmbg / 4 / 4 % 2 * 300, 0, x, y);
    gmode(2);
    display_topic(lang(u8"題名"s, u8"Title"s), wx + 28, wy + 36);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(ww - 100, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    gmode(2);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        s = ""s + listn(0, p);
        cs_list(cs == cnt, s, wx + 138, wy + 66 + cnt * 19 - 1);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, cs = i);
    if (p != -1)
    {
        snd(20);
        txt(lang(
            name(tc) + u8"の口調が変わった気がする。"s,
            name(tc) + u8" is somewhat different."s));
        if (p == -999)
        {
            cdata[tc].has_custom_talk() = false;
            cdatan(4, tc) = "";
            return 1;
        }
        cdata[tc].has_custom_talk() = true;
        cdatan(4, tc) = listn(0, p);
        return 1;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2015_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2015_internal;
        }
    }
    if (key == key_cancel)
    {
        return -1;
    }
    goto label_2016_internal;
}



void label_2022()
{
    snd(59);
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"book.bmp", 1);
    gsel(0);
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{(filesystem::dir::data() / u8"book.txt").native(),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    p = instr(buff, 0, ""s + inv[ci].param1 + u8","s + lang(u8"JP"s, u8"EN"s));
    if (p == -1)
    {
        return;
    }
    buff = strmid(buff, p, instr(buff, p, u8"%END"s));
    notedel(0);
    listmax = 0;
    page = 0;
    pagesize = 40;
    cs = 0;
    cc = 0;
    listmax = noteinfo();
    keyrange = 0;
    key_list(0) = key_enter;
label_2023_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    wx = (windoww - 720) / 2 + inf_screenx;
    wy = winposy(468);
    pos(wx, wy);
    gcopy(4, 0, 0, 736, 448);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        x = wx + 80 + cnt / 20 * 306;
        y = wy + 45 + cnt % 20 * 16;
        noteget(s, p);
        if (p == 0)
        {
            font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
        }
        if (p == 1)
        {
            font(10 + sizefix - en * 2);
        }
        if (p > 2)
        {
            font(12 + sizefix - en * 2);
        }
        pos(x, y);
        mes(s);
        if (p % 20 == 0)
        {
            font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
            pos(x + 90, y + 330);
            mes(u8"- "s + (p / 20 + 1) + u8" -"s);
        }
    }
label_2024_internal:
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(71);
            ++page;
            goto label_2023_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(71);
            --page;
            goto label_2023_internal;
        }
    }
    if (key == key_cancel || key == key_enter)
    {
        update_screen();
        return;
    }
    goto label_2024_internal;
}



turn_result_t do_cast_command()
{
    tc = cc;
    int stat = label_2167();
    if (stat == 0)
    {
        return turn_result_t::pc_turn_user_error;
    }
    return turn_result_t::turn_end;
}



turn_result_t show_spell_list()
{
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    cs = commark(1) % 1000;
    page = commark(1) / 1000;
    curmenu = 0;
    for (int cnt = 0; cnt < 200; ++cnt)
    {
        if (spell(cnt) > 0)
        {
            list(0, listmax) = cnt + 400;
            list(1, listmax) =
                the_ability_db[400 + cnt]->related_basic_attribute;
            ++listmax;
        }
    }
    sort_list_by_column1();
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_spell.bmp", 1);
    gsel(0);
    windowshadow = 1;
label_2028_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    drawmenu(1);
label_2029_internal:
    s(0) = lang(u8"魔法の詠唱"s, u8"Spell"s);
    s(1) = strhint2 + strhint3 + strhint7;
    display_window((windoww - 720) / 2 + inf_screenx, winposy(438), 720, 438);
    display_topic(lang(u8"魔法の名称"s, u8"Name"s), wx + 28, wy + 36);
    display_topic(
        lang(u8"消費MP(ｽﾄｯｸ) Lv/成功"s, u8"Cost(Stock) Lv/Chance"s),
        wx + 220,
        wy + 36);
    display_topic(lang(u8"効果"s, u8"Effect"s), wx + 400, wy + 36);
    pos(wx + 46, wy - 16);
    gcopy(3, 912, 48, 48, 48);
    pos(wx + ww - 78, wy);
    gcopy(3, 960, 96, 72, 144);
    pos(wx + ww - 180, wy);
    gcopy(3, 1032, 96, 72, 96);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 70, wy + 66 + cnt * 19);
            gfini(620, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 58, wy + 66 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        pos(wx + 40, wy + 74 + cnt * 19);
        gmode(2, inf_tiles, inf_tiles);
        grotate(
            1,
            (the_ability_db[i]->related_basic_attribute - 10) * inf_tiles,
            672,
            0,
            inf_tiles,
            inf_tiles);
        s = "";
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            if (gdata(40 + cnt) == list(0, p))
            {
                s = u8"{"s + cnt + u8"}"s;
            }
        }
        cs_list(
            cs == cnt,
            i18n::_(u8"ability", std::to_string(i), u8"name") + s,
            wx + 84,
            wy + 66 + cnt * 19 - 1);
        s = ""s + calcspellcostmp(i, cc) + u8" ("s + spell((i - 400)) + u8")"s;
        pos(wx + 328 - strlen_u(s) * 7, wy + 66 + cnt * 19 + 2);
        mes(s);
        label_2031();
        s = strmid(s, 0, 40);
        pos(wx + 340, wy + 66 + cnt * 19 + 2);
        mes(""s + sdata(i, cc) + u8"/"s + calcspellfail(i, cc) + u8"%"s);
        pos(wx + 420, wy + 66 + cnt * 19 + 2);
        mes(s);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    commark(1) = page * 1000 + cs;
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        menucycle = 0;
        efid = p;
        return do_cast_command();
    }
    if (key == u8"sc"s)
    {
        snd(20);
        p = list(0, pagesize * page + cs);
        if (gdata(40 + sc) == p)
        {
            gdata(40 + sc) = 0;
            goto label_2028_internal;
        }
        for (int cnt = 0; cnt < 20; ++cnt)
        {
            if (gdata(40 + cnt) == p)
            {
                gdata(40 + cnt) = 0;
            }
        }
        gdata(40 + sc) = p;
        txt(lang(
            u8"{"s + sc + u8"}キーにショートカットを割り当てた。"s,
            u8"You have assigned the shortcut to {"s + sc + u8"} key."s));
        display_msg(inf_screeny + inf_tiles);
        goto label_2028_internal;
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 1)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 1;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    snd(102);
                    return turn_result_t::show_spell_list;
                }
                if (curmenu == 1)
                {
                    snd(101);
                    return turn_result_t::show_skill_list;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2028_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2028_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_2029_internal;
}



void label_2031()
{
    s = "";
    if (the_ability_db[i]->sdataref1 / 1000 == 1)
    {
        p = the_ability_db[i]->sdataref1 % 1000;
        const auto duration = calc_buff_duration(p, calcspellpower(i, cc));
        const auto description = get_buff_description(p, calcspellpower(i, cc));
        s = ""s + duration + lang(u8"ﾀｰﾝ "s, u8"t "s) + description;
        return;
    }
    const auto damage = calc_skill_damage(i, cc, calcspellpower(i, cc));
    if (damage)
    {
        dice1 = damage->dice_x;
        dice2 = damage->dice_y;
        bonus = damage->damage_bonus;
        ele = damage->element;
        elep = damage->element_power;
        if (cc == 0)
        {
            if (trait(165) != 0)
            {
                if (ele == 50 || ele == 51 || ele == 52)
                {
                    dice2 = dice2 * 125 / 100;
                }
            }
        }
        if (dice1 != 0)
        {
            s += ""s + dice1 + u8"d"s + dice2;
            if (bonus != 0)
            {
                if (bonus > 0)
                {
                    s += u8"+"s + bonus;
                }
                else
                {
                    s += bonus;
                }
            }
        }
        else if (i == 461)
        {
            s += ""s + clamp(bonus, 1, 100) + u8"%"s;
        }
        else
        {
            s += lang(u8"ﾊﾟﾜｰ"s, u8"Power:"s) + bonus;
        }
        s += u8" "s;
    }
    s += i18n::_(u8"ability", std::to_string(i), u8"description");
    return;
}



void label_2032()
{
    int dbmax = 0;
    dblist(0, dbmax) = 159;
    ++dbmax;
    dblist(0, dbmax) = 173;
    ++dbmax;
    if (gdata_current_map == 12)
    {
        dblist(0, dbmax) = 154;
        ++dbmax;
        dblist(0, dbmax) = 162;
        ++dbmax;
        dblist(0, dbmax) = 184;
        ++dbmax;
        dblist(0, dbmax) = 176;
        ++dbmax;
        dblist(0, dbmax) = 177;
        ++dbmax;
        dblist(0, dbmax) = 180;
        ++dbmax;
        dblist(0, dbmax) = 301;
        ++dbmax;
        dblist(0, dbmax) = 167;
        ++dbmax;
        dblist(0, dbmax) = 153;
        ++dbmax;
    }
    if (gdata_current_map == 5)
    {
        dblist(0, dbmax) = 178;
        ++dbmax;
        dblist(0, dbmax) = 154;
        ++dbmax;
        dblist(0, dbmax) = 184;
        ++dbmax;
        dblist(0, dbmax) = 163;
        ++dbmax;
        dblist(0, dbmax) = 182;
        ++dbmax;
        dblist(0, dbmax) = 185;
        ++dbmax;
        dblist(0, dbmax) = 158;
        ++dbmax;
    }
    if (gdata_current_map == 15)
    {
        dblist(0, dbmax) = 151;
        ++dbmax;
        dblist(0, dbmax) = 150;
        ++dbmax;
        dblist(0, dbmax) = 161;
        ++dbmax;
        dblist(0, dbmax) = 179;
        ++dbmax;
        dblist(0, dbmax) = 301;
        ++dbmax;
        dblist(0, dbmax) = 156;
        ++dbmax;
        dblist(0, dbmax) = 160;
        ++dbmax;
        dblist(0, dbmax) = 172;
        ++dbmax;
        dblist(0, dbmax) = 178;
        ++dbmax;
    }
    if (gdata_current_map == 33)
    {
        dblist(0, dbmax) = 181;
        ++dbmax;
        dblist(0, dbmax) = 150;
        ++dbmax;
        dblist(0, dbmax) = 162;
        ++dbmax;
        dblist(0, dbmax) = 184;
        ++dbmax;
        dblist(0, dbmax) = 182;
        ++dbmax;
        dblist(0, dbmax) = 155;
        ++dbmax;
        dblist(0, dbmax) = 153;
        ++dbmax;
    }
    if (gdata_current_map == 36)
    {
        if (gdata_current_dungeon_level == 1)
        {
            dblist(0, dbmax) = 172;
            ++dbmax;
            dblist(0, dbmax) = 154;
            ++dbmax;
            dblist(0, dbmax) = 150;
            ++dbmax;
            dblist(0, dbmax) = 174;
            ++dbmax;
            dblist(0, dbmax) = 185;
            ++dbmax;
            dblist(0, dbmax) = 171;
            ++dbmax;
            dblist(0, dbmax) = 160;
            ++dbmax;
            dblist(0, dbmax) = 167;
            ++dbmax;
        }
    }
    if (gdata_current_map == 36)
    {
        if (gdata_current_dungeon_level == 3)
        {
            dblist(0, dbmax) = 172;
            ++dbmax;
            dblist(0, dbmax) = 165;
            ++dbmax;
            dblist(0, dbmax) = 155;
            ++dbmax;
            dblist(0, dbmax) = 164;
            ++dbmax;
            dblist(0, dbmax) = 178;
            ++dbmax;
            dblist(0, dbmax) = 188;
            ++dbmax;
            dblist(0, dbmax) = 171;
            ++dbmax;
            dblist(0, dbmax) = 187;
            ++dbmax;
        }
    }
    if (gdata_current_map == 14)
    {
        if (gdata_current_dungeon_level == 1)
        {
            dblist(0, dbmax) = 158;
            ++dbmax;
            dblist(0, dbmax) = 157;
            ++dbmax;
            dblist(0, dbmax) = 170;
            ++dbmax;
            dblist(0, dbmax) = 171;
            ++dbmax;
            dblist(0, dbmax) = 176;
            ++dbmax;
            dblist(0, dbmax) = 174;
            ++dbmax;
            dblist(0, dbmax) = 183;
            ++dbmax;
            dblist(0, dbmax) = 163;
            ++dbmax;
        }
    }
    if (gdata_current_map == 14)
    {
        if (gdata_current_dungeon_level == 3)
        {
            dblist(0, dbmax) = 300;
            ++dbmax;
            dblist(0, dbmax) = 175;
            ++dbmax;
            dblist(0, dbmax) = 158;
            ++dbmax;
            dblist(0, dbmax) = 157;
            ++dbmax;
            dblist(0, dbmax) = 189;
            ++dbmax;
        }
    }
    if (gdata_current_map == 11)
    {
        if (gdata_current_dungeon_level == 1)
        {
            dblist(0, dbmax) = 156;
            ++dbmax;
            dblist(0, dbmax) = 160;
            ++dbmax;
            dblist(0, dbmax) = 183;
            ++dbmax;
            dblist(0, dbmax) = 185;
            ++dbmax;
            dblist(0, dbmax) = 174;
            ++dbmax;
            dblist(0, dbmax) = 151;
            ++dbmax;
        }
    }
    if (gdata_current_map == 11)
    {
        if (gdata_current_dungeon_level == 3)
        {
            dblist(0, dbmax) = 153;
            ++dbmax;
            dblist(0, dbmax) = 166;
            ++dbmax;
            dblist(0, dbmax) = 167;
            ++dbmax;
            dblist(0, dbmax) = 169;
            ++dbmax;
            dblist(0, dbmax) = 152;
            ++dbmax;
            dblist(0, dbmax) = 189;
            ++dbmax;
            dblist(0, dbmax) = 168;
            ++dbmax;
            dblist(0, dbmax) = 186;
            ++dbmax;
        }
    }
    for (int cnt = 0, cnt_end = (dbmax); cnt < cnt_end; ++cnt)
    {
        p = dblist(0, cnt);
        f = 0;
        if (sdata.get(p, cc).original_level == 0)
        {
            if (the_ability_db[p]->related_basic_attribute != 0)
            {
                f = 1;
            }
        }
        if (f)
        {
            list(0, listmax) = p;
            list(1, listmax) =
                the_ability_db[p]->related_basic_attribute + 21000;
            ++listmax;
        }
    }
    return;
}



menu_result menu_character_sheet()
{
    menu_result result = { false, false, turn_result_t::none };
    int cs_buff = 0;
    int returnfromportrait = 0;
    int cs_buffmax = 0;
label_20331:
    page = 0;
    pagesize = 16;
    listmax = 0;
    cs = 0;
    if (csctrl != 4)
    {
        cc = 0;
    }
    csskill = -1;
    cs_buff = 0;
    curmenu = 0;
    if (csctrl == 2 || csctrl == 3)
    {
        page = 1;
    }
    list(0, listmax) = -1;
    list(1, listmax) = 20000;
    listn(0, listmax) = lang(u8"◆ スキルと特殊能力"s, u8"Skill"s);
    ++listmax;
    if (csctrl == 3)
    {
        label_2032();
    }
    else
    {
        for (int cnt = 150; cnt < 400; ++cnt)
        {
            f = 0;
            if (sdata(cnt, cc) != 0)
            {
                f = 1;
                if (csctrl == 2)
                {
                    if (sdata.get(cnt, cc).original_level == 0)
                    {
                        f = 0;
                    }
                }
            }
            if (f)
            {
                list(0, listmax) = cnt;
                list(1, listmax) =
                    the_ability_db[cnt]->related_basic_attribute + 21000;
                ++listmax;
            }
        }
    }
    list(0, listmax) = -1;
    list(1, listmax) = 30000;
    listn(0, listmax) = lang(u8"◆ 武器の専門"s, u8"Weapon Proficiency"s);
    ++listmax;
    for (int cnt = 100; cnt < 150; ++cnt)
    {
        f = 0;
        if (csctrl != 3)
        {
            if (sdata(cnt, cc) != 0)
            {
                f = 1;
            }
        }
        else if (sdata(cnt, cc) == 0)
        {
            if (the_ability_db[cnt])
            {
                f = 1;
            }
        }
        if (f)
        {
            list(0, listmax) = cnt;
            list(1, listmax) =
                the_ability_db[cnt]->related_basic_attribute + 31000;
            ++listmax;
        }
    }
    if (csctrl != 2 && csctrl != 3)
    {
        list(0, listmax) = -1;
        list(1, listmax) = 40000;
        listn(0, listmax) = lang(u8"◆ 耐性と抵抗力"s, u8"Resistance"s);
        ++listmax;
        for (int cnt = 50; cnt < 100; ++cnt)
        {
            if (sdata(cnt, cc) != 0)
            {
                list(0, listmax) = cnt;
                list(1, listmax) =
                    the_ability_db[cnt]->related_basic_attribute + 41000;
                ++listmax;
            }
        }
    }
    sort_list_by_column1();
    gsel(7);
    picload(filesystem::dir::graphic() / u8"ie_sheet.bmp");
    gsel(0);
    wx = (windoww - 700) / 2 + inf_screenx;
    wy = winposy(400) - 10;
    ww = 700;
    wh = 400;
    s = lang(u8"キャラクターシート"s, u8"Character Sheet"s);
    if (csctrl == 2)
    {
        s = lang(u8"能力訓練"s, u8"Skill Training"s);
    }
    if (csctrl == 3)
    {
        s = lang(u8"能力の習得"s, u8"Skill Learning"s);
    }
    drawmenu(0);
    if (mode != 1)
    {
        snd(94);
    }
    windowanime(wx, wy, ww, wh, 10, 4);
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"face1.bmp", 1);
    if (cdata[cc].portrait < 0)
    {
        const auto filepath = filesystem::dir::user() / u8"graphic"
            / (u8"face"s + std::abs(cdata[cc].portrait + 1) + u8".bmp");
        if (cdata[cc].portrait != -1)
        {
            if (fs::exists(filepath))
            {
                pos(0, 0);
                picload(filepath, 1);
            }
        }
    }
    gsel(0);
    if (returnfromportrait == 0)
    {
        gmode(6, -1, -1, 80);
        pos(wx + 4, wy + 4);
        gcopy(7, 0, 0, 700, 400);
        gmode(2);
    }
    if (csctrl == 2)
    {
        txtnew();
        txt(lang(u8"どの能力を訓練する？"s, u8"Train which skill?"s));
    }
    returnfromportrait = 0;
label_2034_internal:
    if (csctrl != 1)
    {
        display_msg(inf_tiles + inf_screeny);
    }
    pagemax = (listmax - 1) / pagesize + 1;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    if (csctrl == 1)
    {
        pagemax = 0;
    }
    cs_bk = -1;
    if (csctrl == 0)
    {
        if (page == 0)
        {
            s = lang(u8"ｶｰｿﾙ [祝福と呪いの情報]  "s, u8"Cursor [Hint]  "s)
                + strhint6 + strhint2 + strhint3;
        }
        else
        {
            s = lang(u8"決定 [ボーナスの分配]  "s, u8"Enter [Spend Bonus]  "s)
                + strhint2 + strhint3;
        }
    }
    if (csctrl == 1)
    {
        s = lang(
            u8"決定ｷｰ [リロール]  "s + strhint6 + u8"Shift,Esc [最終確認]"s,
            u8"Enter Key [Reroll]  "s + strhint6 + u8"Shift,Esc [Confirm]"s);
    }
    if (csctrl == 2)
    {
        if (page == 0)
        {
            s = strhint6 + strhint2 + strhint3;
        }
        else
        {
            s = lang(u8"決定 [スキルを訓練]  "s, u8"Enter [Train Skill]  "s)
                + strhint2 + strhint3;
        }
    }
    if (csctrl == 3)
    {
        if (page == 0)
        {
            s = strhint6 + strhint2 + strhint3;
        }
        else
        {
            s = lang(u8"決定 [スキルを習得]  "s, u8"Enter [Learn Skill]  "s)
                + strhint2 + strhint3;
        }
    }
    if (csctrl == 4)
    {
        if (page == 0)
        {
            s = u8"ｶｰｿﾙ [祝福と呪いの情報] "s + strhint6 + strhint2 + strhint3;
        }
        else
        {
            s = strhint2 + strhint3;
        }
    }
    if (csctrl != 1)
    {
        if (page != 0)
        {
            s += ""s + key_mode2 + u8" ["s
                + lang(u8"スキルトラック"s, u8"Track Skill"s) + u8"]"s;
        }
    }
    showtitle(s, s, 236, 1);
label_2035_internal:
    s = "";
    if (csctrl == 0)
    {
        if (page != 0)
        {
            s = lang(
                u8"残り "s + cdata[cc].skill_bonus
                    + u8" のボーナスをスキルに分配できる"s,
                u8"You can spend "s + cdata[cc].skill_bonus
                    + u8" bonus points."s);
        }
    }
    display_window2(
        (windoww - 700) / 2 + inf_screenx, winposy(400) - 10, 700, 400, 7);
    if (page == 0)
    {
        keyrange = 0;
        key_list = key_enter;
        display_topic(
            lang(
                u8"能力(元の値)  - 潜在能力"s,
                u8"Attributes(Org) - Potential"s),
            wx + 28,
            wy + 122);
        display_topic(
            lang(u8"各種修正"s, u8"Combat Rolls"s), wx + 400, wy + 253);
        display_topic(lang(u8"冒険の軌跡"s, u8"Trace"s), wx + 28, wy + 273);
        display_topic(
            lang(u8"祝福と呪い"s, u8"Blessing and Hex"s), wx + 400, wy + 122);
        display_topic(lang(u8"その他"s, u8"Extra Info"s), wx + 220, wy + 273);
        if (cdata[cc].portrait >= 0)
        {
            p = cdata[cc].sex * 64 + cdata[cc].portrait;
            pos(wx + 560, wy + 27);
            gzoom(4, p % 16 * 48, p / 16 * 72, 48, 72, 80, 112);
        }
        else
        {
            const auto filepath = filesystem::dir::user() / u8"graphic"
                / (u8"face"s + std::abs(cdata[cc].portrait + 1) + u8".bmp");
            if (cdata[cc].portrait != -1)
            {
                if (fs::exists(filepath))
                {
                    pos(wx + 560, wy + 27);
                    gzoom(4, 0, 0, 80, 112, 80, 112);
                }
            }
        }
        window2(wx + 557, wy + 23, 87, 120, 1, 10);
        if (cdata[cc].has_own_sprite() == 1)
        {
            pos(wx + 596 + 22, wy + 86 + 24);
            gmode(2, 32, 48);
            grotate(10 + cc, 32, 0, 0, 24, 40);
        }
        else
        {
            i = cdata[cc].image % 1000;
            chara_preparepic(cdata[cc].image % 1000, cdata[cc].image / 1000);
            pos(wx + 596 + 22, wy + 86 + 24);
            gmode(2, chipc(2, i), chipc(3, i));
            grotate(
                5,
                0,
                960,
                0,
                chipc(2, i) / (1 + (chipc(3, i) > inf_tiles)),
                inf_tiles);
        }
        font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
        s(0) = lang(u8"レベル"s, u8"Level"s);
        s(1) = lang(u8"経験"s, u8"EXP"s);
        s(2) = lang(u8"必要値"s, u8"Next Lv"s);
        s(3) = lang(u8"信仰"s, u8"God"s);
        s(4) = lang(u8"所属"s, u8"Guild"s);
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            pos(wx + 355, wy + 46 + cnt * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        s(0) = lang(u8"名前"s, u8"Name"s);
        s(1) = lang(u8"異名"s, u8"Aka"s);
        s(2) = lang(u8"種族"s, u8"Race"s);
        s(3) = lang(u8"性別"s, u8"Sex"s);
        s(4) = lang(u8"職業"s, u8"Class"s);
        s(5) = lang(u8"年齢"s, u8"Age"s);
        s(6) = lang(u8"身長"s, u8"Height"s);
        s(7) = lang(u8"体重"s, u8"Weight"s);
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(wx + 30 + cnt / 4 * 190, wy + 61 + cnt % 4 * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(wx + 37, wy + 157 + cnt * 15);
            gmode(2, inf_tiles, inf_tiles);
            grotate(1, cnt * inf_tiles, 672, 0, inf_tiles, inf_tiles);
            pos(wx + 54, wy + 151 + cnt * 15);
            color(20, 10, 0);
            mes(i18n::_(u8"ui", u8"attribute", u8"_"s + cnt));
            color(0, 0, 0);
        }
        s(0) = lang(u8"生命力"s, u8"Life"s);
        s(1) = lang(u8"マナ"s, u8"Mana"s);
        s(2) = lang(u8"狂気度"s, u8"Sanity"s);
        s(3) = lang(u8"速度"s, u8"Speed"s);
        s(4) = "";
        s(5) = lang(u8"名声"s, u8"Fame"s);
        s(6) = lang(u8"カルマ"s, u8"Karma"s);
        s(7) = "";
        s(8) = lang(u8"打撃修正"s, u8"Melee"s);
        s(9) = lang(u8"射撃修正"s, u8"Shoot"s);
        s(10) = "";
        s(11) = "";
        s(12) = "";
        s(13) = "";
        s(14) = "";
        s(15) = "";
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(wx + 255, wy + 151 + cnt * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        s(0) = lang(u8"ターン"s, u8"Turns"s);
        s(1) = lang(u8"経過日"s, u8"Days"s);
        s(2) = lang(u8"殺害数"s, u8"Kills"s);
        s(3) = lang(u8"総時間"s, u8"Time"s);
        s(4) = "";
        s(5) = "";
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            pos(wx + 32, wy + 301 + cnt * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        s(0) = lang(u8"荷車重量"s, u8"Cargo Wt"s);
        s(1) = lang(u8"荷車限界"s, u8"Cargo Lmt"s);
        s(2) = lang(u8"装備重量"s, u8"Equip Wt"s);
        s(3) = lang(u8"最深到達"s, u8"Deepest Lv"s);
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            pos(wx + 224, wy + 301 + cnt * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        font(14 - en * 2);
        s(0) = ""s + cdata[cc].level;
        s(1) = ""s + cdata[cc].experience;
        s(2) = ""s + cdata[cc].required_experience;
        s(3) = i18n::_(u8"god", cdata[cc].god_id, u8"name");
        s(4) = guildname();
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            pos(wx + 410 + en * 5, wy + 45 + cnt * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        s(0) = cdatan(0, cc);
        s(1) = cdatan(1, cc);
        s(2) = cnven(lang(
            ""s + i18n::_(u8"race", cdatan(2, cc), u8"name"), cdatan(2, cc)));
        access_class_info(2, cdatan(3, cc));
        s(4) = cnven(lang(""s + classname, cdatan(3, cc)));
        if (cdata[cc].sex == 0)
        {
            s(3) = cnven(i18n::_(u8"ui", u8"male"));
        }
        else
        {
            s(3) = cnven(i18n::_(u8"ui", u8"female"));
        }
        s(5) = ""s + calcage(cc) + u8" "s + lang(u8"歳"s, ""s);
        s(6) = ""s + cdata[cc].height + u8" cm"s;
        s(7) = ""s + cdata[cc].weight + u8" kg"s;
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(wx + 68 + cnt / 4 * 190 + en * ((cnt > 3) * 12),
                wy + 60 + cnt % 4 * 15);
            color(20, 10, 0);
            mes(s(cnt));
            color(0, 0, 0);
        }
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            s = u8"("s + sdata.get(10 + cnt, cc).original_level + u8")"s;
            if (encfind(cc, 60010 + cnt) != -1)
            {
                s += u8"*"s;
            }
            pos(wx + 92, wy + 151 + cnt * 15);
            color(20, 10, 0);
            mes(""s + sdata((10 + cnt), cc));
            color(0, 0, 0);
            pos(wx + 124, wy + 151 + cnt * 15);
            color(20, 10, 0);
            mes(s);
            color(0, 0, 0);
            p = sdata.get(10 + cnt, cc).potential;
            pos(wx + 176, wy + 152 + cnt * 15);
            if (p >= 200)
            {
                color(20, 10, 0);
                mes(u8"Superb"s);
                color(0, 0, 0);
                continue;
            }
            if (p >= 150)
            {
                color(20, 10, 0);
                mes(u8"Great"s);
                color(0, 0, 0);
                continue;
            }
            if (p >= 100)
            {
                color(20, 10, 0);
                mes(u8"Good"s);
                color(0, 0, 0);
                continue;
            }
            if (p >= 50)
            {
                color(20, 10, 0);
                mes(u8"Bad"s);
                color(0, 0, 0);
                continue;
            }
            mes(u8"Hopeless"s);
            color(0, 0, 0);
        }
        s(0) = ""s + sdata(2, cc) + u8"("s + sdata.get(2, cc).original_level
            + u8")"s;
        s(1) = ""s + sdata(3, cc) + u8"("s + sdata.get(3, cc).original_level
            + u8")"s;
        s(2) = ""s + cdata[cc].insanity;
        s(3) = ""s + cdata[cc].current_speed + u8"("s
            + sdata.get(18, cc).original_level + u8")"s;
        s(4) = "";
        s(5) = ""s + cdata[cc].fame;
        s(6) = ""s + cdata[cc].karma;
        s(7) = "";
        s(8) = "";
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            color(20, 10, 0);
            pos(wx + 310, wy + 151 + cnt * 15);
            mes(s(cnt));
            color(0, 0, 0);
        }
        label_2047(0);
        tc = cc;
        font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
        color(20, 10, 0);
        pos(wx + 417, wy + 281 + p(2) * 16);
        mes(lang(u8"軽減"s, u8"Prot"s));
        color(0, 0, 0);
        color(20, 10, 0);
        pos(wx + 590 - en * 16, wy + 281 + p(2) * 16);
        mes(lang(u8"回避"s, u8"Evade"s));
        color(0, 0, 0);
        attackskill = 106;
        int evade = calc_evasion(tc);
        prot = calcattackdmg(2);
        font(14 - en * 2);
        pos(wx + 460 + en * 8, wy + 279 + p(2) * 16);
        mes(""s + (100 - 10000 / (prot + 100)) + u8"% + "s + protdice1 + u8"d"s
            + protdice2);
        pos(wx + 625 - en * 8, wy + 279 + p(2) * 16);
        mes(""s + evade + u8"%"s);
        ++p(2);
        s(0) = ""s + gdata_play_turns + ""s + lang(u8"ターン"s, u8" Turns"s);
        s(1) = ""s + gdata_play_days + ""s + lang(u8"日"s, u8" Days"s);
        s(2) = ""s + gdata_kill_count;
        s(3) = ""s
            + cnvplaytime(
                   (gdata_play_time + timeGetTime() / 1000 - time_begin));
        s(4) = "";
        s(5) = "";
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            pos(wx + 80, wy + 299 + cnt * 15);
            mes(s(cnt));
        }
        s(0) = ""s + cnvweight(gdata_cargo_weight);
        s(1) = cnvweight(gdata_current_cart_limit);
        s(2) = cnvweight(cdata[cc].sum_of_equipment_weight) + u8" "s
            + cnveqweight(cc);
        s(3) = cnvrank(gdata_deepest_dungeon_level)
            + lang(u8"階相当"s, u8" Level"s);
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            pos(wx + 287 + en * 14, wy + 299 + cnt * 15);
            mes(s(cnt));
        }
        cs_buffmax = 0;
        for (int cnt = 0; cnt < 15; ++cnt)
        {
            x = wx + 430 + cnt / 3 * 40;
            y = wy + 151 + cnt % 3 * 32;
            if (cdata[cc].buffs[cnt].id == 0)
            {
                gmode(4, -1, -1, 120);
                pos(x, y);
                gcopy(3, 320, 160, 32, 32);
                gmode(2);
                continue;
            }
            ++cs_buffmax;
            pos(x, y);
            gcopy(5, cdata[cc].buffs[cnt].id * 32, 1120, 32, 32);
            if (cs_buff == cnt)
            {
                pos(x, y);
                gfini(32, 32);
                gfinc(20, 20, 50);
            }
        }
        if (cs_buffmax != 0)
        {
            const auto duration = calc_buff_duration(
                cdata[cc].buffs[cs_buff].id, cdata[cc].buffs[cs_buff].power);
            const auto description = get_buff_description(
                cdata[cc].buffs[cs_buff].id, cdata[cc].buffs[cs_buff].power);
            s = ""s
                + i18n::_(
                      u8"buff",
                      std::to_string(cdata[cc].buffs[cs_buff].id),
                      u8"name")
                + u8": "s + cdata[cc].buffs[cs_buff].turns
                + lang(
                      (u8"("s + duration + u8")ﾀｰﾝの間、"s),
                      (u8"("s + duration + u8") "s))
                + description;
        }
        else
        {
            s = lang(
                u8"今は持続効果を受けていない"s,
                u8"This character isn't currently blessed or hexed."s);
        }
        font(13 - en * 2);
        pos(wx + 108, wy + 366);
        mes(s);
        font(11 + sizefix * 2 - en * 2, snail::font_t::style_t::bold);
        color(20, 10, 0);
        pos(wx + 70, wy + 369 - en * 3);
        mes(lang(u8"説明:"s, u8"Hint:"s));
        color(0, 0, 0);
    }
    else
    {
        display_topic(lang(u8"能力の名称"s, u8"Name"s), wx + 28, wy + 36);
        display_topic(
            lang(u8"Lv(潜在)"s, u8"Lv(Potential)"s), wx + 182, wy + 36);
        display_topic(lang(u8"効果"s, u8"Detail"s), wx + 320, wy + 36);
        keyrange = 0;
        p(1) = 0;
        for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
        {
            p = pagesize * (page - 1) + cnt;
            if (p >= listmax)
            {
                break;
            }
            key_list(cnt) = key_select(cnt);
            ++keyrange;
            if (list(0, p) < 0)
            {
                p(1) = 1;
                continue;
            }
            ++p(1);
            if (list(0, p) < 100)
            {
                x = 52;
                dx = 18;
            }
            else
            {
                x = 70;
                dx = 0;
            }
            if (p(1) % 2 == 0)
            {
                pos(wx + x, wy + 66 + cnt * 19);
                gfini(595 + dx, 18);
                gfdec2(12, 14, 16);
            }
            if (list(0, p) < 100)
            {
                continue;
            }
            display_key(wx + 58, wy + 64 + cnt * 19, cnt);
        }
    }
    if (page > 0)
    {
        font(14 - en * 2);
        cs_listbk();
        for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
        {
            p = pagesize * (page - 1) + cnt;
            if (p >= listmax)
            {
                break;
            }
            if (list(0, p) >= 0)
            {
                i = list(0, p);
                if (i < 100)
                {
                    x = 54;
                    p(1) = 10;
                }
                else
                {
                    x = 84;
                    p(1) = the_ability_db[i]->related_basic_attribute - 10;
                }
                pos(wx + 38, wy + 75 + cnt * 19);
                gmode(2, inf_tiles, inf_tiles);
                grotate(1, p(1) * inf_tiles, 672, 0, inf_tiles, inf_tiles);
                s = i18n::_(u8"ability", std::to_string(i), u8"name");
                if (i >= 50 && i < 100)
                {
                    s = lang(""s, u8"Resist "s) + cnven(s)
                        + lang(u8"耐性"s, ""s);
                }
                for (int cnt = 0; cnt < 3; ++cnt)
                {
                    if (gdata(750 + cnt) == cc * 10000 + i)
                    {
                        s = u8"*"s + s;
                    }
                }
                cs_list(cs == cnt, s, wx + x, wy + 66 + cnt * 19 - 1);
                if (list(0, p) >= 50 && list(0, p) < 100)
                {
                    p(1) = clamp(sdata(list(0, p), cc) / 50, 0, 6);
                    s = i18n::_(u8"ui", u8"resistance", u8"_"s + p(1));
                }
                else
                {
                    s = ""s + sdata.get(i, cc).original_level + u8"."s
                        + std::to_string(
                              1000
                              + sdata.get(list(0, p), cc).experience % 1000)
                              .substr(1);
                    if (sdata.get(i, cc).original_level != sdata(i, cc))
                    {
                        p(1) = sdata(i, cc) - sdata.get(i, cc).original_level;
                    }
                    s += u8"("s + sdata.get(i, cc).potential + u8"%)"s;
                }
                pos(wx + 280 - strlen_u(s) * 7, wy + 66 + cnt * 19 + 2);
                mes(s);
                pos(wx + 330, wy + 66 + cnt * 19 + 2);
                mes(i18n::_(u8"ability", std::to_string(i), u8"description"));
                if (csctrl == 2 || csctrl == 3)
                {
                    if (csctrl == 2)
                    {
                        s = ""s + calctraincost(i, cc) + u8"p "s;
                    }
                    else
                    {
                        s = ""s + calclearncost(i, cc) + u8"p "s;
                    }
                    pos(wx + 322 - strlen_u(s) * 7, wy + 66 + cnt * 19 + 2);
                    mes(s);
                }
                else if (sdata.get(i, cc).original_level != sdata(i, cc))
                {
                    i = sdata(i, cc) - sdata.get(i, cc).original_level;
                    if (list(0, p) >= 50)
                    {
                        i = i / 50;
                    }
                    else
                    {
                        i = i / 5;
                    }
                    s = "";
                    putenclv(i);
                    pos(wx + 282, wy + 66 + cnt * 19 + 2);
                    mes(s);
                }
            }
            else
            {
                font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
                cs_list(cs == cnt, listn(0, p), wx + 88, wy + 66 + cnt * 19);
                font(14 - en * 2);
            }
        }
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (page == 0)
    {
        if (key == u8"p"s)
        {
            if (cc < 16)
            {
                change_appearance();
                if (mode != 1)
                {
                    nowindowanime = 1;
                }
                returnfromportrait = 1;
                goto label_20331;
            }
        }
        if (key == key_north)
        {
            --cs_buff;
            if (cs_buff < 0)
            {
                cs_buff = cs_buffmax - 1;
            }
            goto label_2034_internal;
        }
        if (key == key_south)
        {
            ++cs_buff;
            if (cs_buff >= cs_buffmax)
            {
                cs_buff = 0;
            }
            goto label_2034_internal;
        }
    }
    else if (csctrl != 1)
    {
        if (key == key_mode2)
        {
            for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
            {
                i = list(0, pagesize * (page - 1) + cs);
                break;
            }
            if (i != -1)
            {
                p = 750;
                for (int cnt = 750; cnt < 753; ++cnt)
                {
                    if (gdata(cnt) % 10000 == 0)
                    {
                        p = cnt;
                    }
                    if (gdata(cnt) == cc * 10000 + i)
                    {
                        p = cnt;
                        i = 0;
                        break;
                    }
                }
                gdata(p) = cc * 10000 + i;
                snd(20);
            }
        }
    }
    if (csctrl == 1)
    {
        if (key == key_enter)
        {
            snd(103);
            result.succeeded = false;
            return result;
        }
        if (key == key_cancel)
        {
            result.succeeded = true;
            return result;
        }
        goto label_2035_internal;
    }
    p = -1;
    for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
    {
        if (key == key_select(cnt))
        {
            p = list(0, pagesize * (page - 1) + cnt);
            break;
        }
    }
    if (p != -1)
    {
        if (csctrl != 4)
        {
            csskill = p;
            if (csctrl == 2 || csctrl == 3)
            {
                screenupdate = -1;
                update_screen();
                tc = tcbk;
                result.succeeded = false;
                return result;
            }
            if (cdata[0].skill_bonus < 1 || p < 0 || p < 100)
            {
                goto label_2034_internal;
            }
            if (sdata.get(csskill, 0).original_level == 0)
            {
                snd(27);
                goto label_2034_internal;
            }
            --cdata[0].skill_bonus;
            snd(19);
            skillexp(csskill, cc, 400, 2, 1000);
            modify_potential(
                cc,
                csskill,
                clamp(15 - sdata.get(csskill, cc).potential / 15, 2, 15));
            render_hud();
            goto label_2034_internal;
        }
    }
    if (key == key_pageup)
    {
        ++page;
        snd(1);
        goto label_2034_internal;
    }
    if (key == key_pagedown)
    {
        --page;
        snd(1);
        goto label_2034_internal;
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 3)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 3;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    csctrl = 0;
                    goto label_20331;
                }
                if (curmenu == 1)
                {
                    result.turn_result = turn_result_t::menu_equipment;
                    return result;
                }
                if (curmenu == 2)
                {
                    result.turn_result = turn_result_t::menu_feats;
                    return result;
                }
                if (curmenu == 3)
                {
                    result.turn_result = turn_result_t::menu_materials;
                    return result;
                }
            }
        }
    }
    if (key == key_cancel)
    {
        menucycle = 0;
        if (csctrl == 0)
        {
            update_screen();
            result.turn_result = turn_result_t::pc_turn_user_error;
            return result;
        }
        else
        {
            screenupdate = -1;
            update_screen();
            tc = tcbk;
            result.succeeded = false;
            return result;
        }
    }
    goto label_2035_internal;
}



void label_2038(int val0)
{
    rtval = -2;
    if (page == 0)
    {
        if (val0 == 0)
        {
            rtval = -2;
        }
        if (val0 == 1)
        {
            rtval(0) = 100;
            rtval(1) = 0;
            rtval(2) = cdata[cc].portrait;
        }
        if (val0 == 2)
        {
            rtval(0) = 1;
            rtval(1) = 0;
            rtval(2) = pcc(1, cc) % 1000;
            rtvaln = u8"hair"s;
        }
        if (val0 == 3)
        {
            rtval(0) = 10;
            rtval(1) = 0;
            rtval(2) = pcc(10, cc) % 1000;
            rtvaln = u8"subhair"s;
        }
        if (val0 == 4)
        {
            rtval(0) = 1;
            rtval(1) = 1;
            rtval(2) = pcc(1, cc) / 1000;
        }
        if (val0 == 5)
        {
            rtval(0) = 15;
            rtval(1) = 0;
            rtval(2) = pcc(15, cc) % 1000;
            rtvaln = u8"body"s;
        }
        if (val0 == 6)
        {
            rtval(0) = 9;
            rtval(1) = 0;
            rtval(2) = pcc(9, cc) % 1000;
            rtvaln = u8"cloth"s;
        }
        if (val0 == 7)
        {
            rtval(0) = 7;
            rtval(1) = 0;
            rtval(2) = pcc(7, cc) % 1000;
            rtvaln = u8"pants"s;
        }
        if (val0 == 8)
        {
            rtval = -1;
            rtvaln = "";
        }
        if (val0 == 9)
        {
            if (cc != 0)
            {
                rtval(0) = 101;
                rtval(1) = 0;
                rtval(2) = cdata[cc].has_own_sprite();
            }
            else
            {
                rtval(0) = 16;
                rtval(1) = 0;
                rtval(2) = pcc(16, cc) % 1000;
                rtvaln = u8"ride"s;
            }
        }
    }
    else
    {
        if (val0 == 0)
        {
            rtval(0) = 15;
            rtval(1) = 1;
            rtval(2) = pcc(15, cc) / 1000;
        }
        if (val0 == 1)
        {
            rtval(0) = 9;
            rtval(1) = 1;
            rtval(2) = pcc(9, cc) / 1000;
        }
        if (val0 == 2)
        {
            rtval(0) = 7;
            rtval(1) = 1;
            rtval(2) = pcc(7, cc) / 1000;
        }
        if (val0 == 3)
        {
            rtval(0) = 11;
            rtval(1) = 0;
            rtval(2) = pcc(11, cc) % 1000;
            rtvaln = u8"etc"s;
        }
        if (val0 == 4)
        {
            rtval(0) = 12;
            rtval(1) = 0;
            rtval(2) = pcc(12, cc) % 1000;
            rtvaln = u8"etc"s;
        }
        if (val0 == 5)
        {
            rtval(0) = 13;
            rtval(1) = 0;
            rtval(2) = pcc(13, cc) % 1000;
            rtvaln = u8"etc"s;
        }
        if (val0 == 6)
        {
            rtval(0) = 14;
            rtval(1) = 0;
            rtval(2) = pcc(14, cc) % 1000;
            rtvaln = u8"eye"s;
        }
        if (val0 == 7)
        {
            rtval = -1;
            rtvaln = "";
        }
    }
    return;
}



int change_appearance()
{
    create_pcpic(cc, false);
    page = 0;
    pagesize = 19;
    cs = 0;
    cs_bk = -1;
    ww = 380;
    wh = 340;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
    snd(97);
    windowanime(wx, wy, ww, wh, 10, 7);
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"face1.bmp", 1);
    buffer(7, 800, 112);
    boxf();
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        const auto filepath = filesystem::dir::user() / u8"graphic"
            / (u8"face"s + (cnt + 1) + u8".bmp");
        if (fs::exists(filepath))
        {
            pos(cnt * 80, 0);
            picload(filepath, 1);
        }
    }
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_mirror.bmp", 1);
    gsel(0);
    windowshadow = 1;
label_2040_internal:
    listmax = 0;
    if (page == 0)
    {
        if (jp)
        {
            s(0) = u8"決定    "s;
            s(1) = u8"肖像　　"s;
            s(2) = u8"髪　　　"s;
            s(3) = u8"副髪　　"s;
            s(4) = u8"髪の色　"s;
            s(5) = u8"体　　　"s;
            s(6) = u8"服　　　"s;
            s(7) = u8"ﾊﾟﾝﾂ　　"s;
            s(8) = u8"詳細設定"s;
        }
        if (en)
        {
            s(0) = u8"Done    "s;
            s(1) = u8"Portrait"s;
            s(2) = u8"Hair    "s;
            s(3) = u8"Sub Hair"s;
            s(4) = u8"Hair CL "s;
            s(5) = u8"Body    "s;
            s(6) = u8"Cloth   "s;
            s(7) = u8"Pants   "s;
            s(8) = u8"Set Detail"s;
        }
        if (cc != 0)
        {
            s(9) = lang(u8"ｶｽﾀﾑｷｬﾗ "s, u8"Custom  "s);
        }
        else
        {
            s(9) = lang(u8"乗馬時　"s, u8"Riding  "s);
        }
        p = 9 + (cc != 0) + (cc == 0) * (gdata_mount != 0);
    }
    else
    {
        if (jp)
        {
            s(0) = u8"体の色　"s;
            s(1) = u8"服の色　"s;
            s(2) = u8"ﾊﾟﾝﾂの色"s;
            s(3) = u8"ｱｸｾｻﾘ1　"s;
            s(4) = u8"ｱｸｾｻﾘ2　"s;
            s(5) = u8"ｱｸｾｻﾘ3　"s;
            s(6) = u8"目　　　"s;
            s(7) = u8"基本設定"s;
        }
        if (en)
        {
            s(0) = u8"Body CL "s;
            s(1) = u8"Cloth CL"s;
            s(2) = u8"Pants CL"s;
            s(3) = u8"Etc1    "s;
            s(4) = u8"Etc2    "s;
            s(5) = u8"Etc3    "s;
            s(6) = u8"Eyes    "s;
            s(7) = u8"Set Basic"s;
        }
        p = 8;
    }
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        list(0, cnt) = cnt;
        listn(0, cnt) = s(cnt);
        ++listmax;
    }
    keyrange = 0;
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_enter;
        ++keyrange;
    }
label_2041_internal:
    pagesize = 0;
    s(0) = lang(u8"肖像の変更"s, u8"Appearance"s);
    s(1) = lang(
        u8"左右キー [変更]  ｷｬﾝｾﾙ [閉じる]"s,
        u8"Right,left [Change]  Shift,Esc [Close]"s);
    display_window(
        (windoww - 380) / 2 + inf_screenx, winposy(340) - 12, 380, 340);
    pagesize = listmax;
    display_topic(lang(u8"項目"s, u8"Category"s), wx + 34, wy + 36);
    pos(wx + ww - 40, wy);
    gcopy(3, 960, 96, 48, 120);
    ++i;
    if (i % 100 < 45)
    {
        f = i % 16;
    }
    else
    {
        ++f;
    }
    window2(wx + 234, wy + 71, 88, 120, 1, 1);
    if (cs == 1 && page == 0)
    {
        if (cdata[cc].portrait >= 0)
        {
            p = cdata[cc].sex * 64 + cdata[cc].portrait;
            pos(wx + 238, wy + 75);
            gzoom(4, p % 16 * 48, p / 16 * 72, 48, 72, 80, 112);
        }
        else if (cdata[cc].portrait != -1)
        {
            pos(wx + 238, wy + 75);
            gzoom(
                7,
                std::abs((cdata[cc].portrait + 2)) * 80,
                0,
                80,
                112,
                80,
                112);
        }
    }
    else if (cdata[cc].has_own_sprite() == 1)
    {
        pos(wx + 280, wy + 130);
        gmode(2, 32, 48);
        grotate(10 + cc, f / 4 % 4 * 32, f / 16 % 4 * 48, 0, 48, 80);
    }
    else
    {
        i = cdata[cc].image % 1000;
        chara_preparepic(cdata[cc].image % 1000, cdata[cc].image / 1000);
        pos(wx + 280, wy + 130);
        gmode(2, chipc(2, i), chipc(3, i));
        grotate(5, 0, 960, 0, chipc(2, i), chipc(3, i));
    }
    gmode(2);
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        if (p >= listmax)
        {
            break;
        }
        label_2038(cnt);
        s = listn(0, p);
        if (rtval >= 0)
        {
            if (rtval(2) >= 0)
            {
                s += u8" "s + rtval(2);
            }
            else if (rtval(2) == -1)
            {
                s += u8" N/A"s;
            }
            else
            {
                s += u8" u"s + (std::abs(rtval(2)) - 1);
            }
        }
        cs_list(cs == cnt, s, wx + 60, wy + 66 + cnt * 21 - 1, 0);
        if (rtval != -2)
        {
            pos(wx + 30, wy + 66 + cnt * 21 - 5);
            gcopy(3, 312, 336, 24, 24);
            pos(wx + 175, wy + 66 + cnt * 21 - 5);
            gcopy(3, 336, 336, 24, 24);
        }
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    label_2038(cs);
    p = 0;
    if (rtval == -2)
    {
        if (key == key_enter)
        {
            create_pcpic(cc, true);
            return 1;
        }
        if (key == key_pageup || key == key_pagedown)
        {
            key = ""s;
        }
    }
    else if (key == key_enter)
    {
        key = key_pageup;
    }
    if (rtval == -1)
    {
        if (key == key_pageup || key == key_pagedown)
        {
            snd(5);
            if (page == 0)
            {
                page = 1;
            }
            else
            {
                page = 0;
                cs = 8;
            }
            goto label_2040_internal;
        }
    }
    if (key == key_pageup)
    {
        snd(5);
        if (rtval == 100)
        {
            if (cdata[cc].portrait < 31)
            {
                ++cdata[cc].portrait;
            }
            goto label_2041_internal;
        }
        if (rtval == 101)
        {
            cdata[cc].has_own_sprite() = true;
            goto label_2041_internal;
        }
        if (rtval(1) == 0)
        {
            if (fs::exists(
                    filesystem::dir::graphic()
                    / (u8"pcc_"s + rtvaln + u8"_" + (pcc(rtval, cc) % 1000 + 1)
                       + u8".bmp")))
            {
                ++pcc(rtval, cc);
                p = 1;
            }
        }
        else if (pcc(rtval, cc) / 1000 < 21)
        {
            pcc(rtval, cc) += 1000;
            p = 1;
        }
    }
    if (key == key_pagedown)
    {
        snd(5);
        if (rtval == 100)
        {
            if (cdata[cc].portrait > -10)
            {
                --cdata[cc].portrait;
            }
            goto label_2041_internal;
        }
        if (rtval == 101)
        {
            cdata[cc].has_own_sprite() = false;
            goto label_2041_internal;
        }
        if (rtval(1) == 0)
        {
            if ((pcc(rtval, cc) % 1000 == 1 && rtval != 15)
                || fs::exists(
                       filesystem::dir::graphic()
                       / (u8"pcc_"s + rtvaln + u8"_"s
                          + (pcc(rtval, cc) % 1000 - 1) + u8".bmp"s)))
            {
                --pcc(rtval, cc);
                p = 1;
            }
        }
        else if (pcc(rtval, cc) / 1000 > 0)
        {
            pcc(rtval, cc) -= 1000;
            p = 1;
        }
    }
    create_pcpic(cc, false);
    if (key == key_cancel)
    {
        create_pcpic(cc, true);
        return 0;
    }
    if (mode == 1)
    {
        if (getkey(snail::key::f1))
        {
            return -1;
        }
    }
    goto label_2041_internal;
}



int label_2044()
{
    create_pcpic(cc, true);
    snd(26);
    page = 0;
    pagesize = 18;
    cs = 0;
    cs_bk = -1;
    windowshadow = 1;
    listmax = 0;
    if (jp)
    {
        s(0) = u8"決定    "s;
        s(1) = u8"胸部鎧　"s;
        s(2) = u8"脚部鎧　"s;
        s(3) = u8"ベルト　"s;
        s(4) = u8"ｸﾞﾛｰﾌﾞ　"s;
        s(5) = u8"マント　"s;
    }
    if (en)
    {
        s(0) = u8"Done    "s;
        s(1) = u8"Chest   "s;
        s(2) = u8"Leg     "s;
        s(3) = u8"Belt    "s;
        s(4) = u8"Glove   "s;
        s(5) = u8"Mantle  "s;
    }
    p = 6;
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        list(0, cnt) = cnt;
        listn(0, cnt) = s(cnt);
        ++listmax;
    }
    keyrange = 0;
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_enter;
        ++keyrange;
    }

    while (1)
    {
        pagesize = 0;
        s(0) = lang(u8"装備表示の変更"s, u8"Parts to hide"s);
        s(1) = lang(
            u8"左右キー [変更]  ｷｬﾝｾﾙ [閉じる]"s,
            u8"Right,left [Change]  Shift,Esc [Close]"s);
        display_window(
            (windoww - 360) / 2 + inf_screenx, winposy(289) - 12, 360, 289);
        s = lang(u8"項目"s, u8"Part"s);
        pagesize = listmax;
        display_topic(s, wx + 34, wy + 36);
        ++i;
        if (i % 100 < 45)
        {
            f = i % 16;
        }
        else
        {
            ++f;
        }
        window2(wx + 234, wy + 60, 88, 120, 1, 1);
        pos(wx + 280, wy + 120);
        gmode(2, 32, 48);
        grotate(10 + cc, f / 4 % 4 * 32, f / 16 % 4 * 48, 0, 48, 80);
        gmode(2);
        font(14 - en * 2);
        cs_listbk();
        for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
        {
            p = cnt;
            if (p >= listmax)
            {
                break;
            }
            s = listn(0, p);
            if (cnt != 0)
            {
                if (pcc(20 + cnt - 1, cc) == 0)
                {
                    s += u8"On"s;
                }
                else
                {
                    s += u8"Off"s;
                }
                pos(wx + 30, wy + 66 + cnt * 21 - 5);
                gcopy(3, 312, 336, 24, 24);
                pos(wx + 175, wy + 66 + cnt * 21 - 5);
                gcopy(3, 336, 336, 24, 24);
            }
            cs_list(cs == cnt, s, wx + 60, wy + 66 + cnt * 21 - 1, 0);
        }
        if (keyrange != 0)
        {
            cs_bk = cs;
        }
        redraw();
        await(config::instance().wait1);
        key_check();
        cursor_check();
        if (cs != 0)
        {
            if (key == key_enter)
            {
                key = key_pageup;
            }
            if (key == key_pageup || key == key_pagedown)
            {
                if (pcc(20 + cs - 1, cc) == 0)
                {
                    pcc(20 + cs - 1, cc) = 1;
                }
                else
                {
                    pcc(20 + cs - 1, cc) = 0;
                }
                create_pcpic(cc, true);
                snd(5);
            }
        }
        if ((cs == 0 && key == key_enter) || key == key_cancel)
        {
            snd(20);
            create_pcpic(cc, true);
            return 1;
        }
    }
}



void label_2047(int val0)
{
    p(1) = 0;
    p(2) = 0;
    attackskill = 106;
    ammo = -1;
    attacknum = 0;
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        body = 100 + cnt;
        if (cdata_body_part(cc, cnt) % 10000 == 0)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 10)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 11)
        {
            continue;
        }
        cw = cdata_body_part(cc, cnt) % 10000 - 1;
        if (inv[cw].dice_x > 0)
        {
            attackskill = inv[cw].skill;
            ++p(1);
            s(1) = lang(u8"武器"s, u8"Melee"s) + p(1);
            ++attacknum;
            label_2048(val0);
        }
    }
    if (attackskill == 106)
    {
        s(1) = lang(u8"格闘"s, u8"Unarmed"s);
        label_2048(val0);
    }
    attacknum = 0;
    int stat = can_do_ranged_attack();
    if (stat == 1)
    {
        s(1) = lang(u8"射撃"s, u8"Dist"s);
        label_2048(val0);
    }
    return;
}



void label_2048(int val0)
{
    tc = cc;
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    color(20, 10, 0);
    if (val0 == 0)
    {
        pos(wx + 590, wy + 281 + p(2) * 16);
        mes(lang(u8"命中"s, u8"Hit"s));
        pos(wx + 417, wy + 281 + p(2) * 16);
        mes(s(1));
    }
    color(0, 0, 0);
    attackrange = 0;
    if (the_item_db[inv[cw].id]->category == 24000)
    {
        attackrange = 1;
    }
    attackvar = 0;
    int tohit = calc_accuracy(false);
    dmg = calcattackdmg(1);
    font(14 - en * 2);
    s(2) = ""s + dmgmulti;
    s = ""s + tohit + u8"%"s;
    if (val0 == 0)
    {
        pos(wx + 625 - en * 8, wy + 279 + p(2) * 16);
        mes(s);
    }
    else
    {
        s(3) = s;
    }
    s = ""s + dice1 + u8"d"s + dice2 + cnvfix(dmgfix) + u8" x"s
        + strmid(
              s(2),
              0,
              3 + (elona::stoi(s(2)) >= 10) + (elona::stoi(s(2)) >= 100));
    if (val0 == 0)
    {
        pos(wx + 460 + en * 8, wy + 279 + p(2) * 16);
        mes(s);
    }
    else
    {
        noteadd(s(1) + "   : " + fixtxt(s(3), 12) + " " + fixtxt(s, 20));
    }
    ++p(2);
    return;
}



void equip_melee_weapon()
{
    attacknum = 0;
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        body = 100 + cnt;
        if (cdata_body_part(cc, cnt) / 10000 != 5)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) % 10000 == 0)
        {
            continue;
        }
        cw = cdata_body_part(cc, cnt) % 10000 - 1;
        if (inv[cw].dice_x == 0)
        {
            continue;
        }
        ++attacknum;
        if (cdata[cc].equipment_type & 2)
        {
            if (inv[cw].weight >= 4000)
            {
                txt(lang(
                    u8"装備中の"s + itemname(cw)
                        + u8"は両手にしっくりとおさまる。"s,
                    itemname(cw)
                        + u8" fits well for two-hand fighting style."s));
            }
            else
            {
                txt(lang(
                    u8"装備中の"s + itemname(cw)
                        + u8"は両手持ちにはやや軽すぎる。"s,
                    itemname(cw)
                        + u8" is too light for two-hand fighting style."s));
            }
        }
        if (cdata[cc].equipment_type & 4)
        {
            if (attacknum == 1)
            {
                if (inv[cw].weight >= 4000)
                {
                    txt(lang(
                        u8"装備中の"s + itemname(cw)
                            + u8"は利手で扱うにも重すぎる。"s,
                        itemname(cw)
                            + u8" is too heavy for two-wield fighting style."s));
                }
            }
            else if (inv[cw].weight > 1500)
            {
                txt(lang(
                    u8"装備中の"s + itemname(cw)
                        + u8"は片手で扱うには重すぎる。"s,
                    itemname(cw)
                        + u8" is too heavy for two-wield fighting style."s));
            }
        }
        if (cc == 0)
        {
            if (gdata_mount != 0)
            {
                if (inv[cw].weight >= 4000)
                {
                    txt(lang(
                        u8"装備中の"s + itemname(cw)
                            + u8"は乗馬中に扱うには重すぎる。"s,
                        itemname(cw) + u8" is too heavy to use when riding."s));
                }
            }
        }
    }
}



menu_result menu_equipment()
{
    menu_result result = { false, false, turn_result_t::none };
    int cs_prev = 0;
    int mainhand = 0;
    cc = 0;
    page = 0;
    pagesize = 14;
    listmax = 0;
    cs = 0;
    cs_bk = -1;
    if (cs_prev != 0)
    {
        cs = cs_prev;
        cs_prev = 0;
    }
    curmenu = 1;
    mainhand = 0;
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(cc, i) != 0)
        {
            if (trait(206) != 0)
            {
                if (cdata_body_part(cc, i) / 10000 == 2)
                {
                    continue;
                }
            }
            if (trait(203) != 0)
            {
                if (cdata_body_part(cc, i) / 10000 == 9)
                {
                    continue;
                }
            }
            if (trait(205) != 0)
            {
                if (cdata_body_part(cc, i) / 10000 == 3)
                {
                    continue;
                }
            }
            if (mainhand == 0)
            {
                if (cdata_body_part(cc, i) / 10000 == 5)
                {
                    mainhand = i + 100;
                }
            }
            list(0, listmax) = i + 100;
            list(1, listmax) = cdata_body_part(cc, i) / 10000;
            ++listmax;
        }
    }
    sort_list_by_column1();
    drawmenu();
    ww = 690;
    wh = 380;
    wx = (windoww - 690) / 2 + inf_screenx;
    wy = winposy(380);
    if (nowindowanime == 0)
    {
        snd(95);
    }
    windowanime(wx, wy, ww, wh, 10, 4);
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_wear.bmp", 1);
    gsel(0);
    windowshadow = 1;
label_2051_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2052_internal:
    s(0) = lang(u8"装備品"s, u8"Equipment"s);
    s(1) = strhint5 + strhint5b + strhint3;
    display_window(
        (windoww - 690) / 2 + inf_screenx, winposy(428), 690, 428, 64);
    display_topic(
        lang(u8"部位/装備品名称"s, u8"Category/Name"s), wx + 28, wy + 30);
    if (showresist == 0)
    {
        display_topic(lang(u8"重さ"s, u8"Weight"s), wx + 524, wy + 30);
    }
    pos(wx + 46, wy - 16);
    gcopy(3, 768, 48, 48, 48);
    pos(wx + ww - 106, wy);
    gcopy(3, 960, 96, 96, 120);
    pos(wx, wy + wh - 164);
    gcopy(3, 960, 216, 72, 144);
    if (showresist)
    {
        pos(wx + 320, wy + 40);
        mes(lang(
            u8"火 冷 雷 闇 幻 毒 獄 音 神 沌 魔"s,
            u8"Fi Co Li Da Mi Po Nt So Nr Ch Ma"s));
    }
    display_note(
        lang(u8"装備重量: "s, u8"Equip weight: "s)
        + cnvweight(cdata[cc].sum_of_equipment_weight) + cnveqweight(cc)
        + lang(u8" 命中修正:"s, u8" Hit Bonus:"s) + cdata[cc].hit_bonus
        + lang(u8" ダメージ修正:"s, u8" Damage Bonus:"s)
        + cdata[cc].damage_bonus + u8"  DV/PV:"s + cdata[cc].dv + u8"/"s
        + cdata[cc].pv);
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    gmode(2);
    keyrange = 0;
    f = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 100, wy + 60 + cnt * 19);
            gfini(558, 18);
            gfdec(12, 14, 16);
        }
        q = i18n::_(u8"ui", u8"body_part", u8"_"s + list(1, p));
        if (list(0, p) == mainhand)
        {
            q = lang(u8"利手"s, u8"Hand*"s);
        }
        pos(wx + 22, wy + 60 + cnt * 19 - 4);
        gcopy(3, 600 + (list(1, p) - 1) * 24, 336, 24, 24);
        pos(wx + 46, wy + 60 + cnt * 19 + 3);
        mes(q);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        display_key(wx + 88, wy + 60 + cnt * 19 - 2, cnt);
        p(1) = cdata_body_part(cc, list(0, p));
        s(0) = u8"-    "s;
        s(1) = u8"-"s;
        if (p(1) % 10000 != 0)
        {
            p(1) = p(1) % 10000 - 1;
            s(0) = itemname(p(1));
            s(1) = cnvweight(inv[p(1)].weight);
            p(2) = inv[p(1)].image;
            prepare_item_image(p(2), inv[p(1)].color, inv[p(1)].param1);
            pos(wx + 126, wy + 70 + cnt * 19);
            gmode(2, inf_tiles, inf_tiles);
            grotate(1, 0, 960, 0, chipi(2, p(2)), chipi(3, p(2)));
            if (showresist)
            {
                equipinfo(p(1), wx + 320, wy + 60 + cnt * 19 + 2);
                s = strmid(s, 0, 22);
            }
        }
        else
        {
            p(1) = -1;
        }
        cs_list(
            cs == cnt,
            s,
            wx + 140 - 26,
            wy + 60 + cnt * 19 - 1,
            30,
            p(1) != -1,
            p(1));
        pos(wx + 640 - strlen_u(s(1)) * 7, wy + 60 + cnt * 19 + 2);
        mes(s(1));
    }
    cs_bk = cs;
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        cs_prev = cs;
        body = p;
        if (cdata_body_part(cc, body) % 10000 != 0)
        {
            gdata(808) = 1;
            ci = cdata_body_part(cc, body) % 10000 - 1;
            if (is_cursed(inv[ci].curse_state))
            {
                txt(lang(
                    itemname(ci) + u8"は外せない。"s,
                    ""s + itemname(ci) + u8" can't be taken off."s));
                goto label_2051_internal;
            }
            unequip_item(cc);
            refresh_character(cc);
            snd(13);
            txtnew();
            txt(lang(
                itemname(ci) + u8"を外した。"s,
                u8"You unequip "s + itemname(ci) + u8"."s));
            if (cdata_body_part(cc, body) / 10000 == 5)
            {
                equip_melee_weapon();
            }
            render_hud();
            goto label_2051_internal;
        }
        nowindowanime = 1;
        menucycle = 0;
        invctrl = 6;
        snd(100);
        result.turn_result = turn_result_t::ctrl_inventory;
        return result;
    }
    if (key == key_identify)
    {
        p = list(0, pagesize * page + cs);
        if (cdata_body_part(cc, p) % 10000 != 0)
        {
            ci = cdata_body_part(cc, p) % 10000 - 1;
            cs_prev = cs;
            show_item_description();
            nowindowanime = 1;
            returnfromidentify = 0;
            screenupdate = -1;
            update_screen();
            result.turn_result = turn_result_t::menu_equipment;
            return result;
        }
    }
    if (key == key_mode)
    {
        if (showresist == 1)
        {
            showresist = 0;
        }
        else
        {
            showresist = 1;
        }
        snd(1);
        goto label_2051_internal;
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 3)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 3;
                }
            }
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    csctrl = 0;
                    result.turn_result = turn_result_t::menu_character_sheet;
                    return result;
                }
                if (curmenu == 1)
                {
                    result.turn_result = turn_result_t::menu_equipment;
                    return result;
                }
                if (curmenu == 2)
                {
                    result.turn_result = turn_result_t::menu_feats;
                    return result;
                }
                if (curmenu == 3)
                {
                    result.turn_result = turn_result_t::menu_materials;
                    return result;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2051_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2051_internal;
        }
    }
    if (key == key_cancel)
    {
        menucycle = 0;
        create_pcpic(cc, true);
        update_screen();
        result.turn_result = turn_result_t::pc_turn_user_error;
        return result;
    }
    goto label_2052_internal;
}



turn_result_t do_get_command()
{
    const auto item_info = cell_itemoncell(cdata[0].position);
    const auto number = item_info.first;
    const auto item = item_info.second;

    if (map(cdata[0].position.x, cdata[0].position.y, 6) != 0
        && gdata_current_map != 35 && number == 0)
    {
        cell_featread(cdata[0].position.x, cdata[0].position.y);
        if (feat(1) == 29)
        {
            if (feat < tile_plant + 2)
            {
                txt(lang(u8"芽を摘み取った。"s, u8"You nip a young plant."s));
                map(cdata[0].position.x, cdata[0].position.y, 6) = 0;
                return turn_result_t::turn_end;
            }
            if (feat == tile_plant + 3)
            {
                txt(lang(
                    u8"枯れた草を摘み取った。"s, u8"You nip a dead plant."s));
                map(cdata[0].position.x, cdata[0].position.y, 6) = 0;
                return turn_result_t::turn_end;
            }
            if (!inv_getspace(0))
            {
                txt(lang(
                    u8"バックパックが一杯だ。"s, u8"Your inventory is full."s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
            label_2236();
            label_2235(
                chipm(0, map(cdata[0].position.x, cdata[0].position.y, 0)) == 2
                    ? 1
                    : 0);
            if (feat(2) == 40)
            {
                autosave = 1 * (gdata_current_map != 35);
            }
            refresh_burden_state();
            return turn_result_t::turn_end;
        }
        if (mdata(6) == 1 && feat(1) == 15 && feat(2) + feat(3) * 100 >= 300
            && feat(2) + feat(3) * 100 < 450)
        {
            txt(lang(
                u8"本当にこの建物を撤去する？（注意！建物と中の物は完全に失われます）"s,
                u8"Really remove this building?"s));
            ELONA_YES_NO_PROMPT();
            rtval = show_prompt(promptx, prompty, 160);
            if (rtval != 0)
            {
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
            area = feat(2) + feat(3) * 100;
            map(cdata[0].position.x, cdata[0].position.y, 6) = 0;
            adata(16, area) = 0;
            removeworker(area);
            label_1749();
            ctrl_file(file_operation_t::_13);
            snd(58);
            txt(lang(u8"建物を撤去した。"s, u8"You remove the building."s));
            return turn_result_t::turn_end;
        }
    }

    if (number == 0)
    {
        if ((mdata(6) == 3 || mdata(6) == 2)
            && chipm(0, map(cdata[0].position.x, cdata[0].position.y, 0)) == 4)
        {
            snd(83);
            txt(lang(
                u8"雪をかきあつめた。"s, u8"You rake up a handful of snow."s));
            if (!actionsp(0, 10))
            {
                txt(lang(
                    u8"疲労し過ぎて失敗した！"s, u8"You are too exhausted!"s));
                return turn_result_t::turn_end;
            }
            flt();
            {
                int stat = itemcreate(0, 587, -1, -1, 0);
                if (stat != 0)
                {
                    inv[ci].curse_state = curse_state_t::none;
                    inv[ci].identification_state =
                        identification_state_t::completely_identified;
                    item_stack(0, ci, 1);
                }
            }
            return turn_result_t::turn_end;
        }
        ++msgdup;
        txt(lang(u8"あなたは空気をつかんだ。"s, u8"You grasp at the air."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }

    ci = item;
    if (number > 1)
    {
        invctrl = 3;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if ((inv[ci].own_state > 0 && inv[ci].own_state < 3)
        || inv[ci].own_state == 5)
    {
        snd(27);
        ++msgdup;
        if (inv[ci].own_state == 2)
        {
            txt(lang(u8"それは持ち運べない。"s, u8"You can't carry it."s));
        }
        if (inv[ci].own_state == 1 || inv[ci].own_state == 5)
        {
            txt(lang(
                    u8"それはあなたの物ではない。"s,
                    u8"It's not your property."s),
                lang(
                    u8"盗むなんてとんでもない。"s,
                    u8"You can't just take it."s),
                lang(u8"それは拾えない。"s, u8"It's not yours."s));
        }
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    in = inv[ci].number;

    int stat = pick_up_item();
    if (stat == 1 || stat == -1)
    {
        return turn_result_t::turn_end;
    }
    else
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
}



turn_result_t try_interact_with_npc()
{
    if (cdata[tc].continuous_action_turn != 0)
    {
        txt(lang(
            name(tc) + u8"は忙しい。"s,
            name(tc) + u8" "s + is(tc) + u8" busy now."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    menucycle = 1;
    invally = 1;
    invctrl = 10;
    snd(100);
    menu_result mr = ctrl_inventory();
    assert(mr.turn_result != turn_result_t::none);
    return mr.turn_result;
}



void sort_list_by_column1()
{
    if (listmax < 1)
    {
        return;
    }
    while (1)
    {
        p = 0;
        for (int cnt = 0, cnt_end = (listmax - 1); cnt < cnt_end; ++cnt)
        {
            if (list(1, cnt) > list(1, cnt + 1))
            {
                p(0) = list(0, cnt);
                p(1) = list(1, cnt);
                list(0, cnt) = list(0, cnt + 1);
                list(1, cnt) = list(1, cnt + 1);
                list(0, cnt + 1) = p;
                list(1, cnt + 1) = p(1);
                p = 1;
            }
        }
        if (p == 0)
        {
            break;
        }
    }
    return;
}



void label_2057()
{
    if (listmax < 1)
    {
        return;
    }
    while (1)
    {
        p = 0;
        for (int cnt = 0, cnt_end = (listmax - 1); cnt < cnt_end; ++cnt)
        {
            if (list(1, cnt) > list(1, cnt + 1))
            {
                p(0) = list(0, cnt);
                p(1) = list(1, cnt);
                list(0, cnt) = list(0, cnt + 1);
                list(1, cnt) = list(1, cnt + 1);
                list(0, cnt + 1) = p;
                list(1, cnt + 1) = p(1);
                s(0) = listn(0, cnt);
                s(1) = listn(1, cnt);
                listn(0, cnt) = listn(0, cnt + 1);
                listn(1, cnt) = listn(1, cnt + 1);
                listn(0, cnt + 1) = s;
                listn(1, cnt + 1) = s(1);
                p = 1;
            }
        }
        if (p == 0)
        {
            break;
        }
    }
    return;
}



void savecycle()
{
    if (menucycle == 1)
    {
        menucycle = 0;
        if (invally == 0 && invcontainer == 0)
        {
            lastctrl = invctrl;
        }
    }
    return;
}



void show_item_description()
{
    int inhmax = 0;
    if (ci < 0)
    {
        dialog(
            u8"暫定エラー回避処置です。お手数ですが、どの持ち物メニュー(例えば飲む、振る、食べるなど）から調査(xキー)を押したか報告お願いします。"s);
        return;
    }
    snd(26);
    page_save();
    page = 0;
    pagesize = 15;
    listmax = 0;
    p = 0;
    s = "";
    reftype = the_item_db[inv[ci].id]->category;
    getinheritance(ci, inhlist, inhmax);
    dbid = inv[ci].id;
    access_item_db(2);
    access_item_db(17);
    if (inv[ci].identification_state
        == identification_state_t::completely_identified)
    {
        std::string buf = trim_item_description(description(3), true);
        if (buf != ""s)
        {
            list(0, p) = 7;
            listn(0, p) = buf;
            ++p;
        }
    }
    if (inv[ci].identification_state
        >= identification_state_t::almost_identified)
    {
        if (inv[ci].material != 0)
        {
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"それは"s
                    + i18n::_(
                          u8"item_material",
                          std::to_string(inv[ci].material),
                          u8"name")
                    + u8"で作られている"s,
                u8"It is made of "s
                    + i18n::_(
                          u8"item_material",
                          std::to_string(inv[ci].material),
                          u8"name")
                    + u8"."s);
            ++p;
        }
        if (inv[ci].material == 8)
        {
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"それは装備している間、エーテルの病の進行を早める"s,
                u8"It speeds up the ether disease while equipping."s);
            ++p;
        }
        if (ibit(1, ci))
        {
            list(0, p) = 7;
            listn(0, p) =
                lang(u8"それは酸では傷つかない"s, u8"It is acidproof."s);
            ++p;
        }
        if (ibit(2, ci))
        {
            list(0, p) = 7;
            listn(0, p) =
                lang(u8"それは炎では燃えない"s, u8"It is fireproof."s);
            ++p;
        }
        if (ibit(5, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(u8"それは貴重な品だ"s, u8"It is precious."s);
            ++p;
        }
        if (ibit(8, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"それはエヘカトルの祝福を受けている"s,
                u8"It is blessed by Ehekatl."s);
            ++p;
        }
        if (ibit(9, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(u8"それは盗品だ"s, u8"It is a stolen item."s);
            ++p;
        }
        if (ibit(10, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(u8"それは生きている"s, u8"It is alive."s)
                + u8" [Lv:"s + inv[ci].param1 + u8" Exp:"s
                + clamp(inv[ci].param2 * 100 / calcexpalive(inv[ci].param1),
                        0,
                        100)
                + u8"%]"s;
            ++p;
        }
        if (ibit(16, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"それはショウルームでのみ使用できる。"s,
                u8"It can be only used in a show room."s);
            ++p;
        }
        if (ibit(17, ci))
        {
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"それは心温まる手作り品だ"s, u8"It is a hand-made item."s);
            ++p;
        }
        if (inv[ci].dice_x != 0)
        {
            const auto pierce = calc_rate_to_pierce(inv[ci].id);
            list(0, p) = 5;
            listn(0, p) = lang(
                              u8"それは武器として扱うことができる"s,
                              u8"It can be wielded as a weapon."s)
                + u8" ("s + inv[ci].dice_x + u8"d"s + inv[ci].dice_y
                + lang(u8" 貫通 "s, u8" Pierce "s) + pierce + u8"%)"s;
            ++p;
            if (reftype == 10000)
            {
                if (inv[ci].weight <= 1500)
                {
                    list(0, p) = 5;
                    listn(0, p) = lang(
                        u8"それは片手でも扱いやすい"s,
                        u8"It is a light weapon."s);
                    ++p;
                }
                if (inv[ci].weight >= 4000)
                {
                    list(0, p) = 5;
                    listn(0, p) = lang(
                        u8"それは両手持ちに適している"s,
                        u8"It is a heavy weapon."s);
                    ++p;
                }
            }
        }
        if (inv[ci].hit_bonus != 0 || inv[ci].damage_bonus != 0)
        {
            list(0, p) = 5;
            listn(0, p) = lang(
                u8"それは攻撃修正に"s + inv[ci].hit_bonus
                    + u8"を加え、ダメージを"s + inv[ci].damage_bonus
                    + u8"増加させる"s,
                u8"It modifies hit bonus by "s + inv[ci].hit_bonus
                    + u8" and damage bonus by "s + inv[ci].damage_bonus
                    + u8"."s);
            ++p;
        }
        if (inv[ci].pv != 0 || inv[ci].dv != 0)
        {
            list(0, p) = 6;
            listn(0, p) = lang(
                u8"それはDVを"s + inv[ci].dv + u8"上昇させ、PVを"s + inv[ci].pv
                    + u8"上昇させる"s,
                u8"It modifies DV by "s + inv[ci].dv + u8" and PV by "s
                    + inv[ci].pv + u8"."s);
            ++p;
        }
        if (inv[ci].id == 701)
        {
            int card_count{};
            for (int i = 0; i < 1000; ++i)
            {
                if (card(0, i))
                    ++card_count;
            }
            int npc_count{};
            for (const auto& discord : the_character_db)
            {
                (void)discord;
                ++npc_count;
            }
            const auto percentage = std::min(100 * card_count / npc_count, 100);
            list(0, p) = 7;
            listn(0, p) = lang(
                u8"集めたカード: "s + card_count + u8"/" + npc_count + u8"("
                    + percentage + u8"%)",
                u8"Collected cards: "s + card_count + u8"/" + npc_count + u8"("
                    + percentage + u8"%)");
            ++p;
        }
    }
    if (inv[ci].identification_state
        <= identification_state_t::partly_identified)
    {
        list(0, p) = 0;
        listn(0, p) = lang(
            u8"このアイテムに関する知識を得るには、鑑定する必要がある。"s,
            u8"You have to identify the item to gain knowledge."s);
        ++p;
    }
    if (inv[ci].identification_state
        == identification_state_t::completely_identified)
    {
        for (int cnt = 0; cnt < 15; ++cnt)
        {
            if (inv[ci].enchantments[cnt].id == 0)
            {
                break;
            }
            get_enchantment_description(
                inv[ci].enchantments[cnt].id,
                inv[ci].enchantments[cnt].power,
                reftype);
            listn(0, p) = lang(u8"それは"s, u8"It "s) + s;
            list(0, p) = rtval;
            list(1, p) = rtval(1);
            if (inhmax > 0)
            {
                int cnt2 = cnt;
                for (int cnt = 0, cnt_end = (inhmax); cnt < cnt_end; ++cnt)
                {
                    if (cnt2 == inhlist(cnt))
                    {
                        list(0, p) += 10000;
                        break;
                    }
                }
            }
            ++p;
        }
        if (ibit(15, ci))
        {
            list(0, p) = 4;
            listn(0, p) = lang(u8"相手は死ぬ"s, u8"The enemy dies."s);
            ++p;
        }
        if (jp)
        {
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                if (description(cnt) == ""s)
                {
                    continue;
                }
                list(0, p) = 0;
                listn(0, p) = "";
                ++p;
                std::string buf =
                    trim_item_description(description(cnt), false);
                notesel(buf);
                for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
                {
                    noteget(q, cnt);
                    constexpr size_t max_width = 66;
                    if (strlen_u(q) > max_width)
                    {
                        p(2) = 0;
                        for (size_t i = 0; i < strlen_u(q) / max_width + 1; ++i)
                        {
                            auto one_line = strutil::take_by_width(
                                q(0).substr(p(2)), max_width);
                            p(1) = one_line.size();
                            if (strutil::starts_with(q, u8"。", p(1) + p(2)))
                            {
                                one_line += u8"。";
                                p(1) += std::strlen(u8"。");
                            }
                            if (strutil::starts_with(q, u8"、", p(1) + p(2)))
                            {
                                one_line += u8"、";
                                p(1) += std::strlen(u8"、");
                            }
                            if (strmid(q, p(2), p(1)) == ""s)
                            {
                                break;
                            }
                            list(0, p) = -1;
                            listn(0, p) = one_line;
                            ++p;
                            p(2) += p(1);
                        }
                    }
                    else
                    {
                        list(0, p) = 0;
                        listn(0, p) = q;
                        if (cnt == noteinfo() - 1)
                        {
                            list(0, p) = -2;
                        }
                        ++p;
                    }
                }
            }
        }
    }
    if (p == 0)
    {
        list(0, p) = 0;
        listn(0, p) = lang(
            u8"特に情報はない"s,
            u8"There is no information about this object."s);
        ++p;
    }
    listmax = p;
    pagemax = (listmax - 1) / pagesize;
    if (dump_return == 1)
    {
        dump_return = 0;
        return;
    }
    windowshadow = 1;
label_2069_internal:
    key_list = key_enter;
    keyrange = 0;
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2070_internal:
    s(0) = lang(u8"アイテムの知識"s, u8"Known Information"s);
    s(1) = strhint4 + strhint3;
    display_window((windoww - 600) / 2 + inf_screenx, winposy(408), 600, 408);
    display_topic(itemname(ci), wx + 28, wy + 34);
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        font(14 - en * 2);
        color(0, 0, 0);
        pos(wx + 68, wy + 68 + cnt * 18);
        if (list(0, p) % 10000 == 1)
        {
            color(0, 100, 0);
        }
        if (list(0, p) % 10000 == 2)
        {
            color(0, 0, 100);
        }
        if (list(0, p) % 10000 == 3)
        {
            color(80, 100, 0);
        }
        if (list(0, p) % 10000 == 4)
        {
            color(80, 50, 0);
        }
        if (list(0, p) % 10000 == 9)
        {
            color(180, 0, 0);
        }
        if (list(0, p) % 10000 == 8)
        {
            color(0, 100, 100);
        }
        if (list(0, p) == -1)
        {
            font(13 - en * 2);
        }
        if (list(0, p) == -2)
        {
            font(13 - en * 2, snail::font_t::style_t::italic);
            pos(wx + ww - strlen_u(listn(0, p)) * 6 - 80, wy + 68 + cnt * 18);
        }
        mes(listn(0, p));
        color(0, 0, 0);
        if (list(0, p) > 0)
        {
            pos(wx + 40, wy + 61 + cnt * 18);
            gcopy(3, 72 + list(0, p) % 10000 * 24, 336, 24, 24);
        }
        if (list(0, p) > 10000)
        {
            pos(wx + 15, wy + 63 + cnt * 18);
            gcopy(3, 384, 360, 24, 24);
        }
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2069_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2069_internal;
        }
    }
    if (key == key_cancel || key == key_enter)
    {
        returnfromidentify = 1;
        return;
    }
    goto label_2070_internal;
}



int label_2072()
{
    if (cdata[cdata[cc].enemy_id].state != 1)
    {
        cdata[cc].enemy_id = 0;
    }
    else if (is_in_fov(cdata[cc].enemy_id) == 0)
    {
        cdata[cc].enemy_id = 0;
    }
    if (cdata[cc].enemy_id == 0)
    {
        label_2076();
        if (listmax != 0)
        {
            f = 0;
            if (cc == 0 || cdata[cc].relationship >= 0)
            {
                p(0) = -3;
                p(1) = -1;
                p(2) = 0;
            }
            else
            {
                p(0) = 10;
                p(1) = 0;
                p(2) = 0;
            }
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                int cnt2 = cnt;
                for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
                {
                    if (cdata[list(0, cnt)].relationship <= p(cnt2))
                    {
                        cdata[cc].enemy_id = list(0, cnt);
                        f = 1;
                        break;
                    }
                }
                if (f == 1)
                {
                    break;
                }
            }
        }
    }
    if (cdata[cc].enemy_id == 0 || cdata[cc].blind != 0)
    {
        if (cc == 0)
        {
            txt(lang(
                u8"ターゲットが見当たらない。"s, u8"You find no target."s));
            update_screen();
        }
        return 0;
    }
    if (cdata[cc].enemy_id < 0)
    {
        cdata[cc].enemy_id = 0;
    }
    return 1;
}



int label_2073()
{
    s = txttargetlevel(cc, tc);
    txt(s);
    txt(lang(
        u8"本当に"s + name(tc) + u8"を攻撃する？ "s,
        u8"Really attack "s + name(tc) + u8"? "s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    if (rtval == 0)
    {
        update_screen();
        return 1;
    }
    else
    {
        update_screen();
        return 0;
    }
}



turn_result_t do_fire_command()
{
    cc = 0;
    int stat = label_2072();
    if (stat == 0)
    {
        return turn_result_t::pc_turn_user_error;
    }
    tc = cdata[0].enemy_id;
    if (cdata[tc].relationship >= 0)
    {
        int stat = label_2073();
        if (stat == 0)
        {
            return turn_result_t::pc_turn_user_error;
        }
    }
    {
        int stat = can_do_ranged_attack();
        if (stat == -1)
        {
            ++msgdup;
            txt(lang(
                u8"射撃用の道具を装備していない。"s,
                u8"You need to equip a firing weapon."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (stat == -2)
        {
            ++msgdup;
            txt(lang(
                u8"矢/弾丸を装備する必要がある。"s,
                u8"You need to equip ammos or arrows."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (stat == -3)
        {
            ++msgdup;
            txt(lang(
                u8"矢/弾丸の種類が適していない。"s,
                u8"You're equipped with wrong type of ammos."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
    }
    label_2217();
    return turn_result_t::turn_end;
}



int can_do_ranged_attack()
{
    cw = -1;
    ammo = -1;
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        body = 100 + cnt;
        if (cdata_body_part(cc, cnt) % 10000 == 0)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 10)
        {
            cw = cdata_body_part(cc, cnt) % 10000 - 1;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 11)
        {
            ammo = cdata_body_part(cc, cnt) % 10000 - 1;
        }
    }
    if (cw == -1)
    {
        cw = 0;
        return -1;
    }
    if (ammo == -1)
    {
        if (inv[cw].skill != 111)
        {
            cw = 0;
            return -2;
        }
    }
    if (ammo != -1)
    {
        if (inv[cw].skill != inv[ammo].skill)
        {
            return -3;
        }
    }
    attackskill = inv[cw].skill;
    return 1;
}



void label_2076()
{
    listmax = 0;
    for (int cnt = 0; cnt < 2; ++cnt)
    {
        for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
            if (is_in_fov(cnt) == 0)
            {
                continue;
            }
            if (cc == 0 || cdata[cc].relationship >= 0)
            {
                if (cdata[cnt].relationship == 10)
                {
                    if (cnt == 0)
                    {
                        continue;
                    }
                }
            }
            x = cdata[cnt].position.x;
            y = cdata[cnt].position.y;
            if (x == cdata[cc].position.x && y == cdata[cc].position.y)
            {
                continue;
            }
            if (fov_los(cdata[cc].position.x, cdata[cc].position.y, x, y) == 0)
            {
                continue;
            }
            if (cdata[cnt].is_invisible() == 1)
            {
                if (cdata[cc].can_see_invisible() == 0)
                {
                    if (cdata[cnt].wet == 0)
                    {
                        continue;
                    }
                }
            }
            list(0, listmax) = cnt;
            list(1, listmax) = x;
            list(2, listmax) = y;
            ++listmax;
            if (listmax >= 499)
            {
                break;
            }
        }
        if (listmax != 0)
        {
            break;
        }
    }
    while (1)
    {
        if (listmax < 2)
        {
            break;
        }
        i = 1;
        for (int cnt = 0, cnt_end = (listmax - 1); cnt < cnt_end; ++cnt)
        {
            p = dist(
                cdata[cc].position.x,
                cdata[cc].position.y,
                list(1, cnt),
                list(2, cnt));
            p(1) = dist(
                cdata[cc].position.x,
                cdata[cc].position.y,
                list(1, cnt + 1),
                list(2, cnt + 1));
            if (p(1) < p)
            {
                p(0) = list(0, cnt);
                p(1) = list(1, cnt);
                p(2) = list(2, cnt);
                list(0, cnt) = list(0, cnt + 1);
                list(1, cnt) = list(1, cnt + 1);
                list(2, cnt) = list(2, cnt + 1);
                list(0, cnt + 1) = p;
                list(1, cnt + 1) = p(1);
                list(2, cnt + 1) = p(2);
                i = 0;
                break;
            }
        }
        if (i == 1)
        {
            break;
        }
    }
    return;
}



turn_result_t do_rest_command()
{
    do_rest();
    return turn_result_t::turn_end;
}



void label_2078()
{
    txt(lang(
        i18n::_(u8"ui", u8"action", u8"_"s + cdata[cc].continuous_action_id)
            + u8"を中断したほうがいいだろうか？ "s,
        u8"Do you want to cancel "s
            + i18n::_(
                  u8"ui", u8"action", u8"_"s + cdata[cc].continuous_action_id)
            + u8"? "s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    return;
}



turn_result_t do_exit_command()
{
    txtnew();
    if (gdata_current_map == 35)
    {
        txtef(3);
        txt(lang(
            u8"ユーザーマップの中ではセーブできない。それでも終了する？"s,
            u8"You can't save the game in a user made map. Exit anyway?"s));
    }
    else
    {
        txt(lang(
            u8"これまでの冒険を記録して終了する？"s,
            u8"Do you want to save the game and exit?"s));
    }
    ELONA_APPEND_PROMPT(lang(u8"はい"s, u8"Exit"s), u8"a"s, ""s + promptmax);
    ELONA_APPEND_PROMPT(
        lang(u8"いいえ"s, u8"Cancel"s), u8"b"s, ""s + promptmax);
    ELONA_APPEND_PROMPT(
        lang(u8"ゲーム設定"s, u8"Game Setting"s), u8"c"s, ""s + promptmax);
    rtval = show_prompt(promptx, prompty, 190);
    if (rtval == 0)
    {
        if (gdata_current_map != 35)
        {
            snd(44);
            save_game();
            txt(lang(
                u8"無事に記録された。"s,
                u8"Your game has been saved successfully."s));
            txt(lang(
                name(cc)
                    + u8"は静かに目を閉じた… (キーを押すと自動終了します)"s,
                u8"You close your eyes and peacefully fade away. (Hit any key to exit)"s));
            msg_halt();
            update_screen();
        }
        await(300);
        return turn_result_t::finish_elona;
    }
    if (rtval == 2)
    {
        snd(20);
        set_option();
    }
    update_screen();
    return turn_result_t::pc_turn_user_error;
}



int label_2080()
{
    f = 0;
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        p = gdata(160 + cnt);
        if (qdata(8, p) == 1)
        {
            if (qdata(3, p) == 1007 || qdata(3, p) == 1002)
            {
                f = 1;
                break;
            }
        }
    }
    return f;
}



void label_2081()
{
    int stat = label_2080();
    if (stat == 1)
    {
        txt(lang(
            u8"依頼請負中の帰還は法律で禁止されている。それでも帰還する？"s,
            u8"Returning while taking a quest if forbidden. Are you sure you want to return?"s));
        ELONA_YES_NO_PROMPT();
        rtval = show_prompt(promptx, prompty, 160);
        if (rtval != 0)
        {
            update_screen();
            return;
        }
    }
    p = 0;
    p = 0;
    i = 7;
    if (adata(30, i) == gdata(850))
    {
        list(0, p) = i;
        list(1, p) = 1;
        ELONA_APPEND_PROMPT(mapname(i), u8"null"s, ""s + promptmax);
        ++p;
    }
    for (int cnt = 0; cnt < 500; ++cnt)
    {
        i = 500 - (cnt + 1);
        if (adata(16, i) == 0)
        {
            continue;
        }
        if (adata(30, i) != gdata(850))
        {
            continue;
        }
        if (adata(16, i) == 7)
        {
            continue;
        }
        if (adata(6, i) == 0)
        {
            continue;
        }
        f = 0;
        if (adata(16, i) == 3 || adata(16, i) == 25 || adata(16, i) == 29
            || adata(16, i) == 42)
        {
            f = 1;
        }
        if (gdata_wizard)
        {
            if (adata(0, i) == 3 || adata(0, i) == 2)
            {
                f = 1;
            }
        }
        if (f == 1)
        {
            list(0, p) = i;
            list(1, p) = adata(6, i);
            ELONA_APPEND_PROMPT(
                mapname(i) + u8" "s + cnvrank((adata(6, i) - adata(17, i) + 1))
                    + lang(u8"階"s, u8" Lv"s),
                u8"null"s,
                ""s + promptmax);
            ++p;
        }
    }
    listmax = p;
    if (listmax == 0)
    {
        txt(lang(
            u8"この大陸には帰還できる場所が無い。"s,
            u8"You don't know any location you can return to"s));
        return;
    }
    txt(lang(u8"どの場所に帰還する？"s, u8"Where do you want to go?"s));
    display_msg(inf_screeny + inf_tiles);
    rtval = show_prompt(promptx, prompty, 240);
    update_screen();
    if (rtval >= 0)
    {
        txt(lang(
            u8"周囲の大気がざわめきだした。"s,
            u8"The air around you becomes charged."s));
        if (adata(16, gdata_current_map) == 8)
        {
            if (gdata_current_dungeon_level == adata(10, gdata_current_map))
            {
                if (adata(20, gdata_current_map) != -1)
                {
                    txt(lang(
                        u8"このままダンジョンを出ると、この階のクエストは達成できない…"s,
                        u8"The lord of the dungeon might disappear if you escape now."s));
                }
            }
        }
        gdata_destination_map = list(0, rtval);
        gdata_destination_dungeon_level = list(1, rtval);
        gdata_is_returning_or_escaping = 15 + rnd(15);
    }
    update_screen();
    return;
}



turn_result_t do_gatcha()
{
    int tmat = 0;
    screenupdate = -1;
    update_screen();
    if (inv[ci].id == 413)
    {
        tmat = 40;
    }
    if (inv[ci].id == 414)
    {
        tmat = 41;
    }
    txt(lang(
        ""s + matname(tmat) + u8"を使ってガシャガシャする？"s,
        u8"Pay "s + matname(tmat) + u8" to gasha-gasha?"s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    if (rtval == 0)
    {
        if (mat(tmat) > 0)
        {
            snd(56);
            matdelmain(tmat);
            if (inv[ci].id == 413)
            {
                p = 415;
            }
            else
            {
                p = 416;
            }
            int stat = itemcreate(
                -1, p, cdata[cc].position.x, cdata[cc].position.y, 0);
            if (stat != 0)
            {
                inv[ci].param2 = 0;
            }
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
        }
        else
        {
            txt(lang(
                ""s + matname(tmat) + u8"を持っていない…"s,
                u8"You don't have "s + matname(tmat) + u8"."s));
        }
    }
    return turn_result_t::turn_end;
}



int label_2083()
{
    if (inv[ci].id == 563)
    {
        if (sdata.get(inv[ci].param1, 0).original_level == 0)
        {
            txt(lang(
                u8"この本の内容には興味がない。それでも読む？ "s,
                u8"You are not interested in this book. Do you want to read it anyway? "s));
            ELONA_YES_NO_PROMPT();
            rtval = show_prompt(promptx, prompty, 160);
            if (rtval != 0)
            {
                return 0;
            }
        }
    }
    gdata(91) = 104;
    continuous_action_others();
    return 1;
}



void dump_player_info()
{
    cc = 0;
    access_class_info(2, cdatan(3, 0));
    buff = "";
    notesel(buff);
    noteadd(latest_version.long_string());
    noteadd(
        u8"キャラクター情報 "s + gdata_year + u8"年"s + gdata_month + u8"月"s
        + gdata_day + u8"日 "s + gdata_hour + u8"時"s + gdata_minute + u8"分  "s
        + mdatan(0));
    noteadd(""s);
    noteadd(
        u8"  "s + fixtxt((""s + cdatan(1, 0) + cdatan(0, 0)), 34)
        + i18n::_(u8"ui", u8"sex", u8"_"s + cdata[0].sex) + u8" "s + calcage(0)
        + u8"歳"s + u8"  "s + cdata[0].height + u8"cm"s + u8" "s
        + cdata[0].weight + u8"kg"s);
    noteadd(""s);
    noteadd(
        fixtxt(
            u8"種族       : "s + i18n::_(u8"race", cdatan(2, 0), u8"name"), 30)
        + fixtxt(
              (u8"信仰      : "s + i18n::_(u8"god", cdata[0].god_id, u8"name")),
              32));
    noteadd(
        fixtxt(u8"職業       : "s + classname, 30)
        + fixtxt((u8"所属      : "s + guildname()), 32));
    noteadd(
        fixtxt(u8"レベル     : "s + cdata[0].level, 30)
        + fixtxt((u8"経過日数  : "s + gdata_play_days), 32));
    noteadd(
        fixtxt(u8"残りBP     : "s + cdata[0].skill_bonus, 30)
        + fixtxt((u8"経過ターン: "s + gdata_play_turns), 32));
    noteadd(
        fixtxt(u8"金貨       : "s + cdata[0].gold, 30)
        + fixtxt((u8"殺害数    : "s + gdata_kill_count), 32));
    noteadd(
        fixtxt(u8"プラチナ   : "s + cdata[0].platinum_coin, 30)
        + fixtxt(
              (u8"最深到達  : "s + gdata_deepest_dungeon_level + u8"階相当"s),
              32));
    noteadd(fixtxt(
        u8"プレイ時間 : "s
            + cnvplaytime(
                  (gdata_play_time + timeGetTime() / 1000 - time_begin)),
        30));
    noteadd(""s);
    s(1) = u8"生命力    : "s + sdata(2, 0) + u8"("s
        + sdata.get(2, 0).original_level + u8")"s;
    s(2) = u8"マナ      : "s + sdata(3, 0) + u8"("s
        + sdata.get(3, 0).original_level + u8")"s;
    s(3) = u8"狂気度    : "s + cdata[0].insanity;
    s(4) = u8"速度      : "s + cdata[0].current_speed;
    s(5) = u8"名声度    : "s + cdata[0].fame;
    s(6) = u8"カルマ    : "s + cdata[0].karma;
    s(7) = u8"DV        : "s + cdata[0].dv;
    s(8) = u8"PV        : "s + cdata[0].pv;
    s(9) = "";
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        s = "";
        p = sdata.get(10 + cnt, 0).potential;
        if (p >= 200)
        {
            s += u8"superb"s;
        }
        else if (p >= 150)
        {
            s += u8"great"s;
        }
        else if (p >= 100)
        {
            s += u8"good"s;
        }
        else if (p >= 50)
        {
            s += u8"bad"s;
        }
        else
        {
            s += u8"hopeless"s;
        }
        s = fixtxt(s, 15);
        s = fixtxt(
                i18n::_(u8"ui", u8"attribute", u8"_"s + cnt) + u8"    : "s
                    + sdata((10 + cnt), 0) + u8"("s
                    + sdata.get(10 + cnt, 0).original_level + u8")"s,
                24)
            + s;
        noteadd(s + s((1 + cnt)));
    }
    noteadd(""s);
    label_2047(1);
    tc = 0;
    attackskill = 106;
    int evade = calc_evasion(tc);
    prot = calcattackdmg(2);
    noteadd(u8"回避    : "s + evade + u8"%"s);
    noteadd(
        u8"軽減    : "s + (100 - 10000 / (prot + 100)) + u8"% + "s + protdice1
        + u8"d"s + protdice2);
    noteadd(""s);
    noteadd(
        u8"------------------------------ 装備品 合計重量"s
        + cnvweight(cdata[cc].sum_of_equipment_weight) + u8" "s
        + cnveqweight(cc));
    noteadd(""s);
    listmax = 0;
    for (int cnt = 100; cnt < 130; ++cnt)
    {
        if (cdata_body_part(cc, cnt) != 0)
        {
            if (trait(206) != 0)
            {
                if (cdata_body_part(cc, cnt) / 10000 == 2)
                {
                    continue;
                }
            }
            if (trait(203) != 0)
            {
                if (cdata_body_part(cc, cnt) / 10000 == 9)
                {
                    continue;
                }
            }
            if (trait(205) != 0)
            {
                if (cdata_body_part(cc, cnt) / 10000 == 3)
                {
                    continue;
                }
            }
            p(1) = cdata_body_part(cc, cnt);
            q(0) = u8"装備なし"s;
            q(1) = "";
            if (p(1) % 10000 != 0)
            {
                p(1) = p(1) % 10000 - 1;
                q(0) = itemname(p(1));
                q(1) = cnvweight(inv[p(1)].weight);
                ci = p(1);
                dump_return = 1;
                show_item_description();
            }
            else
            {
                listmax = 0;
            }
            s = i18n::_(
                u8"ui",
                u8"body_part",
                u8"_"s + (cdata_body_part(cc, cnt) / 10000));
            if (strmid(s, 0, 2) == u8"　"s)
            {
                s = strmid(s, 2, 2);
            }
            noteadd(s + u8":"s);
            noteadd(q + u8" "s + q(1));
            for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
            {
                noteadd(listn(0, cnt));
            }
            noteadd(""s);
        }
    }
    noteadd(u8"------------------------------ 特徴"s);
    noteadd(""s);
    dump_return = 1;
    tc = 0;
    label_1969();
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        if (list(0, cnt) < 0)
        {
            continue;
        }
        if (list(1, cnt) < 10000)
        {
            continue;
        }
        noteadd(listn(0, cnt));
    }
    noteadd(""s);
    noteadd(u8"------------------------------ 仲間"s);
    noteadd(""s);
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            continue;
        }
        if (cnt == 0)
        {
            continue;
        }
        access_class_info(2, cdatan(3, cnt));
        noteadd(
            cdatan(0, cnt) + u8" "s
            + i18n::_(u8"race", cdatan(2, cnt), u8"name") + u8"の"s + classname
            + u8" "s + i18n::_(u8"ui", u8"sex", u8"_"s + cdata[cnt].sex)
            + u8" "s + calcage(cnt) + u8"歳"s + u8"  "s + cdata[cnt].height
            + u8"cm"s + u8" "s + cdata[cnt].weight + u8"kg"s);
        s = u8"レベル "s + cdata[cnt].level + u8" "s;
        if (cdata[cnt].is_married() == 1)
        {
            s += u8"婚約済み "s;
        }
        noteadd(s);
        noteadd(""s);
    }
    noteadd(u8"------------------------------ 称号"s);
    noteadd(""s);
    for (int cnt = 0; cnt < 9; ++cnt)
    {
        if (gdata(120 + cnt) < 10000)
        {
            noteadd(
                ""s + ranktitle(cnt) + u8" Rank."s + gdata((120 + cnt)) / 100);
            s = u8"給料: 約 "s + calcincome(cnt) + u8" gold  "s + u8"ノルマ: "s;
            gold += calcincome(cnt);
            if (cnt == 3 || cnt == 4 || cnt == 5 || cnt == 8)
            {
                s += u8"なし"s;
            }
            else
            {
                s += ""s + gdata((140 + cnt)) + u8"日以内"s;
            }
            noteadd(s);
            noteadd(""s);
        }
    }
    std::ofstream out{
        (filesystem::dir::save() / (playerid + u8".txt")).native(),
        std::ios::binary};
    out << s(0) << std::endl;
}



turn_result_t do_change_ammo_command()
{
    f = 0;
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        body = 100 + cnt;
        if (cdata_body_part(cc, cnt) % 10000 == 0)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 11)
        {
            ci = cdata_body_part(cc, cnt) % 10000 - 1;
            f = 1;
            break;
        }
    }
    if (f == 0)
    {
        txt(lang(u8"矢弾を装備していない。"s, u8"You need to equip an ammo."s));
        return turn_result_t::pc_turn_user_error;
    }
    listmax = 0;
    cs = -1;
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        if (inv[ci].enchantments[cnt].id == 0)
        {
            break;
        }
        enc = inv[ci].enchantments[cnt].id;
        i = enc / 10000;
        if (i != 0)
        {
            enc = enc % 10000;
            if (i == 9)
            {
                if (inv[ci].count == cnt)
                {
                    cs = cnt;
                }
                list(0, listmax) = cnt;
                ++listmax;
                continue;
            }
        }
    }
    if (listmax == 0)
    {
        inv[ci].count = -1;
        txt(lang(
            itemname(ci) + u8"は切り替えに対応していない。"s,
            itemname(ci) + u8" isn't capable of changing ammos."s));
        return turn_result_t::pc_turn_user_error;
    }
    snd(90);
    ++cs;
    if (cs >= listmax)
    {
        inv[ci].count = -1;
    }
    else
    {
        inv[ci].count = list(0, cs);
    }
    txt(lang(u8"現在の装填弾:"s, u8"Current Ammo Type:"s));
    for (int cnt = 0, cnt_end = (listmax + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt == 0)
        {
            s(0) = lang(u8"通常弾"s, u8"Normal"s);
            s(1) = lang(u8"無限"s, u8"Unlimited"s);
        }
        else
        {
            p = list(0, cnt - 1);
            i(0) = inv[ci].enchantments[p].power % 1000;
            i(1) = inv[ci].enchantments[p].power / 1000;
            s(0) = ammoname(inv[ci].enchantments[p].id % 10000);
            s(1) = ""s + i + u8"/"s + i(1);
        }
        s = s + u8":"s + s(1);
        if (inv[ci].count == cnt - 1)
        {
            s = u8"["s + s + u8"]"s;
            txtef(4);
        }
        else
        {
            s = u8" "s + s + u8" "s;
        }
        txt(u8" "s + s);
    }
    return turn_result_t::pc_turn_user_error;
}



void remove_card_and_figures()
{
    for (const auto& cnt : items(-1))
    {
        if (inv[cnt].id == 504 || inv[cnt].id == 503)
        {
            inv[cnt].number = 0;
        }
    }
    return;
}



void label_2088()
{
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        if (cdata[cnt].state == 1)
        {
            if (cdata[cnt].position.x < 0 || cdata[cnt].position.x >= mdata(0)
                || cdata[cnt].position.y < 0
                || cdata[cnt].position.y >= mdata(1))
            {
                cdata[cnt].position.x = 0;
                cdata[cnt].position.y = 0;
            }
        }
    }
    if (mdata(6) != 5)
    {
        if (mdata(18) != 0)
        {
            mdata(18) = 0;
        }
    }
    if (gdata_current_map == 7)
    {
        adata(17, gdata_current_map) = 0;
        adata(10, gdata_current_map) = 10;
        adata(12, gdata_current_map) = 1;
        mdata(8) = 1;
        evadd(17);
        calccosthire();
    }
    return;
}



void migrate_save_data()
{
    int p1 = 0;
    int p3 = 0;
    if (gdata_version != 1220)
    {
        dialog(lang(
            u8"Ver."s + gdata_version
                + u8"のセーブデータをアップデートします。"s,
            u8"Updating your save data from Ver."s + gdata_version
                + u8" now."s));
    }
    if (gdata_rights_to_succeed_to < 0)
    {
        gdata_rights_to_succeed_to = 1;
    }
    if (gdata_departure_date == 0)
    {
        gdata_departure_date = gdata_hour + gdata_day * 24
            + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12;
    }
    for (int i = 0; i < 20; ++i)
    {
        if (gdata(120 + i) == 0)
        {
            gdata(120 + i) = 10000;
        }
    }
    itemmemory(2, 289) = 0;
    itemmemory(2, 732) = 0;
    if (gdata_version < 1170)
    {
        if (adata(0, gdata_current_map) != 3)
        {
            dialog(lang(
                u8"アップデートを行うには、街中でセーブしたセーブデータが必要です。"s,
                u8"To update your game, please save your game in a town in the previous version then retry."s));
            finish_elona();
            return;
        }
        dialog(lang(
            u8"次のプロセスの完了までには、しばらく時間がかかることがあります。"s,
            u8"The next updating process may take a while to complete."s));
        memcpy(adata, 0, 300, adata, 0, 100, 8000);
        memcpy(adata, 0, 450, adata, 0, 150, 8000);
        for (int cnt = 100; cnt < 200; ++cnt)
        {
            p = cnt;
            for (int cnt = 0; cnt < 40; ++cnt)
            {
                adata(cnt, p) = 0;
            }
            for (const auto& entry : filesystem::dir_entries{
                     filesystem::dir::tmp(),
                     filesystem::dir_entries::type::file,
                     std::regex{u8R"(.*_)"s + std::to_string(p)
                                + u8R"(_.*\..*)"}})
            {
                const auto file = entry.path().filename();
                p1 = instr(filesystem::to_utf8_path(file), 0, u8"_"s);
                p2 = instr(filesystem::to_utf8_path(file), p1 + 1, u8"_"s);
                if (p >= 150)
                {
                    p3 = p - 150 + 450;
                }
                else
                {
                    p3 = p - 100 + 300;
                }
                const auto file_cnv = filesystem::dir::tmp()
                    / ((strmid(filesystem::to_utf8_path(file), 0, (p1 + 1))
                        + p3)
                       + strmid(
                             filesystem::to_utf8_path(file),
                             (p1 + p2 + 1),
                             20));
                const auto file_ = filesystem::dir::tmp() / file;
                bcopy(file_, file_cnv);
                fileadd(file_cnv);
                elona_delete(file_);
                fileadd(file_, 1);
            }
        }
        for (int cnt = 0; cnt < 500; ++cnt)
        {
            if (adata(16, cnt) != 0)
            {
                if (adata(30, cnt) == 0)
                {
                    adata(30, cnt) = 4;
                }
            }
        }
        gdata(850) = 4;
    }
    if (gdata_version != 1220)
    {
        gdata(79) = 1;
    }
    del_chara(56);
    if (gdata_version > 1220)
    {
        dialog(u8"invalid version"s);
        finish_elona();
        return;
    }
    gdata_version = 1220;
    cdata[0].has_own_sprite() = true;
    initialize_recipememory();
    return;
}



void label_2090()
{
    ++gdata(184);
    DIM3(qdata, 20, 500);
    SDIM3(qname, 40, 500);
    gdata_number_of_existing_quests = 0;
    initialize_adata();
    return;
}



void get_inheritance()
{
    ctrl_file(file_operation2_t::_4, u8"shop3.s2");
    p = 0;
    i = 0;
    for (int cnt = 0; cnt < 600; ++cnt)
    {
        if (cnt >= 10 && cnt < 20)
        {
            p += sdata.get(cnt, 56).original_level;
        }
        if (cnt >= 100 && cnt < 400)
        {
            i += sdata.get(cnt, 56).original_level;
        }
    }
    p = (p - 250) / 7;
    if (p < 5)
    {
        p = 5;
    }
    else if (p > 50)
    {
        p = 50;
    }
    i = (p - 250) / 8;
    if (i < 5)
    {
        i = 5;
    }
    else if (i > 40)
    {
        i = 40;
    }
    cdata[0].gold += clamp(cdata[56].gold / 100, 1000, 100000);
    cdata[0].platinum_coin += p;
    cdata[0].skill_bonus += i;
    for (int cnt = 0; cnt < 400; ++cnt)
    {
        mat(cnt) = mat(cnt) / 3;
    }
    return;
}



void load_gene_files()
{
    ctrl_file(file_operation_t::_15);
    DIM2(spell, 200);
    DIM2(spact, 500);
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        cdata[cnt].state = 0;
    }
    sdata.copy(56, 0);
    sdata.clear(0);
    cdata(56) = cdata(0);
    cdata(0).clear();
    for (const auto& cnt : items(-1))
    {
        inv[cnt].number = 0;
    }
    for (const auto& cnt : items(0))
    {
        if (inv[cnt].number == 0)
        {
            continue;
        }
        if (inv[cnt].id == 717)
        {
            lomiaseaster = 1;
        }
        if (inv[cnt].id == 511
            || the_item_db[inv[cnt].id]->subcategory == 53100)
        {
            continue;
        }
        if (inv[cnt].id == 578)
        {
            continue;
        }
        if (inv[cnt].quality == 6)
        {
            continue;
        }
        if (ibit(5, cnt))
        {
            continue;
        }
        if (the_item_db[inv[cnt].id]->category == 25000)
        {
            inv[cnt].count = -1;
        }
        inv[cnt].body_part = 0;
        item_copy(cnt, inv_getfreeid(-1));
    }
    for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
    {
        del_chara(cnt);
    }
    gdata_play_time = genetemp(805);
    return;
}



void save_gene()
{
    ctrl_file(file_operation_t::_14);
}



std::string getnpctxt(const std::string& prm_1068, const std::string& prm_1069)
{
    int p_at_m189 = 0;
    p_at_m189 = instr(txtbuff, 0, prm_1068);
    if (p_at_m189 == -1)
    {
        return prm_1069;
    }
    p_at_m189 += instr(txtbuff, p_at_m189, u8"\""s);
    if (p_at_m189 == -1)
    {
        return prm_1069;
    }
    return strmid(
        txtbuff,
        p_at_m189 + 1,
        clamp(instr(txtbuff, p_at_m189 + 1, u8"\""s), 0, 70));
}



void create_cnpc()
{
    elona_vector1<std::string> unres;
    if (initunid)
    {
        cdata[rc].cnpc_id = initunid - 1;
        initunid = 0;
    }
    cun = cdata[rc].cnpc_id;
    cdata[rc].id = 343;
    if (initlv != 0)
    {
        cdata[rc].level = initlv;
    }
    else
    {
        cdata[rc].level = clamp(userdata(2, cun), 1, 100);
    }
    cdata[rc].portrait = -1;
    creaturepack = 0;
    cdata[rc].ai_act_sub_freq = unaiactsubfreq(cun);

    cdata[rc].normal_actions.clear();
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        int action = userdata(15 + cnt, cun);
        if (action == 0)
            break;
        cdata[rc].normal_actions.push_back(action);
    }
    cdata[rc].special_actions.clear();
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        int action = userdata(20 + cnt, cun);
        if (action == 0)
            break;
        cdata[rc].special_actions.push_back(action);
    }

    if (userdatan(5, cun) != ""s)
    {
        SDIM3(unres, 6, 32);
        csvstr2(unres, userdatan(5, cun));
        for (int cnt = 0;; ++cnt)
        {
            if (cnt > 15 || unres(cnt) == ""s)
            {
                break;
            }
            sdata(elona::stoi(unres(cnt * 2)), rc) +=
                elona::stoi(unres((cnt * 2 + 1))) * 50;
        }
    }
    cdata[rc].can_talk = 1;
    cdatan(0, rc) = userdatan(1, cun);
    cdatan(5, rc) = userdatan(0, cun);
    cdata[rc].relationship = clamp(userdata(4, cun), -3, 10);
    cdata[rc].ai_calm = clamp(userdata(7, cun), 1, 4);
    cdata[rc].ai_move = clamp(userdata(8, cun), 0, 100);
    cdata[rc].ai_dist = clamp(userdata(9, cun), 1, 100);
    if (userdata(11, cun))
    {
        cdata[rc].element_of_unarmed_attack =
            clamp(userdata(11, cun), 5000000, 6400000);
    }
    cdata[rc].ai_heal = userdata(10, cun);
    access_race_info(3, userdatan(2, cun));
    access_class_info(3, userdatan(3, cun));
    cdata[rc].sex = userdata(3, cun);
    if (userdata(3, cun) != 0)
    {
        if (userdata(3, cun) != 1)
        {
            cdata[rc].sex = rnd(2);
        }
    }
    if (userdata(5, cun))
    {
        fixlv = clamp(userdata(5, cun), 0, 6);
    }
    cspecialeq = 0;
    cdata[rc].original_relationship = cdata[rc].relationship;
    fixaiact(rc);
    setunid(rc, cun);
    return;
}



void load_save_data()
{
    ELONA_LOG("Load save data: " << playerid);

    filemod = "";
    ctrl_file(file_operation_t::_10);
    const auto save_dir = filesystem::dir::save(playerid);
    buff(0).clear();
    if (!fs::exists(save_dir / u8"filelist.txt"))
    {
        ELONA_LOG("Load save data: from directory");
        for (const auto& entry :
             filesystem::dir_entries{save_dir,
                                     filesystem::dir_entries::type::file,
                                     std::regex{u8R"(.*\..*)"}})
        {
            buff += filesystem::to_utf8_path(entry.path().filename()) + '\n';
        }
    }
    else
    {
        ELONA_LOG("Load save data: from filelist.txt");
        std::ifstream in{(save_dir / u8"filelist.txt").native(),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) +=
                filesystem::to_utf8_path(filesystem::path(tmp).filename())
                + '\n';
        }
    }
    notesel(buff);
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(s, cnt);
        if (strutil::contains(s(0), u8".s2"))
        {
            bcopy(save_dir / s(0), filesystem::dir::tmp() / s(0));
        }
    }
    ctrl_file(file_operation_t::_7);
    migrate_save_data();
    set_item_info();
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (cdata[cnt].has_own_sprite() == 1 || cnt == 0)
        {
            create_pcpic(cnt, true);
        }
    }
    if (gdata_wizard == 1)
    {
        cdatan(1, 0) = u8"*Debug*"s;
    }
    refreshspeed(0);
    time_begin = timeGetTime() / 1000;
    return;
}



void save_game()
{
    ELONA_LOG("Save game: " << playerid);

    int save_f = 0;
    if (gdata_current_map == 35)
    {
        txtef(3);
        txt(lang(
            u8"ユーザーマップの中ではセーブできない。"s,
            u8"The game is not saved in a user map."s));
        update_screen();
        return;
    }
    ctrl_file(file_operation_t::_2);
    ctrl_file(file_operation2_t::_4, u8"inv_"s + mid + u8".s2");
    save_f = 0;
    for (const auto& entry : filesystem::dir_entries{
             filesystem::dir::save(), filesystem::dir_entries::type::dir})
    {
        if (filesystem::to_utf8_path(entry.path().filename()) == playerid)
        {
            save_f = 1;
            break;
        }
    }
    const auto save_dir = filesystem::dir::save(playerid);
    if (save_f == 0)
    {
        mkdir(save_dir);
    }
    notesel(filemod);
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        std::string save_s;
        noteget(save_s, cnt);
        if (save_s.empty())
            continue;
        const auto save_p = save_s.front() == '*';
        save_s = save_s.substr(1);
        const auto path = save_dir / filesystem::u8path(save_s);
        if (save_p)
        {
            bcopy(filesystem::dir::tmp() / filesystem::u8path(save_s), path);
        }
        else
        {
            if (fs::exists(path) && !fs::is_directory(path))
            {
                elona_delete(path);
            }
        }
    }
    ctrl_file(file_operation_t::_8);
    filemod = "";
    buff(0).clear();
    for (const auto& entry :
         filesystem::dir_entries{filesystem::dir::tmp(),
                                 filesystem::dir_entries::type::file,
                                 std::regex{u8R"(.*\..*)"}})
    {
        buff += filesystem::to_utf8_path(entry.path().filename()) + '\n';
    }
    notesel(buff);
    {
        std::ofstream out{
            (filesystem::dir::save(playerid) / u8"filelist.txt").native(),
            std::ios::binary};
        out << buff(0) << std::endl;
    }
    ELONA_LOG("Save game: finish");
}



turn_result_t do_enter_strange_gate()
{
    snd(49);
    gdata_previous_map2 = gdata_current_map;
    gdata_previous_dungeon_level = gdata_current_dungeon_level;
    gdata_previous_x = cdata[0].position.x;
    gdata_previous_y = cdata[0].position.y;
    gdata_destination_map = 35;
    gdata_destination_dungeon_level = 1;
    levelexitby = 2;
    return turn_result_t::exit_map;
}

main_menu_result_t main_menu_continue()
{
    cs = 0;
    cs_bk = -1;
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"void.bmp", 1);
    gzoom(4, 0, 0, 800, 600, windoww, windowh);
    gsel(0);
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh);
    gmode(2);
    if (jp)
    {
        s = u8"どの冒険を再開するんだい？"s;
    }
    else
    {
        s = u8"Which save game do you want to continue?"s;
    }
    draw_caption();
    keyrange = 0;
    int save_data_count = 0;
    for (const auto& entry : filesystem::dir_entries{
             filesystem::dir::save(), filesystem::dir_entries::type::dir})
    {
        s = filesystem::to_utf8_path(entry.path().filename());
        const auto header_filepath = filesystem::dir::save(s) / u8"header.txt";
        if (!fs::exists(header_filepath))
        {
            continue;
        }
        bload(header_filepath, playerheader);
        list(0, save_data_count) = save_data_count;
        listn(0, save_data_count) = s;
        listn(1, save_data_count) = ""s + playerheader;
        key_list(save_data_count) = key_select(save_data_count);
        ++keyrange;
        ++save_data_count;
    }
    windowshadow = 1;

    while (true)
    {
        if (jp)
        {
            s(0) = u8"冒険者の選択"s;
            s(1) = u8"BackSpace [削除]  "s + strhint3b;
        }
        else
        {
            s(0) = u8"Game Selection"s;
            s(1) = u8"BackSpace [Delete]  "s + strhint3b;
        }
        display_window(
            (windoww - 440) / 2 + inf_screenx, winposy(288, 1), 440, 288);
        cs_listbk();
        for (int cnt = 0, cnt_end = save_data_count; cnt < cnt_end; ++cnt)
        {
            x = wx + 20;
            y = cnt * 40 + wy + 50;
            display_key(x + 20, y - 2, cnt);
            font(11 - en * 2);
            pos(x + 48, y - 4);
            mes(listn(0, cnt));
            font(13 - en * 2);
            cs_list(cs == cnt, listn(1, cnt), x + 48, y + 8);
        }
        cs_bk = cs;
        if (save_data_count == 0)
        {
            font(14 - en * 2);
            pos(wx + 140, wy + 120);
            mes(u8"No save files found"s);
        }
        redraw();
        await(config::instance().wait1);
        key_check();
        cursor_check();
        p = -1;
        for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
        {
            if (key == key_select(cnt))
            {
                p = list(0, cnt);
                break;
            }
        }
        if (p != -1)
        {
            playerid = listn(0, p);
            snd(20);
            await(200);
            mode = 3;
            return main_menu_result_t::initialize_game;
        }
        if (ginfo(2) == 0)
        {
            if (save_data_count != 0)
            {
                if (getkey(snail::key::backspace))
                {
                    p = list(0, cs);
                    playerid = listn(0, p);
                    if (jp)
                    {
                        s = u8"本当に"s + playerid
                            + u8"を削除していいのかい？"s;
                    }
                    else
                    {
                        s = u8"Do you really want to delete "s + playerid
                            + u8" ?"s;
                    }
                    draw_caption();
                    ELONA_YES_NO_PROMPT();
                    rtval = show_prompt(promptx, prompty, 200);
                    if (rtval != 0)
                    {
                        return main_menu_result_t::main_menu_continue;
                    }
                    if (jp)
                    {
                        s = u8"本当の本当に"s + playerid
                            + u8"を削除していいのかい？"s;
                    }
                    else
                    {
                        s = u8"Are you sure you really want to delete "s
                            + playerid + u8" ?"s;
                    }
                    draw_caption();
                    ELONA_YES_NO_PROMPT();
                    rtval = show_prompt(promptx, prompty, 200);
                    if (rtval == 0)
                    {
                        snd(20);
                        ctrl_file(file_operation_t::_9);
                    }
                    return main_menu_result_t::main_menu_continue;
                }
            }
        }
        if (key == key_cancel)
        {
            return main_menu_result_t::main_title_menu;
        }
    }
}



main_menu_result_t main_menu_incarnate()
{
    cs = 0;
    cs_bk = -1;
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"void.bmp", 1);
    gzoom(4, 0, 0, 800, 600, windoww, windowh);
    gsel(0);
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh);
    gmode(2);
    if (jp)
    {
        s = u8"どの遺伝子を引き継ぐ？"s;
    }
    else
    {
        s = u8"Which gene do you want to incarnate?"s;
    }
    draw_caption();
    keyrange = 0;
    listmax = 0;
    for (const auto& entry : filesystem::dir_entries{
             filesystem::dir::save(), filesystem::dir_entries::type::dir})
    {
        s = filesystem::to_utf8_path(entry.path().filename());
        const auto gene_header_filepath =
            filesystem::dir::save(s) / u8"gene_header.txt";
        await();
        if (!fs::exists(gene_header_filepath))
        {
            continue;
        }
        bload(gene_header_filepath, playerheader);
        list(0, listmax) = listmax;
        listn(0, listmax) = s;
        listn(1, listmax) = ""s + playerheader;
        key_list(listmax) = key_select(listmax);
        ++keyrange;
        ++listmax;
    }
    windowshadow = 1;

    while (1)
    {
        if (jp)
        {
            s(0) = u8"遺伝子の選択"s;
            s(1) = strhint3b;
        }
        else
        {
            s(0) = u8"Gene Selection"s;
            s(1) = strhint3b;
        }
        display_window(
            (windoww - 440) / 2 + inf_screenx, winposy(288, 1), 440, 288);
        cs_listbk();
        for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
        {
            x = wx + 20;
            y = cnt * 40 + wy + 50;
            display_key(x + 20, y - 2, cnt);
            font(11 - en * 2);
            pos(x + 48, y - 4);
            mes(listn(0, cnt));
            font(13 - en * 2);
            cs_list(cs == cnt, listn(1, cnt), x + 48, y + 8);
        }
        cs_bk = cs;
        if (listmax == 0)
        {
            font(14 - en * 2);
            pos(wx + 140, wy + 120);
            mes(u8"No gene files found"s);
        }
        redraw();
        await(config::instance().wait1);
        key_check();
        cursor_check();
        p = -1;
        for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
        {
            if (key == key_select(cnt))
            {
                p = list(0, cnt);
                break;
            }
        }
        if (p != -1)
        {
            snd(20);
            geneuse = listn(0, p);
            playerid = listn(0, p);
            return main_menu_result_t::main_menu_new_game;
        }
        if (key == key_cancel)
        {
            return main_menu_result_t::main_title_menu;
        }
    }
    return main_menu_result_t::main_title_menu;
}



void initialize_fovmap_and_fovlist()
{
    elona_vector2<int> fovmap;
    DIM3(fovlist, 2, 15);
    DIM3(fovmap, 34, 30);
    if (cdata[0].vision_distance < 1)
    {
        cdata[0].vision_distance = 1;
    }
    if (cdata[0].vision_distance >= 15)
    {
        cdata[0].vision_distance = 14;
    }
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        y = cnt;
        for (int cnt = 0; cnt < 19; ++cnt)
        {
            x = cnt;
            if (dist(x * 10 / 12, y, 7, 7) < 7)
            {
                fovmap(x, y) = 1;
            }
        }
    }
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        y = cnt;
        p(1) = 0;
        for (int cnt = 0; cnt < 19; ++cnt)
        {
            x = cnt;
            p = fovmap(x, y);
            if (p != 0 && p(1) == 0)
            {
                fovlist(0, y) = x;
                p(1) = 1;
            }
            if (p == 0 && p(1) == 1)
            {
                fovlist(1, y) = x;
                break;
            }
        }
    }
    return;
}



int ask_direction()
{
    snd(26);
    gsel(4);
    x = (cdata[0].position.x - scx) * inf_tiles + inf_screenx - 48;
    y = (cdata[0].position.y - scy) * inf_tiles + inf_screeny - 48;
    gmode(0);
    pos(0, 0);
    gcopy(0, x, y, 144, 144);
    gsel(0);
    t = 0;
label_2128_internal:
    ++t;
    gmode(4, 28, 28, 200 - t / 2 % 20 * (t / 2 % 20));
    x = (cdata[0].position.x - scx) * inf_tiles + inf_screenx + 24;
    y = (cdata[0].position.y - scy) * inf_tiles + inf_screeny + 24;
    if (key_alt == 0)
    {
        pos(x, y - 48);
        grotate(3, 212, 432, 0, 28, 28);
        pos(x, y + 48);
        grotate(3, 212, 432, 1.0 * 3.14, 28, 28);
        pos(x + 48, y);
        grotate(3, 212, 432, 0.5 * 3.14, 28, 28);
        pos(x - 48, y);
        grotate(3, 212, 432, 1.5 * 3.14, 28, 28);
    }
    pos(x - 48, y - 48);
    grotate(3, 212, 432, 1.75 * 3.14, 28, 28);
    pos(x + 48, y + 48);
    grotate(3, 212, 432, 0.75 * 3.14, 28, 28);
    pos(x + 48, y - 48);
    grotate(3, 212, 432, 0.25 * 3.14, 28, 28);
    pos(x - 48, y + 48);
    grotate(3, 212, 432, 1.25 * 3.14, 28, 28);
    redraw();
    gmode(0);
    pos(x - 48 - 24, y - 48 - 24);
    gcopy(4, 0, 0, 144, 144);
    gmode(2);
    await(30);
    key_check(1);
    x = cdata[0].position.x;
    y = cdata[0].position.y;
    if (key == key_alter)
    {
        goto label_2128_internal;
    }
    if (key == key_wait || key == key_enter)
    {
        tlocx = x;
        tlocy = y;
        keyhalt = 1;
        return 1;
    }
    if (key == key_north)
    {
        if (key_alt)
        {
            goto label_2128_internal;
        }
        else
        {
            y -= 1;
        }
    }
    if (key == key_south)
    {
        if (key_alt)
        {
            goto label_2128_internal;
        }
        else
        {
            y += 1;
        }
    }
    if (key == key_west)
    {
        if (key_alt)
        {
            goto label_2128_internal;
        }
        else
        {
            x -= 1;
        }
    }
    if (key == key_east)
    {
        if (key_alt)
        {
            goto label_2128_internal;
        }
        else
        {
            x += 1;
        }
    }
    if (key == key_northwest)
    {
        x -= 1;
        y -= 1;
    }
    if (key == key_northeast)
    {
        x += 1;
        y -= 1;
    }
    if (key == key_southwest)
    {
        x -= 1;
        y += 1;
    }
    if (key == key_southeast)
    {
        x += 1;
        y += 1;
    }
    if (key != ""s)
    {
        if (x < 0 || y < 0 || x >= mdata(0) || y >= mdata(1))
        {
            x = cdata[0].position.x;
            y = cdata[0].position.y;
            keyhalt = 1;
            return 0;
        }
        if (x == cdata[0].position.x && y == cdata[0].position.y)
        {
            return 0;
        }
        tlocx = x;
        tlocy = y;
        keyhalt = 1;
        return 1;
    }
    goto label_2128_internal;
}



turn_result_t do_debug_console()
{
    notesel(dbm);
    buff = "";
    if (dbm == ""s)
    {
        noteadd(latest_version.long_string());
        noteadd(u8"Debug Console    Type \"?\" for help. Hit ESC to exit."s);
        noteadd(""s);
    }
    font(14 - en * 2);
    objmode(2);
    pos(0, 24);
    mesbox(dbm);
    pos(0, 0);
    mesbox(buff);
    objsel(2);
    while (1)
    {
        await(20);
        int a{};
        stick(a);
        if (a == 128)
        {
            return do_exit_debug_console();
        }
    }
}



turn_result_t do_exit_debug_console()
{
    clrobj(1);
    clrobj(2);
    if (dbg_exitshowroom == 1)
    {
        dbg_exitshowroom = 0;
        levelexitby = 4;
        return turn_result_t::exit_map;
    }
    return turn_result_t::pc_turn_user_error;
}



int efstatusfix(int doomed, int cursed, int none, int blessed)
{
    switch (efstatus)
    {
    case curse_state_t::doomed: return doomed;
    case curse_state_t::cursed: return cursed;
    case curse_state_t::none: return none;
    case curse_state_t::blessed: return blessed;
    default: assert(0);
    }
}



int label_2143()
{
    if (map(cdata[0].position.x, cdata[0].position.y, 6) == 0)
    {
        return 0;
    }
    if (feat(1) < 24 || 28 < feat(1))
    {
        return 0;
    }
    atxspot = 11;
    atxlv = gdata_current_dungeon_level;
    if (mdata(6) == 20)
    {
        atxspot = 9;
    }
    if (mdata(6) == 21)
    {
        atxspot = 12;
    }
    if (mdata(6) == 22)
    {
        atxspot = 10;
    }
    if (mdata(6) == 23)
    {
        atxspot = 12;
    }
    if (mdata(6) == 1)
    {
        atxlv = cdata[0].level / 2 + rnd(10);
        if (atxlv > 30)
        {
            atxlv = 30 + rnd((rnd(atxlv - 30) + 1));
        }
        if (4 <= gdata(62) && gdata(62) < 9)
        {
            atxspot = 10;
        }
        if (264 <= gdata(62) && gdata(62) < 363)
        {
            atxspot = 11;
        }
        if (9 <= gdata(62) && gdata(62) < 13)
        {
            atxspot = 10;
        }
        if (13 <= gdata(62) && gdata(62) < 17)
        {
            atxspot = 11;
        }
    }
    cell_featread(cdata[0].position.x, cdata[0].position.y);
    if (feat(1) == 27)
    {
        atxlv += sdata(161, 0) / 3;
    }
    if (feat(1) == 26)
    {
        atxspot = 13;
    }
    if (feat(1) == 25)
    {
        atxspot = 14;
    }
    if (feat(1) == 28)
    {
        atxspot = 15;
    }
    if (rnd(7) == 0)
    {
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            i = 5;
            if (atxspot == 14)
            {
                if (sdata(163, 0) < rnd(atxlv * 2 + 1) || rnd(10) == 0)
                {
                    txt(lang(
                        u8"採掘に失敗した。"s,
                        u8"Your mining attempt fails."s));
                    break;
                }
                i = 1;
                skillexp(163, 0, 40);
            }
            if (atxspot == 13)
            {
                if (sdata(185, 0) < rnd(atxlv * 2 + 1) || rnd(10) == 0)
                {
                    txt(lang(
                        u8"釣りに失敗した。"s,
                        u8"Your fishing attempt fails."s));
                    break;
                }
                i = 2;
                skillexp(185, 0, 40);
            }
            if (atxspot == 15)
            {
                if (sdata(180, 0) < rnd(atxlv * 2 + 1) || rnd(10) == 0)
                {
                    txt(lang(
                        u8"採取に失敗した。"s,
                        u8"Your searching attempt fails."s));
                    break;
                }
                i = 3;
                skillexp(180, 0, 30);
            }
            matgetmain(random_material(atxlv, 0), 1, i);
        }
    }
    if (rnd(50 + trait(159) * 20) == 0)
    {
        s = lang(u8"もう何もない。"s, u8"You can't find anything anymore."s);
        if (feat(1) == 26)
        {
            s = lang(u8"泉は干上がった。"s, u8"The spring dries up."s);
        }
        if (feat(1) == 25)
        {
            s = lang(
                u8"鉱石を掘りつくした。"s, u8"There's no more ore around."s);
        }
        if (feat(1) == 28)
        {
            s = lang(
                u8"もう目ぼしい植物は見当たらない。"s,
                u8"There's no more plant around."s);
        }
        txt(s);
        rowactend(cc);
        map(cdata[0].position.x, cdata[0].position.y, 6) = 0;
    }
    return 0;
}



void label_2144()
{
    cell_featset(movx, movy, 0);
    if (cdata[cc].god_id == core_god::mani)
    {
        txt(lang(u8"あなたは罠を解体した。"s, u8"You dismantle the trap."s));
        for (int cnt = 0, cnt_end = (rnd(3) + 1); cnt < cnt_end; ++cnt)
        {
            atxspot = 19;
            matgetmain(
                random_material(
                    gdata_current_dungeon_level,
                    gdata_current_dungeon_level / 5),
                1);
        }
    }
    else
    {
        txt(lang(u8"罠を解除した。"s, u8"You disarm the trap."s));
    }
}



void label_21452()
{
label_21451_internal:
    if (config::instance().scroll)
    {
        if (cc == 0)
        {
            label_1438();
        }
    }
    map(cdata[cc].position.x, cdata[cc].position.y, 1) = 0;
    cdata[cc].position.x = cdata[cc].next_position.x;
    cdata[cc].position.y = cdata[cc].next_position.y;
    map(cdata[cc].next_position.x, cdata[cc].next_position.y, 1) = cc + 1;
    if (cc == 0)
    {
        if (gdata_mount != 0)
        {
            cdata[gdata_mount].position.x = cdata[0].position.x;
            cdata[gdata_mount].position.y = cdata[0].position.y;
        }
    }
    movx = cdata[cc].position.x;
    movy = cdata[cc].position.y;
    if (map(movx, movy, 6) != 0)
    {
        cell_featread(movx, movy);
        if (feat(1) == 14)
        {
            if (feat(2) == 7)
            {
                if ((cdata[cc].is_floating() == 1 && cdata[cc].gravity == 0)
                    || cdata[cc].is_immune_to_mine() == 1)
                {
                    return;
                }
                if (feat(3) != 0)
                {
                    if (cc > 16)
                    {
                        return;
                    }
                }
            }
            if (feat(0) != tile_trap && cc == 0)
            {
                int stat = try_to_reveal();
                if (stat == 1)
                {
                    refx = movx;
                    refy = movy;
                    discover_trap();
                    feat(0) = tile_trap;
                }
            }
            refdiff = 100 + gdata_current_dungeon_level * 3;
            if (feat(0) == tile_trap)
            {
                refdiff = refdiff / 3;
                if (cc == 0)
                {
                    if (sdata(175, cc) != 0)
                    {
                        int stat = try_to_disarm_trap();
                        if (stat == 1)
                        {
                            label_2144();
                            return;
                        }
                        else
                        {
                            txt(lang(
                                u8"解除に失敗した。"s,
                                u8"You fail to disarm the trap."s));
                        }
                    }
                }
            }
            int stat = can_evade_trap();
            if (stat == 1)
            {
                if (is_in_fov(cc))
                {
                    txt(lang(
                        name(cc) + u8"は罠を避けた。"s,
                        name(cc) + u8" evade"s + _s(cc) + u8" a trap."s));
                }
                if (cc == 0)
                {
                    refx = movx;
                    refy = movy;
                    discover_trap();
                }
            }
            else
            {
                if (cc == 0)
                {
                    refx = movx;
                    refy = movy;
                    discover_trap();
                    snd(70);
                }
                efsource = 5;
                if (is_in_fov(cc))
                {
                    txt(lang(
                        aln(cc) + u8"罠にかかった！"s,
                        name(cc) + u8" activate"s + _s(cc) + u8" a trap!"s));
                }
                if (feat(2) == 4)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"墨が噴き出した。"s,
                            u8"Gallons of ink spreads."s));
                    }
                    dmgcon(cc, 4, 100 + gdata_current_dungeon_level * 2);
                }
                if (feat(2) == 6)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"刺激的な匂いがただよう。"s,
                            u8"Stimulative gas spreads."s));
                    }
                    dmgcon(cc, 3, 100 + gdata_current_dungeon_level * 2);
                }
                if (feat(2) == 5)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"臭い匂いがたちこめた。"s,
                            u8"Smelly gas spreads."s));
                    }
                    dmgcon(cc, 5, 100 + gdata_current_dungeon_level * 2);
                }
                if (feat(2) == 3)
                {
                    cell_featset(movx, movy, 0);
                    if (encfind(cc, 22) != -1)
                    {
                        if (is_in_fov(cc))
                        {
                            txt(lang(
                                u8"魔法の力がテレポートを防いだ。"s,
                                u8"Magical field prevents teleportation."s));
                        }
                        return;
                    }
                    for (int cnt = 0; cnt < 200; ++cnt)
                    {
                        cdata[cc].next_position.x = rnd(mdata(0) - 2) + 1;
                        cdata[cc].next_position.y = rnd(mdata(1) - 2) + 1;
                        cell_check(
                            cdata[cc].next_position.x,
                            cdata[cc].next_position.y);
                        if (cellaccess == 1)
                        {
                            if (is_in_fov(cc))
                            {
                                snd(72);
                                txt(lang(
                                    name(cc) + u8"は突然消えた。"s,
                                    u8"Suddenly, "s + name(cc) + u8" disappear"s
                                        + _s(cc) + u8"."s));
                            }
                            rowactend(cc);
                            update_screen();
                            break;
                        }
                    }
                    goto label_21451_internal;
                }
                if (feat(2) == 0)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"槍が地面から飛び出した。"s,
                            u8"Several spears fly out from the ground."s));
                    }
                    if (cdata[cc].is_floating() == 1 && cdata[cc].gravity == 0)
                    {
                        if (is_in_fov(cc))
                        {
                            txt(lang(
                                u8"しかし"s + name(cc)
                                    + u8"には届かなかった。"s,
                                u8"But they don't reach "s + name(cc)
                                    + u8"."s));
                        }
                    }
                    else
                    {
                        dmghp(
                            cc, rnd(gdata_current_dungeon_level * 2 + 10), -1);
                    }
                }
                if (feat(2) == 1)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"毒ガスが噴き出した。"s,
                            u8"Poisonous gas spreads."s));
                    }
                    dmgcon(cc, 1, 100 + gdata_current_dungeon_level * 2);
                }
                if (feat(2) == 2)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            u8"催眠ガスが噴き出した。"s,
                            u8"Sleeping gas spreads."s));
                    }
                    dmgcon(cc, 2, 100 + gdata_current_dungeon_level * 2);
                }
                if (feat(2) == 7)
                {
                    txtef(9);
                    txt(lang(u8" *チュドーン！* "s, u8"*kabooom*"s));
                    aniref = 0;
                    anix = movx;
                    aniy = movy;
                    play_animation(2);
                    cell_featset(movx, movy, 0);
                    dmghp(cc, 100 + rnd(200), -1);
                }
                efsource = 0;
            }
        }
    }
    return;
}



void label_2146()
{
    int performtips = 0;
    if (cdata[cc].continuous_action_id == 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は"s + itemname(ci) + u8"の演奏をはじめた。"s,
                name(cc) + u8" start"s + _s(cc) + u8" to play "s + itemname(ci)
                    + u8"."s));
        }
        cdata[cc].continuous_action_id = 6;
        cdata[cc].continuous_action_turn = 61;
        cdata[cc].continuous_action_item = ci;
        cdata[cc].quality_of_performance = 40;
        cdata[cc].tip_gold = 0;
        performtips = 0;
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        ci = cdata[cc].continuous_action_item;
        if (cdata[cc].continuous_action_turn % 10 == 0)
        {
            if (is_in_fov(cc))
            {
                if (rnd(10) == 0)
                {
                    txtef(4);
                    txt(lang(u8"ﾁｬﾗﾝ♪ "s, u8"*Tiki*"s),
                        lang(u8"ﾎﾟﾛﾝ♪ "s, u8"*Dan*"s),
                        lang(u8"ﾀﾞｰﾝ♪ "s, u8"*Lala*"s));
                }
                txtef(4);
                txt(lang(u8"ｼﾞｬﾝ♪ "s, u8"*Cha*"s));
            }
        }
        if (cdata[cc].continuous_action_turn % 20 == 0)
        {
            gold = 0;
            make_sound(cdata[cc].position.x, cdata[cc].position.y, 5, 1, 1, cc);
            for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                        + gdata_year * 24 * 30 * 12
                    >= cdata[cnt].time_interest_revive)
                {
                    cdata[cnt].interest = 100;
                }
                if (is_in_fov(cc))
                {
                    if (cdata[cnt].vision_flag != msync)
                    {
                        continue;
                    }
                }
                else if (
                    dist(
                        cdata[cc].position.x,
                        cdata[cc].position.y,
                        cdata[cnt].position.x,
                        cdata[cnt].position.y)
                    > 3)
                {
                    continue;
                }
                if (cdata[cnt].interest <= 0)
                {
                    continue;
                }
                if (cdata[cnt].sleep > 0)
                {
                    continue;
                }
                x = cdata[cnt].position.x;
                y = cdata[cnt].position.y;
                if (map(x, y, 1) == 0)
                {
                    continue;
                }
                tc = cnt;
                if (tc == cc)
                {
                    continue;
                }
                if (cdata[tc].relationship == -3)
                {
                    if (cdata[tc].hate == 0)
                    {
                        if (is_in_fov(tc))
                        {
                            txt(lang(
                                name(tc) + u8"は激怒した。"s,
                                name(tc) + u8" get"s + _s(tc) + u8" angry."s));
                        }
                    }
                    cdata[tc].hate = 30;
                    continue;
                }
                if (cc == 0)
                {
                    cdata[tc].interest -= rnd(15);
                    cdata[tc].time_interest_revive = gdata_hour + gdata_day * 24
                        + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12
                        + 12;
                }
                if (cdata[tc].interest <= 0)
                {
                    if (is_in_fov(cc))
                    {
                        txtef(9);
                        if (jp)
                        {
                            txt(u8"「飽きた」"s,
                                u8"「前にも聴いたよ」"s,
                                u8"「またこの曲か…」"s);
                        }
                        if (en)
                        {
                            txt(u8"\"Boring.\""s,
                                u8"\"I've heard this before.\""s,
                                u8"\"This song again?\""s);
                        }
                    }
                    cdata[tc].interest = 0;
                    continue;
                }
                if (sdata(183, cc) < cdata[tc].level)
                {
                    if (rnd(3) == 0)
                    {
                        cdata[cc].quality_of_performance -= cdata[tc].level / 2;
                        if (is_in_fov(cc))
                        {
                            txtef(9);
                            if (jp)
                            {
                                txt(u8"「引っ込め！」"s,
                                    u8"「うるさい！」"s,
                                    u8"「下手っぴ！」"s,
                                    u8"「何のつもりだ！」"s);
                            }
                            if (en)
                            {
                                txt(u8"\"Boo boo!\""s,
                                    u8"\"Shut it!\""s,
                                    u8"\"What are you doing!\""s,
                                    u8"\"You can't play shit.\""s);
                            }
                            txt(lang(
                                ""s + name(tc) + u8"は石を投げた。"s,
                                name(tc) + u8" throw"s + _s(tc)
                                    + u8" a rock."s));
                        }
                        dmg = rnd(cdata[tc].level + 1) + 1;
                        if (cdata[tc].id == 29)
                        {
                            dmg = cdata[tc].level * 2 + rnd(100);
                        }
                        dmghp(cc, dmg, -8);
                        if (cdata[cc].state == 0)
                        {
                            break;
                        }
                        continue;
                    }
                }
                if (rnd(3) == 0)
                {
                    p = cdata[cc].quality_of_performance
                            * cdata[cc].quality_of_performance
                            * (100 + inv[ci].param1 / 5) / 100 / 1000
                        + rnd(10);
                    p = clamp(
                        cdata[tc].gold * clamp(p(0), 1, 100) / 125,
                        0,
                        sdata(183, cc) * 100);
                    if (tc < 16)
                    {
                        p = rnd(clamp(p(0), 1, 100)) + 1;
                    }
                    if ((cdata[tc].character_role >= 1000
                         && cdata[tc].character_role < 2000)
                        || cdata[tc].character_role == 2003)
                    {
                        p /= 5;
                    }
                    if (p > cdata[tc].gold)
                    {
                        p = cdata[tc].gold;
                    }
                    cdata[tc].gold -= p;
                    cdata[cc].gold += p;
                    gold += p;
                }
                if (cdata[tc].level > sdata(183, cc))
                {
                    continue;
                }
                p = rnd(cdata[tc].level + 1) + 1;
                if (rnd(sdata(183, cc) + 1) > rnd(cdata[tc].level * 2 + 1))
                {
                    if (gdata_executing_immediate_quest_type == 1009)
                    {
                        if (tc >= 57)
                        {
                            cdata[tc].impression += rnd(3);
                            calcpartyscore();
                        }
                    }
                    if (rnd(2) == 0)
                    {
                        cdata[cc].quality_of_performance += p;
                    }
                    else if (rnd(2) == 0)
                    {
                        cdata[cc].quality_of_performance -= p;
                    }
                }
                if (encfindspec(ci, 60))
                {
                    if (rnd(15) == 0)
                    {
                        dmgcon(tc, 8, 500);
                    }
                }
                if (rnd(sdata(183, cc) + 1) > rnd(cdata[tc].level * 5 + 1))
                {
                    if (rnd(3) == 0)
                    {
                        if (is_in_fov(cc))
                        {
                            txtef(9);
                            if (jp)
                            {
                                txt(name(tc) + u8"は歓声を上げた。"s,
                                    name(tc) + u8"は目を輝かせた。"s,
                                    u8"「ブラボー」"s,
                                    u8"「いいぞ！」"s,
                                    name(tc) + u8"はうっとりした。"s,
                                    name(tc) + u8"は"s + name(cc)
                                        + u8"の演奏を褒め称えた。"s);
                            }
                            if (en)
                            {
                                txt(name(tc) + u8" clap"s + _s(tc) + u8"."s,
                                    name(tc) + u8" listene"s + _s(tc)
                                        + u8" to "s + name(cc) + your(cc)
                                        + u8" music joyfully."s,
                                    u8"\"Bravo!\""s,
                                    u8"\"Nice song.\""s,
                                    u8"\"Scut!\""s,
                                    name(tc) + u8" "s + is(tc)
                                        + u8" excited!"s);
                            }
                        }
                        cdata[cc].quality_of_performance += cdata[tc].level + 5;
                        if (cc == 0)
                        {
                            if (tc >= 16)
                            {
                                if (rnd(performtips * 2 + 2) == 0)
                                {
                                    x = clamp(
                                        cdata[cc].position.x - 1 + rnd(3),
                                        0,
                                        mdata(0) - 1);
                                    y = clamp(
                                        cdata[cc].position.y - 1 + rnd(3),
                                        0,
                                        mdata(1) - 1);
                                    cell_check(x, y);
                                    if (cellaccess == 0)
                                    {
                                        continue;
                                    }
                                    if (fov_los(
                                            cdata[tc].position.x,
                                            cdata[tc].position.y,
                                            x,
                                            y)
                                        == 0)
                                    {
                                        continue;
                                    }
                                    if (encfindspec(ci, 49))
                                    {
                                        flt(calcobjlv(
                                                cdata[cc].quality_of_performance
                                                / 8),
                                            calcfixlv(3 + (rnd(4) == 0)));
                                    }
                                    else
                                    {
                                        flt(calcobjlv(
                                                cdata[cc].quality_of_performance
                                                / 10),
                                            calcfixlv(3));
                                    }
                                    flttypemajor =
                                        fsetperform(rnd(length(fsetperform)));
                                    dbid = 0;
                                    if (gdata_executing_immediate_quest_type
                                        == 1009)
                                    {
                                        if (rnd(150) == 0)
                                        {
                                            dbid = 241;
                                        }
                                        if (rnd(150) == 0)
                                        {
                                            dbid = 622;
                                        }
                                        if (cdata[tc].level > 15)
                                        {
                                            if (rnd(1000) == 0)
                                            {
                                                dbid = 725;
                                            }
                                        }
                                        if (cdata[tc].level > 10)
                                        {
                                            if (rnd(800) == 0)
                                            {
                                                dbid = 726;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (rnd(10) == 0)
                                        {
                                            dbid = 724;
                                        }
                                        if (rnd(250) == 0)
                                        {
                                            dbid = 55;
                                        }
                                    }
                                    int stat = itemcreate(-1, dbid, x, y, 1);
                                    if (stat != 0)
                                    {
                                        --inv[ci].number;
                                        cell_refresh(
                                            inv[ci].position.x,
                                            inv[ci].position.y);
                                        ccbk = cc;
                                        cc = tc;
                                        aniref(0) = inv[ci].image;
                                        aniref(1) = inv[ci].color;
                                        anix = inv[ci].position.x;
                                        aniy = inv[ci].position.y;
                                        play_animation(15);
                                        cc = ccbk;
                                        ++inv[ci].number;
                                        cell_refresh(
                                            inv[ci].position.x,
                                            inv[ci].position.y);
                                        ++performtips;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (gold != 0)
            {
                cdata[cc].tip_gold += gold;
                if (is_in_fov(cc))
                {
                    snd(11);
                }
            }
        }
        return;
    }
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (cc != 0)
        {
            break;
        }
        if (cdata[cc].quality_of_performance < 0)
        {
            txt(lang(u8"まるで駄目だ…"s, u8"It is a waste of time."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 20)
        {
            txt(lang(u8"不評だった…"s, u8"Almost everyone ignores you."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 40)
        {
            txt(lang(
                u8"もっと練習しなくては…"s,
                u8"You need to practice lot more."s));
            break;
        }
        if (cdata[cc].quality_of_performance == 40)
        {
            txt(lang(u8"演奏を終えた。"s, u8"You finish your performance."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 60)
        {
            txt(lang(u8"いまいちだ。"s, u8"Not good."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 80)
        {
            txt(lang(
                u8"手ごたえがあった。"s,
                u8"People seem to like your performance."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 100)
        {
            txt(lang(
                u8"納得できる演奏ができた。"s,
                u8"Your performance is successful."s));
            break;
        }
        if (cdata[cc].quality_of_performance < 120)
        {
            txt(lang(u8"大盛況だ！"s, u8"Wonderful!"s));
            break;
        }
        if (cdata[cc].quality_of_performance < 150)
        {
            txt(lang(
                u8"素晴らしい！"s,
                u8"Great performance. Everyone cheers you."s));
            break;
        }
        txt(lang(u8"歴史に残る名演だ！"s, u8"A Legendary stage!"s));
        break;
    }
    if (cdata[cc].quality_of_performance > 40)
    {
        cdata[cc].quality_of_performance =
            cdata[cc].quality_of_performance * (100 + inv[ci].param1 / 5) / 100;
    }
    if (cdata[cc].tip_gold != 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は合計 "s + cdata[cc].tip_gold
                    + i18n::_(u8"ui", u8"gold") + u8"のおひねりを貰った。"s,
                u8"The audience gives "s + name(cc) + u8" total of "s
                    + cdata[cc].tip_gold + u8" gold pieces."s));
        }
    }
    rowactend(cc);
    int experience = cdata[cc].quality_of_performance - sdata(183, cc) + 50;
    if (experience > 0)
    {
        skillexp(183, cc, experience, 0, 0);
    }
    return;
}



void label_2147()
{
    int sexhost = 0;
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 11;
        cdata[cc].continuous_action_turn = 25 + rnd(10);
        cdata[cc].continuous_action_target = tc;
        cdata[tc].continuous_action_id = 11;
        cdata[tc].continuous_action_turn = cdata[cc].continuous_action_turn * 2;
        cdata[tc].continuous_action_target = cc + 10000;
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は服を脱ぎ始めた。"s,
                name(cc) + u8" begin"s + _s(cc) + u8" to take "s + his(cc)
                    + u8" clothes off."s));
        }
        return;
    }
    sexhost = 1;
    tc = cdata[cc].continuous_action_target;
    if (tc >= 10000)
    {
        tc -= 10000;
        sexhost = 0;
    }
    if (cdata[tc].state != 1 || cdata[tc].continuous_action_id != 11)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"「そ、その"s
                    + i18n::_(u8"ui", u8"sex2", u8"_"s + cdata[tc].sex)
                    + u8"とは体だけの関係"s + _da() + _ore(3)
                    + u8"は何も知らないから、命だけは…！」"s,
                u8"\"I-I don't really know that "s
                    + i18n::_(u8"ui", u8"sex2", u8"_"s + cdata[tc].sex)
                    + u8". Please spare my life!\""s));
        }
        rowactend(cc);
        rowactend(tc);
        return;
    }
    if (cc == 0)
    {
        if (!actionsp(0, 1 + rnd(2)))
        {
            txt(lang(u8"疲労し過ぎて失敗した！"s, u8"You are too exhausted!"s));
            rowactend(cc);
            rowactend(tc);
            return;
        }
    }
    cdata[cc].emotion_icon = 317;
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (sexhost == 0)
        {
            if (cdata[cc].continuous_action_turn % 5 == 0)
            {
                if (is_in_fov(cc))
                {
                    txtef(9);
                    if (jp)
                    {
                        txt(u8"「きくぅ」"s,
                            u8"「もふもふ」"s,
                            u8"「くやしい、でも…」"s,
                            u8"「はぁはぁ！」"s,
                            u8"「ウフフフ」"s);
                    }
                    if (en)
                    {
                        txt(u8"\"Yes!\""s,
                            u8"\"Ohhh\""s,
                            u8"*gasp*"s,
                            u8"*rumble*"s,
                            u8"\"come on!\""s);
                    }
                }
            }
        }
        return;
    }
    if (sexhost == 0)
    {
        rowactend(cc);
        return;
    }
    for (int cnt = 0; cnt < 2; ++cnt)
    {
        int c{};
        if (cnt == 0)
        {
            c = cc;
        }
        else
        {
            c = tc;
        }
        cdata[cc].drunk = 0;
        if (cnt == 1)
        {
            if (rnd(3) == 0)
            {
                dmgcon(c, 11, 500);
            }
            if (rnd(5) == 0)
            {
                dmgcon(c, 3, 500);
            }
            dmgcon(c, 11, 300);
            healsan(c, 10);
            skillexp(11, c, 250 + (c >= 57) * 1000);
            skillexp(15, c, 250 + (c >= 57) * 1000);
        }
        if (rnd(15) == 0)
        {
            dmgcon(c, 12, 200);
        }
        skillexp(17, c, 250 + (c >= 57) * 1000);
    }
    sexvalue = sdata(17, cc) * (50 + rnd(50)) + 100;
    if (is_in_fov(cc))
    {
        txtef(9);
        if (jp)
        {
            txt(u8"「よかった"s + _yo(3),
                u8"「す、すごい"s + _yo(3),
                u8"「も、もうだめ"s + _da(3),
                u8"「は、激しかった"s + _yo(3),
                u8"「か、完敗"s + _da(3));
        }
        if (en)
        {
            txt(u8"\"You are awesome!"s,
                u8"\"Oh my god...."s,
                u8"\"Okay, okay, you win!"s,
                u8"\"Holy...!"s);
        }
        txtef(20);
        if (tc == 0)
        {
            txt(lang(u8"」"s, u8"\""s));
        }
    }
    if (tc != 0)
    {
        if (cdata[tc].gold >= sexvalue)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"！さあ、小遣いを受け取って"s + _kure(3) + u8"」"s,
                    u8"Here, take this.\""s));
            }
        }
        else
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"！これが"s + _ore(3) + u8"の財布の中身の全て"s + _da()
                        + u8"」"s,
                    u8"Take this money, it's all I have!\""s));
                if (rnd(3) == 0)
                {
                    if (cc != 0)
                    {
                        txt(lang(
                            name(cc) + u8"は激怒した。「なめてんの？」"s,
                            name(cc)
                                + u8" gets furious, "s
                                  u8"\"And you think you can just run away?\""s));
                        cdata[cc].enemy_id = tc;
                        cdata[cc].hate = 20;
                    }
                }
            }
            if (cdata[tc].gold <= 0)
            {
                cdata[tc].gold = 1;
            }
            sexvalue = cdata[tc].gold;
        }
        cdata[tc].gold -= sexvalue;
        if (cc == 0)
        {
            modimp(tc, 5);
            flt();
            itemcreate(
                -1, 54, cdata[cc].position.x, cdata[cc].position.y, sexvalue);
            txt(lang(
                u8"何かが足元に転がってきた。"s,
                u8"Something is put on the ground."s));
            modify_karma(0, -1);
        }
        else
        {
            cdata[cc].gold += sexvalue;
        }
    }
    rowactend(cc);
    rowactend(tc);
    return;
}



void continuous_action_others()
{
    if (cc != 0)
    {
        rowactend(cc);
        return;
    }
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 10;
        cdata[cc].continuous_action_item = ci;
        cdata[cc].continuous_action_target = tc;
        if (gdata(91) == 105)
        {
            txt(lang(
                itemname(ci, 1) + u8"に目星をつけた。"s,
                u8"You target "s + itemname(ci, 1) + u8"."s));
            cdata[cc].continuous_action_turn =
                2 + clamp(inv[ci].weight / 500, 0, 50);
        }
        if (gdata(91) == 100)
        {
            if (mdata(6) == 5 || mdata(6) == 3 || mdata(6) == 2)
            {
                txt(lang(u8"寝る仕度を始めた。"s, u8"You lie down."s));
                cdata[cc].continuous_action_turn = 5;
            }
            else
            {
                txt(lang(u8"露営の準備を始めた。"s, u8"You start to camp."s));
                cdata[cc].continuous_action_turn = 20;
            }
        }
        if (gdata(91) == 101)
        {
            txt(lang(
                itemname(ci, 1) + u8"の建設を始めた。"s,
                u8"You start to construct "s + itemname(ci, 1) + u8"."s));
            cdata[cc].continuous_action_turn = 25;
        }
        if (gdata(91) == 102)
        {
            txt(lang(
                itemname(ci, 1) + u8"のハッチを回し始めた。"s,
                u8"You start to pull the hatch."s));
            cdata[cc].continuous_action_turn = 10;
        }
        if (gdata(91) == 103)
        {
            txt(lang(
                itemname(ci, 1) + u8"を掘り始めた。"s,
                u8"You start to pick "s + itemname(ci, 1) + u8"."s));
            cdata[cc].continuous_action_turn = 10
                + clamp(inv[ci].weight
                            / (1 + sdata(10, 0) * 10 + sdata(180, 0) * 40),
                        1,
                        100);
        }
        if (gdata(91) == 104)
        {
            if (gdata_weather == 0 || gdata_weather == 3)
            {
                if (gdata_time_when_textbook_becomes_available > gdata_hour
                        + gdata_day * 24 + gdata_month * 24 * 30
                        + gdata_year * 24 * 30 * 12)
                {
                    txt(lang(u8"もう飽きた。"s, u8"You are bored."s));
                    rowactend(cc);
                    return;
                }
            }
            gdata_time_when_textbook_becomes_available = gdata_hour
                + gdata_day * 24 + gdata_month * 24 * 30
                + gdata_year * 24 * 30 * 12 + 48;
            if (inv[ci].id == 563)
            {
                txt(lang(
                    i18n::_(
                        u8"ability", std::to_string(inv[ci].param1), u8"name")
                        + u8"の学習を始めた。"s,
                    u8"You begin to study "s
                        + i18n::_(
                              u8"ability",
                              std::to_string(inv[ci].param1),
                              u8"name")
                        + u8"."s));
            }
            else
            {
                txt(lang(
                    u8"トレーニングを始めた。"s, u8"You start training."s));
            }
            if (gdata_weather != 0 && gdata_weather != 3)
            {
                if (gdata_current_map == 30
                    || (mdata(14) == 1
                        && (mdata(6) == 5 || mdata(6) == 3 || mdata(6) == 2)))
                {
                    txt(lang(
                        u8"外が悪天候なので、じっくりと取り組むことにした。"s,
                        u8"The weather's bad outside, you have plenty of time to waste."s));
                }
            }
            cdata[cc].continuous_action_turn = 50;
        }
        update_screen();
        return;
    }
    tc = cdata[cc].continuous_action_target;
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (gdata(91) == 103)
        {
            if (rnd(5) == 0)
            {
                skillexp(180, 0, 20, 4);
            }
            if (rnd(6) == 0)
            {
                if (rnd(55) > sdata.get(10, cc).original_level + 25)
                {
                    skillexp(10, cc, 50);
                }
            }
            if (rnd(8) == 0)
            {
                if (rnd(55) > sdata.get(11, cc).original_level + 28)
                {
                    skillexp(11, cc, 50);
                }
            }
            if (rnd(10) == 0)
            {
                if (rnd(55) > sdata.get(15, cc).original_level + 30)
                {
                    skillexp(15, cc, 50);
                }
            }
            if (rnd(4) == 0)
            {
                txtef(9);
                if (jp)
                {
                    txt(u8" *ザクッ* "s,
                        u8" *♪* "s,
                        u8" *ズシュ* "s,
                        u8" *ジャリ* "s);
                }
                if (en)
                {
                    txt(u8"*sing*"s,
                        u8"*pull*"s,
                        u8"*thud*"s,
                        u8"*rumble*"s,
                        u8"*gasp*"s);
                }
            }
        }
        if (gdata(91) == 104)
        {
            p = 25;
            if (gdata_weather != 0 && gdata_weather != 3)
            {
                if (gdata_current_map == 30)
                {
                    p = 5;
                }
                if (gdata_current_map != 30 && mdata(14) == 1)
                {
                    if (mdata(6) == 5 || mdata(6) == 3 || mdata(6) == 2)
                    {
                        p = 5;
                        gdata_minute += 30;
                    }
                }
            }
            if (inv[ci].id == 563)
            {
                if (rnd(p) == 0)
                {
                    skillexp(inv[ci].param1, cc, 25);
                }
            }
            else if (rnd(p) == 0)
            {
                skillexp(randattb(), cc, 25);
            }
        }
        if (gdata(91) == 105)
        {
            if (inv[ci].id == 688)
            {
                if (rnd(15) == 0)
                {
                    rowactend(cc);
                    txt(lang(
                        u8"突然ふたが閉まった！"s,
                        u8"Suddenly, the iron maiden falls forward."s));
                    dmghp(cc, 9999, -18);
                    return;
                }
            }
            if (inv[ci].id == 689)
            {
                if (rnd(15) == 0)
                {
                    rowactend(cc);
                    txt(lang(
                        u8"突然ギロチンが落ちてきた！"s,
                        u8"Suddenly, the guillotine is activated."s));
                    dmghp(cc, 9999, -19);
                    return;
                }
            }
            f = 0;
            f2 = 0;
            tg = inv_getowner(ci);
            if (tg != -1)
            {
                if (cdata[tg].original_relationship == -3)
                {
                    f2 = 1;
                }
            }
            i = sdata(300, 0) * 5 + sdata(12, 0) + 25;
            if (gdata_hour >= 19 || gdata_hour < 7)
            {
                i = i * 15 / 10;
            }
            if (inv[ci].quality == 3)
            {
                i = i * 8 / 10;
            }
            if (inv[ci].quality >= 4)
            {
                i = i * 5 / 10;
            }
            make_sound(cdata[0].position.x, cdata[0].position.y, 5, 8);
            for (int cnt = 16; cnt < ELONA_MAX_CHARACTERS; ++cnt)
            {
                if (cdata[cnt].state != 1)
                {
                    continue;
                }
                if (cdata[cnt].sleep != 0)
                {
                    continue;
                }
                if (dist(
                        cdata[cnt].position.x,
                        cdata[cnt].position.y,
                        cdata[0].position.x,
                        cdata[0].position.y)
                    > 5)
                {
                    continue;
                }
                if (f2 == 1)
                {
                    if (cnt != tg)
                    {
                        continue;
                    }
                }
                p = rnd((i + 1))
                    * (80 + (is_in_fov(cnt) == 0) * 50
                       + dist(
                             cdata[cnt].position.x,
                             cdata[cnt].position.y,
                             cdata[0].position.x,
                             cdata[0].position.y)
                           * 20)
                    / 100;
                if (cnt < 57)
                {
                    p = p * 2 / 3;
                }
                if (rnd(sdata(13, cnt) + 1) > p)
                {
                    if (is_in_fov(cnt))
                    {
                        txt(lang(
                            name(cnt) + u8"は窃盗を見咎めた。"s,
                            name(cnt) + u8" notice"s + _s(cnt) + u8" you,"s));
                    }
                    else
                    {
                        txt(lang(
                            name(cnt) + u8"は不振な物音に気づいた。"s,
                            name(cnt) + u8" hear"s + _s(cnt)
                                + u8" loud noise,"s));
                    }
                    if (cdata[cnt].character_role == 14)
                    {
                        txt(lang(
                            u8"「貴様、何をしている！」"s,
                            u8"\"You there, stop!\""s));
                        modimp(cnt, -5);
                    }
                    else
                    {
                        txt(lang(
                            u8"「ガード！ガード！」"s,
                            u8"\"Guards! Guards!\""s));
                        modimp(cnt, -5);
                    }
                    cdata[cnt].emotion_icon = 520;
                    f = 1;
                }
            }
            if (f)
            {
                txt(lang(
                    u8"盗みを見咎められた！"s, u8"You are found stealing."s));
                modify_karma(0, -5);
                p = inv_getowner(ci);
                if (tg != -1)
                {
                    if (cdata[p].id != 202)
                    {
                        if (cdata[tg].sleep == 0)
                        {
                            cdata[tg].relationship = -2;
                            hostileaction(0, tg);
                            modimp(tg, -20);
                        }
                    }
                }
                go_hostile();
            }
            if (tg != -1)
            {
                if (cdata[tg].state != 1)
                {
                    if (f != 1)
                    {
                        txt(lang(
                            u8"対象は死んでいる"s, u8"The target is dead."s));
                        f = 1;
                    }
                }
                if (cdata[tg].character_role == 20)
                {
                    if (f != 1)
                    {
                        txt(lang(
                            u8"それは盗めない。"s, u8"It can't be stolen."s));
                        f = 1;
                    }
                }
                if (dist(
                        cdata[cc].position.x,
                        cdata[cc].position.y,
                        cdata[tg].position.x,
                        cdata[tg].position.y)
                    >= 3)
                {
                    if (f != 1)
                    {
                        txt(lang(
                            u8"対象が見当たらない。"s,
                            u8"You lose the target."s));
                        f = 0;
                    }
                }
            }
            if (inv[ci].number <= 0)
            {
                f = 1;
            }
            if (ibit(5, ci) == 1)
            {
                if (f != 1)
                {
                    txt(lang(u8"それは盗めない。"s, u8"It can't be stolen."s));
                    f = 1;
                }
            }
            if (inv[ci].weight >= sdata(10, 0) * 500)
            {
                if (f != 1)
                {
                    txt(lang(
                        u8"重すぎて手に負えない。"s, u8"It's too heavy."s));
                    f = 1;
                }
            }
            if (itemusingfind(ci, true) != -1)
            {
                if (f != 1)
                {
                    txt(lang(
                        u8"そのアイテムは他の誰かが使用中だ。"s,
                        u8"Someone else is using the item."s));
                    f = 1;
                }
            }
            if (f)
            {
                txt(lang(u8"行動を中断した。"s, u8"You abort stealing."s));
                rowactend(cc);
            }
        }
        return;
    }
    if (gdata(91) == 105)
    {
        tg = inv_getowner(ci);
        if (tg != -1)
        {
            if (cdata[tg].state != 1)
            {
                txt(lang(u8"行動を中断した。"s, u8"You abort stealing."s));
                rowactend(cc);
                return;
            }
        }
        in = 1;
        if (inv[ci].id == 54)
        {
            in = inv[ci].number;
        }
        ti = inv_getfreeid(0);
        if (ti == -1)
        {
            txt(lang(
                u8"バックパックには、もうアイテムを入れる余裕がない。"s,
                u8"Your inventory is full."s));
            return;
        }
        ibitmod(12, ci, 0);
        if (inv[ci].body_part != 0)
        {
            tc = inv_getowner(ci);
            if (tc != -1)
            {
                p = inv[ci].body_part;
                cdata_body_part(tc, p) = cdata_body_part(tc, p) / 10000 * 10000;
            }
            inv[ci].body_part = 0;
            refresh_character(tc);
        }
        item_copy(ci, ti);
        inv[ti].number = in;
        ibitmod(9, ti, 1);
        inv[ti].own_state = 0;
        inv[ci].number -= in;
        if (inv[ci].number <= 0)
        {
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
        txt(lang(
            itemname(ti) + u8"を盗んだ。"s,
            u8"You successfully steal "s + itemname(ti) + u8"."s));
        if (inv[ci].id == 54)
        {
            snd(11);
            inv[ti].number = 0;
            cdata[0].gold += in;
        }
        else
        {
            item_stack(0, ti, 1);
            snd(14 + rnd(2));
        }
        refresh_burden_state();
        skillexp(300, 0, clamp(inv[ti].weight / 25, 0, 450) + 50);
        if (cdata[0].karma >= -30)
        {
            if (rnd(3) == 0)
            {
                txt(lang(
                    u8"あなたは良心の呵責を感じた。"s,
                    u8"You feel the stings of conscience."s));
                modify_karma(0, -1);
            }
        }
    }
    if (gdata(91) == 100)
    {
        txt(lang(u8"あなたは眠り込んだ。"s, u8"You fall asleep."s));
        label_2151();
    }
    if (gdata(91) == 101)
    {
        snd(58);
        txt(lang(
            itemname(ci, 1) + u8"を作り終えた。"s,
            u8"You finish constructing"s + itemname(ci, 1) + u8"."s));
        in = 1;
        dropval = 1;
        drop_item();
    }
    if (gdata(91) == 102)
    {
        txt(lang(
            itemname(ci, 1) + u8"のハッチを回し終えた。"s,
            u8"You finish pulling the hatch of "s + itemname(ci, 1) + u8"."s));
        chatteleport = 1;
        gdata_previous_map2 = gdata_current_map;
        gdata_previous_dungeon_level = gdata_current_dungeon_level;
        gdata_previous_x = cdata[0].position.x;
        gdata_previous_y = cdata[0].position.y;
        gdata_destination_map = 30;
        gdata_destination_dungeon_level = inv[ci].count;
        levelexitby = 2;
        snd(49);
    }
    if (gdata(91) == 103)
    {
        txt(lang(
            itemname(ci, 1) + u8"を収穫した("s + cnvweight(inv[ci].weight)
                + u8")"s,
            u8"You harvest "s + itemname(ci, 1) + u8". ("s
                + cnvweight(inv[ci].weight) + u8")"s));
        in = inv[ci].number;
        pick_up_item();
    }
    if (gdata(91) == 104)
    {
        if (inv[ci].id == 563)
        {
            txt(lang(
                i18n::_(u8"ability", std::to_string(inv[ci].param1), u8"name")
                    + u8"の学習を終えた。"s,
                u8"You finish studying "s
                    + i18n::_(
                          u8"ability", std::to_string(inv[ci].param1), u8"name")
                    + u8"."s));
        }
        else
        {
            txt(lang(u8"トレーニングを終えた。"s, u8"You finish training."s));
        }
    }
    rowactend(cc);
    return;
}



void label_2149()
{
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh - inf_verh);
    gmode(2);
    render_hud();
    if (screenupdate == 0)
    {
        redraw();
    }
    screenupdate = 0;
    return;
}



void label_2150()
{
    gsel(4);
    gmode(0);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"bg_night.bmp", 1);
    pos(0, 0);
    gzoom(4, 0, 0, 640, 480, windoww, windowh - inf_verh);
    gsel(0);
    return;
}



void label_2151()
{
    int timeslept = 0;
    if (gdata_current_map == 13)
    {
        txt(lang(
            u8"しかし、大事な用を思い出して飛び起きた。"s,
            u8"But you can't sleep right now."s));
        gdata(98) = 0;
        return;
    }
    if (gdata_catches_god_signal)
    {
        txtgod(cdata[0].god_id, 10);
    }
    label_2150();
    musicloop = 1;
    play_music(78);
    msg_halt();
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        gmode(4, -1, -1, cnt * 10);
        label_2149();
        await(200);
    }
    gmode(2);
    cc = 0;
    for (int cnt = 0; cnt < ELONA_MAX_PARTY_CHARACTERS; ++cnt)
    {
        tc = cnt;
        cdata[tc].wet = 0;
        cdata[tc].poisoned = 0;
        cdata[tc].sleep = 0;
        cdata[tc].confused = 0;
        cdata[tc].blind = 0;
        cdata[tc].paralyzed = 0;
        cdata[tc].dimmed = 0;
        cdata[tc].drunk = 0;
        cdata[tc].bleeding = 0;
        gdata_continuous_active_hours = 0;
        cdata[tc].hp = cdata[tc].max_hp;
        cdata[tc].mp = cdata[tc].max_mp;
        cdata[tc].sp = cdata[tc].max_sp;
        healcon(tc, 12, 7 + rnd(7));
        if (cdata[tc].has_anorexia())
        {
            cdata[tc].anorexia_count -= rnd(6);
        }
        else
        {
            cdata[tc].anorexia_count -= rnd(3);
        }
        if (cdata[tc].anorexia_count < 0)
        {
            cure_anorexia(tc);
            cdata[tc].anorexia_count = 0;
        }
        healsan(tc, 10);
        if (cdata[tc].has_lay_hand())
        {
            cdata[tc].is_lay_hand_available() = true;
        }
    }
    mode = 9;
    timeslept = 7 + rnd(5);
    for (int cnt = 0, cnt_end = (timeslept); cnt < cnt_end; ++cnt)
    {
        ++gdata_hour;
        label_2736();
        if (mode != 9)
        {
            label_2150();
            mode = 9;
        }
        gdata_continuous_active_hours = 0;
        gdata_minute = 0;
        cc = 0;
        label_2149();
        await(500);
    }
    if (gdata(98) != 0)
    {
        tc = -1;
        for (int cnt = 1; cnt < 16; ++cnt)
        {
            if (cdata[cnt].has_made_gene() == 1)
            {
                if (cdata[cnt].state == 1)
                {
                    tc = cnt;
                    break;
                }
            }
        }
        if (tc != -1)
        {
            s = lang(u8"遺伝子"s, u8"Gene"s);
            buff = lang(""s + name(tc) +
                    u8"とあなたは熱い一夜を供にした。新たな遺伝子が生成された。"s,
                u8"You spent a night with "s + name(tc) +
                    u8". A new gene is created."s);
            listmax = 0;
            list(0, listmax) = 1;
            listn(0, listmax) = lang(u8"ふぅ"s, u8"Sweet."s);
            ++listmax;
            cdata[tc].has_made_gene() = false;
            show_random_event_window(u8"bg_re14");
            save_gene();
        }
    }
    label_2149();
    gdata(98) = 0;
    mode = 0;
    wake_up();
    cdata[cc].nutrition -= 1500 / (trait(158) + 1);
    txtef(2);
    txt(lang(
        ""s + timeslept + u8"時間眠った。あなたはリフレッシュした。"s,
        u8"You have slept for "s + timeslept
            + u8" hours. You are refreshed."s));
    f = 0;
    if (cdata[0].continuous_action_item == -1)
    {
        f = 1;
    }
    else
    {
        ci = cdata[0].continuous_action_item;
        if (inv[ci].param1 == 0 || inv[ci].number == 0
            || the_item_db[inv[ci].id]->subcategory != 60004)
        {
            f = 1;
        }
    }
    if (f)
    {
        txt(lang(u8"まあまあの目覚めだ。"s, u8"You wake up feeling so so."s));
    }
    else
    {
        i = 0;
        for (int cnt = 10; cnt < 18; ++cnt)
        {
            i += sdata.get(cnt, 0).original_level;
        }
        i = clamp(i / 6, 10, 1000);
        exp = i * i * i / 10;
        gdata_sleep_experience = gdata_sleep_experience * inv[ci].param1 / 100;
        grown = 0;
        for (int cnt = 0;; ++cnt)
        {
            if (gdata_sleep_experience >= exp)
            {
                gdata_sleep_experience -= exp;
            }
            else if (cnt != 0)
            {
                break;
            }
            modify_potential(0, 10 + rnd(8), 1);
            ++grown;
            if (cnt > 6)
            {
                if (rnd(5) == 0)
                {
                    gdata_sleep_experience = 0;
                    break;
                }
            }
        }
        txtef(2);
        txt(lang(
            u8"心地よい目覚めだ。潜在能力が伸びた(計"s + grown + u8"%)"s,
            u8"You wake up feeling good. Your potential increases. (Total:"s
                + grown + u8"%)"s));
    }
    msg_halt();
    play_music();
    autosave = 1 * (gdata_current_map != 35);
    return;
}



void do_rest()
{
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 4;
        cdata[cc].continuous_action_turn = 50;
        txt(lang(u8"あなたは横になった。"s, u8"You lie down to rest."s));
        update_screen();
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (cdata[cc].continuous_action_turn % 2 == 0)
        {
            healsp(cc, 1);
        }
        if (cdata[cc].continuous_action_turn % 3 == 0)
        {
            healhp(cc, 1);
            healmp(cc, 1);
        }
        return;
    }
    if (gdata_continuous_active_hours >= 30)
    {
        f = 0;
        if (gdata_continuous_active_hours >= 50)
        {
            f = 1;
        }
        else if (rnd(2) == 0)
        {
            f = 1;
        }
        if (f == 1)
        {
            txt(lang(
                u8"あなたはそのまま眠りにおちた…"s,
                u8"After a short while, you drop off to sleep."s));
            cdata[cc].continuous_action_item = -1;
            label_2151();
            rowactend(cc);
            return;
        }
    }
    txt(lang(u8"あなたは休息を終えた。"s, u8"You finished taking a rest."s));
    rowactend(cc);
    return;
}



void label_2153()
{
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 3;
        cdata[cc].continuous_action_turn = 20;
        if (gdata_weather == 3)
        {
            cdata[cc].continuous_action_turn =
                cdata[cc].continuous_action_turn * 13 / 10;
        }
        if (gdata_weather == 4)
        {
            cdata[cc].continuous_action_turn =
                cdata[cc].continuous_action_turn * 16 / 10;
        }
        if (gdata_weather == 2
            || chipm(0, map(cdata[cc].position.x, cdata[cc].position.y, 0))
                == 4)
        {
            cdata[cc].continuous_action_turn =
                cdata[cc].continuous_action_turn * 22 / 10;
        }
        if (gdata_weather == 1)
        {
            cdata[cc].continuous_action_turn =
                cdata[cc].continuous_action_turn * 5 / 10;
        }
        cdata[cc].continuous_action_turn = cdata[cc].continuous_action_turn
            * 100 / (100 + gdata_seven_league_boot_effect + sdata(182, 0));
        return;
    }
    if (cdata[0].nutrition <= 5000)
    {
        f = 0;
        for (const auto& cnt : items(cc))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (the_item_db[inv[cnt].id]->category == 91000)
            {
                f = 1;
                ci = cnt;
                break;
            }
        }
        if (f == 1)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    npcn(cc) + itemname(ci, 1) + u8"を食べ終えた。"s,
                    name(cc) + u8" "s + have(cc) + u8" finished eating "s
                        + itemname(ci, 1) + u8"."s));
            }
            label_2161();
        }
    }
    if (gdata_weather == 2
        || chipm(0, map(cdata[cc].position.x, cdata[cc].position.y, 0)) == 4)
    {
        if (gdata_protects_from_bad_weather == 0)
        {
            if (rnd(100) == 0)
            {
                if (cdata[0].is_floating() == 0 || cdata[0].gravity > 0)
                {
                    txtef(9);
                    if (jp)
                    {
                        txt(u8" *ずぶっ* "s,
                            u8" *ザシュ* "s,
                            u8" *ズボ* "s,
                            u8" *ズサッ* "s);
                    }
                    if (en)
                    {
                        txt(u8" *kisssh*"s,
                            u8"*thudd*"s,
                            u8"*siz*"s,
                            u8"*clump*"s,
                            u8"*skritch*"s);
                    }
                    cdata[cc].continuous_action_turn += 10;
                }
            }
            if (rnd(1000) == 0)
            {
                txtef(8);
                if (jp)
                {
                    txt(u8"積雪のせいで旅程が遅れている。"s,
                        u8"雪道を進むのは大変な苦労だ。"s,
                        u8"深い雪に脚をとられている。"s);
                }
                if (en)
                {
                    txt(u8"Snow delays your travel."s,
                        u8"You are caught in a snowdrift."s,
                        u8"It's hard to walk on a snowy road."s);
                }
                cdata[cc].continuous_action_turn += 50;
            }
        }
        if (cdata[0].nutrition <= 2000)
        {
            if (cdata[0].has_anorexia() == 0)
            {
                snd(18);
                txt(lang(
                    u8"空腹のあまり、あなたは積もっている雪を腹にかきこんだ。"s,
                    u8"You are too hungry. You chow down snow."s));
                cdata[cc].nutrition += 5000;
                label_2162();
                dmgcon(0, 7, 1000);
            }
        }
    }
    if (gdata_weather == 4)
    {
        if (gdata_protects_from_bad_weather == 0)
        {
            if (rnd(100) == 0)
            {
                if (cdata[0].is_floating() == 0 || cdata[0].gravity > 0)
                {
                    txtef(9);
                    if (jp)
                    {
                        txt(u8" *びしゃ* "s,
                            u8" *ザブッ* "s,
                            u8" *パシャッ* "s,
                            u8" *ざぶ* "s);
                    }
                    if (en)
                    {
                        txt(u8"*drip*"s,
                            u8"*sip*"s,
                            u8"*drizzle*"s,
                            u8"*splash*"s,
                            u8"*kissh*"s);
                    }
                    cdata[cc].continuous_action_turn += 5;
                }
            }
            if (cdata[0].confused == 0)
            {
                if (rnd(500) == 0)
                {
                    txtef(8);
                    if (jp)
                    {
                        txt(u8"雨が激しすぎてどこを歩いているかもわからない！"s,
                            u8"あまりにも視界が悪すぎる。"s,
                            u8"豪雨のせいで前が全く見えない。"s);
                    }
                    if (en)
                    {
                        txt(u8"It's raining heavily. You lose your way."s,
                            u8"You can't see a thing!"s);
                    }
                    cdata[0].confused = 10;
                }
            }
            else if (rnd(5) == 0)
            {
                cdata[0].confused = 10;
            }
        }
        cdata[0].blind = 3;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        ++gdata_minute;
        return;
    }
    traveldone = 1;
    gdata_distance_between_town += 4;
    rowactend(cc);
    return;
}



void label_2154()
{
    if (rowactre != 0)
    {
        return;
    }
    ci = cdata[0].continuous_action_item;
    int dbmax = 0;
    int dbsum = 0;
    for (const auto fish : the_fish_db)
    {
        if (fish.no_generate)
        {
            continue;
        }
        i = clamp(inv[ci].param4 + (rnd(5) == 0) - (rnd(5) == 0), 0, 5);
        if (fish.rank != i)
        {
            continue;
        }
        dblist(0, dbmax) = fish.id;
        dblist(1, dbmax) = fish.rarity + dbsum;
        dbsum += fish.rarity;
        ++dbmax;
    }
    fish = 1;
    if (dbsum != 0)
    {
        int dbtmp;
        exrand_rnd(dbtmp, dbsum);
        for (int cnt = 0, cnt_end = (dbmax); cnt < cnt_end; ++cnt)
        {
            if (dblist(1, cnt) > dbtmp)
            {
                fish = dblist(0, cnt);
                break;
            }
        }
    }
    return;
}



void label_2155()
{
    flt();
    itemcreate(0, the_fish_db[fish]->item_id, -1, -1, 0);
    inv[ci].subname = fish;
    inv[ci].value = the_fish_db[fish]->value;
    inv[ci].weight = the_fish_db[fish]->weight;
    txt(lang(
        itemname(ci, 1) + u8"を釣り上げた！"s,
        u8"You get "s + itemname(ci, 1) + u8"!"s));
    item_stack(0, ci, 1);
    return;
}



void spot_fishing()
{
    int fishstat = 0;
    if (cdata[cc].continuous_action_id == 0)
    {
        txt(lang(u8"釣りを始めた。"s, u8"You start fishing."s));
        snd(87);
        if (rowactre == 0)
        {
            cdata[cc].continuous_action_item = ci;
        }
        cdata[cc].continuous_action_id = 7;
        cdata[cc].continuous_action_turn = 100;
        racount = 0;
        fishstat = 0;
        gsel(9);
        pos(0, 0);
        picload(filesystem::dir::graphic() / u8"fishing.bmp");
        gsel(0);
        return;
    }
    if (rowactre != 0)
    {
        label_2143();
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (rnd(5) == 0)
        {
            fishstat = 1;
            label_2154();
        }
        if (fishstat == 1)
        {
            if (rnd(5) == 0)
            {
                for (int cnt = 0, cnt_end = (4 + rnd(4)); cnt < cnt_end; ++cnt)
                {
                    fishanime(0) = 1;
                    fishanime(1) = 3 + rnd(3);
                    addefmap(fishx, fishy, 4, 2);
                    ++scrturn;
                    update_screen();
                    redraw();
                    await(config::instance().wait1 * 2);
                }
                if (rnd(3) == 0)
                {
                    fishstat = 2;
                }
                if (rnd(6) == 0)
                {
                    fishstat = 0;
                }
                fishanime = 0;
            }
        }
        if (fishstat == 2)
        {
            fishanime = 2;
            snd(46);
            cdata[0].emotion_icon = 220;
            for (int cnt = 0, cnt_end = (8 + rnd(10)); cnt < cnt_end; ++cnt)
            {
                ++scrturn;
                update_screen();
                redraw();
                await(config::instance().wait1 * 2);
            }
            if (rnd(10))
            {
                fishstat = 3;
            }
            else
            {
                fishstat = 0;
            }
            fishanime = 0;
        }
        if (fishstat == 3)
        {
            fishanime = 3;
            for (int cnt = 0, cnt_end = (28 + rnd(15)); cnt < cnt_end; ++cnt)
            {
                if (cnt % 7 == 0)
                {
                    snd(89);
                }
                fishanime(1) = cnt;
                ++scrturn;
                update_screen();
                addefmap(fishx, fishy, 5, 2);
                redraw();
                await(config::instance().wait1 * 2);
            }
            if (the_fish_db[fish]->difficulty >= rnd(sdata(185, 0) + 1))
            {
                fishstat = 0;
            }
            else
            {
                fishstat = 4;
            }
            fishanime = 0;
        }
        if (fishstat == 4)
        {
            fishanime = 4;
            snd(88);
            for (int cnt = 0; cnt < 21; ++cnt)
            {
                fishanime(1) = cnt;
                if (cnt == 1)
                {
                    addefmap(fishx, fishy, 1, 3);
                }
                ++scrturn;
                update_screen();
                redraw();
                await(config::instance().wait1 * 2);
            }
            snd(14 + rnd(2));
            fishanime = 0;
            rowactend(cc);
            label_2155();
            label_1470(0);
            cdata[0].emotion_icon = 306;
        }
        if (rnd(10) == 0)
        {
            dmgsp(cc, 1);
        }
        return;
    }
    txt(lang(u8"何も釣れなかった…"s, u8"A waste of a time..."s));
    rowactend(cc);
    return;
}



void spot_material()
{
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 8;
        cdata[cc].continuous_action_turn = 40;
        txt(lang(u8"採取を始めた。"s, u8"You start to search the spot."s));
        racount = 0;
        return;
    }
    if (rowactre != 0)
    {
        label_2143();
        return;
    }
    rowactend(cc);
    return;
}



void spot_digging()
{
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 9;
        cdata[cc].continuous_action_turn = 20;
        if (rowactre == 0)
        {
            txt(lang(
                u8"地面を掘り始めた。"s, u8"You start to dig the ground."s));
        }
        else
        {
            txt(lang(u8"探索を始めた。"s, u8"You start to dig the spot."s));
        }
        racount = 0;
        return;
    }
    if (rowactre != 0)
    {
        label_2143();
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (cdata[cc].turn % 5 == 0)
        {
            txtef(4);
            txt(lang(u8" *ざくっ* "s, u8"*clink*"s),
                lang(u8" *カキン* "s, u8"*smash*"s),
                lang(u8" *ごつっ* "s, u8"*thud*"s),
                lang(u8" *じゃり* "s, u8"*sing*"s),
                lang(u8" *♪* "s, u8"*sigh*"s));
        }
        return;
    }
    txt(lang(u8"地面を掘り終えた。"s, u8"You finish digging."s));
    if (mdata(6) == 1)
    {
        for (const auto& cnt : items(0))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (inv[cnt].id == 621)
            {
                if (inv[cnt].param1 != 0)
                {
                    if (inv[cnt].param1 == cdata[0].position.x)
                    {
                        if (inv[cnt].param2 == cdata[0].position.y)
                        {
                            snd(23);
                            txtef(5);
                            txt(lang(
                                u8" *ガチッ* …何かがある！"s,
                                u8"*click* ...something is there!"s));
                            msg_halt();
                            snd(24);
                            flt();
                            itemcreate(
                                -1,
                                622,
                                cdata[0].position.x,
                                cdata[0].position.y,
                                2 + rnd(3));
                            flt();
                            itemcreate(
                                -1,
                                55,
                                cdata[0].position.x,
                                cdata[0].position.y,
                                1 + rnd(3));
                            flt();
                            itemcreate(
                                -1,
                                54,
                                cdata[0].position.x,
                                cdata[0].position.y,
                                rnd(10000) + 2000);
                            for (int cnt = 0, cnt_end = (4); cnt < cnt_end;
                                 ++cnt)
                            {
                                flt(calcobjlv(cdata[0].level + 10),
                                    calcfixlv(3));
                                if (cnt == 0)
                                {
                                    fixlv = 5;
                                }
                                flttypemajor =
                                    fsetchest(rnd(length(fsetchest)));
                                itemcreate(
                                    -1,
                                    0,
                                    cdata[0].position.x,
                                    cdata[0].position.y,
                                    0);
                            }
                            txt(lang(
                                u8"何かが足元に転がってきた。"s,
                                u8"Something is put on the ground."s));
                            autosave = 1 * (gdata_current_map != 35);
                            --inv[cnt].number;
                            break;
                        }
                    }
                }
            }
        }
    }
    spillfrag(refx, refy, 1);
    rowactend(cc);
    return;
}



void spot_mining_or_wall()
{
    int countdig = 0;
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 5;
        cdata[cc].continuous_action_turn = 40;
        if (rowactre == 0)
        {
            txt(lang(u8"壁を掘りはじめた。"s, u8"You start to dig the wall."s));
        }
        else
        {
            txt(lang(
                u8"鉱石を掘り始めた。"s,
                u8"You start to dig the mining spot."s));
        }
        if (chipm(0, map(refx, refy, 0)) == 6)
        {
            txt(lang(
                u8"この壁はとても固そうだ！"s,
                u8"These walls look pretty hard!"s));
        }
        countdig = 0;
        racount = 0;
        return;
    }
    if (rowactre != 0)
    {
        label_2143();
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        if (rnd(5) == 0)
        {
            dmgsp(cc, 1);
        }
        ++countdig;
        f = 0;
        if (chipm(0, map(refx, refy, 0)) == 6)
        {
            if (rnd(12000) < sdata(10, cc) + sdata(163, cc) * 10)
            {
                f = 1;
            }
            p = 30 - sdata(163, cc) / 2;
            if (p > 0)
            {
                if (countdig <= p)
                {
                    f = 0;
                }
            }
        }
        else
        {
            if (rnd(1500) < sdata(10, cc) + sdata(163, cc) * 10)
            {
                f = 1;
            }
            p = 20 - sdata(163, cc) / 2;
            if (p > 0)
            {
                if (countdig <= p)
                {
                    f = 0;
                }
            }
        }
        if (f == 1 || gdata_tutorial_flag == 2)
        {
            rtval = 0;
            if (rnd(5) == 0)
            {
                rtval = 54;
            }
            if (rnd(8) == 0)
            {
                rtval = -1;
            }
            if (map(refx, refy, 6) != 0)
            {
                cell_featread(refx, refy);
                if (feat(1) == 22)
                {
                    discover_hidden_path();
                }
            }
            map(refx, refy, 0) = tile_tunnel;
            spillfrag(refx, refy, 2);
            FIXME_dig_animation_x = refx;
            FIXME_dig_animation_y = refy;
            snd(45);
            aniref = 5;
            play_animation(14);
            txt(lang(
                u8"壁を掘り終えた。"s, u8"You finished digging the wall."s));
            if (gdata_tutorial_flag == 2 && gdata_current_map == 7)
            {
                flt();
                itemcreate(-1, 208, digx, digy, 0);
                inv[ci].curse_state = curse_state_t::cursed;
                txt(lang(
                    u8"何かを見つけた。"s,
                    u8"You found something out of crushed heaps of rock."s));
                gdata_tutorial_flag = 3;
            }
            else if (rtval != 0 && gdata_current_map != 30)
            {
                if (rtval > 0)
                {
                    flt();
                    itemcreate(-1, rtval, digx, digy, 0);
                }
                else if (rtval == -1)
                {
                    flt(calcobjlv(gdata_current_dungeon_level), calcfixlv(3));
                    flttypemajor = 77000;
                    itemcreate(-1, 0, digx, digy, 0);
                }
                txt(lang(
                    u8"何かを見つけた。"s,
                    u8"You found something out of crushed heaps of rock."s));
            }
            label_1457();
            rowactend(cc);
        }
        else if (cdata[cc].turn % 5 == 0)
        {
            txtef(4);
            txt(lang(u8" *ざくっ* "s, u8"*clink*"s),
                lang(u8" *カキン* "s, u8"*smash*"s),
                lang(u8" *ごつっ* "s, u8"*thud*"s),
                lang(u8" *じゃり* "s, u8"*sing*"s),
                lang(u8" *♪* "s, u8"*sigh*"s));
        }
        return;
    }
    txt(lang(
        u8"背中が痛い…掘るのを諦めた。"s,
        u8"Your back hurts...You give up digging."s));
    rowactend(cc);
    return;
}



void label_2160()
{
    if (cdata[cc].continuous_action_id == 0)
    {
        cdata[cc].continuous_action_id = 1;
        cdata[cc].continuous_action_turn = 8;
        cdata[cc].continuous_action_item = ci;
        if (is_in_fov(cc))
        {
            snd(18);
            if (inv[ci].own_state == 1 && cc < 16)
            {
                txt(lang(
                    name(cc) + u8"は"s + itemname(ci, 1)
                        + u8"をこっそりと口に運んだ。"s,
                    name(cc) + u8" start"s + _s(cc) + u8" to eat "s
                        + itemname(ci, 1) + u8" in secret."s));
            }
            else
            {
                txt(lang(
                    name(cc) + u8"は"s + itemname(ci, 1) + u8"を口に運んだ。"s,
                    name(cc) + u8" start"s + _s(cc) + u8" to eat "s
                        + itemname(ci, 1) + u8"."s));
            }
            if (inv[ci].id == 204 && inv[ci].subname == 344)
            {
                txt(lang(u8"「いただきマンモス」"s, u8"\"Let's eatammoth.\""s));
            }
        }
        return;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        return;
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            npcn(cc) + itemname(ci, 1) + u8"を食べ終えた。"s,
            name(cc) + u8" "s + have(cc) + u8" finished eating "s
                + itemname(ci, 1) + u8"."s));
    }
    label_2161();
    rowactend(cc);
    return;
}



void label_2161()
{
    cieat = ci;
    apply_general_eating_effect();
    ci = cieat;
    if (cc == 0)
    {
        item_identify(inv[ci], identification_state_t::partly_identified);
    }
    if (chara_unequip(ci))
    {
        refresh_character(cc);
    }
    --inv[ci].number;
    if (ci >= 5080)
    {
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
    }
    else if (cc == 0)
    {
        refresh_burden_state();
    }
    if (cc == 0)
    {
        label_2162();
    }
    else
    {
        if (ci == cdata[cc].item_which_will_be_used)
        {
            cdata[cc].item_which_will_be_used = 0;
        }
        if (cdata[cc].was_passed_item_by_you_just_now())
        {
            if (inv[ci].material == 35)
            {
                if (inv[ci].param3 < 0)
                {
                    txtef(9);
                    if (jp)
                    {
                        txt(u8"「うぐぐ！なんだこの飯は！」"s,
                            u8"「うっ！」"s,
                            u8"「……！！」"s,
                            u8"「あれれ…」"s,
                            u8"「…これは何の嫌がらせですか」"s,
                            u8"「まずい！」"s);
                    }
                    if (en)
                    {
                        txt(u8"\"Yuck!!\""s,
                            u8"\"....!!\""s,
                            u8"\"W-What...\""s,
                            u8"\"Are you teasing me?\""s,
                            u8"\"You fool!\""s);
                    }
                    dmghp(cc, 999, -12);
                    if (cdata[cc].state != 1)
                    {
                        if (cdata[cc].relationship > 0)
                        {
                            modify_karma(0, -5);
                        }
                        else
                        {
                            modify_karma(0, -1);
                        }
                    }
                    modimp(tc, -25);
                    return;
                }
            }
        }
    }
    chara_anorexia(cc);
    if ((inv[ci].id == 755 && rnd(3)) || (inv[ci].id == 756 && rnd(10) == 0))
    {
        if (is_in_fov(cc))
        {
            txtef(8);
            txt(lang(
                name(cc) + u8"はもちを喉につまらせた！"s,
                name(cc) + u8" choke"s + _s(cc) + u8" on mochi!"s));
            txt(lang(u8"「むがっ」"s, u8"\"Mm-ghmm\""s));
        }
        ++cdata[cc].choked;
    }
    return;
}



void label_2162()
{
    txtef(2);
    if (cdata[cc].nutrition >= 12000)
    {
        txt(lang(
                u8"もう当分食べなくてもいい。"s,
                u8"Phew! You are pretty bloated."s),
            lang(
                u8"こんなに食べたことはない！"s,
                u8"You've never eaten this much before!"s),
            lang(
                u8"信じられないぐらい満腹だ！"s,
                u8"Your stomach is unbelievably full!"s));
        return;
    }
    if (cdata[cc].nutrition >= 10000)
    {
        txt(lang(u8"あなたは満足した。"s, u8"You are satisfied!"s),
            lang(u8"満腹だ！"s, u8"This hearty meal has filled your stomach."s),
            lang(u8"あなたは食欲を満たした。"s, u8"You really ate!"s),
            lang(
                u8"あなたは幸せそうに腹をさすった。"s,
                u8"You pat your stomach contentedly."s));
        return;
    }
    if (cdata[cc].nutrition >= 5000)
    {
        txt(lang(u8"まだ食べられるな…"s, u8"You can eat more."s),
            lang(u8"あなたは腹をさすった。"s, u8"You pat your stomach."s),
            lang(
                u8"少し食欲を満たした。"s,
                u8"You satisfied your appetite a little."s));
        return;
    }
    if (cdata[cc].nutrition >= 2000)
    {
        txt(lang(u8"まだまだ食べたりない。"s, u8"You are still a bit hungry."s),
            lang(u8"物足りない…"s, u8"Not enough..."s),
            lang(u8"まだ空腹だ。"s, u8"You want to eat more."s),
            lang(
                u8"少しは腹の足しになったか…"s,
                u8"Your stomach is still somewhat empty."s));
        return;
    }
    if (cdata[cc].nutrition >= 1000)
    {
        txt(lang(u8"全然食べたりない！"s, u8"No, it was not enough at all."s),
            lang(u8"腹の足しにもならない。"s, u8"You still feel very hungry."s),
            lang(u8"すぐにまた腹が鳴った。"s, u8"You aren't satisfied."s));
        return;
    }
    txt(lang(
            u8"こんな量では意味がない！"s,
            u8"It didn't help you from starving!"s),
        lang(
            u8"これぐらいでは、死を少し先に延ばしただけだ。"s,
            u8"It prolonged your death for seconds."s),
        lang(
            u8"無意味だ…もっと栄養をとらなければ。"s,
            u8"Empty! Your stomach is still empty!"s));
    return;
}



int decode_book()
{
    int cibkread = 0;
    if (cdata[cc].continuous_action_id == 0)
    {
        if (inv[ci].id == 687)
        {
            if (inv[ci].param2 != 0)
            {
                txt(lang(
                    u8"それは既に解読済みだ。"s,
                    u8"You already have decoded the book."s));
                return 0;
            }
        }
        if (cdata[cc].blind != 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"は何も見えない。"s,
                    name(cc) + u8" can see nothing."s));
            }
            return 0;
        }
        cdata[cc].continuous_action_id = 2;
        if (inv[ci].id == 783)
        {
            p = 50;
        }
        else if (inv[ci].id == 687)
        {
            p = 50 + inv[ci].param1 * 50 + inv[ci].param1 * inv[ci].param1 * 20;
        }
        else
        {
            p = the_ability_db[efid]->sdataref4;
        }
        cdata[cc].continuous_action_turn = p / (2 + sdata(150, 0)) + 1;
        cdata[cc].continuous_action_item = ci;
        if (is_in_fov(cc))
        {
            txt(lang(
                npcn(cc) + itemname(ci, 1) + u8"を読み始めた。"s,
                name(cc) + u8" start"s + _s(cc) + u8" to read "s
                    + itemname(ci, 1) + u8"."s));
        }
        item_separate(ci);
        return 0;
    }
    if (cdata[cc].continuous_action_turn > 0)
    {
        ci = cdata[cc].continuous_action_item;
        cibkread = ci;
        label_1458();
        if (inv[ci].id == 783)
        {
            return 0;
        }
        if (inv[ci].id == 687)
        {
            r2 =
                50 + inv[ci].param1 * 50 + inv[ci].param1 * inv[ci].param1 * 20;
            r3 = 0;
        }
        else
        {
            r2 = the_ability_db[efid]->sdataref4;
            r3 = efid;
        }
        if (inv[ci].curse_state == curse_state_t::blessed)
        {
            r2 = r2 * 100 / 120;
        }
        if (is_cursed(inv[ci].curse_state))
        {
            r2 = r2 * 150 / 100;
        }
        int stat = try_to_cast_spell();
        ci = cibkread;
        if (stat == 0)
        {
            rowactend(cc);
            --inv[ci].count;
            if (inv[ci].count < 0)
            {
                inv[ci].count = 0;
            }
            if (inv[ci].count == 0)
            {
                --inv[ci].number;
                if (ci >= 5080)
                {
                    cell_refresh(inv[ci].position.x, inv[ci].position.y);
                }
                else
                {
                    refresh_burden_state();
                }
                if (is_in_fov(cc))
                {
                    txt(lang(
                        itemname(ci, 1) + u8"は塵となって崩れ落ちた。"s,
                        itemname(ci, 1) + u8" falls apart."s));
                }
            }
        }
        return 0;
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            npcn(cc) + itemname(ci, 1) + u8"を読み終えた。"s,
            name(cc) + u8" "s + have(cc) + u8" finished reading the book."s));
    }
    if (inv[ci].id == 783)
    {
        if (inv[ci].param1 == 0)
        {
            rowactend(cc);
            return 1;
        }
        txt(lang(
            itemname(ci, 1) + u8"を覚えた！"s, u8"You learned the recipe!"s));
        ++recipememory(inv[ci].subname);
        item_identify(inv[ci], identification_state_t::partly_identified);
        removeitem(ci, 1);
        if (is_in_fov(cc))
        {
            txt(lang(
                itemname(ci, 1) + u8"は塵となって崩れ落ちた。"s,
                itemname(ci, 1) + u8" falls apart."s));
        }
        rowactend(cc);
        return 1;
    }
    if (inv[ci].id == 687)
    {
        item_identify(inv[ci], identification_state_t::completely_identified);
        txt(lang(
            itemname(ci, 1) + u8"を解読した！"s,
            u8"You finished decoding "s + itemname(ci, 1) + u8"!"s));
        inv[ci].param2 = 1;
        inv[ci].count = 1;
        ibitmod(4, ci, 0);
        item_stack(0, ci, 1);
    }
    else
    {
        skillgain(
            cc,
            efid,
            1,
            (rnd(51) + 50) * (90 + sdata(165, cc) + (sdata(165, cc) > 0) * 20)
                    / clamp((100 + spell((efid - 400)) / 2), 50, 1000)
                + 1);
        label_1471(0);
        if (itemmemory(2, inv[ci].id) == 0)
        {
            itemmemory(2, inv[ci].id) = 1;
        }
    }
    item_identify(inv[ci], identification_state_t::partly_identified);
    if (inv[ci].id != 687)
    {
        --inv[ci].count;
        if (inv[ci].count < 0)
        {
            inv[ci].count = 0;
        }
        if (inv[ci].count == 0)
        {
            removeitem(ci, 1);
            if (is_in_fov(cc))
            {
                txt(lang(
                    itemname(ci, 1) + u8"は塵となって崩れ落ちた。"s,
                    itemname(ci, 1) + u8" falls apart."s));
            }
        }
    }
    rowactend(cc);
    return 1;
}



int read_normal_book()
{
    if (cdata[cc].blind != 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は何も見えない。"s,
                name(cc) + u8" can see nothing."s));
        }
        return 0;
    }
    if (inv[ci].id == 742)
    {
        snd(59);
        txt(lang(
            u8"すくつの探索を許可する、という内容の文面が形式的に書いてある。"s,
            u8"According to the card, you are permitted to explore the void now."s));
        return 1;
    }
    if (inv[ci].id == 563)
    {
        int stat = label_2083();
        if (stat == 1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    if (inv[ci].id == 668)
    {
        snd(59);
        txt(lang(
            u8"レイチェルという作家による、心あたたまる童話集だ。"s,
            u8"It's a lovely fairy tale written by Rachel."s));
        return 1;
    }
    tc = cc;
    item_identify(inv[ci], identification_state_t::partly_identified);
    label_2022();
    return 1;
}



int calcmagiccontrol(int prm_1076, int prm_1077)
{
    if (sdata(188, prm_1076) != 0)
    {
        if ((cdata[prm_1076].relationship >= 0
             && cdata[prm_1077].relationship >= 0)
            || (cdata[prm_1076].relationship <= -1
                && cdata[prm_1077].relationship <= -1))
        {
            if (sdata(188, prm_1076) * 5 > rnd(dmg + 1))
            {
                dmg = 0;
            }
            else
            {
                dmg = rnd(dmg * 100 / (100 + sdata(188, prm_1076) * 10) + 1);
            }
            if (dmg < 1)
            {
                if (is_in_fov(prm_1077))
                {
                    txt(lang(
                        name(prm_1077) + u8"は巻き込みを免れた。"s,
                        u8"The spell passes through "s + name(prm_1077)
                            + u8"."s));
                }
                skillexp(188, prm_1076, 8, 4);
                return 1;
            }
            skillexp(188, prm_1076, 30, 2);
        }
    }
    return 0;
}



int label_2167()
{
    int spellbk = 0;
    spellbk = efid;
    ccbk = cc;
    int stat = label_2168();
    if (stat == 1)
    {
        cc = ccbk;
        r2 = spellbk;
        gain_skill_experience_casting(cc);
        return 1;
    }
    return 0;
}



int label_2168()
{
    int mp = 0;
    efsource = 3;
    efstatus = curse_state_t::none;
    efp = calcspellpower(efid, cc);
    if (cc == 0)
    {
        if (calcspellcostmp(efid, cc) > cdata[cc].mp)
        {
            txt(lang(
                u8"マナが足りないが、それでも詠唱を試みる？"s,
                u8"You are going to over-cast the spell. Are you sure?"s));
            ELONA_YES_NO_PROMPT();
            rtval = show_prompt(promptx, prompty, 160);
            if (rtval != 0)
            {
                update_screen();
                efsource = 0;
                return 0;
            }
        }
        screenupdate = -1;
        update_screen();
    }
    int stat = label_2175();
    if (stat == 0)
    {
        efsource = 0;
        return 0;
    }
    if (cc != 0)
    {
        if (the_ability_db[efid]->sdataref1 == 7)
        {
            if (cdata[cc].relationship == 10 || gdata_current_map == 40)
            {
                efsource = 0;
                return 0;
            }
            if (gdata_play_turns % 10 > 4)
            {
                efsource = 0;
                return 0;
            }
        }
    }
    if (cc == 0 || (cc != 0 && npccostmp == 1))
    {
        if (cc == 0)
        {
            spell(efid - 400) -= calcspellcoststock(efid, cc);
            if (spell(efid - 400) < 0)
            {
                spell(efid - 400) = 0;
            }
        }
        mp = calcspellcostmp(efid, cc);
        if (cc == 0)
        {
            if (cdata[0].god_id == core_god::ehekatl)
            {
                mp = rnd(mp * 140 / 100 + 1) + 1;
            }
        }
        dmgmp(cc, mp);
        if (cdata[cc].state != 1)
        {
            efsource = 0;
            return 1;
        }
    }
    if (cdata[cc].confused != 0 || cdata[cc].dimmed != 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は混乱しながらも魔法の詠唱を試みた。"s,
                name(cc) + u8" try"s + _s(cc)
                    + u8" to cast a spell in confusion."s));
        }
        int stat = try_to_cast_spell();
        if (stat == 0)
        {
            efsource = 0;
            return 1;
        }
    }
    else if (is_in_fov(cc))
    {
        if (cc == 0)
        {
            txt(lang(
                name(cc) + u8"は"s
                    + i18n::_(u8"ability", std::to_string(efid), u8"name")
                    + u8"の"s
                    + i18n::_(
                          u8"ui",
                          u8"cast_style",
                          u8"_"s + cdata[cc].special_attack_type),
                name(cc) + u8" cast "s
                    + i18n::_(u8"ability", std::to_string(efid), u8"name")
                    + u8"."s));
        }
        else
        {
            txt(lang(
                name(cc) + u8"は"s
                    + i18n::_(
                          u8"ui",
                          u8"cast_style",
                          u8"_"s + cdata[cc].special_attack_type),
                name(cc) + ""s
                    + i18n::_(
                          u8"ui",
                          u8"cast_style",
                          u8"_"s + cdata[cc].special_attack_type)));
        }
    }
    if (findbuff(cc, 2) != -1)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"沈黙の霧が詠唱を阻止した。"s,
                u8"The mist of silence interrupts a spell."s));
        }
        efsource = 0;
        return 1;
    }
    if (rnd(100) >= calcspellfail(efid, cc))
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は詠唱に失敗した。"s,
                name(cc) + u8" fail"s + _s(cc) + u8" to cast a spell."s));
            play_animation(8);
        }
        efsource = 0;
        return 1;
    }
    if (noeffect == 1)
    {
        txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
        efsource = 0;
        return 1;
    }
    efp = calcspellpower(efid, cc);
    p = encfind(cc, 34);
    if (p != -1)
    {
        efp = efp * (100 + p / 10) / 100;
    }
    rapidmagic = 0;
    if (cdata[cc].can_cast_rapid_magic()
        && the_ability_db[efid]->sdataref1 == 2)
    {
        rapidmagic = 1 + (rnd(3) != 0) + (rnd(2) != 0);
    }
    if (rapidmagic)
    {
        for (int cnt = 0, cnt_end = (rapidmagic); cnt < cnt_end; ++cnt)
        {
            magic();
            if (cdata[tc].state != 1)
            {
                int stat = label_2072();
                if (stat == 0)
                {
                    break;
                }
                else
                {
                    tc = cdata[cc].enemy_id;
                    if (relationbetween(cc, tc) != -3)
                    {
                        break;
                    }
                }
            }
        }
        rapidmagic = 0;
    }
    else
    {
        magic();
    }
    return 1;
}



int drink_potion()
{
    tc = cc;
    efsource = 4;
    if (potionspill || potionthrow)
    {
        if (potionthrow)
        {
            efp = efp * potionthrow / 100;
            efstatus = inv[ci].curse_state;
        }
    }
    else
    {
        efstatus = inv[ci].curse_state;
        if (is_in_fov(tc))
        {
            snd(17);
            txt(lang(
                npcn(tc) + itemname(ci, 1) + u8"を飲み干した。"s,
                name(tc) + u8" drink"s + _s(tc) + u8" "s + itemname(ci, 1)
                    + u8"."s));
        }
    }
    magic();
    if (potionspill || potionthrow)
    {
        potionspill = 0;
        potionthrow = 0;
    }
    else
    {
        if (obvious == 1)
        {
            if (tc == 0)
            {
                item_identify(
                    inv[ci], identification_state_t::partly_identified);
            }
        }
        --inv[ci].number;
        if (ci >= 5080)
        {
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
        else if (tc == 0)
        {
            refresh_burden_state();
        }
    }
    cdata[tc].nutrition += 150;
    if (tc < 16)
    {
        if (cdata[tc].nutrition > 12000)
        {
            if (rnd(5) == 0)
            {
                chara_vomit(tc);
            }
        }
    }
    return 1;
}



int drink_well()
{
    if (inv[ci].param1 < -5 || inv[ci].param3 >= 20
        || (inv[ci].id == 602 && gdata_holy_well_count <= 0))
    {
        const auto valn = itemname(ci);
        txt(lang(valn + u8"は涸れている。"s, valn + u8" is dry."s));
        return 1;
    }
    snd(17);
    const auto valn = itemname(ci);
    txt(lang(
        name(cc) + u8"は"s + valn + u8"の水をすくって飲んだ。"s,
        name(cc) + u8" draw"s + _s(cc) + u8" water from "s + valn + u8"."s));
    tc = cc;
    cibk = ci;
    p = rnd(100);
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (cc != 0)
        {
            if (rnd(15) == 0)
            {
                txt(lang(
                    name(cc) + u8"は井戸に落ちた！ "s,
                    name(cc) + u8" falls in the well!"s));
                txtef(9);
                txt(name(cc)
                    + lang(
                          u8"「手を伸ばせー」"s,
                          (u8" yells, "s + u8"\"G-Give me your hands!\""s)));
                if (cdata[cc].is_floating() == 1 && cdata[cc].gravity == 0)
                {
                    txt(lang(
                        u8"しかしすぐに浮いてきた… "s,
                        u8"Soon "s + he(cc) + u8" floats up to the surface."s));
                }
                else
                {
                    dmghp(cc, 9999, -1);
                }
                break;
            }
        }
        if (inv[ci].id == 602)
        {
            if (rnd(2) == 0)
            {
                efid = 1113;
                magic();
                break;
            }
        }
        if (p > 70)
        {
            p = rnd(5);
            if (p == 0)
            {
                efid = 1112;
                efp = 100;
                magic();
                break;
            }
            if (p == 1)
            {
                efid = 1110;
                efp = 100;
                magic();
                break;
            }
            if (p == 2)
            {
                efid = 1111;
                efp = 100;
                magic();
                break;
            }
            if (p == 3)
            {
                efid = 1109;
                efp = 100;
                magic();
                break;
            }
            if (p == 4)
            {
                efid = 1108;
                efp = 100;
                magic();
                break;
            }
        }
        if (p > 55)
        {
            flt();
            itemcreate(-1, 54, cdata[cc].position.x, cdata[cc].position.y, 0);
            inv[ci].number = rnd(sdata(159, cc) / 2 * 50 + 100) + 1;
            txt(lang(
                name(cc) + u8"は水の中に金貨を見つけた。"s,
                name(cc) + u8" find"s + _s(cc)
                    + u8" some gold pieces in water."s));
            break;
        }
        if (p > 45)
        {
            p = rnd(8) + 10;
            if (rnd(5) > 2)
            {
                skillmod(p, cc, 1000);
            }
            else
            {
                skillmod(p, cc, -1000);
            }
            break;
        }
        if (p > 40)
        {
            if (cdata[cc].level < 5)
            {
                break;
            }
            if (is_in_fov(cc))
            {
                txt(lang(
                    ""s + name(cc) + u8"は何かいけないものを飲み込んだ。"s,
                    name(cc) + u8" swallow"s + _s(cc) + u8" something bad."s));
            }
            tc = cc;
            get_pregnant();
            break;
        }
        if (p > 35)
        {
            txt(lang(
                u8"井戸から何かが出てきた！"s,
                u8"Something comes out from the well!"s));
            for (int cnt = 0, cnt_end = (1 + rnd(3)); cnt < cnt_end; ++cnt)
            {
                flt(calcobjlv(cdata[cc].level * 3 / 2 + 3), calcfixlv(2));
                characreate(-1, 0, cdata[cc].position.x, cdata[cc].position.y);
            }
            break;
        }
        if (p > 33)
        {
            efid = 1113;
            magic();
            break;
        }
        if (p > 20)
        {
            efid = 454;
            magic();
            break;
        }
        if (p == 0)
        {
            if (rnd(gdata_wish_count + 1))
            {
                txtef(5);
                txt(lang(
                    u8"ものすごい幸運が訪れた…ような気がしたが気のせいだった。"s,
                    u8"You feel as a stroke of good fortune passed by."s));
                break;
            }
            ++gdata_wish_count;
            efid = 441;
            magic();
            break;
        }
        if (cc == 0)
        {
            txt(lang(
                u8"この水は清涼だ。"s, u8"Phew, fresh water tastes good."s));
        }
    }
    ci = cibk;
    if (cc != 0)
    {
        cdata[cc].nutrition += 4000;
    }
    else
    {
        cdata[cc].nutrition += 500;
    }
    if (inv[ci].id == 602)
    {
        --gdata_holy_well_count;
    }
    else
    {
        inv[ci].param1 -= rnd(3);
        inv[ci].param3 += rnd(3);
        if (inv[ci].param3 >= 20)
        {
            txt(lang(
                itemname(ci) + u8"は完全に干上がった。"s,
                itemname(ci) + u8" has completely dried up."s));
            return 1;
        }
    }
    if (inv[ci].param1 < -5)
    {
        txt(lang(
            itemname(ci) + u8"は干上がった。"s,
            itemname(ci) + u8" has dried up."s));
    }
    return 1;
}



int read_scroll()
{
    tc = cc;
    tlocx = cdata[cc].position.x;
    tlocy = cdata[cc].position.y;
    efstatus = inv[ci].curse_state;
    efsource = 2;
    if (cdata[cc].blind != 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は何も見えない。"s,
                name(cc) + u8" can see nothing."s));
        }
        efsource = 0;
        return 0;
    }
    if (cdata[cc].dimmed != 0 || cdata[cc].confused != 0)
    {
        if (rnd(4) != 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"はふらふらした。"s,
                    name(cc) + u8" stagger"s + _s(cc) + u8"."s));
            }
            efsource = 0;
            return 0;
        }
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            npcn(cc) + itemname(ci, 1) + u8"を読んだ。"s,
            name(cc) + u8" read"s + _s(cc) + u8" "s + itemname(ci, 1)
                + u8"."s));
    }
    if (inv[ci].id != 621)
    {
        --inv[ci].number;
        if (ci >= 5080)
        {
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
        else
        {
            refresh_burden_state();
        }
        skillexp(150, cc, 25, 2);
    }
    magic();
    if (cc == 0)
    {
        if (obvious == 1)
        {
            item_identify(inv[ci], identification_state_t::partly_identified);
        }
    }
    return 1;
}



int label_2172()
{
    if (inv[ci].count <= 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                itemname(ci, 1) + u8"を振った。"s,
                u8"You zap "s + itemname(ci, 1) + u8"."s));
            txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
        }
        return 0;
    }
    efstatus = inv[ci].curse_state;
    if (efstatus == curse_state_t::blessed)
    {
        efstatus = curse_state_t::none;
    }
    efsource = 1;
    int stat = label_2175();
    if (stat == 0)
    {
        efsource = 0;
        return 0;
    }
    if (efid >= 400 && efid < 467)
    {
        if ((stat == 0 && the_ability_db[efid]->sdataref3 / 1000 * 1000 == 2000)
            || noeffect == 1)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    itemname(ci, 1) + u8"を振った。"s,
                    u8"You zap "s + itemname(ci, 1) + u8"."s));
                txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
            }
            goto label_2173_internal;
        }
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            itemname(ci, 1) + u8"を振った。"s,
            u8"You zap "s + itemname(ci, 1) + u8"."s));
    }
    efp = efp
        * (100 + sdata(174, cc) * 10 + sdata(16, cc) / 2 + sdata(13, cc) / 2)
        / 100;
    if (efid >= 400 && efid < 467)
    {
        f = 0;
        int skill = sdata(174, cc) * 20 + 100;
        if (inv[ci].curse_state == curse_state_t::blessed)
        {
            skill = skill * 125 / 100;
        }
        if (is_cursed(inv[ci].curse_state))
        {
            skill = skill * 50 / 100;
        }
        else if (rnd(2))
        {
            f = 1;
        }
        if (rnd((the_ability_db[efid]->sdataref4 + 1)) / 2 <= skill)
        {
            f = 1;
        }
    }
    else
    {
        f = 1;
    }
    if (rnd(30) == 0)
    {
        f = 0;
    }
    if (f == 1 || inv[ci].id == 290 || cc != 0)
    {
        magic();
        if (cc == 0)
        {
            if (obvious == 1)
            {
                item_identify(
                    inv[ci], identification_state_t::partly_identified);
            }
        }
        label_1469(cc);
    }
    else if (is_in_fov(cc))
    {
        txt(lang(
            name(cc) + u8"は杖をうまく使えなかった。"s,
            name(cc) + u8" fail to use the power of the rod."s));
    }
label_2173_internal:
    efsource = 0;
    if (inv[ci].number == 0)
    {
        if (ci >= 5080)
        {
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
            return 1;
        }
    }
    item_separate(ci);
    --inv[ci].count;
    return 1;
}



int label_2174()
{
    if (efid == 646)
    {
        if (cdata[tc].is_sentenced_daeth() == 1)
        {
            if (cdata[cc].relationship == -3)
            {
                for (int cnt = 0; cnt < ELONA_MAX_PARTY_CHARACTERS; ++cnt)
                {
                    if (cdata[cnt].state == 1)
                    {
                        if (cdata[cnt].relationship == 10)
                        {
                            cdata[cc].enemy_id = cnt;
                            break;
                        }
                    }
                }
            }
            return 0;
        }
    }
    {
        int stat = label_2175();
        if (stat == 0)
        {
            return 0;
        }
    }
    if (the_ability_db[efid]->sdataref3 / 1000 * 1000 != 3000
        && the_ability_db[efid]->sdataref3 / 1000 * 1000 != 10000)
    {
        if (cdata[cc].confused != 0 || cdata[cc].blind != 0)
        {
            if (rnd(5) == 0)
            {
                if (is_in_fov(cc))
                {
                    txt(lang(
                        name(cc) + u8"は頭を振った。"s,
                        name(cc) + u8" shake"s + _s(cc) + u8" "s + his(cc)
                            + u8" head."s));
                }
                return 1;
            }
        }
    }
    if (efid >= 600)
    {
        if (cc == 0)
        {
            if (cdata[0].sp < 50)
            {
                if (cdata[0].sp < rnd(75))
                {
                    txt(lang(
                        u8"疲労し過ぎて失敗した！"s,
                        u8"You are too exhausted!"s));
                    dmgsp(0, the_ability_db[efid]->cost / 2 + 1);
                    return 1;
                }
            }
            dmgsp(
                0,
                rnd(the_ability_db[efid]->cost / 2 + 1)
                    + the_ability_db[efid]->cost / 2 + 1);
            skillexp(the_ability_db[efid]->related_basic_attribute, cc, 25);
        }
    }
    efp = calcspellpower(efid, cc);
    if (noeffect == 1)
    {
        if (efid != 300)
        {
            txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
            return 1;
        }
    }
    {
        int stat = magic();
        if (stat == 0)
        {
            return 0;
        }
    }
    return 1;
}



int label_2175()
{
    noeffect = 0;
    if (efid > 661)
    {
        tc = cc;
        return 1;
    }
    tg = the_ability_db[efid]->sdataref3 / 1000 * 1000;
    if (efsource == 1)
    {
        if (tg == 3000)
        {
            tg = 8000;
        }
    }
    if (the_ability_db[efid]->sdataref1 == 7)
    {
        if (cc == 0)
        {
            tc = 0;
            return 1;
        }
    }
    if (tg == 8000)
    {
        if (cc == 0)
        {
            tc = 0;
            txt(lang(u8"どの方向？"s, u8"Which direction?"s));
            update_screen();
            int stat = ask_direction();
            if (stat == 0)
            {
                return 0;
            }
            if (map(tlocx, tlocy, 1) == 0)
            {
                noeffect = 1;
                obvious = 0;
                return 1;
            }
            tc = map(tlocx, tlocy, 1) - 1;
        }
        else
        {
            if (dist(
                    cdata[tc].position.x,
                    cdata[tc].position.y,
                    cdata[cc].position.x,
                    cdata[cc].position.y)
                > the_ability_db[efid]->sdataref3 % 1000 + 1)
            {
                return 0;
            }
            tlocx = cdata[tc].position.x;
            tlocy = cdata[tc].position.y;
        }
        return 1;
    }
    if (tg == 7000 || (tg == 9000 && tgloc == 1 && cc == 0))
    {
        if (cc == 0)
        {
            if (tg == 9000)
            {
                if (int stat = fov_los(
                                   cdata[cc].position.x,
                                   cdata[cc].position.y,
                                   tglocx,
                                   tglocy)
                        == 0)
                {
                    if (stat == 0)
                    {
                        txt(lang(
                            u8"その場所は見えない。"s,
                            u8"You can't see the location."s));
                        update_screen();
                    }
                    obvious = 0;
                    return 0;
                }
                tlocx = tglocx;
                tlocy = tglocy;
            }
            else
            {
                int stat = target_position();
                if (stat != 1)
                {
                    if (stat == 0)
                    {
                        txt(lang(
                            u8"その場所は見えない。"s,
                            u8"You can't see the location."s));
                        update_screen();
                    }
                    obvious = 0;
                    return 0;
                }
            }
        }
        else
        {
            if (fov_los(
                    cdata[tc].position.x,
                    cdata[tc].position.y,
                    cdata[cc].position.x,
                    cdata[cc].position.y)
                == 0)
            {
                return 0;
            }
            tlocx = cdata[tc].position.x;
            tlocy = cdata[tc].position.y;
        }
        return 1;
    }
    if (tg == 3000 || tg == 10000)
    {
        if (cc != 0)
        {
            if (the_ability_db[efid]->sdataref1 == 3)
            {
                if (dist(
                        cdata[tc].position.x,
                        cdata[tc].position.y,
                        cdata[cc].position.x,
                        cdata[cc].position.y)
                    > the_ability_db[efid]->sdataref3 % 1000 + 1)
                {
                    return 0;
                }
                if (fov_los(
                        cdata[cc].position.x,
                        cdata[cc].position.y,
                        cdata[tc].position.x,
                        cdata[tc].position.y)
                    == 0)
                {
                    return 0;
                }
            }
        }
        tc = cc;
        tlocx = cdata[cc].position.x;
        tlocy = cdata[cc].position.y;
        return 1;
    }
    if (tg == 2000 || tg == 6000 || tg == 9000)
    {
        if (cc == 0)
        {
            int stat = label_2072();
            if (stat == 0)
            {
                obvious = 0;
                return 0;
            }
            tc = cdata[0].enemy_id;
            if (cdata[tc].relationship >= 0)
            {
                int stat = label_2073();
                if (stat == 0)
                {
                    obvious = 0;
                    return 0;
                }
            }
        }
        if (dist(
                cdata[tc].position.x,
                cdata[tc].position.y,
                cdata[cc].position.x,
                cdata[cc].position.y)
            > the_ability_db[efid]->sdataref3 % 1000 + 1)
        {
            if (cc == 0)
            {
                ++msgdup;
                txt(lang(u8"射程距離外だ。"s, u8"It's out of range."s));
                update_screen();
            }
            return 0;
        }
        if (fov_los(
                cdata[cc].position.x,
                cdata[cc].position.y,
                cdata[tc].position.x,
                cdata[tc].position.y)
            == 0)
        {
            return 0;
        }
        tlocx = cdata[tc].position.x;
        tlocy = cdata[tc].position.y;
        return 1;
    }
    if (tg == 5000)
    {
        if (cc == 0)
        {
            if (efsource == 3)
            {
                txt(lang(
                    u8"どの方向に唱える？ "s,
                    u8"Which direction do you want to cast the spell? "s));
            }
            else
            {
                txt(lang(
                    u8"どの方向に振る？ "s,
                    u8"Which direction do you want to zap the wand? "s));
            }
            update_screen();
            int stat = ask_direction();
            if (stat == 0)
            {
                txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
                obvious = 0;
                return 0;
            }
        }
    }
    return 1;
}



void label_2187()
{
    int subloop = 0;
    subloop = 1;
    if (gdata_mount != 0)
    {
        if (tc == gdata_mount || tc == 0)
        {
            subloop = 2;
            if (tc == gdata_mount)
            {
                tc(1) = 0;
            }
            else
            {
                tc(1) = gdata_mount;
            }
        }
    }
    for (int cnt = 0, cnt_end = (subloop); cnt < cnt_end; ++cnt)
    {
        healhp(tc(cnt), roll(dice1, dice2, bonus));
        healcon(tc(cnt), 6);
        healcon(tc(cnt), 1, 50);
        healcon(tc(cnt), 5, 50);
        healcon(tc(cnt), 7, 30);
        healcon(tc(cnt), 9, 20);
        healsan(tc(cnt), 1);
    }
    return;
}



void label_2188()
{
    cdata[tc].poisoned = 0;
    cdata[tc].sleep = 0;
    cdata[tc].confused = 0;
    cdata[tc].blind = 0;
    cdata[tc].paralyzed = 0;
    cdata[tc].choked = 0;
    cdata[tc].dimmed = 0;
    cdata[tc].drunk = 0;
    cdata[tc].bleeding = 0;
    gdata_continuous_active_hours = 0;
    cdata[tc].hp = cdata[tc].max_hp;
    cdata[tc].mp = cdata[tc].max_mp;
    cdata[tc].sp = cdata[tc].max_sp;
    return;
}



turn_result_t do_throw_command()
{
    int ccthrowpotion = 0;
    if (is_in_fov(cc))
    {
        txt(lang(
            name(cc) + u8"は"s + itemname(ci, 1) + u8"を投げた。"s,
            name(cc) + u8" throw"s + _s(cc) + u8" "s + itemname(ci, 1)
                + u8"."s));
    }
    if (dist(cdata[cc].position.x, cdata[cc].position.y, tlocx, tlocy) * 4
            > rnd(sdata(111, cc) + 10) + sdata(111, cc) / 4
        || rnd(10) == 0)
    {
        x = tlocx + rnd(2) - rnd(2);
        y = tlocy + rnd(2) - rnd(2);
        if (x >= 0)
        {
            if (y >= 0)
            {
                if (x < mdata(0))
                {
                    if (y < mdata(1))
                    {
                        if ((chipm(7, map(x, y, 0)) & 4) == 0)
                        {
                            tlocx = x;
                            tlocy = y;
                        }
                    }
                }
            }
        }
    }
    aniref(0) = inv[ci].image;
    aniref(1) = inv[ci].color;
    anix = tlocx;
    aniy = tlocy;
    play_animation(15);
    ti = inv_getfreeid(-1);
    removeitem(ci, 1);
    if (inv[ci].id == 685)
    {
        if (ti != -1)
        {
            item_copy(ci, ti);
            inv[ti].number = 1;
            inv[ti].position.x = tlocx;
            inv[ti].position.y = tlocy;
            ci = ti;
        }
    }
    if (cc == 0)
    {
        refresh_burden_state();
    }
    x = tlocx;
    y = tlocy;
    play_animation(14);
    if (inv[ci].id == 685 || inv[ci].id == 699)
    {
        snd(91);
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        if (map(tlocx, tlocy, 1) != 0)
        {
            tc = map(tlocx, tlocy, 1) - 1;
            txt(lang(
                name(tc) + u8"に見事に命中した！"s,
                u8"It hits "s + name(tc) + u8"!"s));
            if (inv[ci].id == 685)
            {
                if (tc < ELONA_MAX_PARTY_CHARACTERS
                    || cdata[tc].character_role != 0 || cdata[tc].quality == 6
                    || cdata[tc].is_lord_of_dungeon() == 1)
                {
                    txt(lang(
                        u8"その生物には無効だ。"s,
                        u8"The creature can't be captured."s));
                    return turn_result_t::turn_end;
                }
                if (cdata[tc].level > inv[ci].param2)
                {
                    txt(lang(
                        u8"その生物を捕獲するには、より高レベルのモンスターボールが必要だ。"s,
                        u8"Power level of the ball is not enough to capture the creature."s));
                    return turn_result_t::turn_end;
                }
                if (cdata[tc].hp > cdata[tc].max_hp / 10)
                {
                    txt(lang(
                        u8"捕獲するためにはもっと弱らせる必要がある。"s,
                        u8"You need to weaken the creature to capture it."s));
                    return turn_result_t::turn_end;
                }
                txtef(2);
                txt(lang(
                    name(tc) + u8"をモンスターボールに捕獲した。"s,
                    u8"You capture "s + name(tc) + u8"."s));
                animeload(8, tc);
                inv[ci].subname = cdata[tc].id;
                inv[ci].param3 = cdata[tc].level;
                inv[ci].weight = clamp(cdata[tc].weight, 10000, 100000);
                inv[ci].value = 1000;
            }
            else
            {
                if (cdata[tc].id != 319 || tc < 16)
                {
                    txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
                    return turn_result_t::turn_end;
                }
                if (gdata_current_map == 6 || gdata_current_map == 40
                    || gdata_current_map == 35)
                {
                    txt(lang(
                        u8"この場所では効果がない。"s,
                        u8"This doesn't work in this area."s));
                    return turn_result_t::turn_end;
                }
                rc = tc;
                new_ally_joins();
            }
            chara_vanquish(tc);
            check_quest();
        }
        return turn_result_t::turn_end;
    }
    if (the_item_db[inv[ci].id]->category == 52000 || inv[ci].id == 772)
    {
        if (inv[ci].id != 601)
        {
            if (is_in_fov({tlocx, tlocy}))
            {
                if (inv[ci].id == 587)
                {
                    snd(86);
                }
                else
                {
                    snd(47);
                }
            }
            if (map(tlocx, tlocy, 1) != 0)
            {
                tc = map(tlocx, tlocy, 1) - 1;
                if (is_in_fov(tc))
                {
                    txt(lang(
                        name(tc) + u8"に見事に命中した！"s,
                        u8"It hits "s + name(tc) + u8"!"s));
                    wet(tc, 25);
                }
                rowact_check(tc);
                if (inv[ci].id == 587)
                {
                    if (is_in_fov(tc))
                    {
                        if (tc != 0)
                        {
                            txtef(9);
                            txt(lang(u8"「いてー！」"s, u8"\"Hey!\""s),
                                lang(
                                    u8"「やったな」"s,
                                    u8"\"Now you did it.\""s),
                                lang(u8" *クスクス* "s, u8"*chuckle*"s),
                                lang(u8"「キャハハ」"s, u8"\"Tee-hee-hee!\""s),
                                lang(
                                    u8"「こやつめ」"s,
                                    u8"\"You'll pay for this.\""s),
                                lang(u8"「むむっ」"s, u8"*grin*"s));
                        }
                    }
                    return turn_result_t::turn_end;
                }
                if (inv[ci].id == 772)
                {
                    if (is_in_fov(tc))
                    {
                        txtef(4);
                        txt(lang(u8" *ぷちゅ* "s, u8"*crumble*"s));
                    }
                    if (inv[ci].param3 == -1)
                    {
                        if (is_in_fov(tc))
                        {
                            txtef(4);
                            txt(lang(
                                name(tc) + u8"は怒りに体を奮わせた！"s,
                                name(tc) + u8" "s + is(tc)
                                    + u8" engulfed in fury!"s));
                        }
                        cdata[tc].furious += rnd(10) + 5;
                    }
                    return turn_result_t::turn_end;
                }
                if (tc >= 16)
                {
                    hostileaction(cc, tc);
                }
                ccthrowpotion = cc;
                potionthrow = 100;
                cc = tc;
                dbid = inv[ci].id;
                access_item_db(15);
                cc = ccthrowpotion;
                return turn_result_t::turn_end;
            }
            if (inv[ci].id == 587)
            {
                if (map(tlocx, tlocy, 4) != 0)
                {
                    cell_itemlist(tlocx, tlocy);
                    f = 0;
                    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
                    {
                        p = list(0, cnt);
                        if (inv[p].id == 541)
                        {
                            if (is_in_fov({tlocx, tlocy}))
                            {
                                txt(lang(
                                    itemname(p, 1)
                                        + u8"に命中して、雪だるまは崩れた。"s,
                                    u8"It hits "s + itemname(p, 1)
                                        + u8" and breaks it."s));
                            }
                            --inv[p].number;
                            f = 1;
                            break;
                        }
                    }
                    if (f == 1)
                    {
                        cell_refresh(tlocx, tlocy);
                        return turn_result_t::turn_end;
                    }
                }
            }
            if (inv[ci].id == 587)
            {
                if (chipm(0, map(tlocx, tlocy, 0)) == 4)
                {
                    return turn_result_t::turn_end;
                }
                if (is_in_fov({tlocx, tlocy}))
                {
                    txt(lang(
                        u8"それは地面に落ちて溶けた。"s,
                        u8"It falls on the ground and melts."s));
                }
            }
            else if (is_in_fov({tlocx, tlocy}))
            {
                txt(lang(
                    u8"それは地面に落ちて砕けた。"s,
                    u8"It falls on the ground and shatters."s));
            }
            if (inv[ci].id == 772)
            {
                if (is_in_fov({tlocx, tlocy}))
                {
                    txtef(4);
                    txt(lang(u8" *ぷちゅ* "s, u8"*crumble*"s));
                }
                return turn_result_t::turn_end;
            }
            efp = 50 + sdata(111, cc) * 10;
            if (inv[ci].id == 392)
            {
                addmef(tlocx, tlocy, 3, 19, rnd(15) + 5, efp, cc);
                return turn_result_t::turn_end;
            }
            if (inv[ci].id == 577)
            {
                addmef(tlocx, tlocy, 5, 24, rnd(15) + 25, efp, cc);
                mapitem_fire(tlocx, tlocy);
                return turn_result_t::turn_end;
            }
            addmef(
                tlocx,
                tlocy,
                6,
                27,
                -1,
                efp,
                cc,
                inv[ci].id,
                static_cast<int>(inv[ci].curse_state), // TODO
                inv[ci].color);
            return turn_result_t::turn_end;
        }
    }
    if (is_in_fov({tlocx, tlocy}))
    {
        txt(lang(
            u8"それは地面に落ちて砕けた。"s,
            u8"It falls on the ground and shatters."s));
        snd(47);
    }
    if (inv[ci].id == 578)
    {
        flt();
        itemcreate(-1, 54, tlocx, tlocy, inv[ci].param1);
    }
    return turn_result_t::turn_end;
}



turn_result_t do_pray_command()
{
    int stat = item_find(60002);
    if (stat != -1)
    {
        ci = stat;
        if (core_god::int2godid(inv[ci].param1) != cdata[0].god_id)
        {
            label_1886();
            return turn_result_t::turn_end;
        }
    }
    return do_pray();
}



int pick_up_item()
{
    int sellgold = 0;
    if (cc != -1)
    {
        if (inv[ci].id == 54 || inv[ci].id == 55)
        {
            snd(11);
            ti = ci;
            in = inv[ci].number;
            inv[ci].number = 0;
            msgkeep = 1;
            txt(lang(
                name(cc) + u8"は"s + itemname(ti, in) + u8"を拾った。"s,
                name(cc) + u8" pick"s + _s(cc) + u8" up "s + itemname(ti, in)
                    + u8"."s));
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
            if (inv[ci].id == 54)
            {
                cdata[cc].gold += in;
            }
            else
            {
                cdata[cc].platinum_coin += in;
            }
            return 1;
        }
    }
    if (cc == 0)
    {
        if (gdata_mount != 0)
        {
            if (cdata[gdata_mount].continuous_action_id != 0)
            {
                if (cdata[gdata_mount].continuous_action_item == ci)
                {
                    txt(lang(
                        u8"それは"s + name(gdata_mount) + u8"が使用中だ。"s,
                        name(gdata_mount) + u8" "s + is(gdata_mount)
                            + u8" using it."s));
                    return 1;
                }
            }
        }
        if (the_item_db[inv[ci].id]->category == 57000)
        {
            if (inv[ci].own_state == 4)
            {
                if (cdata[0].continuous_action_id == 0)
                {
                    if (!inv_getspace(0))
                    {
                        txt(lang(
                            u8"バックパックが一杯だ。"s,
                            u8"Your inventory is full."s));
                        return 0;
                    }
                    gdata(91) = 103;
                    continuous_action_others();
                    return -1;
                }
            }
        }
        if (inv[ci].own_state == 3)
        {
            txt(lang(
                itemname(ci) + u8"を撤去する？ "s,
                u8"Do you want to remove "s + itemname(ci) + u8"? "s));
            ELONA_YES_NO_PROMPT();
            rtval = show_prompt(promptx, prompty, 160);
            if (rtval == 0)
            {
                snd(58);
                if (inv[ci].id == 555)
                {
                    midbk = mid;
                    mid = ""s + 30 + u8"_"s + (100 + inv[ci].count);
                    if (fs::exists(
                            filesystem::dir::tmp()
                            / (u8"mdata_"s + mid + u8".s2")))
                    {
                        ctrl_file(file_operation_t::_11);
                    }
                    mid = midbk;
                    inv[ci].count = 0;
                    inv[ci].own_state = 0;
                }
            }
            else
            {
                return 0;
            }
        }
        if (inv_getfreeid(cc) == -1)
        {
            txt(lang(
                u8"バックパックには、もうアイテムを入れる余裕がない。"s,
                u8"Your inventory is full."s));
            return 0;
        }
    }
    inumbk = inv[ci].number - in;
    inv[ci].number = in;
    if (cc == 0)
    {
        if (trait(215) != 0)
        {
            if (the_item_db[inv[ci].id]->category == 56000)
            {
                if (inv[ci].count > 0)
                {
                    dbid = inv[ci].id;
                    access_item_db(14);
                    txt(lang(
                        u8"あなたは"s + itemname(ci)
                            + u8"から魔力を吸い取った。"s,
                        u8"You absorb magic from "s + itemname(ci) + u8"."s));
                    if (efid >= 400 && efid < 467)
                    {
                        spell(efid - 400) += inv[ci].count * 5 * inv[ci].number;
                    }
                    else
                    {
                        healmp(0, inv[ci].count * 5 * inv[ci].number);
                    }
                    inv[ci].count = 0;
                }
            }
        }
        if (trait(216) != 0)
        {
            if (the_item_db[inv[ci].id]->category == 52000)
            {
                if (inv[ci].id != 262 && inv[ci].id != 559)
                {
                    if (rnd(5) == 0)
                    {
                        txt(lang(
                            u8"あなたの手から毒が滴った。"s,
                            u8"Poison drips from your hands."s));
                        inv[ci].id = 262;
                    }
                }
            }
        }
    }
    if (inv[ci].own_state < 0)
    {
        inv[ci].own_state = 0;
    }
    ibitmod(12, ci, 0);
    int stat = item_stack(cc, ci);
    if (stat == 0)
    {
        ti = inv_getfreeid(cc);
        if (ti == -1)
        {
            inv[ci].number = inumbk + in;
            if (invctrl == 12)
            {
                txt(lang(
                    u8"店の倉庫が一杯のため売れない。"s,
                    u8"Shopkeeper's inventory is full."s));
            }
            else
            {
                txt(lang(
                    u8"バックパックには、もうアイテムを入れる余裕がない。"s,
                    u8"Your inventory is full."s));
            }
            return 0;
        }
        item_copy(ci, ti);
        inv[ti].number = in;
    }
    inv[ci].number = inumbk;
    if (mode == 6)
    {
        if (the_item_db[inv[ti].id]->category == 57000)
        {
            if (invctrl == 11 || invctrl == 22)
            {
                if (invctrl == 22 && invctrl(1) == 3)
                {
                    if (inv[ti].param3 > 0)
                    {
                        inv[ti].param3 += gdata_hour + gdata_day * 24
                            + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12;
                    }
                }
                else if (inv[ti].param3 != 0)
                {
                    inv[ti].param3 = gdata_hour + gdata_day * 24
                        + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12
                        + the_item_db[inv[ti].id]->expiration_date;
                    if (inv[ti].param2 != 0)
                    {
                        inv[ti].param3 += 72;
                    }
                }
            }
            if (invctrl == 24 && invctrl(1) == 3)
            {
                if (inv[ti].param3 > 0)
                {
                    inv[ti].param3 = inv[ti].param3
                        - (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                           + gdata_year * 24 * 30 * 12);
                }
            }
        }
        if (invctrl == 11)
        {
            msgkeep = 1;
            txt(lang(
                itemname(ti, in) + u8"を買った。"s,
                u8"You buy "s + itemname(ti, in) + u8"."s));
            sellgold = calcitemvalue(ti, 0) * in;
            snd(12);
            cdata[0].gold -= sellgold;
            cdata[tc].gold += sellgold;
            if (the_item_db[inv[ti].id]->category == 92000)
            {
                inv[ti].param2 = calcitemvalue(ti, 0);
            }
        }
        if (invctrl == 12)
        {
            msgkeep = 1;
            sellgold = calcitemvalue(ci, 1) * in;
            if (ibit(9, ti) == 0)
            {
                txt(lang(
                    itemname(ti, in) + u8"を売った。"s,
                    u8"You sell "s + itemname(ti, in) + u8"."s));
            }
            else
            {
                ibitmod(9, ti, 0);
                txt(lang(
                    u8"盗品の"s + itemname(ti, in) + u8"を売却した。"s,
                    u8"You sell "s + itemname(ti, in)
                        + u8".(Stolen item sold) "s));
                if (gdata_thieves_guild_quota > 0)
                {
                    gdata_thieves_guild_quota -= sellgold;
                    if (gdata_thieves_guild_quota < 0)
                    {
                        gdata_thieves_guild_quota = 0;
                    }
                    txt(lang(
                        u8"盗賊ギルドのノルマ達成まで、あと金貨"s
                            + gdata_thieves_guild_quota
                            + u8"枚相当の盗品を売却する必要がある。"s,
                        u8"You still need to sell stuff worth "s
                            + gdata_thieves_guild_quota
                            + u8" gold pieces in order to advance ranks in the Thieves Guild."s));
                }
            }
            snd(11);
            cdata[0].gold += sellgold;
            cdata[tc].gold -= sellgold;
            if (cdata[tc].gold < 0)
            {
                cdata[tc].gold = 0;
            }
            inv[ti].identification_state =
                identification_state_t::completely_identified;
        }
        if (invctrl == 22 || invctrl == 24)
        {
            snd(14 + rnd(2));
            msgkeep = 1;
            if (invctrl == 22)
            {
                txt(lang(
                    name(cc) + u8"は"s + itemname(ti, in) + u8"を拾った。"s,
                    name(cc) + u8" pick"s + _s(cc) + u8" up "s
                        + itemname(ti, in) + u8"."s));
            }
            else
            {
                txt(lang(
                    itemname(ti, in) + u8"を保管した。"s,
                    u8"You put "s + itemname(ti, in)
                        + u8" in the container."s));
            }
        }
        else
        {
            r2 = sellgold;
            label_1459(0);
        }
    }
    else
    {
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        map(inv[ci].position.x, inv[ci].position.y, 5) =
            map(inv[ci].position.x, inv[ci].position.y, 4);
        snd(14 + rnd(2));
        msgkeep = 1;
        txt(lang(
            name(cc) + u8"は"s + itemname(ti, in) + u8"を拾った。"s,
            name(cc) + u8" pick"s + _s(cc) + u8" up "s + itemname(ti, in)
                + u8"."s));
    }
    if (cc == 0)
    {
        if (inv[ti].id == 255)
        {
            if (mdata(20) == 1)
            {
                f = 0;
                for (const auto& cnt : items(-1))
                {
                    if (inv[cnt].number == 0)
                    {
                        continue;
                    }
                    if (inv[cnt].id == 255)
                    {
                        f = 1;
                        break;
                    }
                }
                if (f == 0)
                {
                    mdata(20) = 0;
                    play_music();
                }
            }
        }
        int stat = convertartifact(ti);
        ti = stat;
        if (adata(16, gdata_current_map) == 101)
        {
            if (mode == 0)
            {
                label_1728();
            }
        }
        if (gdata_current_map == 7)
        {
            if (mode == 0)
            {
                label_1730();
            }
        }
        refresh_burden_state();
    }
    if (cc == -1)
    {
        refresh_burden_state();
    }
    return 1;
}



int drop_item()
{
    inumbk = inv[ci].number - in;
    inv[ci].number = in;
    inv[ci].position.x = cdata[cc].position.x;
    inv[ci].position.y = cdata[cc].position.y;
    itemturn(ci);
    int stat = item_stack(-1, ci);
    if (stat == 0 || dropval == 0)
    {
        ti = inv_getfreeid(-1);
        if (ti == -1)
        {
            txt(lang(
                u8"もう周りに物を置くスペースがない！ "s,
                u8"The place is too crowded. You can't drop stuff anymore."s));
            update_screen();
            return 0;
        }
        item_copy(ci, ti);
    }
    if (dropval == 1)
    {
        inv[ti].own_state = 3;
        inv[ti].count = gdata_next_shelter_serial_id + 100;
        ++gdata_next_shelter_serial_id;
    }
    inv[ci].number = inumbk;
    cell_refresh(inv[ti].position.x, inv[ti].position.y);
    if (dropval == 0)
    {
        screenupdate = -1;
        update_screen();
        snd(16);
        txt(lang(
            itemname(ti, in) + u8"を地面に置いた。"s,
            u8"You drop "s + itemname(ti, in) + u8"."s));
    }
    refresh_burden_state();
    if (inv[ti].id == 516)
    {
        int stat = item_find(60002, 0);
        if (stat != -1)
        {
            p = stat;
            if (core_god::int2godid(inv[p].param1) == cdata[cc].god_id)
            {
                if (inv[ti].curse_state != curse_state_t::blessed)
                {
                    snd(64);
                    inv[ti].curse_state = curse_state_t::blessed;
                    txtef(2);
                    txt(lang(
                        u8"水は祝福を受けた。"s, u8"The water is blessed."s));
                }
            }
        }
    }
    if (adata(16, gdata_current_map) == 101)
    {
        if (mode == 0)
        {
            label_1728();
        }
    }
    if (gdata_current_map == 7)
    {
        if (mode == 0)
        {
            label_1730();
        }
    }
    if (inv[ti].id == 255)
    {
        mdata(20) = 1;
        play_music();
    }
    return 1;
}



int equip_item(int cc)
{
    if (ci == -1)
    {
        return 0;
    }
    if (cdata_body_part(cc, body) % 10000 != 0)
    {
        return 0;
    }
    if (inv[ci].body_part != 0)
    {
        return 0;
    }
    item_separate(ci);
    if (cc == 0)
    {
        item_identify(inv[ci], identification_state_t::almost_identified);
    }
    inv[ci].body_part = body;
    cdata_body_part(cc, body) =
        cdata_body_part(cc, body) / 10000 * 10000 + ci + 1;
    return 1;
}



void unequip_item(int cc)
{
    p = cdata_body_part(cc, body) % 10000;
    if (p == 0)
    {
        rtval = -2;
        return;
    }
    ci = p - 1;
    cdata_body_part(cc, body) = cdata_body_part(cc, body) / 10000 * 10000;
    inv[ci].body_part = 0;
    item_stack(cc, ci);
}



void label_2196(int cc)
{
    for (int cnt = 100; cnt < 130; ++cnt)
    {
        if (cdata_body_part(cc, cnt) / 10000 == body)
        {
            p = cdata_body_part(cc, cnt) % 10000;
            if (p == 0)
            {
                continue;
            }
            --p;
            inv[p].body_part = 0;
            cdata_body_part(cc, cnt) = cdata_body_part(cc, cnt) / 10000 * 10000;
        }
    }
    return;
}



turn_result_t do_read_command()
{
    if (inv[ci].id == 783)
    {
        if (inv[ci].subname == 0)
        {
            txt(lang(
                u8"最後に調合したアイテムを、レシピに加えることができる。(まだ未実装)"s,
                u8"You can add a recipe of the item you previously created.(Not implemented yet)"s));
            return turn_result_t::turn_end;
        }
    }
    efid = 0;
    dbid = inv[ci].id;
    access_item_db(13);
    if (efid == 1115)
    {
        return build_new_building();
    }
    return turn_result_t::turn_end;
}



turn_result_t do_eat_command()
{
    if (cc == 0)
    {
        int stat = cargocheck();
        if (stat == 0)
        {
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (itemusingfind(ci) > 0)
        {
            txt(lang(
                u8"そのアイテムは他の誰かが使用中だ。"s,
                u8"Someone else is using the item."s));
            return turn_result_t::pc_turn_user_error;
        }
    }
    else if (itemusingfind(ci) != -1)
    {
        tc = itemusingfind(ci);
        if (tc != cc)
        {
            rowactend(tc);
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"は"s + name(tc) + u8"の食べ物を横取りした。"s,
                    name(cc) + u8" snatch"s + _s(cc) + u8" "s + name(tc)
                        + your(tc) + u8" food."s));
            }
        }
    }
    cdata[cc].emotion_icon = 116;
    label_2160();
    return turn_result_t::turn_end;
}



turn_result_t do_drink_command()
{
    dbid = inv[ci].id;
    access_item_db(15);
    return turn_result_t::turn_end;
}



turn_result_t do_zap_command()
{
    dbid = inv[ci].id;
    access_item_db(14);
    int stat = label_2172();
    if (stat == 0)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    return turn_result_t::turn_end;
}



turn_result_t do_bash()
{
    if (map(x, y, 5) != 0)
    {
        if (mapitemfind(x, y, 526) != -1)
        {
            ci = mapitemfind(x, y, 526);
            item_separate(ci);
            snd(73);
            txt(lang(
                itemname(ci) + u8"に体当たりした。"s,
                u8"You throw your weight against "s + itemname(ci) + u8"."s));
            if (inv[ci].own_state == 5 || inv[ci].param1 <= 0)
            {
                txt(lang(
                    u8"もう実はないようだ… "s,
                    u8"It seems there are no fruits left on the tree."s));
                return turn_result_t::turn_end;
            }
            --inv[ci].param1;
            if (inv[ci].param1 <= 0)
            {
                inv[ci].image = 592;
                cell_refresh(x, y);
            }
            if (y + 1 < mdata(1))
            {
                if ((chipm(7, map(x, y + 1, 0)) & 4) == 0)
                {
                    ++y;
                }
            }
            flt();
            itemcreate(-1, inv[ci].param2, x, y, 0);
            txt(lang(
                itemname(ci, 1) + u8"が降ってきた。"s,
                itemname(ci, 1) + u8" falls down from the tree."s));
            item_stack(-1, ci);
            return turn_result_t::turn_end;
        }
    }
    if (map(x, y, 1) != 0)
    {
        tc = map(x, y, 1) - 1;
        if (cdata[tc].sleep == 0)
        {
            if (cc == 0)
            {
                if (cdata[tc].relationship >= 0)
                {
                    int stat = label_2073();
                    if (stat == 0)
                    {
                        return turn_result_t::pc_turn_user_error;
                    }
                }
            }
            if (cdata[tc].choked)
            {
                snd(73);
                txt(lang(
                    name(cc) + u8"は"s + name(tc) + u8"に全力で体当たりした。"s,
                    name(cc) + u8" bash"s + _s(cc) + u8" up "s + name(tc)
                        + u8" at full power."s));
                dmghp(tc, sdata(10, cc) * 5, cc);
                if (cdata[tc].state == 1)
                {
                    txt(lang(
                        name(tc) + u8"はもちを吐き出した。"s,
                        name(tc) + u8" spit"s + _s(tc) + u8" mochi."s));
                    txt(lang(u8"「助かったよ！」"s, u8"\"You saved me!\""s));
                    cdata[tc].choked = 0;
                    modimp(tc, 10);
                }
            }
            else
            {
                snd(73);
                txt(lang(
                    name(cc) + u8"は"s + name(tc) + u8"に体当たりした。"s,
                    name(cc) + u8" bash"s + _s(cc) + u8" up "s + name(tc)
                        + u8"."s));
                hostileaction(cc, tc);
            }
        }
        else
        {
            snd(73);
            txt(lang(
                name(cc) + u8"は"s + name(tc) + u8"に体当たりした。"s,
                name(cc) + u8" bash"s + _s(cc) + u8" up "s + name(tc)
                    + u8"."s));
            txt(lang(
                name(tc) + u8"は睡眠を妨害された。"s,
                name(cc) + u8" disturb"s + _s(cc) + u8" "s + his(tc)
                    + u8" sleep."s));
            modify_karma(cc, -1);
            cdata[tc].emotion_icon = 418;
        }
        cdata[tc].sleep = 0;
        return turn_result_t::turn_end;
    }
    if (map(x, y, 6) != 0)
    {
        cell_featread(x, y);
        if (feat(1) == 30)
        {
            map(x, y, 6) = 0;
            spillfrag(x, y, 2);
            flt(calcobjlv(
                    gdata_current_dungeon_level * (gdata_current_map != 30)),
                calcfixlv(2));
            flttypemajor = fsetbarrel(rnd(length(fsetbarrel)));
            itemcreate(-1, 0, x, y, 0);
            if (is_in_fov(cc))
            {
                snd(73);
                txt(lang(
                    name(cc) + u8"は壷を割った。"s,
                    name(cc) + u8" shatter"s + _s(cc) + u8" the pot."s));
                snd(45);
                play_animation(14);
            }
            return turn_result_t::turn_end;
        }
        if (feat(1) == 21)
        {
            snd(73);
            p = feat(2) * 3 + 30;
            if (gdata_current_map == 41)
            {
                p *= 20;
            }
            if (rnd(p) < sdata(10, cc) && rnd(2))
            {
                txt(lang(
                    u8"扉に体当たりして破壊した。"s,
                    u8"You bash up the door. The door is destroyed."s));
                if (feat(2) > sdata(10, cc))
                {
                    skillexp(10, cc, (feat(2) - sdata(10, cc)) * 15);
                }
                cell_featset(x, y, 0, 0, 0, 0);
                return turn_result_t::turn_end;
            }
            else
            {
                txt(lang(u8"扉に体当たりした。"s, u8"You bash up the door."s));
                if (gdata_current_map == 41)
                {
                    txt(lang(
                        u8"さすがに牢獄の扉は頑丈だ。"s,
                        u8"As might be expected, the door of the Jail is hard."s));
                }
                if (rnd(4) == 0)
                {
                    tc = cc;
                    efid = 1109;
                    efp = 200;
                    magic();
                }
                if (rnd(3) == 0)
                {
                    tc = cc;
                    efid = 1110;
                    efp = 200;
                    magic();
                }
                if (rnd(3) == 0)
                {
                    if (cdata[cc].quality < 4 && encfind(cc, 60010) == -1)
                    {
                        --cdata[cc].attr_adjs[0];
                        refresh_character(cc);
                        if (is_in_fov(cc))
                        {
                            txtef(8);
                            txt(lang(
                                name(cc) + u8"は筋肉を痛めた。"s,
                                name(cc) + u8" hurt"s + _s(cc) + u8" "s
                                    + his(cc) + u8" muscle."s));
                        }
                    }
                }
                if (rnd(3) == 0)
                {
                    if (feat(2) > 0)
                    {
                        --feat(2);
                        cell_featset(x, y, feat(0), feat(1), feat(2), feat(3));
                        if (is_in_fov(cc))
                        {
                            txt(lang(
                                u8"扉は少しだけ壊れた。"s,
                                u8"The door is cracked a bit."s));
                        }
                    }
                }
                return turn_result_t::turn_end;
            }
        }
    }
    txt(lang(
        name(cc) + u8"は空気に体当たりした。"s,
        name(cc) + u8" bash"s + _s(cc) + u8" up the air."s));
    snd(4);
    return turn_result_t::turn_end;
}



turn_result_t do_movement_command()
{
    f = 0;
    if (cdata[cc].dimmed != 0)
    {
        if (cdata[cc].dimmed + 10 > rnd(60))
        {
            f = 1;
        }
    }
    if (cdata[cc].drunk != 0)
    {
        if (rnd(5) == 0)
        {
            txtef(9);
            txt(lang(u8" *ふらり* "s, u8"*stagger*"s));
            f = 1;
        }
    }
    if (cdata[cc].confused != 0 || f == 1)
    {
        cdata[cc].next_position.x = cdata[cc].position.x + rnd(3) - 1;
        cdata[cc].next_position.y = cdata[cc].position.y + rnd(3) - 1;
    }
    if (gdata_mount != 0)
    {
        if (cdata[gdata_mount].continuous_action_id != 0)
        {
            if (cdata[gdata_mount].continuous_action_turn > 0)
            {
                txt(lang(
                    name(gdata_mount) + u8"はあなたを睨み付けた。"s,
                    name(gdata_mount) + u8" stares in your face."s));
                cdata[gdata_mount].continuous_action_id = 0;
                cdata[gdata_mount].continuous_action_turn = 0;
            }
        }
    }
    cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
    if (cdata[0].inventory_weight_type >= 4)
    {
        ++msgdup;
        txt(lang(u8"潰れていて動けない！ "s, u8"You carry too much to move!"s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (cellchara != -1 && cellchara != 0)
    {
        tc = cellchara;
        if (cdata[tc].relationship >= 10
            || (cdata[tc].relationship == -1
                && config::instance().ignoredislike != 0)
            || (cdata[tc].relationship == 0
                && (adata(16, gdata_current_map) == 101
                    || adata(16, gdata_current_map) == 102 || key_shift)))
        {
            if (cdata[tc].is_hung_on_sand_bag() == 0)
            {
                if (mdata(6) == 1)
                {
                    goto label_2204_internal;
                }
                if (config::instance().scroll)
                {
                    cdata[0].next_position.x = cdata[tc].position.x;
                    cdata[0].next_position.y = cdata[tc].position.y;
                    label_1438();
                }
                cell_swap(cc, tc);
                txt(lang(
                    name(tc) + u8"と入れ替わった。"s,
                    u8"You displace "s + name(tc) + u8"."s));
                if (cdata[tc].id == 271)
                {
                    if (rnd(5) == 0)
                    {
                        if (cdata[tc].sleep == 0)
                        {
                            p = rnd(clamp(cdata[cc].gold, 0, 20) + 1);
                            if (cdata[cc].is_protected_from_thieves())
                            {
                                p = 0;
                            }
                            if (p != 0)
                            {
                                snd(11);
                                cdata[cc].gold -= p;
                                cdata[tc].gold += p;
                                txt(lang(
                                        u8"「おっと、ごめんよ」"s,
                                        u8"\"Ops, sorry.\""s),
                                    lang(
                                        u8"「気をつけな」"s,
                                        u8"\"Watch it.\""s));
                            }
                        }
                    }
                }
                if (cdata[tc].continuous_action_id == 1)
                {
                    if (cdata[tc].continuous_action_turn > 0)
                    {
                        txt(lang(
                            name(tc) + u8"はあなたを睨み付けた。"s,
                            name(tc) + u8" stares in your face."s));
                        cdata[tc].continuous_action_id = 0;
                        cdata[tc].continuous_action_turn = 0;
                    }
                }
                label_2206();
                return turn_result_t::turn_end;
            }
        }
        if (running)
        {
            if (cdata[tc].relationship >= -2 || keybd_wait >= 40)
            {
                return turn_result_t::pc_turn_user_error;
            }
        }
        if (cdata[tc].relationship <= -1)
        {
            cdata[0].enemy_id = tc;
            if (cdata[tc].is_invisible() == 1)
            {
                if (cdata[0].can_see_invisible() == 0)
                {
                    if (cdata[tc].wet == 0)
                    {
                        cdata[0].enemy_id = 0;
                    }
                }
            }
            if (keybd_attacking == 0)
            {
                keybd_wait = 1;
                keybd_attacking = 1;
            }
            try_to_melee_attack();
            return turn_result_t::turn_end;
        }
        speak_to_npc();
        if (chatteleport == 1)
        {
            chatteleport = 0;
            return turn_result_t::exit_map;
        }
        return turn_result_t::turn_end;
    }
    else
    {
        keybd_attacking = 0;
    }
    if (mdata(6) == 1)
    {
        if (dbg_freemove)
        {
            x = cdata[0].next_position.x;
            y = cdata[0].next_position.y;
            if (x >= 0 && x < mdata(0) && y >= 0 && y < mdata(1))
            {
                if (map(x, y, 1) == 0)
                {
                    cellaccess = 1;
                }
            }
        }
    }
    if (cellaccess == 1)
    {
    label_2204_internal:
        if (mdata(6) == 1)
        {
            if (264 <= map(cdata[cc].next_position.x,
                           cdata[cc].next_position.y,
                           0)
                && map(cdata[cc].next_position.x, cdata[cc].next_position.y, 0)
                    < 363)
            {
                return turn_result_t::pc_turn_user_error;
            }
        }
        return proc_movement_event();
    }
    if (gdata_current_dungeon_level == 1 || mdata(6) == 6)
    {
        if (mdata(6) != 1)
        {
            if (cdata[cc].next_position.x < 0
                || cdata[cc].next_position.x > mdata(0) - 1
                || cdata[cc].next_position.y < 0
                || cdata[cc].next_position.y > mdata(1) - 1)
            {
                txt(lang(
                    mdatan(0) + u8"を去る？ "s,
                    u8"Do you want to leave "s + mdatan(0) + u8"? "s));
                if (mdata(6) == 7)
                {
                    if (gdata(73) != 3)
                    {
                        txt(lang(
                            u8"注意！現在のクエストは失敗に終わってしまう。"s,
                            u8"Warning! You are going to abandon your current quest."s));
                    }
                }
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                update_screen();
                if (rtval == 0)
                {
                    gdata(60) = cdata[0].position.x;
                    gdata(61) = cdata[0].position.y;
                    snd(49);
                    --gdata_current_dungeon_level;
                    levelexitby = 4;
                    return turn_result_t::exit_map;
                }
                return turn_result_t::pc_turn_user_error;
            }
        }
    }
    if (cellfeat != -1)
    {
        if (cellfeat == 21)
        {
            return proc_movement_event();
        }
        keyhalt = 1;
        if (cellfeat == 23)
        {
            snd(99);
            return turn_result_t::show_quest_board;
        }
        if (cellfeat == 31)
        {
            snd(99);
            voting_box();
            return turn_result_t::turn_end;
        }
        if (cellfeat == 33)
        {
            menucycle = 1;
            show_city_chart();
            return turn_result_t::pc_turn_user_error;
        }
    }
    if (cdata[0].confused != 0)
    {
        ++msgdup;
        txt(lang(u8" *ごつん* "s, u8"*bump*"s));
        update_screen();
    }
    return turn_result_t::pc_turn_user_error;
}



turn_result_t proc_movement_event()
{
    lua::callback("chara_moved", {{"chara", cc}});
    if (cdata[cc].is_ridden())
    {
        return turn_result_t::turn_end;
    }
    dx = cdata[cc].next_position.x;
    dy = cdata[cc].next_position.y;
    if (cc < 16)
    {
        if (cc != 0)
        {
            if (dx != cdata[cc].position.x)
            {
                if (cdata[cc].position.x > dx)
                {
                    cdata[cc].direction = 1;
                }
                else
                {
                    cdata[cc].direction = 2;
                }
            }
            if (dy != cdata[cc].position.y)
            {
                if (cdata[cc].position.y > dy)
                {
                    cdata[cc].direction = 3;
                }
                else
                {
                    cdata[cc].direction = 0;
                }
            }
        }
    }
    if (map(dx, dy, 6) != 0)
    {
        cell_featread(dx, dy);
        if (feat(1) == 21)
        {
            return try_to_open_locked_door();
        }
        if (feat(1) == 30)
        {
            x = dx;
            y = dy;
            return do_bash();
        }
    }
    if (map(cdata[cc].position.x, cdata[cc].position.y, 8) != 0)
    {
        i = map(cdata[cc].position.x, cdata[cc].position.y, 8) - 1;
        if (mef(0, i) == 1)
        {
            if (cdatan(2, cc) != u8"spider"s)
            {
                if (rnd(mef(5, i) + 25) < rnd(sdata(10, cc) + sdata(12, cc) + 1)
                    || cdata[cc].weight > 100)
                {
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            name(cc) + u8"は蜘蛛の巣を振り払った。"s,
                            name(cc) + u8" destroy"s + _s(cc)
                                + u8" the cobweb."s));
                    }
                    delmef(i);
                }
                else
                {
                    mef(5, i) = mef(5, i) * 3 / 4;
                    if (is_in_fov(cc))
                    {
                        txt(lang(
                            name(cc) + u8"は蜘蛛の巣にひっかかった。"s,
                            name(cc) + u8" "s + is(cc)
                                + u8" caught in a cobweb."s));
                    }
                    return turn_result_t::turn_end;
                }
            }
        }
    }
    if (mdata(6) == 1)
    {
        if (cc == 0)
        {
            if (traveldone == 0)
            {
                label_2153();
                keybd_wait = 1;
                return turn_result_t::turn_end;
            }
            else
            {
                traveldone = 0;
            }
        }
    }
    label_21452();
    p = map(cdata[cc].position.x, cdata[cc].position.y, 0);
    if (chipm(0, p) == 3)
    {
        if (chipm(1, p) == 5)
        {
            healsan(cc, 1);
        }
        addefmap(cdata[cc].position.x, cdata[cc].position.y, 1, 3);
        if (cdata[cc].wet == 0)
        {
            wet(cc, 20);
        }
    }
    label_2206();
    if (mdata(6) == 1)
    {
        if (cc == 0)
        {
            encounter = 0;
            gdata(62) = map(cdata[cc].position.x, cdata[cc].position.y, 0);
            if (map(cdata[cc].position.x, cdata[cc].position.y, 6) == 0)
            {
                p = map(cdata[cc].position.x, cdata[cc].position.y, 0);
                if (rnd(30) == 0)
                {
                    encounter = 1;
                }
                if (gdata_weather == 4)
                {
                    if (rnd(10) == 0)
                    {
                        encounter = 1;
                    }
                }
                if (gdata_weather == 1)
                {
                    if (rnd(13) == 0)
                    {
                        encounter = 1;
                    }
                }
                if (33 <= p && p < 66)
                {
                    if (rnd(2) == 0)
                    {
                        encounter = 0;
                    }
                    if (rnd(100) == 0)
                    {
                        encounter = 2;
                    }
                }
                if (rnd(220 + cdata[0].level * 10
                        - clamp(
                              gdata_cargo_weight * 150
                                  / (gdata_current_cart_limit + 1),
                              0,
                              (210 + cdata[0].level * 10)))
                    == 0)
                {
                    encounter = 4;
                }
                if (rnd(20) == 0)
                {
                    for (int cnt = 0; cnt < 5; ++cnt)
                    {
                        rq = gdata(160 + cnt);
                        if (qdata(3, rq) == 1007)
                        {
                            if (qdata(8, rq) == 1)
                            {
                                if (qdata(4, rq) == 0)
                                {
                                    if (qdata(10, rq) < 2)
                                    {
                                        encounter = 3;
                                        encounterref = rq;
                                        ++qdata(10, rq);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (encounter == 4)
            {
                encounterlv = cdata[0].fame / 1000;
                if (encounterlv == 0)
                {
                    encounterlv = 1;
                }
                levelexitby = 4;
                return turn_result_t::exit_map;
            }
            if (encounter == 3)
            {
                txt(lang(
                    u8"暗殺者につかまった。あなたはクライアントを守らなければならない。"s,
                    u8"You are caught by assassins. You have to protect your client."s));
                msg_halt();
                gdata_previous_map2 = gdata_current_map;
                gdata_previous_dungeon_level = gdata_current_dungeon_level;
                gdata_previous_x = cdata[0].position.x;
                gdata_previous_y = cdata[0].position.y;
                levelexitby = 4;
                return turn_result_t::exit_map;
            }
            if (encounter == 2)
            {
                encounterlv = 10 + rnd(100);
                levelexitby = 4;
                return turn_result_t::exit_map;
            }
            if (encounter == 1)
            {
                p = dist_town();
                encounterlv = p * 3 / 2 - 10;
                if (cdata[0].level <= 5)
                {
                    encounterlv /= 2;
                }
                if (33 <= map(cdata[cc].position.x, cdata[cc].position.y, 0)
                    && map(cdata[cc].position.x, cdata[cc].position.y, 0) < 66)
                {
                    encounterlv /= 2;
                }
                else if (gdata_weather == 1)
                {
                    encounterlv = encounterlv * 3 / 2 + 10;
                }
                if (encounterlv < 0)
                {
                    encounterlv = 1;
                }
                auto valn = lang(
                    u8" (最も近い街までの距離:"s + p + u8" 敵勢力:"s,
                    u8" (Distance from nearest town:"s + p
                        + u8" Enemy strength:"s);
                for (int cnt = 0; cnt < 1; ++cnt)
                {
                    if (encounterlv < 5)
                    {
                        valn += lang(u8"プチ級"s, u8"Putit Rank"s);
                        break;
                    }
                    if (encounterlv < 10)
                    {
                        valn += lang(u8"オーク級"s, u8"Orc Rank"s);
                        break;
                    }
                    if (encounterlv < 20)
                    {
                        valn += lang(u8"グリズリー級"s, u8"Grizzly Bear Rank"s);
                        break;
                    }
                    if (encounterlv < 30)
                    {
                        valn += lang(u8"ドレイク級"s, u8"Drake Rank"s);
                        break;
                    }
                    if (encounterlv < 40)
                    {
                        valn += lang(u8"リッチ級"s, u8"Lich Rank"s);
                        break;
                    }
                    valn += lang(u8"ドラゴン級"s, u8"Dragon Rank"s);
                }
                valn += u8")"s;
                txt(lang(u8"襲撃だ！"s, u8"Ambush!"s) + valn);
                msg_halt();
                levelexitby = 4;
                return turn_result_t::exit_map;
            }
            encounter = 0;
        }
    }
    return turn_result_t::turn_end;
}



void proc_autopick()
{
    if (!config::instance().use_autopick)
        return;
    if (key_ctrl)
        return;
    if (adata(0, gdata_current_map) == 5 && adata(16, gdata_current_map) != 30
        && adata(16, gdata_current_map) != 31)
        return;


    for (const auto& ci : items(-1))
    {
        if (inv[ci].number == 0)
            continue;
        if (inv[ci].position != cdata[0].position)
            continue;
        if (inv[ci].own_state > 0)
            continue;

        item_checkknown(ci);

        const auto x = cdata[0].position.x;
        const auto y = cdata[0].position.y;

        bool did_something = true;
        const auto op = autopick::instance().get_operation(inv[ci]);
        switch (op.type)
        {
        case autopick::operation::type_t::do_nothing:
            did_something = false;
            break;
        case autopick::operation::type_t::pick_up:
        case autopick::operation::type_t::save:
        case autopick::operation::type_t::no_drop:
        case autopick::operation::type_t::save_and_no_drop:
            // FIXME: DRY
            if (op.show_prompt)
            {
                txt(i18n::fmt(u8"ui", u8"autopick", u8"do_you_really_pick_up")(
                    itemname(ci)));
                ELONA_YES_NO_PROMPT();
                show_prompt(promptx, prompty, 160);
                if (rtval != 0)
                {
                    did_something = false;
                    break;
                }
            }
            in = inv[ci].number;
            elona::ci = ci;
            pick_up_item();
            if (int(op.type) & int(autopick::operation::type_t::no_drop))
            {
                ibitmod(13, ti, 1);
                txt(lang(
                    itemname(ti) + u8"を大事なものに指定した。"s,
                    u8"You set "s + itemname(ti) + u8" as no-drop."s));
            }
            if (int(op.type) & int(autopick::operation::type_t::save))
            {
                if (gdata_wizard == 0)
                {
                    snd(44);
                    save_game();
                    txtef(5);
                    txt(lang(u8" *保存* "s, u8"*saving*"s));
                }
            }
            break;
        case autopick::operation::type_t::destroy:
            // FIXME: DRY
            if (op.show_prompt)
            {
                txt(i18n::fmt(u8"ui", u8"autopick", u8"do_you_really_destroy")(
                    itemname(ci)));
                ELONA_YES_NO_PROMPT();
                show_prompt(promptx, prompty, 160);
                if (rtval != 0)
                {
                    did_something = false;
                    break;
                }
            }
            snd(45);
            txt(i18n::fmt(u8"ui", u8"autopick", u8"destroyed")(itemname(ci)));
            inv[ci].number = 0;
            cell_refresh(x, y);
            map(x, y, 5) = map(x, y, 4);
            break;
        case autopick::operation::type_t::open:
            // FIXME: DRY
            if (op.show_prompt)
            {
                txt(i18n::fmt(u8"ui", u8"autopick", u8"do_you_really_open")(
                    itemname(ci)));
                ELONA_YES_NO_PROMPT();
                show_prompt(promptx, prompty, 160);
                if (rtval != 0)
                {
                    did_something = false;
                    break;
                }
            }
            elona::ci = ci;
            turn_result_t turn_result = do_open_command();
        }
        if (did_something && !op.sound.empty())
        {
            DSLOADFNAME(filesystem::dir::sound() / op.sound, 15);
            DSPLAY(15, 0);
        }
    }
}



void label_2206()
{
    if (cc == 0)
    {
        gdata(60) = -1;
        gdata(61) = -1;
        x = cdata[0].position.x;
        y = cdata[0].position.y;
        if (key_shift && gdata(30) == 0 && cdata[0].confused == 0
            && cdata[0].dimmed == 0)
        {
            if (mdata(6) != 1)
            {
                gdata(30) = 1;
                cell_check(cdata[cc].position.x + 1, cdata[cc].position.y);
                gdata(33) = cellaccess;
                cell_check(cdata[cc].position.x - 1, cdata[cc].position.y);
                gdata(31) = cellaccess;
                cell_check(cdata[cc].position.x, cdata[cc].position.y + 1);
                gdata(34) = cellaccess;
                cell_check(cdata[cc].position.x, cdata[cc].position.y - 1);
                gdata(32) = cellaccess;
            }
        }
        if (map(x, y, 4) != 0)
        {
            if (cdata[0].blind == 0)
            {
                txt(txtitemoncell(x, y));
                proc_autopick();
            }
            else
            {
                txt(lang(
                    u8"地面に何かがあるようだ。"s,
                    u8"You sense something under your foot."s));
            }
        }
        p = chipm(0, map(x, y, 0));
        if (p != 0)
        {
            if (tname(p) != ""s)
            {
                txt(lang(
                    u8"足元には"s + tname(p) + u8"がある。"s,
                    u8"You walk into "s + tname(p) + u8"."s));
            }
            if (p == 3)
            {
                snd(46);
            }
            if (p == 4)
            {
                addefmap(
                    cdata[cc].position.x,
                    cdata[cc].position.y,
                    3,
                    10,
                    dirsub,
                    rnd(2));
                if (keybd_wait <= config::instance().walkwait
                            * config::instance().startrun
                    || cdata[0].turn % 2 == 0 || mdata(6) == 1)
                {
                    snd(83 + foot % 3);
                    foot += 1 + rnd(2);
                }
            }
        }
        else if (mdata(6) == 1)
        {
            addefmap(cdata[cc].position.x, cdata[cc].position.y, 2, 10, dirsub);
            snd(81 + foot % 2);
            ++foot;
        }
        if (map(x, y, 6) != 0)
        {
            cell_featread(x, y);
            if (feat(1) == 32)
            {
                txtef(5);
                txt(lang(u8" *キラン* "s, u8"*twinkle*"s));
            }
            if (feat(1) == 15)
            {
                txt(mapname(feat(2) + feat(3) * 100, true));
                if (adata(16, feat(2) + feat(3) * 100) == 8)
                {
                    if (config::instance().extrahelp)
                    {
                        if (gdata(206) == 0)
                        {
                            if (mode == 0)
                            {
                                if (cdata[0].continuous_action_turn == 0)
                                {
                                    gdata(206) = 1;
                                    ghelp = 6;
                                    show_ex_help();
                                }
                            }
                        }
                    }
                }
            }
            if (feat(1) == 34)
            {
                txt(txtbuilding(feat(2), feat(3)));
            }
            if (feat(1) == 11)
            {
                txt(lang(
                    u8"降り階段がある。"s,
                    u8"There is a stair leading downwards here."s));
            }
            if (feat(1) == 10)
            {
                txt(lang(
                    u8"昇り階段がある。"s,
                    u8"There is a stair leading upwards here."s));
            }
            if (feat(1) == 24)
            {
                txt(lang(
                    u8"何かが見つかりそうだ。"s,
                    u8"You can search this location to collect some materials."s));
            }
            if (feat(1) == 27)
            {
                txt(lang(
                    u8"何かの残骸がある。"s,
                    u8"You can collect materials from the remains lying here."s));
            }
            if (feat(1) == 25)
            {
                txt(lang(
                    u8"採掘場がある。"s,
                    u8"You can collect materials from the mining spot here."s));
            }
            if (feat(1) == 26)
            {
                txt(lang(
                    u8"泉がある。"s,
                    u8"You can collect materials from the spring here."s));
            }
            if (feat(1) == 28)
            {
                txt(lang(
                    u8"色んな植物が生えている。"s,
                    u8"You can collect materials from plants here."s));
            }
            if (feat(1) == 29)
            {
                if (feat(2) == 36)
                {
                    s = lang(u8"野菜"s, u8"vegetable"s);
                }
                if (feat(2) == 37)
                {
                    s = lang(u8"果物"s, u8"fruit"s);
                }
                if (feat(2) == 38)
                {
                    s = lang(u8"ハーブ"s, u8"herb"s);
                }
                if (feat(2) == 39)
                {
                    s = lang(u8"何か"s, u8"strange"s);
                }
                if (feat(2) == 40)
                {
                    s = lang(u8"アーティファクト"s, u8"artifact"s);
                }
                if (feat(2) == 41)
                {
                    s = lang(u8"宝石"s, u8"gem"s);
                }
                if (feat(2) == 42)
                {
                    s = lang(u8"魔法の木"s, u8"magic"s);
                }
                if (feat == tile_plant)
                {
                    txt(lang(
                        ""s + s + u8"の種が植えてある。"s,
                        u8"A "s + s + u8" seed is planted."s));
                }
                if (feat == tile_plant + 1)
                {
                    txt(lang(
                        ""s + s + u8"が育っている。"s,
                        u8"A "s + s + u8" bud is growing."s));
                }
                if (feat == tile_plant + 2)
                {
                    txt(lang(
                        ""s + s + u8"の実が成っている。"s,
                        u8"A"s + s + u8" tree has bore a lot of fruit."s));
                }
                if (feat == tile_plant + 3)
                {
                    txt(lang(
                        ""s + s + u8"の草は枯れてしまっている… "s,
                        u8"A "s + s + u8" tree has withered..."s));
                }
            }
            if (feat(1) >= 24 && feat(1) <= 28)
            {
                if (config::instance().extrahelp)
                {
                    if (gdata(205) == 0)
                    {
                        if (mode == 0)
                        {
                            if (cdata[0].continuous_action_turn == 0)
                            {
                                gdata(205) = 1;
                                ghelp = 5;
                                show_ex_help();
                            }
                        }
                    }
                }
            }
        }
    }
    return;
}



turn_result_t do_use_stairs_command(int val0)
{
    int movelevelbystairs = 0;
    if (dbg_freemove)
    {
        txt(lang(
            u8"デバッグ中はその操作はできない。"s,
            u8"You can't perform the action while in the debug mode."s));
        return turn_result_t::pc_turn_user_error;
    }
    int stat = item_find(631, 3, -1);
    if (stat != -1)
    {
        if (mdata(6) == 3 || mdata(6) == 2)
        {
            ci = stat;
            return step_into_gate();
        }
    }
    cell_featread(cdata[cc].position.x, cdata[cc].position.y);
    movelevelbystairs = 0;
    if (val0 == 1)
    {
        if (mapitemfind(cdata[cc].position.x, cdata[cc].position.y, 753) != -1)
        {
            txt(lang(
                u8"本当にこたつの中に入る？"s,
                u8"Really get into the Kotatsu?"s));
            ELONA_YES_NO_PROMPT();
            rtval = show_prompt(promptx, prompty, 160);
            if (rtval != 0)
            {
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
            txt(lang(u8"まっくらだ！"s, u8"It's dark here!"s));
            cdata[0].blind += 2;
            return turn_result_t::turn_end;
        }
    }
    if (gdata_current_map == 7)
    {
        if (val0 == 1)
        {
            if (mapitemfind(cdata[cc].position.x, cdata[cc].position.y, 751)
                != -1)
            {
                if (gdata_current_dungeon_level >= adata(10, gdata_current_map))
                {
                    txt(lang(
                        u8"これ以上降りられない。"s,
                        u8"You can't go down any more."s));
                    return turn_result_t::pc_turn_user_error;
                }
                else
                {
                    movelevelbystairs = 1;
                }
            }
        }
        if (val0 == 2)
        {
            if (mapitemfind(cdata[cc].position.x, cdata[cc].position.y, 750)
                != -1)
            {
                if (gdata_current_dungeon_level <= adata(17, gdata_current_map))
                {
                    txt(lang(
                        u8"これ以上昇れない。"s,
                        u8"You can't go up any more."s));
                    return turn_result_t::pc_turn_user_error;
                }
                else
                {
                    movelevelbystairs = 1;
                }
            }
        }
    }
    if (movelevelbystairs == 0)
    {
        if (mdata(6) != 1)
        {
            if (val0 == 1)
            {
                if (feat(1) != 11)
                {
                    txt(lang(
                        u8"降りる階段は見つからない。"s,
                        u8"There're no downstairs here."s));
                    update_screen();
                    return turn_result_t::pc_turn_user_error;
                }
                else
                {
                    movelevelbystairs = 1;
                    if (gdata_current_map == 42
                        && gdata_current_dungeon_level >= gdata(186))
                    {
                        txt(lang(
                            u8"階段は不思議なバリアで塞がれている。"s,
                            u8"The path is blocked by a strange barrier."s));
                        return turn_result_t::pc_turn_user_error;
                    }
                }
            }
            if (val0 == 2)
            {
                if (feat(1) != 10)
                {
                    txt(lang(
                        u8"昇る階段は見つからない。"s,
                        u8"There're no upstairs here."s));
                    update_screen();
                    return turn_result_t::pc_turn_user_error;
                }
                else
                {
                    movelevelbystairs = 1;
                }
            }
        }
    }
    if (feat == tile_downlocked)
    {
        f = 0;
        if (gdata_current_dungeon_level == 3)
        {
            if (gdata_main_quest_flag >= 65)
            {
                f = 1;
            }
        }
        if (gdata_current_dungeon_level == 17)
        {
            if (gdata_main_quest_flag >= 115)
            {
                f = 1;
            }
        }
        if (gdata_current_dungeon_level == 25)
        {
            if (gdata_main_quest_flag >= 125)
            {
                f = 1;
            }
        }
        if (gdata_current_dungeon_level == 44)
        {
            if (gdata_main_quest_flag >= 125)
            {
                f = 1;
            }
        }
        if (f == 1)
        {
            if (gdata_current_dungeon_level == 44)
            {
                txt(lang(
                    u8"厳重に封印された扉の前に立つと、三つの魔石が鈍い光を放った。"s,
                    u8"The magic stones shine softly as you approach the sealed door."s));
            }
            else
            {
                txt(lang(u8"扉の鍵を開けた。"s, u8"You unlock the door"s));
            }
            snd(23);
            cell_featset(
                cdata[cc].position.x,
                cdata[cc].position.y,
                tile_downstairs,
                11);
            return turn_result_t::turn_end;
        }
        snd(22);
        txt(lang(
            u8"鍵のかかった扉が行く手を塞いでいる。"s,
            u8"The door is locked. It seems you need a specific key to unlock the door."s));
        return turn_result_t::turn_end;
    }
    if (adata(16, gdata_current_map) == 8)
    {
        if (gdata_current_dungeon_level == adata(10, gdata_current_map))
        {
            if (adata(20, gdata_current_map) != -1)
            {
                txt(lang(
                    u8"クエストを放棄して階を移動する？"s,
                    u8"Really give up the quest and move over?"s));
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                if (rtval != 0)
                {
                    update_screen();
                    return turn_result_t::pc_turn_user_error;
                }
            }
        }
    }
    if (movelevelbystairs == 1)
    {
        bool ok = actionsp(0, 15);
        if (!ok || cdata[0].inventory_weight_type >= 3)
        {
            if (!ok || rnd(5 - cdata[0].inventory_weight_type) == 0)
            {
                txt(lang(
                    u8"うわああ！"s + name(0) + u8"は階段から足を踏み外した。"s,
                    u8"Noooo! You lost your step and roll down!"s));
                dmghp(
                    cc,
                    cdata[cc].max_hp
                            * (cdata[0].inventory_weight * 10
                                   / cdata[0].max_inventory_weight
                               + 10)
                            / 100
                        + 1,
                    -7);
                msg_halt();
            }
            if (cdata[0].state == 0)
            {
                return turn_result_t::turn_begin;
            }
        }
    }
    if (feat(1) == 15)
    {
        if (feat(2) + feat(3) * 100 == 35)
        {
            comctrl = 0;
            int stat = label_19432();
            if (stat == 1)
            {
                return do_enter_strange_gate();
            }
            else
            {
                return turn_result_t::pc_turn_user_error;
            }
        }
    }
    snd(49);
    levelexitby = 4;
    return turn_result_t::exit_map;
}



int unlock_box(int difficulty)
{
    int stat = item_find(636, 3);
    if (stat == -1)
    {
        txt(lang(
            u8"ロックピックを所持していない。"s,
            u8"You don't have lockpicks."s));
        return 0;
    }
    ti = stat;
    txt(lang(u8"ロックピックを使用した。"s, u8"You use a lockpick."s));
    snd(22);
    {
        int stat = item_find(637, 3);
        if (stat != -1)
        {
            i = sdata(158, 0) * 150 / 100 + 5;
            txt(lang(
                u8"スケルトンキーも使用した。"s,
                u8"You also use the skeleton key."s));
        }
        else
        {
            i = sdata(158, 0);
        }
    }
    f = 0;
    if (i * 2 < difficulty)
    {
        txt(lang(
            u8"この鍵を開ける技術はない。"s,
            u8"The lock mechanism is beyond your skill."s));
        f = 1;
    }
    if (debug::voldemort)
    {
        f = 0;
    }
    if (f == 0)
    {
        if (i / 2 >= difficulty)
        {
            txt(lang(u8"楽勝だ。"s, u8"Easy."s));
        }
        else if (rnd(rnd(i * 2) + 1) < difficulty)
        {
            txt(lang(u8"開錠に失敗した。"s, u8"You fail to unlock it."s));
            f = 1;
        }
    }
    if (f)
    {
        if (rnd(3) == 0)
        {
            --inv[ti].number;
            cell_refresh(inv[ti].position.x, inv[ti].position.y);
            txt(lang(u8"ロックピックは壊れた。"s, u8"Your lockpick breaks."s));
        }
        txtnew();
        txt(lang(u8"もう一度試みる？"s, u8"Try again?"s));
        ELONA_YES_NO_PROMPT();
        rtval = show_prompt(promptx, prompty, 160);
        if (rtval == 0)
        {
            unlock_box(difficulty);
            return 0;
        }
        return 0;
    }
    txt(lang(u8"開錠に成功した。"s, u8"You successfully unlock it."s));
    gain_skill_experience_lock_picking(cc);
    return 1;
}



turn_result_t do_open_command()
{
    int refweight = 0;
    if (inv[ci].id == 361)
    {
        modify_karma(0, -10);
        invctrl(0) = 22;
        invctrl(1) = 0;
        invfile = inv[ci].param1;
        snd(23);
        sell_item();
        screenupdate = -1;
        update_screen();
        return turn_result_t::turn_end;
    }
    if (inv[ci].id == 560)
    {
        invctrl(0) = 24;
        invctrl(1) = 0;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (inv[ci].id == 616)
    {
        invctrl(0) = 24;
        invctrl(1) = 2;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (inv[ci].id == 701)
    {
        invctrl(0) = 24;
        invctrl(1) = 8;
        snd(100);
        ctrl_inventory();
        return turn_result_t::turn_end;
    }
    if (inv[ci].id == 600)
    {
        snd(22);
        txt(lang(u8"足枷を外した。"s, u8"You unlock the shackle."s));
        if (gdata_current_map == 33)
        {
            if (gdata_current_dungeon_level == 1)
            {
                if (gdata_released_fire_giant == 0)
                {
                    if (cdata[gdata_fire_giant].state == 1)
                    {
                        tc = findchara(203);
                        if (tc != 0)
                        {
                            txtef(9);
                            txt(lang(
                                u8"モイアー「馬鹿やろう！！」"s,
                                u8"Moyer yells, "s + u8"\"You idiot!\""s));
                            cdata[gdata_fire_giant].enemy_id = tc;
                            cdata[gdata_fire_giant].hate = 1000;
                        }
                        gdata_released_fire_giant = 1;
                    }
                }
            }
        }
        return turn_result_t::turn_end;
    }
    if (inv[ci].count != 0)
    {
        invfile = inv[ci].count;
        invcontainer(1) = ci;
        if (inv[ci].id == 641)
        {
            refweight = -1;
        }
        else
        {
            refweight = 0;
        }
        if (inv[ci].count == 3 || inv[ci].count == 4 || inv[ci].count == 6)
        {
            if (gdata_current_map != 7)
            {
                txt(lang(
                    u8"それは家の中でのみ使用できる。"s,
                    u8"You can only use it at your home."s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
        }
        if (inv[ci].count == 5)
        {
            if (adata(16, gdata_current_map) != 102)
            {
                txt(lang(
                    u8"それは店の中でのみ使用できる。"s,
                    u8"You can only use it at your shop"s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
        }
        ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
        if (fs::exists(
                filesystem::dir::tmp() / (u8"shop"s + invfile + u8".s2")))
        {
            ctrl_file(file_operation2_t::_3, u8"shop"s + invfile + u8".s2");
        }
        else
        {
            for (const auto& cnt : items(-1))
            {
                inv[cnt].number = 0;
            }
        }
        shoptrade = 0;
        invsubroutine = 1;
        invctrl(0) = 22;
        invctrl(1) = 2;
        if (invfile == 3)
        {
            txt(lang(
                u8"残り"s + gdata_rights_to_succeed_to
                    + u8"個分のアイテムの相続権を持っている。"s,
                u8"You can claim "s + gdata_rights_to_succeed_to
                    + u8" more heirloom"s + _s2(gdata_rights_to_succeed_to)
                    + u8"."s));
            invctrl(1) = 1;
        }
        if (invfile == 6 || inv[invcontainer(1)].id == 641)
        {
            if (invfile == 6)
            {
                invcontainer = 15;
            }
            else
            {
                invcontainer = 4;
            }
            menucycle = 1;
            invctrl(1) = 3;
        }
        mode = 6;
        snd(100);
        ctrl_inventory();
        invcontainer = 0;
        if (refweight == -1)
        {
            refweight = inv_weight(-1) + 2500;
        }
        ctrl_file(file_operation2_t::_4, u8"shop"s + invfile + u8".s2");
        ctrl_file(file_operation2_t::_3, u8"shoptmp.s2");
        if (refweight != 0)
        {
            inv[invcontainer(1)].weight = refweight;
            refresh_burden_state();
        }
        update_screen();
        mode = 0;
        return turn_result_t::turn_end;
    }
    item_separate(ci);
    if (inv[ci].param1 != 0)
    {
        if (inv[ci].param2 != 0)
        {
            int stat = unlock_box(inv[ci].param2);
            if (stat == 0)
            {
                screenupdate = -1;
                update_screen();
                return turn_result_t::turn_end;
            }
        }
    }
    if (inv[ci].param1 == 0)
    {
        txt(lang(u8"中身は空っぽだ。"s, u8"It's empty!"s));
    }
    else
    {
        if (inv[ci].id == 752)
        {
            open_new_year_gift();
        }
        else
        {
            open_box();
        }
        item_stack(cc, ri);
    }
    screenupdate = -1;
    update_screen();
    return turn_result_t::turn_end;
}



void open_box()
{
    snd(23);
    txt(lang(
        u8"あなたは"s + itemname(ci) + u8"を開けた。"s,
        u8"You open "s + itemname(ci) + u8"."s));
    msg_halt();
    ri = ci;
    if (inv[ri].id == 394)
    {
        tc = cc;
        efid = 1117;
        efp = 100 + inv[ri].param1 * 10;
        inv[ri].param1 = 0;
        magic();
        return;
    }
    p = 3 + rnd(5);
    if (inv[ri].id == 415 || inv[ri].id == 416 || inv[ri].id == 734)
    {
        p = 1;
    }
    randomize(inv[ri].param3);
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        dbid = 0;
        if (cnt == 0)
        {
            p = 3;
        }
        else
        {
            p = 2;
        }
        if (inv[ri].id == 239)
        {
            if (cnt == 0 && rnd(3) == 0)
            {
                p = 4;
            }
            else
            {
                p = 3;
            }
            if (rnd(60) == 0)
            {
                dbid = 559;
            }
        }
        flt(calcobjlv(inv[ri].param1), calcfixlv(p));
        flttypemajor = fsetchest(rnd(length(fsetchest)));
        if (cnt > 0)
        {
            if (rnd(3) != 0)
            {
                if (rnd(3) != 0)
                {
                    flttypeminor = 0;
                    flttypemajor = 68000;
                }
                else
                {
                    flttypemajor = 0;
                    flttypeminor = 77001;
                }
            }
        }
        if (inv[ri].id == 241)
        {
            if (rnd(3) != 0)
            {
                flttypeminor = 0;
                flttypemajor = 68000;
            }
            else
            {
                flttypemajor = 0;
                flttypeminor = 77001;
            }
        }
        if (inv[ri].id == 415 || inv[ri].id == 416)
        {
            flttypeminor = 0;
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            fixlv = 3;
            if (inv[ri].id == 416)
            {
                fixlv = 4;
            }
            if (rnd(30) == 0)
            {
                dbid = 559;
            }
        }
        in = 0;
        if (inv[ri].id == 734)
        {
            dbid = 54;
            randomize();
            if (rnd(75) == 0)
            {
                in = 50 * inv[ci].value;
            }
            else
            {
                in = rnd(inv[ci].value / 10 + 1) + 1;
            }
        }
        if (inv[ri].id == 284)
        {
            dbid = 54;
            in = rnd(1000) + 1;
            if (rnd(5) == 0)
            {
                in = rnd(9) + 1;
            }
            if (rnd(10) == 0)
            {
                in = rnd(5000) + 5000;
            }
            if (rnd(20) == 0)
            {
                in = rnd(20000) + 10000;
            }
        }
        itemcreate(-1, dbid, cdata[0].position.x, cdata[0].position.y, in);
    }
    randomize();
    f = 0;
    if (inv[ri].id != 734)
    {
        if (rnd(10) == 0)
        {
            f = 1;
        }
    }
    if (inv[ri].id == 239 || inv[ri].id == 240)
    {
        if (rnd(5) == 0)
        {
            f = 1;
        }
    }
    if (f)
    {
        flt();
        itemcreate(-1, 622, cdata[0].position.x, cdata[0].position.y, 1);
    }
    snd(24);
    txt(lang(
        itemname(ri) + u8"から溢れ出た高級品が、足元に散らばった。"s,
        u8"Several quality goods spread out from "s + itemname(ri) + u8"."s));
    autosave = 1 * (gdata_current_map != 35);
    inv[ri].param1 = 0;
    if (inv[ri].id == 284)
    {
        modify_karma(0, -4);
    }
    if (inv[ri].id == 283)
    {
        modify_karma(0, -8);
    }
    return;
}



void open_new_year_gift()
{
    snd(23);
    txt(lang(
        u8"あなたは"s + itemname(ci) + u8"を開けた。"s,
        u8"You open "s + itemname(ci) + u8"."s));
    msg_halt();
    snd(24);
    randomize();
    ri = ci;
    cc = 0;
    inv[ri].param1 = 0;
    if (inv[ri].param3 < 100)
    {
        if (rnd(3) == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"悪意を持った何かが袋から飛び出してきた！"s,
                    u8"Something jumps out from the pack!"s));
            }
            for (int cnt = 0, cnt_end = (3 + rnd(3)); cnt < cnt_end; ++cnt)
            {
                flt(calcobjlv(cdata[0].level * 3 / 2 + 3), calcfixlv(2));
                characreate(-1, 0, cdata[cc].position.x, cdata[cc].position.y);
            }
            return;
        }
        if (rnd(3) == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"罠だ！お年玉袋は発火した。"s,
                    u8"It's trap! The gift ignites."s));
            }
            for (int cnt = 0; cnt < 6; ++cnt)
            {
                tlocx = cdata[0].position.x + rnd(3) - rnd(3);
                tlocy = cdata[0].position.y - rnd(3) + rnd(3);
                if (tlocx < 0 || tlocx >= mdata(0) || tlocy < 0
                    || tlocy >= mdata(1))
                {
                    continue;
                }
                addmef(tlocx, tlocy, 5, 24, rnd(15) + 20, 50, 0);
                mapitem_fire(tlocx, tlocy);
            }
            return;
        }
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"中には呪いの手紙が入っていた。"s,
                u8"You find a cursed letter inside."s));
        }
        efid = 1114;
        efp = 1000;
        tc = 0;
        magic();
        return;
    }
    if (inv[ri].param3 < 200)
    {
        if (rnd(4) == 0)
        {
            if (is_in_fov(cc))
            {
                txtef(5);
                txt(lang(u8" *チリリリリーン* "s, u8"*ring ring ring*"s));
            }
            flt();
            int stat = characreate(
                -1, 328 + rnd(2), cdata[cc].position.x, cdata[cc].position.y);
            if (stat != 0)
            {
                if (cdata[cc].relationship <= -3)
                {
                    cdata[rc].relationship = -1;
                    cdata[rc].original_relationship = -1;
                }
            }
            return;
        }
        if (rnd(5) == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    u8"妹が入っていた！"s,
                    u8"The pack contains your younger sister!"s));
            }
            flt();
            int stat = characreate(
                -1, 176, cdata[cc].position.x, cdata[cc].position.y);
            if (stat != 0)
            {
                cdata[rc].gold = 5000;
            }
            return;
        }
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"何かが袋から出てきた。"s,
                u8"There's something inside the pack."s));
        }
        flt();
        itemcreate(
            -1,
            isetgiftminor(rnd(length(isetgiftminor))),
            cdata[0].position.x,
            cdata[0].position.y,
            1);
        return;
    }
    if (rnd(3) == 0)
    {
        if (is_in_fov(cc))
        {
            txtef(5);
            txt(lang(u8" *チリリリリーン* "s, u8"*ring ring ring*"s));
        }
        for (int cnt = 0, cnt_end = (2 + rnd(3)); cnt < cnt_end; ++cnt)
        {
            flt();
            int stat = characreate(
                -1, 328 + rnd(2), cdata[cc].position.x, cdata[cc].position.y);
            if (stat != 0)
            {
                if (cdata[cc].relationship <= -3)
                {
                    cdata[rc].relationship = -1;
                    cdata[rc].original_relationship = -1;
                }
            }
        }
        return;
    }
    if (rnd(50) == 0)
    {
        if (is_in_fov(cc))
        {
            txt(lang(
                u8"これは素晴らしい贈り物だ！"s,
                u8"This is truly a wonderful gift!"s));
        }
        flt();
        itemcreate(
            -1,
            isetgiftgrand(rnd(length(isetgiftgrand))),
            cdata[0].position.x,
            cdata[0].position.y,
            1);
        return;
    }
    if (is_in_fov(cc))
    {
        txt(lang(
            u8"何かが袋から出てきた。"s,
            u8"There's something inside the pack."s));
    }
    flt();
    itemcreate(
        -1,
        isetgiftmajor(rnd(length(isetgiftmajor))),
        cdata[0].position.x,
        cdata[0].position.y,
        1);
    return;
}



turn_result_t try_to_open_locked_door()
{
    cell_featread(dx, dy);
    if (feat == tile_doorclosed4 && feat(2) > 0)
    {
        if (cc == 0)
        {
            int stat = unlock_box(feat(2));
            if (stat == 0)
            {
                screenupdate = -1;
                update_screen();
                await(100);
                return turn_result_t::turn_end;
            }
            feat(2) = 0;
        }
        else
        {
            return turn_result_t::turn_end;
        }
    }
    if (feat(2) > 0)
    {
        f = 0;
        if (rnd(feat(2) * 20 + 150) < sdata(158, cc) * 20 + 20)
        {
            f = 1;
        }
    }
    else
    {
        f = 1;
    }
    if (debug::voldemort)
    {
        f = 1;
    }
    if (f)
    {
        if (feat(2) > 0)
        {
            gain_skill_experience_lock_picking(cc);
        }
        cell_featset(dx, dy, tile_dooropen, 20, 0, -1);
        if (is_in_fov(cc))
        {
            txt(lang(
                name(cc) + u8"は扉を開けた。"s,
                name(cc) + u8" open"s + _s(cc) + u8" the door."s));
            if (mdata(12) == 8)
            {
                snd(67);
            }
            else if (mdata(12) == 9)
            {
                snd(71);
            }
            else
            {
                snd(48);
            }
        }
    }
    else
    {
        ++msgdup;
        if (is_in_fov(cc))
        {
            snd(22);
            txt(lang(
                aln(cc) + u8"開錠に失敗した。"s,
                name(cc) + u8" fail"s + _s(cc) + u8" to open the door."s));
        }
    }
    if (cc == 0)
    {
        await(100);
    }
    return turn_result_t::turn_end;
}



turn_result_t do_close_command()
{
    int stat = ask_direction_to_close();
    if (stat == 0)
    {
        txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    cell_featread(x, y);
    if (feat(1) != 20)
    {
        txt(lang(
            u8"その方向に閉められるものはない。"s,
            u8"There's nothing to close."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    if (map(x, y, 1) != 0)
    {
        txt(lang(
            u8"何かが邪魔で閉められない。"s,
            u8"There's something on the floor."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    cell_featset(x, y, tile_doorclosed, 21, -1, -1);
    txt(lang(name(cc) + u8"は扉を閉めた。"s, name(cc) + u8" close the door."s));
    return turn_result_t::turn_end;
}



int label_2217()
{
    int ammox = 0;
    int ammoy = 0;
    attackrange = 1;
    attacknum = 0;
    ele = 0;
    ammoproc = -1;
    ammox = cdata[tc].position.x;
    ammoy = cdata[tc].position.y;
    attackitem = cw;
    if (ammo != -1)
    {
        if (inv[ammo].count != -1)
        {
            if (inv[ammo].enchantments[inv[ammo].count].power % 1000 <= 0)
            {
                txt(lang(u8"通常弾を装填した。"s, u8"You load normal ammo."s));
                inv[ammo].count = -1;
            }
            else
            {
                ammoproc = inv[ammo].enchantments[inv[ammo].count].id % 10000;
                if (cc == 0)
                {
                    if (cdata[0].sp < 50)
                    {
                        if (cdata[0].sp < rnd(75))
                        {
                            txt(lang(
                                u8"疲労し過ぎて失敗した！"s,
                                u8"You are too exhausted!"s));
                            dmgsp(0, encammoref(2, ammoproc) / 2 + 1);
                            ammoproc = -1;
                            return 1;
                        }
                    }
                    dmgsp(0, rnd(encammoref(2, ammoproc) + 1));
                }
                --inv[ammo].enchantments[inv[ammo].count].power;
            }
        }
    }
    if (ammoproc == 0)
    {
        for (int cnt = 0; cnt < 3; ++cnt)
        {
            can_do_ranged_attack();
            ele = 0;
            extraattack = 0;
            do_physical_attack();
            if (cdata[tc].state != 1)
            {
                int stat = label_2072();
                if (stat == 0)
                {
                    break;
                }
                else
                {
                    tc = cdata[cc].enemy_id;
                }
            }
        }
    }
    else if (ammoproc == 5)
    {
        for (int cnt = 0; cnt < 10; ++cnt)
        {
            can_do_ranged_attack();
            ele = 0;
            label_2076();
            if (listmax == 0)
            {
                break;
            }
            tc = list(0, rnd(listmax));
            if (cc == 0 || cdata[cc].relationship >= 0)
            {
                if (cdata[tc].relationship >= 0)
                {
                    if (cnt != 0)
                    {
                        cnt = cnt + (rnd(5) == 0) - 1;
                        continue;
                    }
                }
            }
            else if (cdata[tc].relationship == -3)
            {
                cnt = cnt + (rnd(5) == 0) - 1;
                continue;
            }
            extraattack = 0;
            do_physical_attack();
        }
    }
    else
    {
        extraattack = 0;
        do_physical_attack();
    }
    if (ammoproc == 1)
    {
        tlocx = ammox;
        tlocy = ammoy;
        efid = 460;
        efp = sdata(attackskill, cc) * 8 + 10;
        magic();
    }
    attackvar = 0;
    ammoproc = -1;
    return 0;
}



void try_to_melee_attack()
{
    if (cc != 0)
    {
        if (cdata[tc].damage_reaction_info)
        {
            if (distance < 6)
            {
                if (fov_los(
                        cdata[cc].position.x,
                        cdata[cc].position.y,
                        cdata[tc].position.x,
                        cdata[tc].position.y))
                {
                    int stat = can_do_ranged_attack();
                    if (stat == 1)
                    {
                        label_2217();
                    }
                }
            }
            p = cdata[tc].damage_reaction_info % 1000;
            if (p == 61)
            {
                if (cdata[cc].hp < cdata[cc].max_hp / 2)
                {
                    return;
                }
            }
        }
    }
    attacknum = 0;
    attackrange = 0;
    attackskill = 106;
    ammo = -1;
    ele = 0;
    if (cdata[cc].equipment_type & 1)
    {
        if (clamp(int(std::sqrt(sdata(168, cc)) - 3), 1, 5)
                + cdata[cc].has_power_bash() * 5
            > rnd(100))
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"は盾で"s + name(tc) + u8"を殴りつけた。"s,
                    name(cc) + u8" bash"s + _s(cc) + u8" "s + name(tc)
                        + u8" with "s + his(cc) + u8" shield."s));
            }
            dmghp(tc, rnd(sdata(168, cc)) + 1, cc);
            dmgcon(tc, 7, 50 + int(std::sqrt(sdata(168, cc))) * 15);
            cdata[tc].paralyzed += rnd(3);
        }
    }
    for (int cnt = 0; cnt < 30; ++cnt)
    {
        body = 100 + cnt;
        if (cdata_body_part(cc, cnt) % 10000 == 0)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 10)
        {
            continue;
        }
        if (cdata_body_part(cc, cnt) / 10000 == 11)
        {
            continue;
        }
        cw = cdata_body_part(cc, cnt) % 10000 - 1;
        attackitem = cw;
        if (inv[cw].dice_x > 0)
        {
            attackskill = inv[cw].skill;
            ++attacknum;
            extraattack = 0;
            do_physical_attack();
        }
    }
    if (attackskill == 106)
    {
        extraattack = 0;
        do_physical_attack();
    }
    attackvar = 0;
    return;
}



void do_physical_attack()
{
    int attackdmg;
    int expmodifer = 0;
label_22191_internal:
    if (cdata[cc].state != 1)
    {
        return;
    }
    if (cdata[tc].state != 1)
    {
        return;
    }
    if (cdata[cc].fear != 0)
    {
        ++msgdup;
        txt(lang(
            name(cc) + u8"は怖気づいた。"s,
            name(cc) + u8" "s + is(cc) + u8" frightened."s));
        return;
    }
    if (map(cdata[tc].position.x, cdata[tc].position.y, 8) != 0)
    {
        i = map(cdata[tc].position.x, cdata[tc].position.y, 8) - 1;
        if (mef(0, i) == 2)
        {
            if (rnd(2) == 0)
            {
                if (is_in_fov(cc))
                {
                    txt(lang(
                        name(cc) + u8"は霧の中の幻影を攻撃した。"s,
                        name(cc) + u8" attack"s + _s(cc)
                            + u8" an illusion in the mist."s));
                }
                return;
            }
        }
    }
    if (attackrange == 1)
    {
        aniref = cw;
        play_animation(attackskill);
    }
    if (attacknum > 1 || cc != 0)
    {
    }
    expmodifer = 1 + cdata[tc].is_hung_on_sand_bag() * 15 + cdata[tc].splits()
        + cdata[tc].splits2() + (gdata_current_map == 35);
    int hit = calcattackhit();
    i = 0;
    if (hit == 1)
    {
        if (critical)
        {
            if (cc == 0)
            {
                txtef(3);
                txt(lang(u8"会心の一撃！ "s, u8"Critical Hit!"s));
            }
        }
        dmg = calcattackdmg();
        attackdmg = dmg;
        if (cc == 0)
        {
            if (config::instance().attackanime)
            {
                aniref = dmg * 100 / cdata[tc].max_hp;
                play_animation(12);
            }
        }
        if (attackskill != 106)
        {
            if (inv[cw].quality >= 4)
            {
                if (inv[cw].quality == 6)
                {
                    s(1) = lang(""s, u8"The "s) + iknownnameref(inv[cw].id);
                }
                else if (inv[cw].subname >= 40000)
                {
                    randomize(inv[cw].subname - 40000);
                    s(1) = random_title(1);
                    randomize();
                }
                else
                {
                    s(1) = lang(""s, u8"The "s) + iknownnameref(inv[cw].id);
                }
                s(1) = lang(u8"『"s, u8"<"s) + s(1) + lang(u8"』"s, u8">"s);
                if (is_in_fov(cc))
                {
                    if (rnd(5) == 0)
                    {
                        txtef(9);
                        txt(lang(
                            name(cc) + u8"は"s + s(1)
                                + u8"を誇らしげに構えた。"s,
                            name(cc) + u8" wield"s + _s(cc) + u8" "s + s(1)
                                + u8" proudly."s));
                    }
                }
                i = 1;
            }
        }
        if (attackskill == 106)
        {
            if (cdata[cc].element_of_unarmed_attack != 0)
            {
                ele = cdata[cc].element_of_unarmed_attack / 100000;
                elep = cdata[cc].element_of_unarmed_attack % 100000;
            }
        }
        if (is_in_fov(tc))
        {
            if (extraattack)
            {
                txt(lang(u8"さらに"s, u8"Furthermore,"s));
                txtcontinue();
            }
            if (attackskill == 106)
            {
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を"s
                            + _melee(0, cdata[cc].melee_attack_type),
                        name(cc) + u8" "s
                            + _melee(0, cdata[cc].melee_attack_type) + _s(cc)
                            + u8" "s + name(tc) + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s
                            + _melee(1, cdata[cc].melee_attack_type),
                        name(cc) + u8" "s
                            + _melee(1, cdata[cc].melee_attack_type) + _s(cc)
                            + u8" "s + name(tc) + u8"."s));
                }
            }
            if (attackskill == 108)
            {
                s = lang(u8"弓"s, u8"bow"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を射撃し"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で撃たれた。"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 109)
            {
                s = lang(u8"クロスボウ"s, u8"crossbow"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を射撃し"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で撃たれた。"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 110)
            {
                s = lang(u8"銃"s, u8"gun"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を射撃し"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で撃たれた。"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 100)
            {
                s = lang(u8"長剣"s, u8"sword"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を切り払い"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で切られた。"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 104)
            {
                s = lang(u8"槍"s, u8"spear"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を突き刺して"s,
                        name(cc) + u8" stab"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で刺された。"s,
                        name(cc) + u8" stab"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 105)
            {
                s = lang(u8"杖"s, u8"staff"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を打って"s,
                        name(cc) + u8" smash"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で打たれた。"s,
                        name(cc) + u8" smash"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 101)
            {
                s = lang(u8"短剣"s, u8"dagger"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を突き刺して"s,
                        name(cc) + u8" stab"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で刺された。"s,
                        name(cc) + u8" stab"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 103)
            {
                s = lang(u8"鈍器"s, u8"mace"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を打って"s,
                        name(cc) + u8" smash"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で打たれた。"s,
                        name(cc) + u8" smash"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 102)
            {
                s = lang(u8"斧"s, u8"axe"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を切り払い"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で切られた。"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 107)
            {
                s = lang(u8"鎌"s, u8"scythe"s);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"を切り払い"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i) + u8"で切られた。"s,
                        name(cc) + u8" slash"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
            if (attackskill == 111)
            {
                s = itemname(cw, 1, 1);
                if (tc >= 16)
                {
                    gdata(809) = 2;
                    txt(lang(
                        aln(cc) + name(tc) + u8"に"s + s(i) + u8"を投げ"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" and"s));
                }
                else
                {
                    txt(lang(
                        aln(tc) + name(cc) + u8"に"s + s(i)
                            + u8"で攻撃された。"s,
                        name(cc) + u8" shoot"s + _s(cc) + u8" "s + name(tc)
                            + u8" with "s + his(cc) + u8" "s + s(i) + u8"."s));
                }
            }
        }
        dmghp(tc, dmg, cc, ele, elep);
        if (critical)
        {
            skillexp(186, cc, 60 / expmodifer, 2);
            critical = 0;
        }
        if (rtdmg > cdata[tc].max_hp / 20 || rtdmg > sdata(154, tc)
            || rnd(5) == 0)
        {
            skillexp(
                attackskill,
                cc,
                clamp((sdata(173, tc) * 2 - sdata(attackskill, cc) + 1), 5, 50)
                    / expmodifer,
                0,
                4);
            if (attackrange == 0)
            {
                skillexp(152, cc, 20 / expmodifer, 0, 4);
                if (cdata[cc].equipment_type & 2)
                {
                    skillexp(167, cc, 20 / expmodifer, 0, 4);
                }
                if (cdata[cc].equipment_type & 4)
                {
                    skillexp(166, cc, 20 / expmodifer, 0, 4);
                }
            }
            else if (attackskill == 111)
            {
                skillexp(152, cc, 10 / expmodifer, 0, 4);
            }
            else
            {
                skillexp(189, cc, 25 / expmodifer, 0, 4);
            }
            if (cc == 0)
            {
                if (gdata_mount != 0)
                {
                    skillexp(301, 0, 30 / expmodifer, 0, 5);
                }
            }
            if (cdata[tc].state == 1)
            {
                skillexp(
                    carmor(tc),
                    tc,
                    clamp((250 * rtdmg / cdata[tc].max_hp + 1), 3, 100)
                        / expmodifer,
                    0,
                    5);
                if (cdata[tc].equipment_type & 1)
                {
                    skillexp(168, tc, 40 / expmodifer, 0, 4);
                }
            }
        }
        if (attackskill != 106)
        {
            label_2220();
        }
        if (cdata[tc].cut_counterattack > 0)
        {
            if (attackrange == 0)
            {
                dmghp(
                    cc,
                    attackdmg * cdata[tc].cut_counterattack / 100 + 1,
                    tc,
                    61,
                    100);
            }
        }
        if (cdata[tc].damage_reaction_info != 0)
        {
            p = cdata[tc].damage_reaction_info % 1000;
            ccbk = cc;
            for (int cnt = 0; cnt < 1; ++cnt)
            {
                if (attackrange == 0)
                {
                    if (p == 61)
                    {
                        if (is_in_fov(cc))
                        {
                            txtef(8);
                            txt(lang(
                                u8"棘が"s + name(cc) + u8"に刺さった。"s,
                                name(cc) + u8" "s + is(cc)
                                    + u8" stuck by several thorns."s));
                        }
                        dmghp(
                            cc,
                            clamp(attackdmg / 10, 1, cdata[tc].max_hp / 10),
                            tc,
                            p,
                            cdata[tc].damage_reaction_info / 1000);
                        break;
                    }
                    if (p == 62)
                    {
                        if (is_in_fov(cc))
                        {
                            txtef(8);
                            txt(lang(
                                u8"エーテルの棘が"s + name(cc)
                                    + u8"に刺さった。"s,
                                name(cc) + u8" "s + is(cc)
                                    + u8" stuck by several ether thorns."s));
                        }
                        dmghp(
                            cc,
                            clamp(attackdmg / 10, 1, cdata[tc].max_hp / 10),
                            tc,
                            p,
                            cdata[tc].damage_reaction_info / 1000);
                        break;
                    }
                    if (p == 63)
                    {
                        if (attackskill != 106)
                        {
                            if (rnd(5) == 0)
                            {
                                item_acid(cc, cw);
                            }
                        }
                    }
                }
                if (attackdmg > cdata[tc].max_hp / 10)
                {
                    cc = tc;
                    tlocx = cdata[cc].position.x;
                    tlocy = cdata[cc].position.y;
                    if (p == 63)
                    {
                        if (is_in_fov(tc))
                        {
                            txtef(8);
                            txt(lang(
                                u8"酸が飛び散った。"s,
                                u8"Acids spread over the ground."s));
                        }
                        efid = 455;
                        efp = cdata[tc].damage_reaction_info / 1000;
                        magic();
                        break;
                    }
                }
            }
            cc = ccbk;
        }
    }
    else
    {
        if (cc == 0)
        {
            snd(4);
        }
        if (sdata(attackskill, cc) > sdata(173, tc) || rnd(5) == 0)
        {
            p = clamp((sdata(attackskill, cc) - sdata(173, tc) / 2 + 1), 1, 20)
                / expmodifer;
            skillexp(173, tc, p, 0, 4);
            skillexp(187, tc, p, 0, 4);
        }
    }
    if (hit == -1)
    {
        if (is_in_fov(cc))
        {
            if (extraattack)
            {
                txt(lang(u8"さらに"s, u8"Furthermore,"s));
                txtcontinue();
            }
            if (tc < 16)
            {
                txt(lang(
                    aln(tc) + name(cc) + u8"の攻撃を避けた。"s,
                    name(tc) + u8" evade"s + _s(tc) + u8" "s + name(cc)
                        + u8"."s));
            }
            else
            {
                txt(lang(
                    aln(cc) + u8"攻撃をかわされた。"s,
                    name(cc) + u8" miss"s + _s(cc, true) + u8" "s + name(tc)
                        + u8"."s));
            }
            add_damage_popup(u8"miss", tc, {0, 0, 0});
        }
    }
    if (hit == -2)
    {
        if (is_in_fov(cc))
        {
            if (extraattack)
            {
                txt(lang(u8"さらに"s, u8"Furthermore,"s));
                txtcontinue();
            }
            if (tc < 16)
            {
                txt(lang(
                    aln(tc) + name(cc) + u8"の攻撃を華麗に避けた。"s,
                    name(tc) + u8" skillfully evade"s + _s(tc) + u8" "s
                        + name(cc) + u8"."s));
            }
            else
            {
                txt(lang(
                    aln(cc) + u8"攻撃を華麗にかわされた。"s,
                    name(tc) + u8" skillfully evade"s + _s(tc) + u8" "s
                        + name(cc) + u8"."s));
            }
            add_damage_popup(u8"evade!!", tc, {0, 0, 0});
        }
    }
    if (tc == 0)
    {
        gdata(30) = 0;
    }
    rowact_check(tc);
    if (attackskill != 106)
    {
        if (cdata[tc].state != 1)
        {
            cw = attackitem;
            if (ibit(10, cw))
            {
                if (inv[cw].param2 < calcexpalive(inv[cw].param1))
                {
                    inv[cw].param2 += rnd(cdata[tc].level / inv[cw].param1 + 1);
                    if (inv[cw].param2 >= calcexpalive(inv[cw].param1))
                    {
                        txtef(2);
                        snd(61);
                        txt(lang(
                            itemname(cw) + u8"は十分に血を味わった！"s,
                            itemname(cw) + u8" has tasted enough blood!"s));
                    }
                }
            }
        }
    }
    ele = 0;
    if (extraattack == 0)
    {
        if (attackrange)
        {
            if (rnd(100) < cdata[cc].extra_shot)
            {
                ammoproc = -1;
                ++extraattack;
                goto label_22191_internal;
            }
        }
        else if (rnd(100) < cdata[cc].extra_attack)
        {
            ++extraattack;
            goto label_22191_internal;
        }
    }
    return;
}



void label_2220()
{
    for (int cnt = 0; cnt < 15; ++cnt)
    {
        cw = attackitem;
        if (inv[cw].enchantments[cnt].id == 0)
        {
            break;
        }
        enc = inv[cw].enchantments[cnt].id;
        if (enc == 36)
        {
            p = rnd(inv[cw].enchantments[cnt].power / 50 + 1) + 1;
            healsp(cc, p);
            dmgsp(tc, p / 2);
            continue;
        }
        if (enc == 38)
        {
            p = rnd(inv[cw].enchantments[cnt].power / 25 + 1) + 1;
            healmp(cc, p / 5);
            if (cdata[tc].state != 1)
            {
                continue;
            }
            dmgmp(tc, p);
            continue;
        }
        if (enc == 37)
        {
            if (rnd(66) == 0)
            {
                evadd(18, cc);
            }
            continue;
        }
        if (enc == 40)
        {
            if (gdata_left_turns_of_timestop == 0)
            {
                if (rnd(25) == 0)
                {
                    txtef(9);
                    txt(lang(
                        name(cc) + u8"は時を止めた。"s,
                        name(cc) + u8" stop"s + _s(cc) + u8" time."s));
                    gdata_left_turns_of_timestop =
                        inv[cw].enchantments[cnt].power / 100 + 1 + 1;
                }
                continue;
            }
        }
        if (enc == 57)
        {
            s = refchara_str(cdata[tc].id, 8);
            if (strutil::contains(s(0), u8"/dragon/"))
            {
                gdata(809) = 1;
                dmghp(tc, orgdmg / 2, cc);
            }
            continue;
        }
        if (enc == 61)
        {
            s = refchara_str(cdata[tc].id, 8);
            if (strutil::contains(s(0), u8"/god/"))
            {
                gdata(809) = 1;
                dmghp(tc, orgdmg / 2, cc);
            }
            continue;
        }
        if (enc == 58)
        {
            s = refchara_str(cdata[tc].id, 8);
            if (strutil::contains(s(0), u8"/undead/"))
            {
                gdata(809) = 1;
                dmghp(tc, orgdmg / 2, cc);
            }
            continue;
        }
        i = enc / 10000;
        if (i != 0)
        {
            enc = enc % 10000;
            if (i == 7)
            {
                if (orgdmg <= 1)
                {
                    continue;
                }
                ele = enc;
                if (cdata[tc].state != 1)
                {
                    continue;
                }
                gdata(809) = 1;
                dmghp(
                    tc,
                    rnd(orgdmg * (100 + inv[cw].enchantments[cnt].power) / 1000
                        + 1)
                        + 5,
                    cc,
                    ele,
                    inv[cw].enchantments[cnt].power / 2 + 100);
                continue;
            }
            if (i == 8)
            {
                if (cdata[tc].state != 1)
                {
                    continue;
                }
                if (enc >= 26)
                {
                    continue;
                }
                tcbk = tc;
                p = encprocref(1, enc);
                if (p == 3000 || p == 10000)
                {
                    tc = cc;
                }
                p = encprocref(5, enc);
                enc = encprocref(0, enc);
                tlocx = cdata[tc].position.x;
                tlocy = cdata[tc].position.y;
                if (rnd(100) < p)
                {
                    efid = enc;
                    efp = inv[cw].enchantments[cnt].power
                        + sdata(attackskill, cc) * 10;
                    magic();
                }
                tc = tcbk;
                continue;
            }
            continue;
        }
    }
    if (ammoproc == 4)
    {
        txtef(9);
        txt(lang(
            name(cc) + u8"は時を止めた。"s,
            name(cc) + u8" stop"s + _s(cc) + u8" time."s));
        gdata_left_turns_of_timestop = 4;
    }
    if (ammoproc == 3)
    {
        if (cdata[tc].state == 1)
        {
            gdata(809) = 1;
            dmghp(
                tc,
                orgdmg * 2 / 3,
                cc,
                rnd(11) + 50,
                sdata(attackskill, cc) * 10 + 100);
        }
    }
    return;
}



turn_result_t do_search_command()
{
    ++msgdup;
    txt(lang(
        u8"周囲を注意深く調べた。"s,
        u8"You search the surroundings carefully."s));
    if (gdata_current_map == 35)
    {
        p = 9999;
        for (const auto& cnt : items(-1))
        {
            if (inv[cnt].number == 0)
            {
                continue;
            }
            if (inv[cnt].own_state != 5)
            {
                continue;
            }
            if (inv[cnt].id != 748)
            {
                continue;
            }
            if (p > dist(
                        inv[cnt].position.x,
                        inv[cnt].position.y,
                        cdata[0].position.x,
                        cdata[0].position.y))
            {
                p = dist(
                    inv[cnt].position.x,
                    inv[cnt].position.y,
                    cdata[0].position.x,
                    cdata[0].position.y);
            }
        }
        if (p != 9999)
        {
            while (1)
            {
                if (p <= 3)
                {
                    txt(lang(
                        u8"辺りの空気は息苦しいほどの緊張に包まれている。"s,
                        u8"The air around you is filled with strained silence."s));
                }
                if (p <= 9)
                {
                    txt(lang(
                        u8"微かだが、あなたの心臓はトクンと脈打った。"s,
                        u8"Your heart starts beating in your chest."s));
                    break;
                }
                if (p <= 16)
                {
                    txt(lang(
                        u8"まだだ、まだ遠い…"s,
                        u8"Still, still lying far ahead."s));
                    break;
                }
                txt(lang(
                    u8"あなたは青い水晶の存在を感じた。"s,
                    u8"You sense a blue crystal lying somewhere in this area."s));
                break;
            }
        }
    }
    for (int cnt = 0; cnt < 11; ++cnt)
    {
        y = cdata[cc].position.y + cnt - 5;
        if (y < 0 || y >= mdata(1))
        {
            continue;
        }
        for (int cnt = 0; cnt < 11; ++cnt)
        {
            x = cdata[cc].position.x + cnt - 5;
            if (x < 0 || x >= mdata(0))
            {
                continue;
            }
            if (map(x, y, 6) != 0)
            {
                cell_featread(x, y);
                refx = x;
                refy = y;
                if (std::abs(cdata[cc].position.y - y) <= 1
                    && std::abs(cdata[cc].position.x - x) <= 1)
                {
                    if (feat(1) == 14)
                    {
                        if (feat(0) == 0)
                        {
                            int stat = try_to_reveal();
                            if (stat == 1)
                            {
                                discover_trap();
                                txt(lang(
                                    u8"罠を発見した。"s,
                                    u8"You discover a trap."s));
                            }
                        }
                    }
                    if (feat(1) == 22)
                    {
                        int stat = try_to_reveal();
                        if (stat == 1 || 0)
                        {
                            discover_hidden_path();
                            txt(lang(
                                u8"隠れた通路を発見した。"s,
                                u8"You discover a hidden path."s));
                        }
                    }
                }
                if (feat(1) == 32)
                {
                    if (gdata_current_map != 35)
                    {
                        if (cdata[cc].position.x == x
                            && cdata[cc].position.y == y)
                        {
                            snd(24);
                            txt(lang(
                                u8"なんと小さなメダルを見つけた！"s,
                                u8"You find a small coin!"s));
                            map(x, y, 6) = 0;
                            itemcreate(-1, 622, x, y, 0);
                        }
                        else
                        {
                            if (dist(
                                    cdata[cc].position.x,
                                    cdata[cc].position.y,
                                    x,
                                    y)
                                > 2)
                            {
                                txt(lang(
                                    u8"この辺りには何かがありそうな予感がする…"s,
                                    u8"You sense something."s));
                            }
                            else
                            {
                                txt(lang(
                                    u8"あなたは何かが輝くのを目にした。"s,
                                    u8"You see something shines."s));
                            }
                        }
                    }
                }
            }
        }
    }
    cell_featread(cdata[cc].position.x, cdata[cc].position.y);
    if (feat(1) == 14)
    {
        if (feat(0) == tile_trap)
        {
            if (cdata[0].god_id == core_god::mani)
            {
                if (cc == 0)
                {
                    movx = cdata[cc].position.x;
                    movy = cdata[cc].position.y;
                    label_2144();
                }
            }
        }
    }
    if (feat(1) >= 24 && feat(1) <= 28)
    {
        rowactre(0) = 1;
        rowactre(1) = cdata[cc].position.x;
        rowactre(2) = cdata[cc].position.y;
        if (feat(1) == 24)
        {
            spot_digging();
        }
        if (feat(1) == 27)
        {
            spot_digging();
        }
        if (feat(1) == 26)
        {
            spot_fishing();
        }
        if (feat(1) == 25)
        {
            spot_mining_or_wall();
        }
        if (feat(1) == 28)
        {
            spot_material();
        }
    }
    return turn_result_t::turn_end;
}



void discover_trap()
{
    cell_featset(refx, refy, tile_trap, -1, -1);
    return;
}



void discover_hidden_path()
{
    map(refx, refy, 0) = tile_tunnel;
    cell_featset(refx, refy, 0, 0);
    return;
}



turn_result_t do_dig_after_sp_check()
{
    if (cdata[cc].sp < 0)
    {
        txt(lang(
            u8"疲れ過ぎて無理だ。"s, u8"You are too exhausted to do that."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    rowactre = 0;
    digx = tlocx;
    digy = tlocy;
    spot_mining_or_wall();
    return turn_result_t::turn_end;
}



void dipcursed(int prm_1078, int)
{
    if (the_item_db[inv[prm_1078].id]->category == 57000)
    {
        if (inv[prm_1078].material == 35)
        {
            txt(lang(
                itemname(prm_1078) + u8"は腐ってしまった…"s,
                ""s + itemname(prm_1078) + u8" rots."s));
            inv[prm_1078].param3 = -1;
            inv[prm_1078].image = 336;
            cell_refresh(inv[prm_1078].position.x, inv[prm_1078].position.y);
            return;
        }
        else
        {
            txt(lang(
                itemname(prm_1078) + u8"に変化はない。"s,
                ""s + itemname(prm_1078) + u8" remains unchanged."s));
            return;
        }
    }
    if (the_item_db[inv[prm_1078].id]->category < 50000)
    {
        --inv[prm_1078].enhancement;
        txt(lang(
            itemname(prm_1078) + u8"は錆びてしまった…"s,
            ""s + itemname(prm_1078) + u8" rusts."s));
        if (inv_getowner(prm_1078) != -1)
        {
            refresh_character(inv_getowner(prm_1078));
        }
        return;
    }
    txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
    return;
}



turn_result_t do_dip_command()
{
    if (inv[cidip].id == 617)
    {
        item_separate(ci);
        item_num(cidip, -1);
        snd(13);
        txt(lang(
            itemname(cidip, 1) + u8"を"s + itemname(ci) + u8"に装着した。"s,
            u8"You bait "s + itemname(ci) + u8" with "s + itemname(cidip, 1)
                + u8"."s));
        if (inv[ci].param4 == inv[cidip].param1)
        {
            inv[ci].count += rnd(10) + 15;
        }
        else
        {
            inv[ci].count = rnd(10) + 15;
            inv[ci].param4 = inv[cidip].param1;
        }
        return turn_result_t::turn_end;
    }
    snd(17);
    if (the_item_db[inv[cidip].id]->category == 52000)
    {
        if (the_item_db[inv[ci].id]->subcategory == 60001)
        {
            item_separate(ci);
            item_num(cidip, -1);
            if (inv[cidip].id != 601)
            {
                txt(lang(
                    itemname(cidip, 1) + u8"を"s + itemname(ci)
                        + u8"に浸した。"s,
                    u8"You dip "s + itemname(ci) + u8" into "s
                        + itemname(cidip, 1) + u8"."s));
                if (inv[ci].id == 602)
                {
                    txt(lang(
                        u8"井戸は汚れた。"s, u8"The holy well is polluted."s));
                    return turn_result_t::turn_end;
                }
                if (inv[ci].param3 >= 20)
                {
                    txt(lang(
                        itemname(ci) + u8"は完全に枯れている。"s,
                        itemname(ci) + u8" is completely dry."s));
                    return turn_result_t::turn_end;
                }
                txt(lang(
                    itemname(ci) + u8"は一瞬輝いた。"s,
                    itemname(ci) + u8" shines for a moment."s));
                if (inv[cidip].id == 587)
                {
                    txt(lang(u8"こんな量では… "s, u8"Snow just melts."s));
                }
                else
                {
                    inv[ci].param1 += rnd(3);
                }
                return turn_result_t::turn_end;
            }
            else
            {
                if (inv[ci].param1 < -5 || inv[ci].param3 >= 20
                    || (inv[ci].id == 602 && gdata_holy_well_count <= 0))
                {
                    const auto valn = itemname(ci);
                    txt(lang(valn + u8"は涸れている。"s, valn + u8" is dry."s));
                    txt(lang(
                        u8"あっ！空き瓶を井戸に落としてしまった…"s,
                        u8"Ops! You drop the empty bottle into the well..."s));
                    return turn_result_t::turn_end;
                }
                if (inv[ci].id == 602)
                {
                    --gdata_holy_well_count;
                    flt();
                    int stat = itemcreate(0, 516, -1, -1, 0);
                    if (stat != 0)
                    {
                        inv[ci].curse_state = curse_state_t::blessed;
                    }
                }
                else
                {
                    inv[ci].param1 -= 3;
                    flt(20);
                    flttypemajor = 52000;
                    itemcreate(0, 0, -1, -1, 0);
                }
                txt(lang(
                    u8"空き瓶に水をすくった。"s,
                    u8"You draw water from the well into the empty bottle."s));
                txt(lang(
                    itemname(ci, 1) + u8"を手に入れた。"s,
                    u8"You get "s + itemname(ci, 1) + u8"."s));
                item_stack(0, ci, 1);
                return turn_result_t::turn_end;
            }
        }
    }
    if (inv[cidip].id == 262)
    {
        if (the_item_db[inv[ci].id]->category == 57000)
        {
            item_num(cidip, -1);
            item_separate(ci);
            txt(lang(
                itemname(ci) + u8"に"s + itemname(cidip, 1)
                    + u8"を混入した！あなたはにやりと笑った。"s,
                u8"You made aphrodisiac food! You grin."s));
            if (is_cursed(inv[cidip].curse_state))
            {
                dipcursed(ci);
            }
            ibitmod(14, ci, 1);
            return turn_result_t::turn_end;
        }
    }
    if (inv[cidip].id == 620)
    {
        if (the_item_db[inv[ci].id]->category == 57000)
        {
            item_num(cidip, -1);
            item_separate(ci);
            txt(lang(
                itemname(ci) + u8"に"s + itemname(cidip, 1)
                    + u8"を混入した！あなたはうしろめたさを感じた…"s,
                u8"You made aphrodisiac food! You kind of feel guilty..."s));
            if (is_cursed(inv[cidip].curse_state))
            {
                dipcursed(ci);
            }
            ibitmod(6, ci, 1);
            return turn_result_t::turn_end;
        }
    }
    if (inv[cidip].id == 519)
    {
        if (inv[cidip].curse_state == curse_state_t::blessed)
        {
            in = inv[cidip].number;
        }
        else
        {
            in = 1;
            item_separate(ci);
        }
        item_num(cidip, -1);
        inv[ci].color = inv[cidip].color;
        txt(lang(
            u8"あなたは"s + itemname(ci) + u8"を染めた。"s,
            u8"You dye "s + itemname(ci) + u8"."s));
        if (inv_getowner(ci) == -1)
        {
            cell_refresh(inv[ci].position.x, inv[ci].position.y);
        }
        if (inv[ci].body_part != 0)
        {
            create_pcpic(cc, true);
        }
        return turn_result_t::turn_end;
    }
    if (inv[cidip].id == 566)
    {
        if (inv[cidip].curse_state == curse_state_t::blessed)
        {
            in = inv[cidip].number;
        }
        else
        {
            in = 1;
            item_separate(ci);
        }
        txt(lang(
            itemname(ci) + u8"に"s + itemname(cidip, 1) + u8"を塗りたくった。"s,
            u8"You put "s + itemname(cidip, 1) + u8" on "s + itemname(ci)
                + u8"."s));
        if (is_cursed(inv[cidip].curse_state))
        {
            dipcursed(ci);
        }
        else
        {
            ibitmod(1, ci, 1);
            txt(lang(
                itemname(ci) + u8"は酸から守られた。"s,
                itemname(ci) + u8" gain"s + _s2(in) + u8" acidproof."s));
        }
        item_num(cidip, -1);
        return turn_result_t::turn_end;
    }
    if (inv[cidip].id == 736)
    {
        if (inv[cidip].curse_state == curse_state_t::blessed)
        {
            in = inv[cidip].number;
        }
        else
        {
            in = 1;
            item_separate(ci);
        }
        txt(lang(
            itemname(ci, in) + u8"に"s + itemname(cidip, 1)
                + u8"を塗りたくった。"s,
            u8"You put "s + itemname(cidip, 1) + u8" on "s + itemname(ci, in)
                + u8"."s));
        if (is_cursed(inv[cidip].curse_state))
        {
            dipcursed(ci);
        }
        else if (inv[ci].id == 567)
        {
            txt(lang(u8"いいアイデアだ！しかし…"s, u8"A good idea! But..."s));
        }
        else
        {
            ibitmod(2, ci, 1);
            txt(lang(
                itemname(ci) + u8"は熱から守られた。"s,
                itemname(ci) + u8" gain"s + _s2(in) + u8" fireproof."s));
        }
        item_num(cidip, -1);
        return turn_result_t::turn_end;
    }
    if (inv[cidip].id == 516)
    {
        item_num(cidip, -1);
        if (inv[cidip].curse_state == curse_state_t::blessed)
        {
            txtef(2);
            txt(lang(
                itemname(ci) + u8"は銀色に輝いた。"s,
                itemname(ci) + u8" shine"s + _s2(inv[ci].number)
                    + u8" silvery."s));
            inv[ci].curse_state = curse_state_t::blessed;
            refresh_character(cc);
            return turn_result_t::turn_end;
        }
        if (is_cursed(inv[cidip].curse_state))
        {
            txtef(8);
            txt(lang(
                itemname(ci) + u8"は黒いオーラに包まれた。"s,
                itemname(ci) + u8" "s + is2(inv[ci].number)
                    + u8" wrapped by a dark aura."s));
            inv[ci].curse_state = curse_state_t::cursed;
            refresh_character(cc);
            return turn_result_t::turn_end;
        }
    }
    txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
    return turn_result_t::turn_end;
}



turn_result_t do_use_command()
{
    screenupdate = -1;
    update_screen();
    tc = cc;
    tlocx = cdata[cc].position.x;
    tlocy = cdata[cc].position.y;
    if (ibit(7, ci) == 1)
    {
        if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                + gdata_year * 24 * 30 * 12
            < inv[ci].count)
        {
            txt(lang(
                u8"そのアイテムが次に使用できるのは"s + cnvdate(inv[ci].count)
                    + u8"だ。"s,
                u8"This item will be useable again at "s
                    + cnvdate(inv[ci].count) + u8"."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        item_separate(ci);
        inv[ci].count = gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12 + inv[ci].param3;
    }
    if (ibit(4, ci) == 1)
    {
        if (inv[ci].count <= 0)
        {
            txt(lang(u8"それはもう使えない。"s, u8"It's out of charge."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        item_separate(ci);
        --inv[ci].count;
    }
    if (the_item_db[inv[ci].id]->subcategory == 58500)
    {
        return do_plant();
    }
    if (the_item_db[inv[ci].id]->subcategory == 59500)
    {
        return crafting_menu();
    }
    if (the_item_db[inv[ci].id]->subcategory == 60004)
    {
        if (gdata_continuous_active_hours < 15)
        {
            txt(lang(u8"まだ眠たくない。"s, u8"You don't feel sleepy yet."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        gdata(91) = 100;
        continuous_action_others();
        return turn_result_t::turn_end;
    }
    if (inv[ci].id == 413 || inv[ci].id == 414)
    {
        return do_gatcha();
    }
    if (inv[ci].id == 312 || inv[ci].id == 313 || inv[ci].id == 314
        || inv[ci].id == 315)
    {
        atxid = 1;
        casino_dealer();
        return turn_result_t::turn_end;
    }
    if (inv[ci].function == 1 || inv[ci].function == 2 || inv[ci].function == 3
        || inv[ci].function == 4)
    {
        prodtype = inv[ci].function;
        snd(26);
        invctrl = 0;
        label_18552();
        return turn_result_t::turn_end;
    }
    if (ibit(10, ci))
    {
        if (inv[ci].param2 < calcexpalive(inv[ci].param1))
        {
            txt(lang(
                u8"この武器はまだ血を吸い足りない。"s,
                u8"The weapon needs more blood."s));
        }
        else
        {
            txtnew();
            txt(lang(
                itemname(ci) + u8"は十分に血を吸い成長できる！"s,
                itemname(ci) + u8" sucked enough blood and ready to grow!"s));
            randomize(inv[ci].subname);
            exrand_randomize(inv[ci].subname);
            if (inv[ci].param1 >= 4 + rnd(12))
            {
                txt(lang(
                    u8"しかし、なんだか様子がおかしい…"s,
                    u8"But you sense something weird."s));
            }
            txt(lang(u8"それは…"s, u8"It..."s));
            reftype = the_item_db[inv[ci].id]->category;
            listmax = 0;
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                randomize(inv[ci].subname + inv[ci].param1 * 10 + cnt);
                exrand_randomize(inv[ci].subname + inv[ci].param1 * 10 + cnt);
                int stat = encadd(
                    ci, randomenc(randomenclv(4)), randomencp(), 0, 0, 1);
                if (stat != 0)
                {
                    if (rtval == 34)
                    {
                        if (rnd(3))
                        {
                            continue;
                        }
                    }
                    list(0, listmax) = rtval;
                    list(1, listmax) = rtval(1);
                    get_enchantment_description(
                        list(0, listmax), list(1, listmax), 0);
                    ELONA_APPEND_PROMPT(s, u8"null"s, ""s + promptmax);
                    ++listmax;
                }
            }
            list(0, listmax) = -1;
            ++listmax;
            s = lang(u8"ボーナス+1"s, u8"Bonus+1"s);
            ELONA_APPEND_PROMPT(s, u8"null"s, ""s + promptmax);
            rtval = show_prompt(promptx, prompty, 400);
            txtnew();
            if (rtval == -1)
            {
                txt(lang(
                    itemname(ci) + u8"は不満そうに震えた。"s,
                    itemname(ci) + u8" vibrates as if she is displeased."s));
            }
            else
            {
                if (list(0, rtval) == -1)
                {
                    ++inv[ci].enhancement;
                }
                else
                {
                    encadd(ci, list(0, rtval), list(1, rtval), 0, 1);
                }
                txtef(2);
                txt(lang(
                    itemname(ci) + u8"は嬉しげに震えた。"s,
                    itemname(ci) + u8" vibrates as if she is pleased."s));
                randomize(inv[ci].subname);
                exrand_randomize(inv[ci].subname);
                if (inv[ci].param1 >= 4 + rnd(12))
                {
                    txt(lang(
                        u8"その力は次第に脅威になっている。"s,
                        u8"Its power is becoming a threat."s));
                    int stat = encadd(ci, 45, 50);
                    if (stat == 0)
                    {
                        inv[ci].enchantments[14].id = 0;
                        txt(lang(
                            itemname(ci) + u8"はエンチャントを消した。"s,
                            itemname(ci) + u8" removes an enchantment."s));
                    }
                }
                inv[ci].param2 = 0;
                ++inv[ci].param1;
            }
            randomize();
            exrand_randomize();
        }
        refresh_character(cc);
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    switch (inv[ci].function)
    {
    case 24:
        x = cdata[cc].position.x;
        y = cdata[cc].position.y;
        if (mdata(6) == 1)
        {
            txt(lang(u8"ここでは使えない。"s, u8"You can't place it here."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (map(x, y, 6) != 0)
        {
            txt(lang(u8"ここには置けない。"s, u8"You can't place it here."s));
            return turn_result_t::pc_turn_user_error;
        }
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        cell_featset(x, y, 0, 14, 7, cc);
        txt(lang(u8"地雷を設置した。"s, u8"You set up the mine."s));
        snd(58);
        goto label_2229_internal;
    case 44:
        if (inv_getowner(ci) != -1)
        {
            txt(lang(
                u8"床に置かないと使えない。"s,
                u8"You need to put it on the ground."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        txt(lang(
            u8"あなたは"s + itemname(ci, 1) + u8"に座った。"s,
            u8"You sit on "s + itemname(ci, 1) + u8"."s));
        ELONA_APPEND_PROMPT(
            lang(u8"くつろぐ"s, u8"Relax."s), u8"null"s, ""s + 0);
        if (inv[ci].param1 != 1)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"マイチェアにする"s, u8"It's my chair."s),
                u8"null"s,
                ""s + 1);
        }
        if (inv[ci].param1 != 2)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"お客用のチェアにする"s, u8"It's for my guest."s),
                u8"null"s,
                ""s + 2);
        }
        if (inv[ci].param1 != 0)
        {
            ELONA_APPEND_PROMPT(
                lang(u8"誰でも座っていい"s, u8"It's free to use."s),
                u8"null"s,
                ""s + 3);
        }
        {
            int stat = show_prompt(promptx, prompty, 260);
            if (stat == -1)
            {
                goto label_2229_internal;
            }
            rtval = stat;
        }
        if (rtval == 0)
        {
            txt(lang(
                u8"あなたは存分にくつろいだ。"s,
                u8"You relax as much as you like."s));
            goto label_2229_internal;
        }
        if (rtval == 1)
        {
            txt(lang(
                itemname(ci, 1) + u8"はあなた専用の席になった！"s,
                itemname(ci, 1) + u8" is your seat now."s));
            inv[ci].param1 = 1;
            goto label_2229_internal;
        }
        if (rtval == 2)
        {
            txt(lang(
                itemname(ci, 1) + u8"は訪問者の席になった！"s,
                itemname(ci, 1) + u8" is used by your guests now."s));
            inv[ci].param1 = 2;
            goto label_2229_internal;
        }
        if (rtval == 3)
        {
            txt(lang(
                itemname(ci, 1) + u8"は誰でも座っていい席になった！"s,
                itemname(ci, 1) + u8" can be used by anyone."s));
            inv[ci].param1 = 0;
            goto label_2229_internal;
        }
        goto label_2229_internal;
    case 8:
        if (mdata(6) != 5)
        {
            txt(lang(
                u8"それはここでは使えない。"s, u8"You can't use it here."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        screenupdate = -1;
        update_screen();
        return turn_result_t::show_house_board;
    case 19:
        txt(lang(u8"誰を対象にする？"s, u8"Make up who?"s));
        {
            int stat = ask_direction();
            f = 0;
            if (stat != 0)
            {
                if (map(x, y, 1) > 0)
                {
                    tc = map(x, y, 1) - 1;
                    if (tc < 16)
                    {
                        screenupdate = -1;
                        update_screen();
                        ccbk = cc;
                        cc = tc;
                        label_2044();
                        cc = ccbk;
                        f = 1;
                    }
                }
            }
        }
        if (f == 0)
        {
            txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        }
        update_screen();
        return turn_result_t::pc_turn_user_error;
        break;
    case 15:
        efid = 184;
        magic();
        goto label_2229_internal;
    case 16:
        efid = 185;
        magic();
        goto label_2229_internal;
    case 17:
        efid = 183;
        magic();
        goto label_2229_internal;
    case 14:
        if (cc == 0)
        {
            if (inv[ci].number < 5)
            {
                txt(lang(u8"雪が足りない…"s, u8"You need more snow."s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
            removeitem(ci, 5);
        }
        flt();
        itemcreate(-1, 541, cdata[0].position.x, cdata[0].position.y, 0);
        if (is_in_fov(cc))
        {
            snd(86);
            txt(lang(
                name(cc) + u8"は雪だるまを作った！"s,
                name(cc) + u8" make"s + _s(cc) + u8" a snow man!"s));
        }
        goto label_2229_internal;
    case 13:
        snd(6);
        if (gdata_torch == 0)
        {
            gdata_torch = 1;
            txt(lang(u8"松明を灯した。"s, u8"You light up the torch."s));
        }
        else
        {
            gdata_torch = 0;
            txt(lang(u8"松明を消した。"s, u8"You put out the fire."s));
        }
        refresh_character(0);
        goto label_2229_internal;
    case 9:
    {
        int stat = label_2083();
        if (stat == 1)
        {
            return turn_result_t::turn_end;
        }
        else
        {
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
    }
        goto label_2229_internal;
    case 5:
        txt(lang(u8"何に聴診器を当てる？"s, u8"Auscultate who?"s));
        update_screen();
        {
            int stat = ask_direction();
            if (stat == 0)
            {
                txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
        }
        tc = map(x, y, 1) - 1;
        if (tc == 0)
        {
            txt(lang(u8" *ドクン ドクン* "s, u8"You blush."s));
            gdata(94) = 0;
            return turn_result_t::turn_end;
        }
        if (tc > 0 && tc < 16)
        {
            if (cdata[tc].state == 1)
            {
                gdata(94) = 0;
                if (cdata[tc].has_been_used_stethoscope() == 1)
                {
                    cdata[tc].has_been_used_stethoscope() = false;
                    txt(lang(
                        name(tc) + u8"から聴診器を外した。"s,
                        u8"You no longer watch on "s + his(tc)
                            + u8" health."s));
                    return turn_result_t::turn_end;
                }
                txt(lang(
                    u8"あなたは"s + name(tc) + u8"に聴診器を当てた。"s,
                    u8"You start to keep an eye on "s + his(tc)
                        + u8" health."s));
                if (cdata[tc].sex == 1)
                {
                    txt(lang(
                        ""s + name(tc) + u8"は顔を赤らめた。"s,
                        name(tc) + u8" blush"s + _s(tc, true) + u8"."s));
                    txtef(4);
                    txt(lang(u8"「キャー」"s, u8"\"Pervert!\""s));
                }
                cdata[tc].has_been_used_stethoscope() = true;
                return turn_result_t::turn_end;
            }
        }
        txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        update_screen();
        return turn_result_t::pc_turn_user_error;
        break;
    case 23:
        txt(lang(u8"誰を紐で結ぶ？"s, u8"Leash who?"s));
        update_screen();
        {
            int stat = ask_direction();
            f = 0;
            if (stat != 0)
            {
                if (map(x, y, 1) > 0)
                {
                    tc = map(x, y, 1) - 1;
                    if (tc == 0)
                    {
                        txt(lang(
                            u8"あなたは自分を紐でくくってみた…"s,
                            u8"You leash yourself..."s));
                    }
                    else if (cdata[tc].is_leashed() == 0)
                    {
                        if (tc >= 16)
                        {
                            if (rnd(5) == 0)
                            {
                                txt(lang(
                                    name(tc)
                                        + u8"が激しく抵抗したため紐は切れた。"s,
                                    u8"The leash is cut as "s + name(tc)
                                        + u8" resists."s));
                                --inv[ci].number;
                                cell_refresh(
                                    inv[ci].position.x, inv[ci].position.y);
                                refresh_burden_state();
                                goto label_2229_internal;
                            }
                        }
                        cdata[tc].is_leashed() = true;
                        txt(lang(
                            u8"あなたは"s + name(tc)
                                + u8"を紐でくくりつけた。"s,
                            u8"You leash "s + name(tc) + u8"."s));
                        txtef(9);
                        txt(lang(
                            name(tc) + u8"は呻き声を洩らした。「アン…♪」"s,
                            name(tc) + u8" gasp"s + _s(tc) + u8", "s
                                + u8"\"Pervert!\""s));
                    }
                    else
                    {
                        cdata[tc].is_leashed() = false;
                        txt(lang(
                            u8"あなたは"s + name(tc)
                                + u8"にくくりつけた紐をほどいた。"s,
                            u8"You unleash "s + name(tc) + u8"."s));
                        txtef(9);
                        txt(lang(
                            name(tc) + u8"は呻き声を洩らした。「はぁはぁ…」"s,
                            name(tc) + u8" gasp"s + _s(tc) + u8", "s
                                + u8"\"D-don't sto....N-nothing!\""s));
                    }
                    animeload(8, tc);
                    f = 1;
                }
            }
        }
        if (f == 0)
        {
            txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        }
        goto label_2229_internal;
    case 45:
        if (gdata_current_map == 35)
        {
            txt(lang(
                u8"このエリアでは使えない。"s,
                u8"You cant use it in this area."s));
            update_screen();
                            return turn_result_t::pc_turn_user_error;
        }
        txt(lang(u8"誰を吊るす？"s, u8"Hang who?"s));
        update_screen();
        {
            int stat = ask_direction();
            f = 0;
            if (stat != 0)
            {
                if (map(x, y, 1) > 0)
                {
                    tc = map(x, y, 1) - 1;
                    if (cdata[tc].hp >= cdata[tc].max_hp / 5)
                    {
                        txt(lang(
                            u8"もっと弱らせないと吊るせない。"s,
                            u8"The target needs to be weakened."s));
                        return turn_result_t::pc_turn_user_error;
                    }
                    if (tc != 0)
                    {
                        if (tc < 16)
                        {
                            txt(lang(
                                u8"仲間を吊るすなんてとんでもない！"s,
                                u8"Hanging your ally is a brutal idea!"s));
                            return turn_result_t::pc_turn_user_error;
                        }
                    }
                    if (cdata[tc].is_hung_on_sand_bag())
                    {
                        txt(lang(
                            u8"それは既に吊るされている。"s,
                            u8"It's already hanged up."s));
                        return turn_result_t::pc_turn_user_error;
                    }
                    if (tc == 0)
                    {
                        txt(lang(
                            u8"あなたは自分を吊るそうと思ったがやめた…"s,
                            u8"You try to hang yourself but rethink..."s));
                    }
                    else
                    {
                        snd(58);
                        cdata[tc].is_hung_on_sand_bag() = true;
                        txt(lang(
                            u8"あなたは"s + name(tc) + u8"を吊るした。"s,
                            u8"You hang up "s + name(tc) + u8"."s));
                        txt(lang(
                            name(tc) + u8"は呻き声を洩らした。「アン…♪」"s,
                            name(tc) + u8" gasp"s + _s(tc) + u8", "s
                                + u8"\"Pervert!\""s));
                        animeload(8, tc);
                        --inv[ci].number;
                        cell_refresh(inv[ci].position.x, inv[ci].position.y);
                        refresh_burden_state();
                    }
                    f = 1;
                }
            }
        }
        if (f == 0)
        {
            txt(lang(u8"それは無理だ。"s, u8"It's impossible."s));
        }
        goto label_2229_internal;
    case 6:
    {
        txt(lang(
            itemname(ci, 1) + u8"を再生した。"s,
            u8"You play "s + itemname(ci, 1) + u8"."s));
        auto music = inv[ci].param1 + 50 + 1;
        if (music > 90)
        {
            music = 90;
        }
        mdata(13) = music;
        play_music(music);
    }
        goto label_2229_internal;
    case 10:
        screenupdate = -1;
        update_screen();
        return turn_result_t::play_scene;
    case 7:
        if (inv[ci].own_state != 3)
        {
            if (mdata(7) == 0 || gdata_current_map == 13
                || gdata_current_map == 30)
            {
                if (gdata_current_map == 2)
                {
                    txt(lang(
                        u8"ワールドマップで建設するべきだ。"s,
                        u8"You can only build it in the world map."s));
                }
                else
                {
                    txt(lang(
                        u8"ここには建てられない。"s,
                        u8"You can't build it here."s));
                }
                update_screen();
                return turn_result_t::pc_turn_user_error;
            }
            gdata(91) = 101;
            continuous_action_others();
            return turn_result_t::turn_end;
        }
        if (adata(16, gdata_current_map) == 8)
        {
            if (gdata_current_dungeon_level == adata(10, gdata_current_map))
            {
                if (adata(20, gdata_current_map) != -1)
                {
                    txt(lang(
                        u8"クエストを放棄してシェルターに非難する？"s,
                        u8"Really give up the quest and evacuate to the shelter?"s));
                    ELONA_YES_NO_PROMPT();
                    rtval = show_prompt(promptx, prompty, 160);
                    if (rtval != 0)
                    {
                        update_screen();
                        return turn_result_t::pc_turn_user_error;
                    }
                }
            }
        }
        gdata(91) = 102;
        continuous_action_others();
        goto label_2229_internal;
    case 11:
        if (moneybox(inv[ci].param2) > cdata[0].gold)
        {
            txt(lang(
                u8"金貨が足りない…"s, u8"You count your coins and sigh..."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (inv[ci].param1 >= 1000000000)
        {
            txt(lang(u8"貯金箱は一杯だ。"s, u8"The money box is full."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        item_separate(ci);
        snd(12);
        cdata[0].gold -= moneybox(inv[ci].param2);
        inv[ci].param1 += moneybox(inv[ci].param2);
        inv[ci].weight += 100;
        goto label_2229_internal;
    case 20:
        efid = 458;
        efp = 400;
        magic();
        goto label_2229_internal;
    case 47:
        txt(lang(u8"それは鈍く輝いた。"s, u8"It glows dully."s));
        goto label_2229_internal;
    case 22:
        snd(118);
        if (mdata(6) != 3 && mdata(6) != 2)
        {
            txt(lang(
                u8"それは街でしか使えない。"s,
                u8"You can only use it in a town."s));
            goto label_2229_internal;
        }
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        txt(lang(
            u8"突然、あなたの目の前に異次元へのゲートが現れた。"s,
            u8"Suddenly, a strange gate opens."s));
        comctrl = 2;
        {
            int stat = label_19432();
            if (stat == 1)
            {
                return do_enter_strange_gate();
            }
        }
        goto label_2229_internal;
    case 49:
        txt(lang(
            itemname(ci, 1) + u8"を振った。"s,
            u8"You swing "s + itemname(ci, 1) + u8"."s));
        snd(58);
        efid = 49;
        efp = 100;
        magic();
        goto label_2229_internal;
    case 21:
        txt(lang(
            itemname(ci, 1) + u8"を振った。"s,
            u8"You swing "s + itemname(ci, 1) + u8"."s));
        snd(58);
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        fixmaterial = inv[ci].material;
        efid = 21;
        efp = 500;
        magic();
        goto label_2229_internal;
    case 25:
        txt(lang(
            itemname(ci, 1) + u8"を使った。"s,
            u8"You hold "s + itemname(ci, 1) + u8" up high."s));
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        efid = 637;
        efp = 500;
        magic();
        goto label_2229_internal;
    case 26:
        txt(lang(
            itemname(ci, 1) + u8"を始動させた。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        gdata_diastrophism_flag = 1;
        snd(64);
        txtef(5);
        txt(lang(
            u8"オパートス「フハハハ！間もなく、この地に変動が起こるであろう！」"s,
            u8"A voice echoes, "s
                + u8"\"Muwahahaha! I shall shake the land for you!\""s));
        goto label_2229_internal;
    case 34:
        txt(lang(
            itemname(ci, 1) + u8"を始動させた。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        txtef(5);
        txt(lang(
            u8"ジュア「べ、別にあんたのためにするんじゃないからね。バカっ！」"s,
            u8"A voice echoes, "s + u8"\"I-I'm not doing for you! Silly!\""s));
        efid = 637;
        efp = 5000;
        magic();
        goto label_2229_internal;
    case 43:
        txt(lang(
            itemname(ci, 1) + u8"を始動させた。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        snd(64);
        txtef(5);
        txt(lang(
            u8"エヘカトル「呼んだ？呼んだ？」"s,
            u8"A voice echoes, "s + u8"\"Did you call me? Call me?\""s));
        addbuff(tc, 19, 77, 2500);
        goto label_2229_internal;
    case 27:
        txt(lang(
            itemname(ci, 1) + u8"を始動させた。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        snd(64);
        txtef(5);
        if (gdata_weather == 1)
        {
            txt(lang(
                u8"ルルウィ「あさはかね。エーテルの風を止めてあげるとでも思ったの？」"s,
                u8"A rather angry voice echoes, "s
                u8"\"Listen my little slave. Did you really think I would turn a hand in this filthy wind for you?\""s));
            goto label_2229_internal;
        }
        p = gdata_weather;
        while (1)
        {
            if (rnd(10) == 0)
            {
                gdata_weather = 0;
            }
            if (rnd(10) == 0)
            {
                gdata_weather = 3;
            }
            if (rnd(15) == 0)
            {
                gdata_weather = 4;
            }
            if (rnd(20) == 0)
            {
                gdata_weather = 2;
            }
            if (gdata_weather != p)
            {
                break;
            }
        }
        txt(lang(
            u8"ルルウィ「あらあら、定命の分際でそんなおねだりするの？ウフフ…今回は特別よ」"s,
            u8"An impish voice echoes, "s
            u8"\"Ah you ask too much for a mortal. Still, it is hard to refuse a call from such a pretty slave like you.\""s));
        txt(lang(u8"天候が変わった。"s, u8"The weather changes."s));
        envonly = 1;
        play_music();
        goto label_2229_internal;
    case 28:
        if (mdata(6) == 1)
        {
            txt(lang(u8"ここでは使えない。"s, u8"You can't place it here."s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        if (cdata[0].position.x != 33 || cdata[0].position.y != 16)
        {
            if (gdata_red_blossom_in_palmia == 1)
            {
                txt(lang(
                    u8"ここはクエストの目標位置ではない。本当にここに設置する？"s,
                    u8"This location is not your quest goal. Really place it here?"s));
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                if (rtval != 0)
                {
                    update_screen();
                    return turn_result_t::pc_turn_user_error;
                }
            }
        }
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        txt(lang(
            u8"原子爆弾を設置した。逃げろォー！"s,
            u8"You set up the nuke...now run!!"s));
        snd(58);
        addmef(cdata[cc].position.x, cdata[cc].position.y, 7, 632, 10, 100, cc);
        goto label_2229_internal;
    case 48:
        if (gdata_current_map != 35 || usermapid == 0)
        {
            txt(lang(
                u8"それはこの場所ではみすぼらしく見える。"s,
                u8"It looks so dumb here."s));
            goto label_2229_internal;
        }
        txt(lang(
            u8"この石像を見つめていると、何かを投げつけたくなってうずうずしてきた！"s,
            u8"Watching this strange statue makes you want to throw something at it!"s));
        goto label_2229_internal;
    case 29:
        trait(inv[ci].param1) = 1;
        if (inv[ci].param1 == 169)
        {
            trait(162) = 0;
        }
        if (inv[ci].param1 == 162)
        {
            trait(169) = 0;
        }
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        txt(lang(
            u8"あなたは新たなフィートを獲得した！"s,
            u8"You gain a new feat."s));
        animeload(10, 0);
        refresh_character(cc);
        goto label_2229_internal;
    case 30:
        txt(lang(
            itemname(ci, 1) + u8"を始動させた。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        efid = inv[ci].param1;
        efp = inv[ci].param2;
        tc = cc;
        efstatus = curse_state_t::none;
        magic();
        goto label_2229_internal;
    case 41:
        if (gdata_next_level_minus_one_kumiromis_experience_becomes_available
            > cdata[0].level)
        {
            txt(lang(
                u8"クミロミの声がした。「ダメ…経験…足りない…」"s,
                u8"Kumiromi talks to you, "s
                u8"\"No...you aren't...experienced enough...for this...\""s));
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        snd(64);
        gdata_next_level_minus_one_kumiromis_experience_becomes_available += 10;
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        ++gdata_acquirable_feat_count;
        txt(lang(
            u8"「…よく…経験をつんだね…酬いてあげる…」"s,
            u8"\"...You have acquired enough...experience...I shall reward you...\""s));
        txtef(5);
        txt(lang(
            u8"クミロミはあなたを祝福した。あなたは新たなフィートを取得できるようになった！"s,
            u8"Kumiromi blesses you. You can obtain one more feat now!"s));
        goto label_2229_internal;
    case 42:
        snd(38);
        txtef(8);
        txt(lang(
            u8"何だか嫌な予感がする…"s,
            u8"You have a bad feeling about this..."s));
        goto label_2229_internal;
    case 46:
        txtnew();
        txt(lang(u8"本当に首を吊る？"s, u8"Really hang yourself?"s));
        ELONA_YES_NO_PROMPT();
        rtval = show_prompt(promptx, prompty, 160);
        if (rtval != 0)
        {
            return turn_result_t::turn_end;
        }
        dmghp(0, 99999, -20);
        goto label_2229_internal;
    case 33:
        if (inv[ci].subname == 0)
        {
            txt(lang(
                u8"モンスターボールは空っぽだ。"s, u8"This ball is empty."s));
            goto label_2229_internal;
        }
        if (get_freeally() == 0)
        {
            txt(lang(
                u8"仲間はこれ以上増やせない。"s, u8"Your party is full."s));
            goto label_2229_internal;
        }
        txt(lang(
            itemname(ci, 1) + u8"を使用した。"s,
            u8"You activate "s + itemname(ci, 1) + u8"."s));
        --inv[ci].number;
        cell_refresh(inv[ci].position.x, inv[ci].position.y);
        flt();
        novoidlv = 1;
        characreate(56, inv[ci].subname, -3, 0);
        rc = 56;
        new_ally_joins();
        goto label_2229_internal;
    case 31:
        x = cdata[cc].position.x;
        y = cdata[cc].position.y;
        cell_featread(x, y);
        if (feat(1) != 29)
        {
            txt(lang(
                u8"それは種を植えた場所で使わなければならない。"s,
                u8"You don't see any plant on the ground."s));
            goto label_2229_internal;
        }
        if (feat == tile_plant + 2)
        {
            txt(lang(
                u8"この作物は既に成長しきっている。"s,
                u8"The plant has already grown full."s));
            goto label_2229_internal;
        }
        if (feat == tile_plant + 3)
        {
            feat = tile_plant + 1;
            label_2234();
            txt(lang(u8"枯れた植物に生命が宿った。"s, u8"The plant revives."s));
        }
        else
        {
            ++feat;
            txt(lang(u8"植物は成長した。"s, u8"The plant grows."s));
        }
        cell_featset(x, y, feat, feat(1), feat(2), feat(3));
        animeload(8, 0);
        goto label_2229_internal;
    case 32:
        txtnew();
        txt(lang(
            u8"まずは素体となる仲間を選ぶ必要がある。"s,
            u8"Choose an original body."s));
        rc = 0;
        allyctrl = 5;
        {
            int stat = ctrl_ally();
            if (stat == -1)
            {
                return turn_result_t::turn_end;
            }
            rc = stat;
        }
        txtnew();
        txt(lang(
            u8"遺伝子を取り出す仲間を選ぶ必要がある。この仲間は合成後、永久に失われる。"s,
            u8"Choose a gene. Once you extract a gene, the subject will be lost forever."s));
        allyctrl = 5;
        {
            int stat = ctrl_ally();
            if (stat == -1)
            {
                return turn_result_t::turn_end;
            }
            tc = stat;
        }
        update_screen();
        txtnew();
        txt(lang(
            u8"本当に"s + cdatan(0, rc) + u8"に"s + cdatan(0, tc)
                + u8"の遺伝子を組み込む？"s,
            u8"Really add "s + cdatan(0, tc) + u8"'s gene to "s + cdatan(0, rc)
                + u8"?"s));
        ELONA_YES_NO_PROMPT();
        rtval = show_prompt(promptx, prompty, 160);
        if (rtval != 0)
        {
            return turn_result_t::turn_end;
        }
        txtnew();
        txtef(5);
        txt(lang(
            ""s + cdatan(0, rc) + u8"は"s + cdatan(0, tc)
                + u8"の遺伝子を受けついだ！"s,
            ""s + cdatan(0, rc) + u8" has inherited "s + cdatan(0, tc)
                + u8"'s gene!"s));
        anic = rc;
        play_animation(20);
        {
            int stat = label_2231();
            if (stat != -1)
            {
                cdata_body_part(rc, stat) = rtval * 10000;
                txtef(2);
                txt(lang(
                    cdatan(0, rc) + u8"は新しい"s
                        + i18n::_(u8"ui", u8"body_part", u8"_"s + rtval)
                        + u8"を得た！"s,
                    cdatan(0, rc) + u8" gains new "s
                        + i18n::_(u8"ui", u8"body_part", u8"_"s + rtval)
                        + u8"!"s));
                refresh_speed_correction_value(rc);
            }
        }
        {
            int stat = label_2230();
            if (stat != 0)
            {
                for (int cnt = 0; cnt < 2; ++cnt)
                {
                    if (rtval(cnt) == -1)
                    {
                        break;
                    }
                    skillgain(rc, rtval(cnt), 1);
                    txtef(2);
                    txt(lang(
                        cdatan(0, rc) + u8"は"s
                            + i18n::_(
                                  u8"ability",
                                  std::to_string(rtval(cnt)),
                                  u8"name")
                            + u8"の技術を覚えた！"s,
                        cdatan(0, rc) + u8" learns "s
                            + i18n::_(
                                  u8"ability",
                                  std::to_string(rtval(cnt)),
                                  u8"name")
                            + u8" skill!"s));
                }
            }
        }
        if (cdata[tc].level > cdata[rc].level)
        {
            lv = (cdata[tc].level - cdata[rc].level) / 2 + 1;
            for (int cnt = 0, cnt_end = (lv); cnt < cnt_end; ++cnt)
            {
                r2 = 1;
                gain_level(rc);
            }
            txtef(2);
            txt(lang(
                cdatan(0, rc) + u8"はレベル"s + cdata[rc].level
                    + u8"になった！"s,
                cdatan(0, rc) + u8" is now level "s + cdata[rc].level
                    + u8"!"s));
            listmax = 0;
            for (int cnt = 10; cnt < 18; ++cnt)
            {
                list(0, listmax) = cnt;
                list(1, listmax) = sdata.get(cnt, tc).original_level;
                ++listmax;
            }
            sort_list_by_column1();
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                p = listmax - cnt - 1;
                i = list(0, p);
                if (list(1, p) > sdata.get(i, rc).original_level)
                {
                    p = (list(1, p) - sdata.get(i, rc).original_level) * 500;
                    p = clamp(p * 10 / clamp(lv, 2, 10), 1000, 10000);
                    skillmod(i, rc, p);
                }
            }
        }
        chara_vanquish(tc);
        autosave = 1 * (gdata_current_map != 35);
        skillexp(151, 0, 1200);
        randomize();
        screenupdate = -1;
        update_screen();
        cc = rc;
        csctrl = 4;
        snd(26);
        menu_character_sheet();
        cc = 0;
        goto label_2229_internal;
    case 35:
        txt(lang(
            u8"あなたはアイアンメイデンの中に入った。"s,
            u8"You enter the iron maiden."s));
        txtef(9);
        txt(lang(u8"「わくわく♪」"s, u8"\"Interesting!\""s));
        txt(lang(
            u8"突然誰かが蓋を閉めた。"s,
            u8"Suddenly, someone closes the door."s));
        txtef(9);
        txt(lang(u8"「ニヤリ」"s, u8"*Grin*"s));
        dmghp(0, 9999, -18);
        goto label_2229_internal;
    case 36:
        txt(lang(
            u8"あなたはギロチンに首をつっこんでみた。"s,
            u8"You set your head on the guillotine."s));
        txtef(9);
        txt(lang(u8"「わくわく♪」"s, u8"\"Interesting!\""s));
        txt(lang(
            u8"突然誰かがギロチンの刃を落とした。"s,
            u8"Suddenly, someone activates the guillotine."s));
        txtef(9);
        txt(lang(u8"「ニヤリ」"s, u8"*Grin*"s));
        dmghp(0, 9999, -19);
        goto label_2229_internal;
    case 39:
        txtef(9);
        txt(lang(u8" *ピーーーー* "s, u8"*Peeeeeeeeeep* "s));
        make_sound(cdata[cc].position.x, cdata[cc].position.y, 10, 1, 1, cc);
        goto label_2229_internal;
    case 37: show_card_collection(); goto label_2229_internal;
    }
label_2229_internal:
    refresh_burden_state();
    return turn_result_t::turn_end;
}



int label_2230()
{
    if (cdata[tc].splits() || cdata[tc].splits2())
    {
        return 0;
    }
    randomize(cdata[tc].id);
    int dbmax = 0;
    for (int cnt = 0; cnt < 100; ++cnt)
    {
        rtval = rnd(40) + 150;
        if (sdata(rtval, rc) == 0)
        {
            if (sdata(rtval, tc) > 0)
            {
                dblist(0, dbmax) = rtval;
                ++dbmax;
            }
        }
    }
    rtval(0) = dblist(0, 0);
    rtval(1) = -1;
    if (dbmax >= 2)
    {
        if (rnd(3) == 0)
        {
            for (int cnt = 1, cnt_end = cnt + (dbmax - 1); cnt < cnt_end; ++cnt)
            {
                if (dblist(0, cnt) != rtval)
                {
                    rtval(1) = dblist(0, cnt);
                    break;
                }
            }
        }
    }
    randomize();
    return dbmax;
}



int label_2231()
{
    int dbmax = 0;
    s(1) = refchara_str(cdata[tc].id, 8);
    if (strutil::contains(s(1), u8"/man/"))
    {
        return -1;
    }
    if (cdata[tc].splits() || cdata[tc].splits2())
    {
        return -1;
    }
    rtval(1) = -1;
    for (int i = 0; i < 30; ++i)
    {
        if (cdata_body_part(rc, i) == 0)
        {
            rtval(1) = i + 100;
        }
    }
    if (rtval(1) == -1)
    {
        return -1;
    }
    for (int cnt = 100; cnt < 130; ++cnt)
    {
        f = cdata_body_part(tc, cnt) / 10000;
        if (f == 11 || f == 10 || f == 4)
        {
            continue;
        }
        if (f != 0)
        {
            dblist(0, dbmax) = f;
            ++dbmax;
        }
    }
    if (dbmax == 0)
    {
        return -1;
    }
    randomize(cdata[tc].id);
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        rtval = dblist(0, rnd(dbmax));
        f = 0;
        for (int i = 0; i < 30; ++i)
        {
            if (cdata_body_part(rc, i) == 0)
            {
                continue;
            }
            if (cdata_body_part(rc, i) / 10000 == rtval)
            {
                f = 1;
            }
        }
        if (f)
        {
            break;
        }
    }
    if (f == 0)
    {
        randomize();
        return rtval(1);
    }
    DIM3(dblist, 2, 800);
    for (int i = 0; i < 30; ++i)
    {
        ++dblist(0, cdata_body_part(tc, i) / 10000);
    }
    for (int cnt = 0; cnt < 25; ++cnt)
    {
        rtval = rnd(15) + 1;
        f = 0;
        for (int i = 0; i < 30; ++i)
        {
            if (cdata_body_part(rc, i) / 10000 == rtval)
            {
                ++f;
            }
        }
        if (f < dblist(0, rtval))
        {
            f = -1;
            break;
        }
    }
    randomize();
    if (f == -1)
    {
        return rtval(1);
    }
    else
    {
        return -1;
    }
}



turn_result_t do_plant()
{
    screenupdate = -1;
    update_screen();
    if (mdata(6) == 1 || mdata(6) == 3 || mdata(6) == 2)
    {
        txt(lang(
            u8"この場所には埋められない。"s, u8"You can't plant it here."s));
        update_screen();
                        return turn_result_t::pc_turn_user_error;
    }
    if (map(cdata[cc].position.x, cdata[cc].position.y, 6) != 0)
    {
        txt(lang(
            u8"この場所には埋められない。"s, u8"You can't plant it here."s));
        update_screen();
                        return turn_result_t::pc_turn_user_error;
    }
    int val0;
    if (chipm(0, map(cdata[0].position.x, cdata[0].position.y, 0)) == 2)
    {
        val0 = 1;
    }
    else
    {
        val0 = 0;
    }
    feat(0) = tile_plant;
    feat(1) = 29;
    feat(2) = inv[ci].material;
    label_2234(val0);
    if (val0)
    {
        s = u8"畑に"s;
    }
    else
    {
        s = "";
    }
    s += lang(
        ""s + itemname(ci, 1) + u8"を埋めた。"s,
        u8"You plant "s + itemname(ci, 1));
    txt(s);
    snd(55);
    removeitem(ci, 1);
    cell_featset(
        cdata[cc].position.x,
        cdata[cc].position.y,
        tile_plant,
        29,
        inv[ci].material,
        feat(3));
    skillexp(180, 0, 300);
    return turn_result_t::turn_end;
}



void label_2233(int val0)
{
    --feat(3);
    if (feat(3) % 50 == 0)
    {
        if (feat(3) >= 50)
        {
            feat = tile_plant + 3;
        }
        else
        {
            ++feat;
            label_2234(val0);
        }
    }
    return;
}



void label_2234(int val0)
{
    feat(3) = 4 + rnd(5);
    p = 10;
    if (feat(2) == 41)
    {
        p = 15;
    }
    if (feat(2) == 42)
    {
        p = 25;
    }
    if (feat(2) == 38)
    {
        p = 30;
    }
    if (feat(2) == 39)
    {
        p = 25;
    }
    if (feat(2) == 40)
    {
        p = 40;
    }
    if (val0 == 0)
    {
        p = p * 3 / 2;
    }
    if (feat == tile_plant)
    {
        if (gdata_weather < 3)
        {
            p = p * 2;
        }
    }
    if (sdata(180, 0) < rnd(p + 1) || rnd(20) == 0)
    {
        feat(3) += 50;
    }
    return;
}



void label_2235(int val)
{
    p = 15;
    if (feat(2) == 41)
    {
        p = 25;
    }
    if (feat(2) == 42)
    {
        p = 30;
    }
    if (feat(2) == 38)
    {
        p = 40;
    }
    if (feat(2) == 39)
    {
        p = 35;
    }
    if (val == 0)
    {
        p = p * 2;
    }
    if (gdata_weather < 3)
    {
        p = p * 4 / 3;
    }
    if (sdata(180, 0) < rnd(p + 1) || rnd(5) == 0 || feat(2) == 40)
    {
        map(cdata[0].position.x, cdata[0].position.y, 6) = 0;
        return;
    }
    feat = tile_plant;
    label_2234();
    cell_featset(
        cdata[cc].position.x,
        cdata[cc].position.y,
        feat,
        feat(1),
        feat(2),
        feat(3));
    txtef(2);
    txt(lang(u8"新しい芽が息吹いている！"s, u8"A new plant grows!"s));
    return;
}



void label_2236()
{
    skillexp(180, 0, 75);
    snd(55);
    flt(sdata(180, 0) / 2 + 15, 2);
    dbid = 0;
    if (feat(2) == 39)
    {
        flttypemajor = fsetplantunknown(rnd(length(fsetplantunknown)));
        if (rnd(100) == 0)
        {
            dbid = 559;
        }
    }
    if (feat(2) == 40 || (feat(2) == 39 && rnd(50) == 0))
    {
        flttypemajor = fsetplantartifact(rnd(length(fsetplantartifact)));
        fixlv = 4;
        autosave = 1 * (gdata_current_map != 35);
    }
    if (feat(2) == 36)
    {
        flttypeminor = 57003;
    }
    if (feat(2) == 37)
    {
        flttypeminor = 57004;
    }
    if (feat(2) == 38)
    {
        flttypeminor = 58005;
    }
    if (feat(2) == 41)
    {
        flttypeminor = 77001;
    }
    if (feat(2) == 42)
    {
        flttypemajor = 56000;
    }
    itemcreate(0, dbid, -1, -1, 0);
    txt(lang(
        itemname(ci, 1) + u8"を収穫した。"s,
        u8"You harvest "s + itemname(ci, 1) + u8"."s));
    item_stack(0, ci, 1);
    return;
}



void do_steal_command()
{
    gdata(91) = 105;
    continuous_action_others();
    return;
}



int clientguide(int)
{
    int i_at_m193 = 0;
    int f_at_m193 = 0;
    j_at_m193 = 0;
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        p_at_m193 = gdata(160 + cnt);
        if (qdata(8, p_at_m193) == 1)
        {
            if (gdata_current_dungeon_level == 1)
            {
                i_at_m193 = -1;
                if (qdata(3, p_at_m193) == 1011)
                {
                    if (qdata(1, p_at_m193) == gdata_current_map)
                    {
                        i_at_m193 = qdata(10, p_at_m193);
                    }
                }
                if (qdata(3, p_at_m193) == 1002)
                {
                    if (qdata(1, qdata(10, p_at_m193)) == gdata_current_map)
                    {
                        i_at_m193 = qdata(0, qdata(10, p_at_m193));
                    }
                }
                if (i_at_m193 != -1)
                {
                    f_at_m193 = 0;
                    for (int cnt = 0, cnt_end = (cnt); cnt < cnt_end; ++cnt)
                    {
                        if (gdata(160 + cnt) == p_at_m193)
                        {
                            f_at_m193 = 1;
                            break;
                        }
                    }
                    if (f_at_m193 == 0)
                    {
                        rtval(j_at_m193) = i_at_m193;
                        ++j_at_m193;
                    }
                }
            }
        }
    }
    return j_at_m193;
}



int tradecheck(int prm_1081)
{
    j_at_m193 = 0;
    for (int cnt = 0; cnt < 5; ++cnt)
    {
        p_at_m193 = gdata(160 + cnt);
        if (qdata(8, p_at_m193) == 1)
        {
            if (gdata_current_dungeon_level == 1)
            {
                if (qdata(1, p_at_m193) == gdata_current_map)
                {
                    if (prm_1081 == qdata(10, p_at_m193))
                    {
                        j_at_m193 = 1;
                        break;
                    }
                }
            }
        }
    }
    return j_at_m193;
}



void talk_start()
{
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"face1.bmp", 1);
    gsel(7);
    picload(filesystem::dir::graphic() / u8"ie_chat.bmp");
    gsel(0);
    return;
}



void speak_to_npc()
{
    keyhalt = 1;
    if (cdata[tc].character_role == 1005)
    {
        if (config::instance().extrahelp)
        {
            if (gdata(207) == 0)
            {
                if (mode == 0)
                {
                    if (cdata[0].continuous_action_turn == 0)
                    {
                        gdata(207) = 1;
                        ghelp = 7;
                        show_ex_help();
                        screenupdate = -1;
                        update_screen();
                    }
                }
            }
        }
    }
    if (cdata[tc].character_role == 7)
    {
        if (config::instance().extrahelp)
        {
            if (gdata(208) == 0)
            {
                if (mode == 0)
                {
                    if (cdata[0].continuous_action_turn == 0)
                    {
                        gdata(208) = 1;
                        ghelp = 8;
                        show_ex_help();
                        screenupdate = -1;
                        update_screen();
                    }
                }
            }
        }
    }
    set_npc_religion();
    if (scenemode == 0)
    {
        snd(99);
        label_1745();
    }
    cs = 0;
    chatflag = 0;
    chatesc = 1;
    if (cdata[tc].relationship <= -1)
    {
        if (evnum == 0)
        {
            txt(lang(
                name(tc) + u8"は耳を貸さない。"s,
                name(tc) + u8" won't listen."s));
            questteleport = 0;
            update_screen();
            return;
        }
    }
    if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12
        >= cdata[tc].time_interest_revive)
    {
        cdata[tc].interest = 100;
    }
    if ((cdata[tc].character_role >= 1000 && cdata[tc].character_role < 2000)
        || cdata[tc].character_role == 2003)
    {
        invfile = cdata[tc].shop_store_id;
        label_2262();
    }
    talk_start();
    if (scenemode == 1)
    {
        talk_wrapper(talk_result_t::talk_more);
        return;
    }
    chatval(1) = 0;
    chatval(2) = 1;
    if (cdata[tc].quality == 6)
    {
        chatval(1) = cdata[tc].id;
        chatval(2) = 0;
    }
    if (evid() == 2)
    {
        talk_wrapper(talk_result_t::talk_game_begin);
        return;
    }
    if (evid() == 16)
    {
        talk_wrapper(talk_result_t::talk_finish_escort);
        return;
    }
    if (cdata[tc].sleep != 0)
    {
        talk_wrapper(talk_result_t::talk_sleeping);
        return;
    }
    if (cdata[tc].continuous_action_id)
    {
        talk_wrapper(talk_result_t::talk_busy);
        return;
    }
    if (tc == 0)
    {
        talk_wrapper(talk_result_t::talk_end);
        return;
    }
    if (cdata[tc].visited_just_now())
    {
        cdata[tc].visited_just_now() = false;
        talk_wrapper(talk_result_t::talk_house_visitor);
    }
    if (chatval(1) != 0)
    {
        if (gdata_current_map != 35)
        {
            if (tc >= 16)
            {
                talk_wrapper(talk_result_t::talk_unique);
                return;
            }
        }
    }
    if (questteleport == 1)
    {
        questteleport = 0;
        talk_wrapper(talk_result_t::talk_quest_giver);
        return;
    }
    buff = "";
    talk_wrapper(talk_result_t::talk_npc);
}



talk_result_t talk_more()
{
    listmax = 0;
    buff = buff;
    tc = tc * 1 + 0;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"more");
    ++listmax;
    chatesc = 1;
    talk_window();
    if (scenemode)
    {
        if (scene_cut == 1)
        {
            return talk_result_t::talk_end;
        }
    }
    return talk_result_t::talk_end;
}


talk_result_t talk_sleeping()
{
    listmax = 0;
    buff = u8"("s + name(tc)
        + lang(u8"はぐっすり眠っている…"s, u8" is sleeping."s) + u8")"s;
    tc = tc * 1 + 0;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"bye");
    ++listmax;
    chatesc = 1;
    talk_window();
    if (scenemode)
    {
        if (scene_cut == 1)
        {
            return talk_result_t::talk_end;
        }
    }
    return talk_result_t::talk_end;
}

talk_result_t talk_busy()
{
    listmax = 0;
    buff = u8"("s + name(tc)
        + lang(u8"はお取り込み中だ…"s, u8" is in the middle of something."s)
        + u8")"s;
    tc = tc * 1 + 0;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"bye");
    ++listmax;
    chatesc = 1;
    talk_window();
    if (scenemode)
    {
        if (scene_cut == 1)
        {
            return talk_result_t::talk_end;
        }
    }
    return talk_result_t::talk_end;
}


talk_result_t talk_house_visitor()
{
    listmax = 0;
    cc = 0;
    switch (cdata[tc].character_role)
    {
    case 13:
        if (gdata_month == 1 && rnd(4))
        {
            listmax = 0;
            buff =
                lang(u8"明けましておめでとう"s + _da(2), u8"Happy new year!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            listmax = 0;
            buff = lang(
                u8"日ごろの感謝の意をこめてこれをあげる"s + _yo(),
                u8"I've brought you a gift today, here."s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            flt();
            int stat = itemcreate(
                -1, 752, cdata[0].position.x, cdata[0].position.y, 0);
            if (stat != 0)
            {
                inv[ci].param3 = cdata[tc].impression + rnd(50);
            }
            txt(lang(
                name(tc) + u8"は"s + itemname(ci, 1) + u8"を置いていった。"s,
                name(tc) + u8" throws you "s + itemname(ci, 1) + u8"."s));
            return talk_result_t::talk_end;
        }
        if (cdata[tc].impression < 25)
        {
            listmax = 0;
            buff = lang(
                u8"貴様！見つけた"s + _yo(2),
                u8"You scum! You won't get away from me now!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            txt(lang(
                u8"「これでも食らうがいい"s + _yo(2) + u8"」"s,
                u8"\"Eat this!\""s));
            if (rnd(2) == 0)
            {
                for (int cnt = 0; cnt < 28; ++cnt)
                {
                    tlocx = cdata[tc].position.x + rnd(3) - rnd(3);
                    tlocy = cdata[tc].position.y - rnd(3) + rnd(3);
                    if (tlocx < 0 || tlocy < 0 || tlocx >= mdata(0)
                        || tlocy >= mdata(1))
                    {
                        continue;
                    }
                    if (tlocx == cdata[tc].position.x)
                    {
                        if (tlocy == cdata[tc].position.y)
                        {
                            continue;
                        }
                    }
                    txt(lang(
                        name(tc) + u8"は火炎瓶を投げた。"s,
                        name(tc) + u8" throws molotov."s));
                    snd(91);
                    ccbk = cc;
                    cc = tc;
                    aniref(0) = 223;
                    aniref(1) = 0;
                    anix = tlocx;
                    aniy = tlocy;
                    play_animation(15);
                    cc = ccbk;
                    addmef(tlocx, tlocy, 5, 24, rnd(15) + 20, 50, tc);
                    mapitem_fire(tlocx, tlocy);
                }
            }
            else
            {
                for (int cnt = 0, cnt_end = (8 + rnd(6)); cnt < cnt_end; ++cnt)
                {
                    flt();
                    itemcreate(-1, 704, -1, -1, 0);
                    txt(lang(
                        name(tc) + u8"は吐いた。"s, name(tc) + u8" vomits."s));
                    snd(104);
                    await(10);
                    update_screen();
                }
            }
            return talk_result_t::talk_end;
        }
        if (cdata[tc].impression >= 100)
        {
            if (cdata[tc].is_best_friend() == 0)
            {
                if (inv_getfreeid(-1) != -1)
                {
                    listmax = 0;
                    buff =
                        lang(u8"これ、あげ"s + _ru(2), u8"Here, take this!"s);
                    tc = tc * 1 + 0;
                    list(0, listmax) = 0;
                    listn(0, listmax) = i18n::_(u8"ui", u8"more");
                    ++listmax;
                    chatesc = 1;
                    talk_window();
                    if (scenemode)
                    {
                        if (scene_cut == 1)
                        {
                            return talk_result_t::talk_end;
                        }
                    }
                    cdata[tc].is_best_friend() = true;
                    flt();
                    itemcreate(
                        -1, 730, cdata[0].position.x, cdata[0].position.y, 0);
                    txt(lang(
                        name(tc) + u8"に"s + itemname(ci, 1)
                            + u8"をもらった！"s,
                        u8"You receive "s + itemname(ci, 1) + u8"."s));
                    if (jp)
                    {
                        txt(u8"友達100人できるかな♪"s);
                    }
                    listmax = 0;
                }
            }
        }
        if (rnd(4) == 0)
        {
            if (cdata[tc].impression >= 150)
            {
                int stat = advfavoriteskill(tc);
                csskill = rtval(rnd(stat));
                if (cdata[tc].impression >= 300)
                {
                    if (rnd(3) == 0)
                    {
                        int stat = advfavoritestat(tc);
                        csskill = stat;
                    }
                }
                list(0, listmax) = 0;
                listn(0, listmax) =
                    lang(u8"遠慮しとく"s, u8"I think I'll pass."s);
                ++listmax;
                if (sdata.get(csskill, 0).original_level == 0)
                {
                    buff = lang(i18n::_(u8"ability", std::to_string(csskill), u8"name") +
                            u8"のスキルを、友達価格の"s +
                            calclearncost(csskill, cc, true) + i18n::_(u8"ui", u8"platinum") +
                            u8"で教えてあげてもいい"s + _ga(3) + u8"どう"s +
                            _kana(1),
                        u8"I can teach you the art of "s + i18n::_(u8"ability", std::to_string(csskill), u8"name") +
                            u8" for a friendly price of "s +
                            calclearncost(csskill, cc, true) +
                            u8" platinum pieces. Do you want me to train you?"s);
                    if (cdata[0].platinum_coin
                        >= calclearncost(csskill, cc, true))
                    {
                        list(0, listmax) = 1;
                        listn(0, listmax) =
                            lang(u8"習得する"s, u8"Teach me the skill."s);
                        ++listmax;
                    }
                }
                else
                {
                    buff = lang(i18n::_(u8"ability", std::to_string(csskill), u8"name") +
                            u8"のスキルを、友達価格の"s +
                            calctraincost(csskill, cc, true) + i18n::_(u8"ui", u8"platinum") +
                            u8"で訓練してもいい"s + _ga(3) + u8"どう"s +
                            _kana(1),
                        u8"I can train your "s + i18n::_(u8"ability", std::to_string(csskill), u8"name") +
                            u8" skill for a friendly price of "s +
                            calctraincost(csskill, cc, true) +
                            u8" platinum pieces. Do you want me to train you?"s);
                    if (cdata[0].platinum_coin
                        >= calctraincost(csskill, cc, true))
                    {
                        list(0, listmax) = 2;
                        listn(0, listmax) = lang(u8"訓練する"s, u8"Train me."s);
                        ++listmax;
                    }
                }
                chatesc = 1;
                talk_window();
                if (chatval == 0 || chatval == -1)
                {
                    listmax = 0;
                    buff = lang(
                        u8"わかった"s + _yo()
                            + u8"またしばらくしてから尋ねてみ"s + _ru(),
                        u8"I see. I'll ask you again at some time in the future."s);
                    tc = tc * 1 + 0;
                    list(0, listmax) = 0;
                    listn(0, listmax) = i18n::_(u8"ui", u8"more");
                    ++listmax;
                    chatesc = 1;
                    talk_window();
                    if (scenemode)
                    {
                        if (scene_cut == 1)
                        {
                            return talk_result_t::talk_end;
                        }
                    }
                    return talk_result_t::talk_end;
                }
                snd(12);
                if (chatval == 1)
                {
                    cdata[0].platinum_coin -= calclearncost(csskill, 0, true);
                    skillgain(cc, csskill);
                    ++gdata_number_of_learned_skills_by_trainer;
                    listmax = 0;
                    buff = lang(
                        u8"新しい技術をどうやら習得できたようだ"s + _na()
                            + u8"役に立てて嬉しい"s + _yo(),
                        u8"Fantastic! You've learned the skill in no time. I'm glad I could help."s);
                    tc = tc * 1 + 0;
                    list(0, listmax) = 0;
                    listn(0, listmax) = i18n::_(u8"ui", u8"more");
                    ++listmax;
                    chatesc = 1;
                    talk_window();
                    if (scenemode)
                    {
                        if (scene_cut == 1)
                        {
                            return talk_result_t::talk_end;
                        }
                    }
                }
                if (chatval == 2)
                {
                    cdata[0].platinum_coin -= calctraincost(csskill, 0, true);
                    modify_potential(
                        cc,
                        csskill,
                        clamp(
                            15 - sdata.get(csskill, cc).potential / 15,
                            2,
                            15 - (csskill < 18) * 10));
                    listmax = 0;
                    buff = lang(
                        u8"よし、これで訓練は終わり"s + _da()
                            + u8"かなり潜在能力が伸びた"s + _yo(2),
                        u8"Marvelous! The training is now complete. I think you've improved some potential."s);
                    tc = tc * 1 + 0;
                    list(0, listmax) = 0;
                    listn(0, listmax) = i18n::_(u8"ui", u8"more");
                    ++listmax;
                    chatesc = 1;
                    talk_window();
                    if (scenemode)
                    {
                        if (scene_cut == 1)
                        {
                            return talk_result_t::talk_end;
                        }
                    }
                }
                return talk_result_t::talk_end;
            }
        }
        if (rnd(5) == 0)
        {
            if (cdata[tc].impression >= 150)
            {
                listmax = 0;
                buff = lang(
                    u8"友達の証としてこれをあげ"s + _ru(2) + u8"大事に使って"s
                        + _yo(),
                    u8"As a pledge of friendship, here's something for you!"s);
                tc = tc * 1 + 0;
                list(0, listmax) = 0;
                listn(0, listmax) = i18n::_(u8"ui", u8"more");
                ++listmax;
                chatesc = 1;
                talk_window();
                if (scenemode)
                {
                    if (scene_cut == 1)
                    {
                        return talk_result_t::talk_end;
                    }
                }
                if (inv_getfreeid(-1) == -1)
                {
                    txt(lang(
                        u8"部屋が一杯で置けなかった…"s,
                        u8"Your home has no empty spot..."s));
                }
                else
                {
                    if (rnd(4))
                    {
                        p = 55;
                    }
                    else
                    {
                        p = 622;
                    }
                    flt();
                    itemcreate(
                        -1, p, cdata[0].position.x, cdata[0].position.y, 0);
                    txt(lang(
                        name(tc) + u8"に"s + itemname(ci, 1)
                            + u8"をもらった！"s,
                        u8"You receive "s + itemname(ci, 1) + u8"."s));
                    snd(14);
                }
                return talk_result_t::talk_end;
            }
        }
        if (rnd(4) == 0)
        {
            if (cdata[tc].impression >= 100)
            {
                listmax = 0;
                buff = lang(
                    u8"近くまで来たので寄ってみた"s + _nda()
                        + u8"ついでだから、土産にこれをあげ"s + _ru(),
                    u8"I just stopped by to see you. Oh, I happen to have a gift for you too."s);
                tc = tc * 1 + 0;
                list(0, listmax) = 0;
                listn(0, listmax) = i18n::_(u8"ui", u8"more");
                ++listmax;
                chatesc = 1;
                talk_window();
                if (scenemode)
                {
                    if (scene_cut == 1)
                    {
                        return talk_result_t::talk_end;
                    }
                }
                if (inv_getfreeid(0) == -1)
                {
                    txt(lang(
                        u8"所持品が一杯で受け取れなかった…"s,
                        u8"Your inventory is full..."s));
                }
                else
                {
                    flt();
                    itemcreate(0, 729, -1, -1, 0);
                    txt(lang(
                        itemname(ci, 1) + u8"を受け取った。"s,
                        u8"You receive "s + itemname(ci, 1) + u8"."s));
                    snd(14);
                }
                return talk_result_t::talk_end;
            }
        }
        if (rnd(5) == 0)
        {
            if (cdata[tc].impression >= 100)
            {
                listmax = 0;
                buff = lang(
                    u8"旅の途中にこんなものを拾った"s + _nda() + _kimi(3)
                        + u8"の役に立つと思って持ってきた"s + _yo(),
                    u8"I found these during my journey. Thought you could find them useful."s);
                tc = tc * 1 + 0;
                list(0, listmax) = 0;
                listn(0, listmax) = i18n::_(u8"ui", u8"more");
                ++listmax;
                chatesc = 1;
                talk_window();
                if (scenemode)
                {
                    if (scene_cut == 1)
                    {
                        return talk_result_t::talk_end;
                    }
                }
                txt(lang(
                    name(tc)
                        + u8"は色々なものが詰まった袋を、あなたに手渡した。"s,
                    name(tc) + u8" gives you a bag full of materials."s));
                efid = 1117;
                efp = 100;
                tc = 0;
                magic();
                return talk_result_t::talk_end;
            }
        }
        if (rnd(8) == 0)
        {
            int stat = advfavoriteskill(tc);
            csskill = rtval(rnd(stat));
            listmax = 0;
            buff = lang(
                i18n::_(u8"ability", std::to_string(csskill), u8"name")
                    + u8"は"s + _ore(3) + u8"の得意なスキルの内の一つ"s + _da(),
                ""s + i18n::_(u8"ability", std::to_string(csskill), u8"name")
                    + u8" is one of my favorite skills."s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            return talk_result_t::talk_end;
        }
        if (rnd(10) == 0)
        {
            int stat = advfavoritestat(tc);
            csskill = stat;
            listmax = 0;
            buff = lang(
                _ore(3) + u8"は"s
                    + i18n::_(u8"ability", std::to_string(csskill), u8"name")
                    + u8"が自慢なの"s + _da(),
                u8"I'm proud of my good "s
                    + i18n::_(u8"ability", std::to_string(csskill), u8"name")
                    + u8"."s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            return talk_result_t::talk_end;
        }
        if (rnd(3) == 0)
        {
            if (cdata[tc].impression >= 75)
            {
                listmax = 0;
                buff = lang(u8"やあ。特に用はない"s + _ga(3) +
                        u8"、なんだか暇を持てましていたら、"s + _kimi(3) +
                        u8"と話がしたくなって"s + _na(3) + u8"、寄ってみた"s +
                        _nda(),
                    u8"Hey "s + cdatan(0, 0) +
                        u8", how's your journey? I was bored to death so I decided to make a visit to you!"s);
                tc = tc * 1 + 0;
                list(0, listmax) = 0;
                listn(0, listmax) = i18n::_(u8"ui", u8"more");
                ++listmax;
                chatesc = 1;
                talk_window();
                if (scenemode)
                {
                    if (scene_cut == 1)
                    {
                        return talk_result_t::talk_end;
                    }
                }
                txt(lang(
                    u8"あなたと"s + name(tc) + u8"は愉快に語り合った！"s,
                    u8"You hold an amusing conversation with "s + name(tc)
                        + u8"!"s));
                modimp(tc, 10);
                return talk_result_t::talk_end;
            }
        }
        if (rnd(3) == 0)
        {
            listmax = 0;
            buff = lang(
                u8"酒でも飲んで親睦を深めよう"s + _yo(2),
                u8"Let's have a drink and deepen our friendship!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            snd(17);
            txt(lang(
                u8"あなたと"s + name(tc) + u8"は乾杯した！"s,
                u8"\"Cheers!\""s));
            txtef(9);
            txt(lang(u8"「うぃっ！」"s, u8"*Hic*"s),
                lang(u8"「うまいぜ」"s, u8"\"Ah, good booze.\""s),
                lang(u8"「らららー♪」"s, u8"\"La-la-la-la.\""s),
                lang(u8"「ひっく」"s, u8"\"I'm going to heaven.\""s),
                lang(u8"「ふぅ」"s, u8"\"Whew!\""s),
                lang(u8"「たまらないわ」"s, u8"\"I'm revived!\""s),
                lang(u8"「んまっ♪」"s, u8"\"Awesome.\""s));
            dmgcon(tc, 8, 1000);
            dmgcon(cc, 8, 1000);
            modimp(tc, 15);
            return talk_result_t::talk_end;
        }
        listmax = 0;
        buff = lang(
            u8"まあ、とくに用もないんだけど"s + _na(),
            u8"I just wanted to say hi."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2005:
        if (gdata_last_month_when_trainer_visited == gdata_month)
        {
            listmax = 0;
            buff = lang(
                u8"今月はもう訓練は終わり"s + _da(),
                u8"No more training in this month."s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            return talk_result_t::talk_end;
        }
        plat = 3;
        gdata_last_month_when_trainer_visited = gdata_month;
        buff = lang(guildname() +
                u8"の一員足るもの、ギルドの名に恥じないよう、常に己の技量を磨き続けなければならない"s +
                _yo() + u8"ギルドの一員である"s + _kimi(3) +
                u8"には、たったのプラチナ"s + plat +
                u8"枚で潜在能力を伸ばす訓練を施してあげる"s + _yo(),
            u8"As a member of "s + guildname() +
                u8" you have to forge your talent to live up to our reputation. For only "s +
                plat +
                u8" platinum coins, I'll improve the potential of your talent."s);
        if (gdata_belongs_to_mages_guild != 0)
        {
            p(0) = 16;
            p(1) = 15;
            p(2) = 14;
            p(3) = -1;
        }
        else if (gdata_belongs_to_fighters_guild != 0)
        {
            p(0) = 10;
            p(1) = 11;
            p(2) = 12;
            p(3) = -1;
        }
        else if (gdata_belongs_to_thieves_guild != 0)
        {
            p(0) = 12;
            p(1) = 13;
            p(2) = 11;
            p(3) = 14;
            p(4) = -1;
        }
        else
        {
            plat = 4;
            p(3) = -1;
            i = rnd(6);
            for (int cnt = 0; cnt < 3; ++cnt)
            {
                p(cnt) = 10 + cnt + i;
            }
            buff = lang(u8"鍛えている"s + _kana(2) +
                    u8"冒険者として生き残るには、日ごろの鍛錬が大切"s +
                    _da(2) + u8"わずかプラチナ"s + plat +
                    u8"枚で、潜在能力を伸ばす特別な訓練を施してあげる"s +
                    _yo(2),
                u8"Training! Training! At the end, only thing that saves your life is training! For only "s +
                    plat +
                    u8" platinum coins, I'll improve the potential of your talent."s);
        }
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"訓練しない"s, u8"Not today."s);
        ++listmax;
        if (cdata[0].platinum_coin >= plat)
        {
            for (int cnt = 0; cnt < 8; ++cnt)
            {
                if (p(cnt) == -1)
                {
                    break;
                }
                list(0, listmax) = p(cnt);
                listn(0, listmax) = lang(
                    i18n::_(u8"ability", std::to_string(p(cnt)), u8"name")
                        + u8"を鍛える"s,
                    u8"I want to improve "s
                        + i18n::_(u8"ability", std::to_string(p(cnt)), u8"name")
                        + u8"."s);
                ++listmax;
            }
        }
        talk_window();
        if (chatval == 0 || chatval == -1)
        {
            listmax = 0;
            buff = lang(u8"後悔する"s + _yo(2), u8"You'll regret this!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            return talk_result_t::talk_end;
        }
        cdata[0].platinum_coin -= plat;
        snd(61);
        txtef(2);
        txt(lang(
            name(0) + u8"の"s
                + i18n::_(u8"ability", std::to_string(chatval), u8"name")
                + u8"の潜在能力が大きく上昇した。"s,
            name(0) + your(0) + u8" potential of "s
                + i18n::_(u8"ability", std::to_string(chatval), u8"name")
                + u8" greatly expands."s));
        modify_potential(0, chatval, 10);
        listmax = 0;
        buff = lang(
            u8"うむ、なかなか見所がある"s + _yo(),
            u8"Good. You show a lot of potential."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2002:
        listmax = 0;
        buff = lang(
            u8"まあ、とくに用もないんだけど"s + _na(),
            u8"I just wanted to say hi."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2000:
        if (cdata[0].gold > 0)
        {
            list(0, listmax) = 1;
            listn(0, listmax) = lang(u8"いい"s, u8"Yes."s);
            ++listmax;
        }
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"だめ"s, u8"No."s);
        ++listmax;
        buff = lang(
            u8"パンを買う金さえない"s + _nda() + u8"恵んで"s + _kure(3)
                + u8"、おねがい"s + _da(2),
            u8"I got no money to buy food. Will you spare me some coins?"s);
        talk_window();
        if (chatval == 1)
        {
            p = cdata[0].gold / 20 + 1;
            txt(lang(
                u8"あなたは"s + p + u8"goldを乞食に渡した。"s,
                u8"You spare "s + him(tc) + u8" "s + p + u8" gold pieces."s));
            cdata[0].gold -= p;
            snd(12);
            cdata[tc].gold += p;
            modify_karma(0, 2);
            listmax = 0;
            buff = lang(
                _thanks(2) + u8"この恩は一生忘れない"s + _yo(),
                u8"Thanks! I'll never forget this."s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = i18n::_(u8"ui", u8"more");
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            return talk_result_t::talk_end;
        }
        listmax = 0;
        buff = lang(u8"ケチ！"s, u8"You're so cheap!"s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2001:
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"いい"s, u8"Yes."s);
        ++listmax;
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"だめ"s, u8"No."s);
        ++listmax;
        buff = lang(
            u8"フッ。よく逃げ出さずに戻ってきた"s + _na() + u8"準備はいいか。"s,
            u8"So, are you ready?"s);
        talk_window();
        if (chatval == 1)
        {
            listmax = 0;
            buff = lang(u8"いく"s + _yo(2), u8"Okay, no turning back now!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = lang(u8"うふふ"s, u8"Come on!"s);
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            label_2147();
            return talk_result_t::talk_end;
        }
        listmax = 0;
        buff = lang(u8"ふん！"s, u8"Hump!"s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2006:
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"いい"s, u8"Yes."s);
        ++listmax;
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"だめ"s, u8"No."s);
        ++listmax;
        buff =
            lang(u8"スターになりたい"s + _kana(1), u8"You want to be a star?"s);
        talk_window();
        if (chatval == 1)
        {
            listmax = 0;
            buff = lang(
                u8"よい心がけだ"s + _na(2), u8"Okay, no turning back now!"s);
            tc = tc * 1 + 0;
            list(0, listmax) = 0;
            listn(0, listmax) = lang(u8"うふふ"s, u8"Come on!"s);
            ++listmax;
            chatesc = 1;
            talk_window();
            if (scenemode)
            {
                if (scene_cut == 1)
                {
                    return talk_result_t::talk_end;
                }
            }
            label_2147();
            return talk_result_t::talk_end;
        }
        listmax = 0;
        buff = lang(u8"ふん！"s, u8"Hump!"s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        return talk_result_t::talk_end;
    case 2003:
        list(0, listmax) = 0;
        listn(0, listmax) = lang(u8"買いたい"s, u8"I want to buy something."s);
        ++listmax;
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"売りたい"s, u8"I want to sell something."s);
        ++listmax;
        list(0, listmax) = 2;
        listn(0, listmax) = lang(u8"今はいい"s, u8"Not now."s);
        ++listmax;
        buff = lang(
            u8"今日は"s + _kimi(3) + u8"の幸運な日"s + _da()
                + u8"普段は一般の客には売らない格安の品を、特別に見せてあげ"s
                + _ru() + u8"覚えておいて"s + _kure(3) + u8"、今日だけだ"s
                + _yo(),
            u8"This is your lucky day. I wouldn't normally show my discounted goods to commoners but since I feel so good today..."s);
        talk_window();
        if (chatval == 0)
        {
            invctrl = 11;
            invfile = cdata[tc].shop_store_id;
            sell_item();
            screenupdate = -1;
            update_screen();
            cs = 0;
            buff = "";
            return talk_result_t::talk_house_visitor;
        }
        if (chatval == 1)
        {
            invctrl = 12;
            invfile = cdata[tc].shop_store_id;
            sell_item();
            cc = 0;
            screenupdate = -1;
            update_screen();
            cs = 0;
            buff = "";
            return talk_result_t::talk_house_visitor;
        }
        listmax = 0;
        buff = lang(
            u8"後になって後悔しても知らない"s + _yo(),
            u8"I hope you won't regret it later."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        cdata[tc].character_role = 2002;
        return talk_result_t::talk_end;
    }
    return talk_result_t::talk_end;
}



bool talk_give_potion_of_cure_corruption()
{
    list(0, listmax) = 1;
    listn(0, listmax) = lang(
        u8"エーテル抗体を1本渡す"s,
        u8"(Hand her a potion of cure corruption.)"s);
    ++listmax;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"bye");
    ++listmax;
    talk_window();
    if (chatval != 1)
    {
        return false;
    }
    int stat = inv_find(559, 0);
    if (stat == -1)
    {
        listmax = 0;
        buff = lang(u8"うそつき！"s, u8"Liar!"s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return false;
            }
        }
        return false;
    }
    --inv[stat].number;
    txt(lang(u8"エーテル抗体を1本渡した。"s, u8"You give her a potion."s));
    snd(13);
    listmax = 0;
    buff = lang(
        u8"え…あ、ありがと〜！！おかあさん…薬だよ。これでよくなるよね？"s,
        u8"R-Really? Mommy, mommy! "s + cdatan(0, 0)
            + u8" gave us a cure! Are you gonna be ok now?"s);
    tc = tc * 1 + 0;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"more");
    ++listmax;
    chatesc = 1;
    talk_window();
    if (scenemode)
    {
        if (scene_cut == 1)
        {
            return false;
        }
    }
    return true;
}



talk_result_t talk_game_begin()
{
    if (lomiaseaster)
    {
        cdata[0].blind = 100;
        listmax = 0;
        buff = lang(
            u8"この洞窟…雨をしのぐにはちょうどいいわ。ロミアス、危険がないか奥を調べて来て。"s,
            u8"This cave...it's a good place to keep out the rain. Lomias, check the inner chamber to be sure there is no danger lurking here."s);
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = lang(u8"わかった。ここで待っていろ"s, u8"Okay. Wait here."s);
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        update_screen();
        await(3000);
        txtnew();
        txtef(3);
        txt(lang(u8"何かは殺された。"s, u8"Something is killed."s));
        txt(lang(u8"「ぐわぁ」"s, u8"\"Uggghhh!\""s));
        snd(8);
        spillblood(28, 6, 10);
        flt();
        itemcreate(-1, 705, 28, 6, 0);
        update_screen();
        await(500);
        await(500);
        listmax = 0;
        buff = lang(
            u8"…今の音は？ …ロミアス、大丈夫？"s,
            u8"...what was that sound? ...Lomias, are you alright?"s);
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = lang(
            u8"ああ、問題ない。どうやらこの洞窟は昔、誰かが住んでいたようだな。奥を見て来たが、今はもう使われていないようだ。"s,
            u8"It's nothing. Looks like this cave is long abandoned. It's a good place to stay."s);
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = lang(
            u8"そう、ならば都合がいいわ。…あら、あなた何を持っているの？ …キャーッ、プチじゃない！"s,
            u8"I see, that's convenient for us...wait Lomias, what arey you carrying?...Argh! Putits!"s);
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = lang(
            u8"こいつらか？心配する必要はない。以前、人間にペットとして飼われていたのだろう、ふふ…私によくなついているようだ。"s,
            u8"Don't worry. It appears these putits had been kept as pets by someone. They are kind of...cute."s);
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = lang(
            u8"うふ！あなたにも優しいところがあるのね。…来て。どうやら怪我人が意識を取り戻したみたいよ。"s,
            u8"Huh, sounds like even you have a soft spot...Come here, the injured is about to wake up."s);
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        await(1500);
        update_screen();
        fade_out();
        gsel(4);
        pos(0, 0);
        picload(filesystem::dir::graphic() / u8"face1.bmp", 1);
        gsel(0);
        cdata[0].blind = 0;
        txt(lang(u8" 夢…か… "s, u8"It was...a dream...?"s));
    }
    else
    {
        txtnew();
    }
    txt(lang(
        u8"あなたは意識をとりもどした。"s, u8"You regain consciousness."s));
    if (jp)
    {
        listmax = 0;
        buff =
            u8"…意識が…もう戻ったのか？ 驚いたな。君の回復を待つために、我々の急を要する旅がいつまで中断されるのか、気を揉んでいたのだが。"s;
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8"君は重傷を負い川辺に倒れていた。宵闇が辺りを覆う前に、癒し手の力を持つ我々に発見されたのは、全くよくできた偶然だ。"s;
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8" …そんな物珍しげな顔をするな。君の察する通り、我々は異形の森の民だ。エレアは…シエラ・テールの高潔なる異端者は、他種族の詮索に付き合う無駄な時間をあいにく持ち合わせていないが、君は、我々に拾われた幸運をもっと素直に喜ぶべきだな。瀕死の君を回復させることは、ここにいるラーネイレ以外の何者にも不可能だっただろう。なにせ彼女はエレアの…"s;
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8"ロミアス、喋りすぎよ。たとえ意識の朦朧とした怪我人が相手だとしても。"s;
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = u8"…そうだな。私の悪い癖だ、わかってはいる。…さて、"s
            + cdatan(0, 0) + u8"といったな、"s;
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
    }
    else
    {
        listmax = 0;
        buff =
            u8"...you...you're awake already? Remarkable. I was beginning to worry that nursing a lowly adventurer would bring our urgent travel to a halt."s;
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8"You were badly wounded, passing out on the bank of a river. It was fortunate that we found you before the dark mantle of night enveloped this whole valley, almost as if Ehekatl, the goddess of luck herself had her eyes upon you."s;
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8"...stop your curious eyes. Yes, we are sons of Vindale whom they call the irreverent forest. Though we Eleas, noble but blameless \"heretics\", aren't keen to spend idle time responding to every senseless question about our race, you should be more thankful for your fate. If it weren't the lady Larnneire who cured your mortal wound, you wouldn't be hearing my tirade. For the lady is no ordinary Elea and only she can..."s;
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff =
            u8"You talk too much Lomias, even though the one injured before you is still dazed."s;
        tc = tc * (findchara(33) == 0) + (findchara(33) != 0) * findchara(33);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
        listmax = 0;
        buff = u8"...yes, it's a bad habit of mine. Well, "s + cdatan(0, 0)
            + u8"..."s;
        tc = tc * (findchara(34) == 0) + (findchara(34) != 0) * findchara(34);
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
    }
    mdata(13) = 67;
    play_music();
    return talk_result_t::talk_unique;
}



talk_result_t talk_finish_escort()
{
    listmax = 0;
    buff = lang(
        u8"無事に到着できてほっとした"s + _yo() + _thanks(2),
        u8"We made it! Thank you!"s);
    tc = tc * 1 + 0;
    list(0, listmax) = 0;
    listn(0, listmax) = i18n::_(u8"ui", u8"more");
    ++listmax;
    chatesc = 1;
    talk_window();
    if (scenemode)
    {
        if (scene_cut == 1)
        {
            return talk_result_t::talk_end;
        }
    }
    return talk_result_t::talk_end;
}



talk_result_t talk_quest_giver()
{
    if (qdata(8, rq) == 1)
    {
        buff = lang(
            u8"頼んでいた依頼は順調"s + _kana(1),
            u8"What about my contract? Is everything alright? "s);
        return talk_result_t::talk_npc;
    }
    set_quest_data(1);
    listmax = 0;
    list(0, listmax) = 1;
    listn(0, listmax) = lang(u8"受諾する"s, u8"I will take the job."s);
    ++listmax;
    list(0, listmax) = 0;
    listn(0, listmax) = lang(u8"やめる"s, u8"Not now."s);
    ++listmax;
    chatesc = 1;
    talk_window();
    if (chatval == 1)
    {
        p = 0;
        for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
             cnt < cnt_end;
             ++cnt)
        {
            if (qdata(3, cnt) == 0)
            {
                continue;
            }
            if (qdata(8, cnt) != 0)
            {
                ++p;
            }
        }
        if (p >= 5)
        {
            buff = lang(
                u8"未完了の依頼が多すぎじゃない"s + _kana(1)
                    + u8"この仕事は、安心してまかせられない"s + _yo(),
                u8"Hey, you've got quite a few unfinished contracts. See me again when you have finished them."s);
            return talk_result_t::talk_npc;
        }
        for (int cnt = 0; cnt < 5; ++cnt)
        {
            p = gdata(160 + cnt);
            f = 0;
            for (int cnt = 0; cnt < 5; ++cnt)
            {
                if (gdata(160 + cnt) == p)
                {
                    ++f;
                }
            }
            if (qdata(8, p) == 0 || f > 1)
            {
                gdata(160 + cnt) = rq;
                break;
            }
        }
        if (qdata(3, rq) == 1002)
        {
            if (inv_getfreeid(0) == -1)
            {
                buff = lang(
                    u8"どうやらバックパックが一杯のよう"s + _da()
                        + u8"持ち物を整理してまた来て"s + _kure(),
                    u8"It seems your backpack is already full. Come see me again when you're ready."s);
                return talk_result_t::talk_npc;
            }
        }
        if (qdata(3, rq) == 1007)
        {
            f = get_freeally();
            if (f == 0)
            {
                buff = lang(
                    u8"これ以上仲間を連れて行けないよう"s + _da()
                        + u8"人数を調整してまた来て"s + _kure(),
                    u8"It seems your party is already full. Come see me again when you're ready."s);
                return talk_result_t::talk_npc;
            }
            for (int cnt = 0;; ++cnt)
            {
                if (cnt == 99)
                {
                    dbid = 35;
                }
                else
                {
                    dbid = 0;
                }
                flt(qdata(5, rq) + cnt, 1);
                fltn(u8"man"s);
                int stat = characreate(56, dbid, -3, 0);
                f = stat;
                if (f == 1)
                {
                    for (int cnt = 0; cnt < 16; ++cnt)
                    {
                        if (cdata[cnt].state == 0)
                        {
                            continue;
                        }
                        if (cdata[cnt].id == cdata[rc].id)
                        {
                            if (cdata[cnt].is_escorted() == 1)
                            {
                                f = 0;
                                break;
                            }
                        }
                    }
                }
                if (f == 1)
                {
                    break;
                }
            }
            rc = 56;
            new_ally_joins();
            cdata[rc].is_escorted() = true;
            qdata(13, rq) = cdata[rc].id;
        }
        qdata(8, rq) = 1;
        if (qdata(9, rq) == -1)
        {
            return talk_accepted_quest();
        }
        buff = lang(
            _thanks() + u8"期待してい"s + _ru(),
            u8"Thanks. I'm counting on you."s);
        if (qdata(3, rq) == 1002)
        {
            ++qdata(15, qdata(10, rq));
            flt();
            itemcreate(
                0, qdata(11, rq), cdata[0].position.x, cdata[0].position.y, 0);
            txt(lang(
                itemname(ci, 1) + u8"をバックパックに入れた。"s,
                u8"You put "s + itemname(ci, 1) + u8" in your backpack."s));
            snd(100);
            refresh_burden_state();
            buff = lang(
                u8"これが依頼の品物"s + _da() + u8"期限には十分気をつけて"s
                    + _kure(),
                u8"Here's the package. Be aware of the deadline. I don't want to report you to the guards."s);
        }
    }
    else
    {
        buff = lang(u8"冷やかし"s + _ka(1), u8"You kidding? "s);
    }
    return talk_result_t::talk_npc;
}



talk_result_t talk_accepted_quest()
{
    if (qdata(3, rq) == 1001 || qdata(3, rq) == 1010)
    {
        listmax = 0;
        buff = lang(
            u8"では、早速案内するので、モンスターを一匹残らず退治して"s
                + _kure(),
            u8"Great! I'll guide you to the place, kill them all!"s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
    }
    if (qdata(3, rq) == 1006)
    {
        listmax = 0;
        buff = lang(
            u8"畑までは案内するから、しっかりと期限内に作物を納入して"s
                + _kure(),
            u8"Fine. I'll take you to my farm."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
    }
    if (qdata(3, rq) == 1009)
    {
        listmax = 0;
        buff = lang(
            u8"ついて来て"s + _kure() + u8"パーティー会場まで案内する"s + _yo(),
            u8"Alright, I'll take you to the party now."s);
        tc = tc * 1 + 0;
        list(0, listmax) = 0;
        listn(0, listmax) = i18n::_(u8"ui", u8"more");
        ++listmax;
        chatesc = 1;
        talk_window();
        if (scenemode)
        {
            if (scene_cut == 1)
            {
                return talk_result_t::talk_end;
            }
        }
    }
    gdata_executing_immediate_quest_type = qdata(3, rq);
    gdata(71) = qdata(14, rq);
    gdata_executing_immediate_quest = rq;
    gdata(73) = 1;
    gdata_previous_map2 = gdata_current_map;
    gdata_previous_dungeon_level = gdata_current_dungeon_level;
    gdata_previous_x = cdata[0].position.x;
    gdata_previous_y = cdata[0].position.y;
    gdata_destination_map = 13;
    gdata_destination_dungeon_level = 1;
    levelexitby = 2;
    chatteleport = 1;
    return talk_result_t::talk_end;
}



talk_result_t talk_trainer()
{
    tcbk = tc;
    menucycle = 0;
    menu_character_sheet();
    talk_start();
    if (csskill == -1)
    {
        buff = lang(
            u8"訓練が必要なときは、声をかけて"s + _kure(),
            u8"Come see me again when you need more training."s);
        return talk_result_t::talk_npc;
    }
    listmax = 0;
    if (csctrl == 2)
    {
        buff = lang(
            i18n::_(u8"ability", std::to_string(csskill), u8"name")
                + u8"の能力を訓練するには"s + calctraincost(csskill, cc)
                + i18n::_(u8"ui", u8"platinum") + u8"かかるけどいい"s
                + _kana(1),
            u8"Training "s
                + i18n::_(u8"ability", std::to_string(csskill), u8"name")
                + u8" will cost you "s + calctraincost(csskill, cc)
                + u8" platinum pieces."s);
        if (cdata[0].platinum_coin >= calctraincost(csskill, cc))
        {
            list(0, listmax) = 1;
            listn(0, listmax) = lang(u8"訓練する"s, u8"Train me."s);
            ++listmax;
        }
    }
    else
    {
        buff = lang(
            i18n::_(u8"ability", std::to_string(csskill), u8"name")
                + u8"の能力を習得するには"s + calclearncost(csskill, cc)
                + i18n::_(u8"ui", u8"platinum") + u8"かかるけどいい"s
                + _kana(1),
            u8"Learning "s
                + i18n::_(u8"ability", std::to_string(csskill), u8"name")
                + u8" will cost you "s + calclearncost(csskill, cc)
                + u8" platinum pieces."s);
        if (cdata[0].platinum_coin >= calclearncost(csskill, cc))
        {
            list(0, listmax) = 1;
            listn(0, listmax) = lang(u8"習得する"s, u8"Teach me the skill."s);
            ++listmax;
        }
    }
    list(0, listmax) = 0;
    listn(0, listmax) = lang(u8"やめる"s, u8"Never mind."s);
    ++listmax;
    chatesc = 1;
    talk_window();
    if (chatval == 1)
    {
        snd(12);
        if (csctrl == 2)
        {
            cdata[0].platinum_coin -= calctraincost(csskill, cc);
            modify_potential(
                cc,
                csskill,
                clamp(15 - sdata.get(csskill, cc).potential / 15, 2, 15));
            buff = lang(
                u8"訓練は完了し"s + _ta()
                    + u8"潜在能力が伸びているはずなので、後は自分で鍛えて"s
                    + _kure(),
                u8"Well done. You've got more room to develop than anyone else I've ever drilled. Keep training."s);
        }
        else
        {
            cdata[0].platinum_coin -= calclearncost(csskill, cc);
            skillgain(cc, csskill);
            ++gdata_number_of_learned_skills_by_trainer;
            buff = lang(
                u8"可能な限りの知識は教え"s + _ta() + u8"後は存分に訓練して"s
                    + _kure(),
                u8"I've taught you all that I know of the skill. Now develop it by yourself."s);
        }
    }
    else
    {
        buff = lang(
            u8"訓練が必要なときは、声をかけて"s + _kure(),
            u8"Come see me again when you need more training."s);
    }
    return talk_result_t::talk_npc;
}



talk_result_t talk_invest()
{
    listmax = 0;
    buff = lang(
        u8"投資をしてくれる"s + _noka(1) + calcinvestvalue()
            + i18n::_(u8"ui", u8"gold") + u8"かかるけどいいの"s + _kana(1),
        u8"Oh, do you want to invest in my shop? It will cost you "s
            + calcinvestvalue() + u8" golds. I hope you got the money."s);
    if (cdata[0].gold >= calcinvestvalue())
    {
        list(0, listmax) = 1;
        listn(0, listmax) = lang(u8"投資する"s, u8"Invest"s);
        ++listmax;
    }
    list(0, listmax) = 0;
    listn(0, listmax) = lang(u8"やめる"s, u8"Reject"s);
    ++listmax;
    chatesc = 1;
    talk_window();
    if (chatval == 1)
    {
        snd(12);
        cdata[0].gold -= calcinvestvalue();
        label_1466(0);
        cdata[tc].shop_rank += rnd(2) + 2;
        buff = lang(_thanks(2), u8"Thanks!"s);
    }
    else
    {
        buff = lang(u8"冷やかし"s + _ka(1), u8"You kidding? "s);
    }
    if (gdata_current_map == 7)
    {
        calccosthire();
    }
    return talk_result_t::talk_npc;
}



void talk_end()
{
    questteleport = 0;
    if (scenemode == 0)
    {
        screenupdate = -1;
        update_screen();
    }
    return;
}



void talk_window()
{
    cs_bk = -1;
    key_list = key_enter;
    for (int cnt = 0, cnt_end = (listmax); cnt < cnt_end; ++cnt)
    {
        key_list(cnt) = key_select(cnt);
        ++keyrange;
    }
    keyrange = listmax;
    key = "";
    objprm(0, ""s);
    keylog = "";
    init_talk_window_and_show();
label_2258_internal:
    show_talk_window();
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
    {
        if (cs == cnt)
        {
            color(100, 160, 250);
        }
        else
        {
            color(255, 255, 255);
        }
        noteget(s, cnt);
        x = wx + 136;
        y = wy + wh - 56 - keyrange * 19 + cnt * 19 + 2;
        display_key(x, y, cnt);
        cs_list(cs == cnt, listn(0, cnt), x + 30, y, 4, 0);
        color(0, 0, 0);
    }
    cs_bk = cs;
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    int a{};
    stick(a, 128);
    if (a == 128)
    {
        if (scenemode)
        {
            scene_cut = 1;
            reset_talk_variables();
            return;
        }
    }
    p = -1;
    for (int cnt = 0, cnt_end = (keyrange); cnt < cnt_end; ++cnt)
    {
        if (key == key_select(cnt))
        {
            p = list(0, cnt);
            break;
        }
    }
    if (p != -1)
    {
        chatval = p;
        reset_talk_variables();
        return;
    }
    if (key == key_cancel)
    {
        if (chatesc == 1)
        {
            chatval = -1;
            reset_talk_variables();
            return;
        }
    }
    goto label_2258_internal;
}



void reset_talk_variables()
{
    snd(10);
    cs = 0;
    listmax = 0;
    return;
}



void init_talk_window_and_show()
{
    init_talk_window();
    show_talk_window();
    return;
}



void init_talk_window()
{
    if (scenemode == 0)
    {
        screenupdate = -1;
        update_screen();
        cs = 0;
    }
    talk_conv(buff, 56 - en * 3);
    chatpicloaded = 0;
    wx = (windoww - 600) / 2 + inf_screenx;
    wy = winposy(380);
    ww = 600;
    wh = 380;
    gmode(6, -1, -1, 80);
    pos(wx + 4, wy - 16);
    gcopy(7, 0, 0, 600, 380);
    return;
}



void show_talk_window()
{
    gmode(2);
    pos(wx, wy - 20);
    gcopy(7, 0, 0, 600, 380);
    if (cdata[tc].portrait >= 0 || scenemode)
    {
        p = cdata[tc].sex * 64 + cdata[tc].portrait;
        if (scenemode)
        {
            p = elona::stoi(actor(1, rc));
        }
        pos(wx + 42, wy + 42);
        gzoom(4, p % 16 * 48, p / 16 * 72, 48, 72, 80, 112);
    }
    else
    {
        const auto portrait_filepath = filesystem::dir::user()
            / (u8"graphic/face"s + std::abs(cdata[tc].portrait + 1) + u8".bmp");
        if (!fs::exists(portrait_filepath) || cdata[tc].portrait == -1)
        {
            p(0) = cdata[tc].image % 1000;
            p(1) = cdata[tc].image / 1000;
            chara_preparepic(p, p(1));
            pos(wx + 82, wy + 125 - chipc(4, p));
            gmode(2, chipc(2, p), chipc(3, p));
            grotate(5, 0, 960, 0, chipc(2, p) * 2, chipc(3, p) * 2);
        }
        else
        {
            if (chatpicloaded == 0)
            {
                gsel(4);
                pos(0, 0);
                picload(portrait_filepath, 1);
                gsel(0);
                chatpicloaded = 1;
            }
            pos(wx + 42, wy + 42);
            gzoom(4, 0, 0, 80, 112, 80, 112);
        }
    }
    font(10 - en * 2);
    display_topic(lang(u8"友好"s, u8"Impress"s), wx + 28, wy + 170);
    display_topic(lang(u8"興味"s, u8"Attract"s), wx + 28, wy + 215);
    font(12 + sizefix - en * 2, snail::font_t::style_t::bold);
    if (cdatan(1, tc) == ""s)
    {
        s = cdatan(0, tc) + u8" "s;
    }
    else
    {
        s = lang(
            cdatan(1, tc) + u8" "s + cdatan(0, tc) + u8" "s,
            cdatan(0, tc) + u8" of "s + cdatan(1, tc) + u8" "s);
    }
    if (cdata[tc].sex == 0)
    {
        s += cnven(i18n::_(u8"ui", u8"male"));
    }
    else
    {
        s += cnven(i18n::_(u8"ui", u8"female"));
    }
    if (cdatan(1, tc) != ""s)
    {
        s += lang(u8" 名声 "s, u8" Fame: "s) + cdata[tc].fame;
    }
    if ((cdata[tc].character_role >= 1000 && cdata[tc].character_role < 2000)
        || cdata[tc].character_role == 2003)
    {
        s += lang(u8" 店の規模:"s, u8" Shop Rank:"s) + cdata[tc].shop_rank;
    }
    if (gdata_reveals_religion)
    {
        s += u8" ("s + i18n::_(u8"god", cdata[tc].god_id, u8"name") + u8")"s;
    }
    if (scenemode)
    {
        s = actor(0, rc);
    }
    pos(wx + 120, wy + 16);
    color(20, 10, 5);
    mes(s);
    color(0, 0, 0);
    font(13 - en * 2);
    if (chatval(2) == 1)
    {
        s = i18n::_(
            u8"ui", u8"impression", u8"_"s + implevel(cdata[tc].impression));
        if (cdata[tc].impression < 150)
        {
            s(1) = ""s + cdata[tc].impression;
        }
        else
        {
            s(1) = u8"???"s;
        }
        pos(wx + 32, wy + 198);
        color(20, 10, 5);
        mes(u8"("s + s(1) + u8")"s + s);
        color(0, 0, 0);
        if (cdata[tc].interest >= 0)
        {
            for (int cnt = 0, cnt_end = (cdata[tc].interest / 5 + 1);
                 cnt < cnt_end;
                 ++cnt)
            {
                pos(wx + 26 + cnt * 4, wy + 245);
                gcopy(3, 16, 360, 16, 16);
            }
        }
    }
    else
    {
        pos(wx + 60, wy + 198);
        mes(u8"-"s);
        pos(wx + 60, wy + 245);
        mes(u8"-"s);
    }
    font(14 - en * 2);
    color(20, 10, 5);
    notesel(buff);
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        p = cnt;
        x = wx + 150;
        y = wy + 43 + cnt * 19;
        noteget(s, p);
        pos(x, y);
        mes(s);
    }
    color(0, 0, 0);
    return;
}



void label_2262()
{
    if (tc > 0)
    {
        if (cdata[tc].character_role == 1009)
        {
            label_2267();
        }
    }
    mode = 6;
    ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
    if (cdata[tc].shop_store_id == 0)
    {
        if (cdata[tc].character_role == 1010
            || cdata[tc].character_role == 2003)
        {
            cdata[tc].shop_store_id = 1;
        }
        else
        {
            ++gdata_next_inventory_serial_id;
            cdata[tc].shop_store_id = gdata_next_inventory_serial_id;
        }
        label_2265();
    }
    else if (
        gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
            + gdata_year * 24 * 30 * 12
        >= cdata[tc].time_to_restore)
    {
        label_2265();
    }
    else
    {
        ctrl_file(file_operation2_t::_3, u8"shop"s + invfile + u8".s2");
    }
    invfile = cdata[tc].shop_store_id;
    load_shoptmp();
    return;
}



void sell_item()
{
    mode = 6;
    ctrl_file(file_operation2_t::_4, u8"shoptmp.s2");
    ctrl_file(file_operation2_t::_3, u8"shop"s + invfile + u8".s2");
    shoptrade = 0;
    if (tc > 0)
    {
        if (cdata[tc].character_role == 1009)
        {
            shoptrade = 1;
        }
    }
    ctrl_inventory();
    return;
}



void load_shoptmp()
{
    ctrl_file(file_operation2_t::_4, u8"shop"s + invfile + u8".s2");
    ctrl_file(file_operation2_t::_3, u8"shoptmp.s2");
    mode = 0;
    return;
}



void label_2265()
{
    for (const auto& cnt : items(-1))
    {
        inv[cnt].number = 0;
    }
    p = 20 + cdata[tc].shop_rank / 2;
    if (cdata[tc].character_role == 1007)
    {
        p = 6 + cdata[tc].shop_rank / 10;
    }
    if (cdata[tc].character_role == 1010)
    {
        p = 4 + rnd(4);
    }
    if (cdata[tc].character_role == 2003)
    {
        p = 4 + rnd(4);
    }
    if (cdata[tc].character_role == 1016)
    {
        p = 20;
    }
    if (cdata[tc].character_role == 1018)
    {
        p /= 2;
    }
    if (p > 80)
    {
        p = 80;
    }
    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
    {
        flt(calcobjlv(cdata[tc].shop_rank), calcfixlv(2));
        dbid = 0;
        if (cdata[tc].character_role == 1004)
        {
            p = rnd(3);
            if (p == 0)
            {
                flttypeminor = 52001;
            }
            if (p == 1)
            {
                flttypemajor = 53000;
            }
            if (p == 2)
            {
                flttypemajor = 52000;
            }
            if (rnd(7) == 0)
            {
                flttypemajor = 54000;
            }
            if (rnd(15) == 0)
            {
                flttypemajor = 55000;
            }
            if (0 || rnd(20) == 0)
            {
                dbid = 783;
            }
        }
        if (cdata[tc].character_role == 1019)
        {
            dbid = 667;
        }
        if (cdata[tc].character_role == 1020)
        {
            listmax = 0;
            for (int cnt = 0; cnt < 800; ++cnt)
            {
                if (itemmemory(2, cnt) > 1)
                {
                    list(0, listmax) = cnt;
                    ++listmax;
                }
            }
            if (listmax == 0)
            {
                return;
            }
            dbid = list(0, rnd(listmax));
        }
        if (cdata[tc].character_role == 1015)
        {
            p = rnd(3);
            if (p == 0)
            {
                flttypemajor = 59000;
            }
            if (p == 1)
            {
                flttypemajor = 32000;
            }
            if (p == 2)
            {
                flttypemajor = 34000;
            }
            if (rnd(3) == 0)
            {
                fixlv = 3;
            }
            if (rnd(10) == 0)
            {
                fixlv = 4;
            }
        }
        if (cdata[tc].character_role == 1006)
        {
            p = rnd(5);
            if (p == 0)
            {
                flttypemajor = 25000;
            }
            if (p == 1)
            {
                flttypemajor = 60000;
            }
            if (p == 2)
            {
                flttypemajor = 20000;
            }
            if (p == 3)
            {
                flttypemajor = 77000;
            }
            if (p == 4)
            {
                flttypemajor = 59000;
            }
            if (rnd(20) == 0)
            {
                dbid = 734;
            }
            if (rnd(8) == 0)
            {
                flttypemajor = 91000;
            }
            if (rnd(10) == 0)
            {
                dbid = isetdeed(rnd(length(isetdeed)));
            }
        }
        if (cdata[tc].character_role == 1003)
        {
            if (rnd(3) != 0)
            {
                continue;
            }
            if (rnd(3) != 0)
            {
                flttypeminor = 57001;
            }
            else
            {
                flttypeminor = 57002;
            }
        }
        if (cdata[tc].character_role == 1002)
        {
            if (rnd(3) != 0)
            {
                continue;
            }
            flttypemajor = 57000;
            if (rnd(5) == 0)
            {
                flttypemajor = 91000;
            }
        }
        if (cdata[tc].character_role == 1007)
        {
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            if (rnd(3) == 0)
            {
                fixlv = 3;
            }
            if (rnd(10) == 0)
            {
                fixlv = 4;
            }
        }
        if (cdata[tc].character_role == 1010
            || cdata[tc].character_role == 2003)
        {
            flttypemajor = fsetwear(rnd(length(fsetwear)));
            fixlv = 3;
            if (rnd(2) == 0)
            {
                fixlv = 4;
            }
        }
        if (cdata[tc].character_role == 1005)
        {
            flttypemajor = 91000;
            if (rnd(4))
            {
                flttypeminor = 52002;
            }
            if (rnd(20) == 0)
            {
                dbid = 734;
            }
        }
        if (cdata[tc].character_role == 1008)
        {
            flttypemajor = 56000;
            if (rnd(3) == 0)
            {
                flttypemajor = fsetwear(rnd(length(fsetwear)));
            }
            if (rnd(3) == 0)
            {
                flttypemajor = 60000;
            }
            if (rnd(5) == 0)
            {
                flttypemajor = 57000;
            }
            if (rnd(4) == 0)
            {
                flttypemajor = 53000;
            }
            if (rnd(15) == 0)
            {
                flttypemajor = 55000;
            }
            if (rnd(10) == 0)
            {
                flttypemajor = 91000;
            }
            if (rnd(10) == 0)
            {
                dbid = isetdeed(rnd(length(isetdeed)));
            }
            if (rnd(15) == 0)
            {
                dbid = 511;
            }
        }
        if (cdata[tc].character_role == 1001)
        {
            p = rnd(6);
            if (p == 0)
            {
                flttypemajor = 16000;
            }
            if (p == 1)
            {
                flttypemajor = 12000;
            }
            if (p == 2)
            {
                flttypemajor = 22000;
            }
            if (p == 3)
            {
                flttypemajor = 18000;
            }
            if (p == 4)
            {
                flttypemajor = 14000;
            }
            if (p == 5)
            {
                flttypemajor = 19000;
            }
            if (rnd(3) == 0)
            {
                if (rnd(3) == 0)
                {
                    flttypemajor = 10000;
                }
                else
                {
                    flttypemajor = 24000;
                }
            }
        }
        if (cdata[tc].character_role == 1009)
        {
            flttypemajor = 92000;
        }
        if (cdata[tc].character_role == 1021)
        {
            flttypemajor = 59000;
            if (rnd(2) == 0)
            {
                dbid = 636;
            }
            if (rnd(2) == 0)
            {
                dbid = 629;
            }
        }
        if (cdata[tc].character_role == 1011)
        {
            if (rnd(4) == 0)
            {
                flttypemajor = 24000;
            }
            if (rnd(5) == 0)
            {
                flttypemajor = 25000;
            }
            if (rnd(3) == 0)
            {
                flttypemajor = 57000;
            }
            fltn(u8"sf"s);
        }
        if (cdata[tc].character_role == 1013)
        {
            if (rnd(3) != 0)
            {
                continue;
            }
            flttypemajor = 55000;
            if (rnd(3))
            {
                dbid = isetdeed(rnd(length(isetdeed)));
            }
            if (rnd(5) == 0)
            {
                dbid = 511;
            }
        }
        if (cdata[tc].character_role == 1018)
        {
            fltn(u8"spshop"s);
        }
        if (cdata[tc].character_role == 1022)
        {
            fltn(u8"fest"s);
            if (rnd(12) == 0)
            {
                dbid = 750;
            }
            if (rnd(12) == 0)
            {
                dbid = 751;
            }
            if (rnd(5) == 0)
            {
                dbid = 770;
            }
            if (rnd(12) == 0)
            {
                dbid = 762;
            }
            if (rnd(12) == 0)
            {
                dbid = 768;
            }
            if (rnd(12) == 0)
            {
                dbid = 769;
            }
        }
        if (cdata[tc].character_role == 1017)
        {
            dbid = 519;
        }
        if (cdata[tc].character_role == 1012)
        {
            flttypemajor = 60000;
            if (cnt == 0)
            {
                dbid = 510;
            }
            if (cnt == 1)
            {
                dbid = 561;
            }
            if (cnt == 2)
            {
                dbid = 562;
            }
            if (cnt == 3)
            {
                dbid = 547;
            }
            if (cnt == 4)
            {
                dbid = 579;
            }
            if (cnt == 5)
            {
                dbid = 576;
            }
            if (cnt == 6)
            {
                dbid = 611;
            }
            if (cnt > 10)
            {
                if (rnd(3) != 0)
                {
                    continue;
                }
            }
            if (cnt == 19)
            {
                dbid = 413;
            }
            if (cnt == 20)
            {
                dbid = 414;
            }
            if (cnt == 21)
            {
                dbid = 616;
            }
        }
        if (cdata[tc].character_role == 1014)
        {
            dbid = 617;
        }
        if (cdata[tc].character_role == 1016)
        {
            if (cnt == 0)
            {
                dbid = 430;
            }
            if (cnt == 1)
            {
                dbid = 431;
            }
            if (cnt == 2)
            {
                dbid = 502;
            }
            if (cnt == 3)
            {
                dbid = 480;
            }
            if (cnt == 4)
            {
                dbid = 421;
            }
            if (cnt == 5)
            {
                dbid = 603;
            }
            if (cnt == 6)
            {
                dbid = 615;
            }
            if (cnt == 7)
            {
                dbid = 559;
            }
            if (cnt == 8)
            {
                dbid = 516;
            }
            if (cnt == 9)
            {
                dbid = 616;
            }
            if (cnt == 10)
            {
                dbid = 623;
            }
            if (cnt == 11)
            {
                dbid = 505;
            }
            if (cnt == 12)
            {
                dbid = 624;
            }
            if (cnt == 13)
            {
                dbid = 625;
            }
            if (cnt == 14)
            {
                dbid = 626;
            }
            if (cnt == 15)
            {
                dbid = 627;
            }
            if (cnt == 16)
            {
                dbid = 56;
            }
            if (cnt == 17)
            {
                dbid = 742;
            }
            if (cnt == 18)
            {
                dbid = 760;
            }
            if (cnt > 18)
            {
                continue;
            }
        }
        int stat = itemcreate(-1, dbid, -1, -1, 0);
        if (stat == 0)
        {
            break;
        }
        if (cdata[tc].character_role == 1016)
        {
            inv[ci].number = 1;
            inv[ci].curse_state = curse_state_t::none;
            if (inv[ci].id == 480)
            {
                inv[ci].count = 4;
            }
            continue;
        }
        f = 0;
        if (strutil::contains(the_item_db[inv[ci].id]->filter, u8"/neg/"))
        {
            f = 1;
        }
        if (strutil::contains(the_item_db[inv[ci].id]->filter, u8"/noshop/"))
        {
            if (cdata[tc].character_role != 1018)
            {
                f = 1;
            }
        }
        if (f)
        {
            inv[ci].number = 0;
            continue;
        }
        if (cdata[tc].character_role == 1012)
        {
            flttypemajor = 60000;
        }
        label_2266();
        inv[ci].number = rnd(rtval) + 1;
        if (cdata[tc].character_role == 1009)
        {
            p = trate(inv[ci].param1);
            if (p <= 70)
            {
                inv[ci].number = inv[ci].number * 200 / 100;
            }
            if (p <= 50)
            {
                inv[ci].number = inv[ci].number * 200 / 100;
            }
            if (p >= 80)
            {
                inv[ci].number = inv[ci].number / 2 + 1;
                if (rnd(2))
                {
                    inv[ci].number = 0;
                    continue;
                }
            }
            if (p >= 100)
            {
                inv[ci].number = inv[ci].number / 2 + 1;
                if (rnd(3))
                {
                    inv[ci].number = 0;
                    continue;
                }
            }
            inv[ci].number =
                inv[ci].number * (100 + sdata(156, 0) * 10) / 100 + 1;
        }
        p = the_item_db[inv[ci].id]->category;
        if (is_cursed(inv[ci].curse_state))
        {
            inv[ci].number = 0;
            continue;
        }
        if (inv[ci].curse_state == curse_state_t::blessed)
        {
            inv[ci].number = 1;
        }
        if (p == 52000)
        {
            if (inv[ci].id == 516)
            {
                inv[ci].number = 0;
            }
        }
        if (p == 57000)
        {
            if (the_item_db[inv[ci].id]->subcategory == 58500)
            {
                if (rnd(5))
                {
                    inv[ci].number = 0;
                }
            }
        }
        if (cdata[tc].character_role == 1018)
        {
            inv[ci].value = clamp(inv[ci].value, 1, 1000000) * 50;
            if (inv[ci].id == 729)
            {
                inv[ci].value *= 10;
            }
        }
        if (cdata[tc].character_role == 1015)
        {
            inv[ci].value *= 2;
        }
        if (cdata[tc].character_role == 1007)
        {
            if (gdata_belongs_to_thieves_guild != 0)
            {
                inv[ci].value *= 2;
            }
            else
            {
                inv[ci].value *= 3;
            }
        }
        if (cdata[tc].character_role == 1010)
        {
            inv[ci].value *= 2;
        }
        if (cdata[tc].character_role == 2003)
        {
            inv[ci].value = inv[ci].value * 4 / 5;
        }
        if (cdata[tc].character_role == 1020)
        {
            inv[ci].value = inv[ci].value * 3 / 2;
        }
    }
    cdata[tc].time_to_restore = gdata_hour + gdata_day * 24
        + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12
        + 168 * (1 + (cdata[tc].character_role == 1009));
    return;
}



void label_2266()
{
    p = the_item_db[inv[ci].id]->category;
    i = the_item_db[inv[ci].id]->rarity / 1000;
    rtval = 1;
    for (int cnt = 0; cnt < 1; ++cnt)
    {
        if (i <= 100)
        {
            break;
        }
        if (p == 57000)
        {
            rtval = 1;
            break;
        }
        if (p == 92000)
        {
            rtval = i / 200;
            break;
        }
        if (p >= 90000)
        {
            rtval = i / 100;
            break;
        }
        if (p == 52000)
        {
            rtval = i / 100;
            break;
        }
        if (p == 53000)
        {
            rtval = i / 100;
            break;
        }
        if (p == 60000)
        {
            rtval = i / 200;
            break;
        }
        if (p == 64000)
        {
            rtval = i / 80;
            break;
        }
        if (p == 59000)
        {
            rtval = i / 500;
            break;
        }
    }
    if (dbid == 734)
    {
        rtval = rnd(8);
    }
    if (rtval < 1)
    {
        rtval = 1;
        return;
    }
    return;
}



void label_2267()
{
    DIM2(trate, 8);
    for (int cnt = 0; cnt < 8; ++cnt)
    {
        trate(cnt) = 100;
    }
    if (gdata_current_map == 5)
    {
        trate(0) = 130;
        trate(1) = 70;
        trate(3) = 110;
        trate(2) = 85;
        trate(6) = 150;
        trate(7) = 120;
    }
    if (gdata_current_map == 11)
    {
        trate(0) = 65;
        trate(1) = 110;
        trate(4) = 125;
        trate(5) = 65;
        trate(2) = 70;
        trate(6) = 200;
        trate(7) = 150;
    }
    if (gdata_current_map == 15)
    {
        trate(0) = 120;
        trate(2) = 75;
        trate(4) = 75;
        trate(1) = 125;
        trate(6) = 110;
        trate(7) = 80;
    }
    if (gdata_current_map == 12)
    {
        trate(0) = 120;
        trate(3) = 75;
        trate(2) = 120;
        trate(6) = 160;
        trate(7) = 100;
    }
    if (gdata_current_map == 14)
    {
        trate(0) = 85;
        trate(3) = 70;
        trate(5) = 120;
        trate(2) = 130;
        trate(6) = 130;
        trate(7) = 90;
    }
    if (gdata_current_map == 33)
    {
        trate(1) = 175;
        trate(0) = 170;
        trate(3) = 160;
        trate(5) = 130;
        trate(2) = 140;
        trate(6) = 75;
        trate(7) = 120;
    }
    if (gdata_current_map == 36)
    {
        trate(1) = 145;
        trate(0) = 130;
        trate(3) = 100;
        trate(5) = 120;
        trate(2) = 120;
        trate(6) = 100;
        trate(7) = 70;
    }
    randomize(
        (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
         + gdata_year * 24 * 30 * 12)
        / 100);
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        trate(cnt) += rnd(15) - rnd(15);
    }
    randomize();
    return;
}



void addbuilding(int prm_1082, int prm_1083, int prm_1084, int prm_1085)
{
    int p_at_m194 = 0;
    p_at_m194 = -1;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        if (bddata(0, prm_1082, cnt) == 0)
        {
            p_at_m194 = cnt;
            break;
        }
    }
    if (p_at_m194 == -1)
    {
        return;
    }
    bddata(0, prm_1082, p_at_m194) = prm_1083;
    bddata(1, prm_1082, p_at_m194) = prm_1084;
    bddata(2, prm_1082, p_at_m194) = prm_1085;
    bddata(3, prm_1082, p_at_m194) = bdref(0, prm_1083) + 363;
    return;
}



void initialize_economy()
{
    elona_vector1<int> bkdata;
    if (initeco)
    {
        gdata(815) = 15;
    }
    bkdata(0) = gdata_current_map;
    bkdata(1) = gdata_current_dungeon_level;
    bkdata(2) = cdata[0].position.x;
    bkdata(3) = cdata[0].position.y;
    snd(44);
    save_game();
    mode = 11;
    cdata[0].position.x = 0;
    cdata[0].position.y = 0;
    scx = cdata[0].position.x;
    scy = cdata[0].position.y;
    for (int cnt = 0; cnt < 500; ++cnt)
    {
        if (adata(16, cnt) == 0)
        {
            continue;
        }
        if (adata(28, cnt) == 0)
        {
            continue;
        }
        gdata_current_map = adata(16, cnt);
        gdata_current_dungeon_level = 1;
        if (gdata_current_map != bkdata(0)
            || gdata_current_dungeon_level != bkdata(1))
        {
            initialize_map();
        }
        p = adata(28, cnt);
        if (initeco)
        {
            if (p == 1)
            {
                podata(100, p) = 1500 + rnd(200);
                podata(101, p) = 0;
                addbuilding(p, 1, 27, 22);
                addbuilding(p, 1, 28, 23);
            }
            if (p == 2)
            {
                podata(100, p) = 80 + rnd(20);
                podata(101, p) = 0;
                addbuilding(p, 2, 42, 31);
                addbuilding(p, 2, 43, 33);
            }
            if (p == 3)
            {
                podata(100, p) = 6500 + rnd(500);
                podata(101, p) = 0;
            }
            if (p == 4)
            {
                podata(100, p) = 1100 + rnd(150);
                podata(101, p) = 0;
                addbuilding(p, 5, 12, 34);
            }
            if (p == 5)
            {
                podata(100, p) = 3500 + rnd(300);
                podata(101, p) = 0;
                addbuilding(p, 6, 4, 16);
            }
            if (p == 6)
            {
                podata(100, p) = 800 + rnd(200);
                podata(101, p) = 0;
            }
            if (p == 7)
            {
                podata(100, p) = 2600 + rnd(300);
                podata(101, p) = 0;
                addbuilding(p, 3, 60, 33);
            }
            podata(200, p) = podata(100, p) * 5 + rnd(1000);
        }
        label_1739();
    }
    gdata_current_map = bkdata(0);
    gdata_current_dungeon_level = bkdata(1);
    cdata[0].position.x = bkdata(2);
    cdata[0].position.y = bkdata(3);
    gdata(79) = 1;
    mode = 3;
    mapsubroutine = 1;
    initialize_map();
    initeco = 0;
    msgtemp = "";
    return;
}



void show_city_chart()
{
label_22711:
    listmax = 0;
    page = 0;
    pagesize = 16;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    snd(99);
    curmenu = 0;
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_politics.bmp", 1);
    gsel(0);
    fillbg(3, 960, 96, 128, 128);
    render_hud();
    drawmenu(3);
    windowshadow = 1;
    city = adata(28, gdata_current_map);
    lv = 0;
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2272_internal:
    s(0) = lang(u8"ポストチャート"s, u8"City Chart"s);
    s(1) = strhint3b;
    display_window((windoww - 580) / 2 + inf_screenx, winposy(400), 580, 400);
    keyrange = 0;
    int j0 = 0;
    int n = 0;
    cs_listbk();
    if (adata(28, gdata_current_map) == 0 || gdata_current_dungeon_level != 1)
    {
        font(14 - en * 2);
        pos(wx + 40, wy + 50);
        mes(lang(
            u8"この場所には経済活動がない。"s,
            u8"There's no economy running in this area."s));
    }
    else
    {
        display_topic(
            lang(
                mapname(adata(16, gdata_current_map)) + u8"のチャート"s,
                ""s + mapname(adata(16, gdata_current_map)) + u8" City Chart"s),
            wx + 40,
            wy + 34);
        for (int cnt = 0;; ++cnt)
        {
            if (pochart(j0, n, lv) == 0 || cnt == 0)
            {
                if (cnt != 0)
                {
                    ++n;
                }
                j0 = 0;
                i = 0;
                for (int cnt = 0; cnt < 10; ++cnt)
                {
                    if (pochart(cnt, n, lv) != 0)
                    {
                        ++i;
                    }
                }
                if (i == 0)
                {
                    break;
                }
                y = wy + 70 + n * 55;
            }
            x = wx + (ww - 70) / (i + 1) * (j0 + 1);
            pos(x - 26, y - 3);
            gcopy(3, 960, 288, 144, 24);
            p = pochart(j0, n, lv);
            key_list(cnt) = key_select(cnt);
            ++keyrange;
            display_key(x - 30, y + 21, cnt);
            font(12 + sizefix - en * 2);
            pos(x - 2, y + jp * 2);
            bmes(cnven(popostname(p)), 255, 255, 255);
            font(14 - en * 2);
            if (podata(0 + cnt, city) == 0)
            {
                s = lang(u8"不在"s, u8"Empty"s);
            }
            cs_list(cs == cnt, s, x - 2, y + 20);
            ++j0;
        }
        if (keyrange != 0)
        {
            cs_bk = cs;
        }
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        return;
    }
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    goto label_22711;
                }
                if (curmenu == 1)
                {
                    label_2276();
                    return;
                }
                if (curmenu == 2)
                {
                    label_2280();
                    return;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_22711;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_22711;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return;
    }
    goto label_2272_internal;
}



void showeconomy(
    int prm_1086,
    int prm_1087,
    const std::string& prm_1088,
    int prm_1089,
    int prm_1090)
{
    int p_at_m195 = 0;
    pos(prm_1086, prm_1087);
    mes(prm_1088);
    pos(prm_1086 + 130, prm_1087);
    mes(""s + prm_1089);
    p_at_m195 = prm_1089 - prm_1090;
    if (p_at_m195 >= 0)
    {
        color(0, 0, 150);
    }
    else
    {
        color(150, 0, 0);
    }
    pos(prm_1086 + 130 + ginfo(14) + 12, prm_1087);
    mes(u8"("s + p_at_m195 + u8")"s);
    color(0, 0, 0);
    return;
}



void label_2276()
{
    curmenu = 1;
    key_list(0) = key_enter;
    keyrange = 0;
    pagesize = 1;
    listmax = 2;
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_politics.bmp", 1);
    gsel(0);
    fillbg(3, 960, 96, 128, 128);
    render_hud();
    gsel(7);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"ie_scroll.bmp");
    gsel(0);
    windowshadow = 1;
    snd(92);
    drawmenu(3);
    city = 1;
    ww = 540;
    wh = 440;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
label_2277_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2278_internal:
    s = strhint2 + strhint3b;
    showscroll(s, wx, wy, ww, wh);
    font(14 - en * 2);
    if (adata(28, gdata_current_map) == 0 || gdata_current_dungeon_level != 1)
    {
        pos(wx + 40, wy + 60);
        mes(lang(
            u8"この場所には経済活動がない。"s,
            u8"There's no economy running in this area."s));
    }
    else
    {
        if (page == 0)
        {
            display_topic(
                lang(u8"街の概要"s, u8"Town Information"s), wx + 65, wy + 50);
            display_topic(
                lang(u8"街の財政"s, u8"Town Finance"s), wx + 65, wy + 150);
            font(14 - en * 2);
            x = wx + 50;
            y = wy + 80;
            showeconomy(
                x,
                y,
                lang(u8"人口"s, u8"Population"s),
                podata(100, city),
                podata(101, city));
            x = wx + 50;
            y = wy + 180;
            showeconomy(
                x,
                y,
                lang(u8"基本税"s, u8"Basic Tax"s) + u8" ("s + gdata(820)
                    + u8"%)"s,
                podata(102, city),
                podata(103, city));
            showeconomy(
                x,
                y + 16,
                lang(u8"消費税"s, u8"Excise Tax"s) + u8" ("s + podata(150, city)
                    + u8"%)"s,
                podata(104, city),
                podata(105, city));
        }
        if (page == 1)
        {
            display_topic(
                lang(u8"人口推移の詳細"s, u8"Population Detail"s),
                wx + 65,
                wy + 50);
            display_topic(
                lang(u8"収支の詳細"s, u8"Finance Detail"s), wx + 65, wy + 200);
            font(14 - en * 2);
        }
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    show_city_chart();
                    return;
                }
                if (curmenu == 1)
                {
                    label_2276();
                    return;
                }
                if (curmenu == 2)
                {
                    label_2280();
                    return;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2277_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2277_internal;
        }
    }
    if (key != ""s)
    {
        update_screen();
        return;
    }
    goto label_2278_internal;
}



void label_2280()
{
    // TODO: untranslated
    listmax = 0;
    page = 0;
    pagesize = 13;
    cs = 0;
    cs_bk = -1;
    curmenu = 2;
    city = adata(28, gdata_current_map);
    list(0, listmax) = 1;
    listn(0, listmax) = u8"この国の首都は"s + mapname(gdata(815)) + u8"だ。"s;
    ++listmax;
    if (mdata(6) != 3)
    {
        goto label_2281_internal;
    }
    list(0, listmax) = 0;
    listn(0, listmax) = u8"この街の消費税は"s + podata(150, city) + u8"%だ。"s;
    ++listmax;
    p = rnd(1000);
    list(0, listmax) = 0;
    listn(0, listmax) =
        u8"この街の井戸水の汚染は深刻だ(死者"s + p + u8"人）。"s;
    ++listmax;
    list(0, listmax) = 0;
    listn(0, listmax) = u8"この街では殺人が許される。"s;
    ++listmax;
label_2281_internal:
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_politics.bmp", 1);
    gsel(0);
    fillbg(3, 960, 96, 128, 128);
    render_hud();
    gsel(7);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"ie_scroll.bmp");
    gsel(0);
    windowshadow = 1;
    snd(92);
    drawmenu(3);
    city = 1;
    ww = 480;
    wh = 400;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
label_2282_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2283_internal:
    s = strhint2 + strhint3b;
    showscroll(s, wx, wy, ww, wh);
    display_topic(lang(u8"法律"s, u8"Law"s), wx + 65, wy + 45);
    font(12 + sizefix - en * 2);
    pos(wx + 185, wy + 52);
    mes(lang(u8"国法"s, u8"Global"s));
    if (mdata(6) == 3)
    {
        pos(wx + 285, wy + 52);
        mes(lang(
            ""s + mapname(gdata_current_map) + u8"の法"s,
            u8"Law of "s + mapname(gdata_current_map) + u8")"s));
    }
    pos(wx + 155, wy + 46);
    gmode(2);
    gcopy(3, 312, 360, 24, 24);
    pos(wx + 255, wy + 46);
    gmode(2);
    gcopy(3, 288, 360, 24, 24);
    font(14 - en * 2);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        if (cnt % 2 == 0)
        {
            pos(wx + 74, wy + 76 + cnt * 19);
            gfini(365, 18);
            gfdec2(12, 14, 16);
        }
        display_key(wx + 72, wy + 76 + cnt * 19 - 2, cnt);
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        s = listn(0, p);
        cs_list(cs == cnt, s, wx + 100, wy + 76 + cnt * 19 - 1, 0, 0);
        pos(wx + 42, wy + 68 + cnt * 19 + 2);
        gmode(2);
        gcopy(3, 288 + list(0, p) * 24, 360, 24, 24);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    show_city_chart();
                    return;
                }
                if (curmenu == 1)
                {
                    label_2276();
                    return;
                }
                if (curmenu == 2)
                {
                    label_2280();
                    return;
                }
            }
        }
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2282_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2282_internal;
        }
    }
    if (key == key_cancel)
    {
        update_screen();
        return;
    }
    goto label_2283_internal;
}



int new_ally_joins()
{
    f = get_freeally();
    if (f == 0)
    {
        txt(lang(
            u8"仲間の最大数に達しているため、仲間にできなかった…"s,
            u8"Your party is already full. You can't invite someone anymore."s));
        return -1;
    }
    int stat = relocate_chara(rc, f);
    oc = stat;
    cdata[rc].relationship = 10;
    cdata[rc].original_relationship = 10;
    cdata[rc].character_role = 0;
    cdata[rc].is_quest_target() = false;
    cdata[rc].does_not_search_enemy() = false;
    cdata[rc].is_hung_on_sand_bag() = false;
    cdata[rc].is_temporary() = false;
    cdata[rc].only_christmas() = false;
    snd(64);
    txtef(5);
    txt(lang(
        cdatan(0, rc) + u8"が仲間に加わった！"s,
        cdatan(0, rc) + u8" join"s + _s(rc) + u8" your party!"s));
    return 1;
}



void create_all_adventurers()
{
    for (int cnt = 16; cnt < 55; ++cnt)
    {
        rc = cnt;
        create_adventurer();
    }
    return;
}



void create_adventurer()
{
    flt(0, 4);
    initlv = rnd(60 + cdata[0].level) + 1;
    p(0) = 75;
    p(1) = 41;
    p(2) = 160;
    novoidlv = 1;
    characreate(rc, p(rnd(3)), -1, -1);
    cdata[rc].relationship = 0;
    cdata[rc].original_relationship = 0;
    cdata[rc]._156 = 100;
    cdata[rc].state = 3;
    cdata[rc].image = rnd(33) * 2 + 1 + cdata[rc].sex;
    cdatan(0, rc) = randomname();
    cdatan(1, rc) = random_title();
    cdata[rc].character_role = 13;
    p = rnd(450);
    if (adata(16, p) == 0 || adata(16, p) == 7 || adata(0, p) == 7)
    {
        p = 4;
    }
    if (rnd(4) == 0)
    {
        p = 5;
    }
    if (rnd(4) == 0)
    {
        p = 11;
    }
    if (rnd(6) == 0)
    {
        p = 12;
    }
    cdata[rc].current_map = p;
    cdata[rc].current_dungeon_level = 1;
    cdata[rc].fame = cdata[rc].level * cdata[rc].level * 30
        + rnd((cdata[rc].level * 200 + 100)) + rnd(500);
    return;
}



void label_2662()
{
    for (int cnt = 16; cnt < 55; ++cnt)
    {
        rc = cnt;
        cc = rc;
        if (cdata[rc].period_of_contract != 0)
        {
            if (cdata[rc].period_of_contract < gdata_hour + gdata_day * 24
                    + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12)
            {
                cdata[rc].period_of_contract = 0;
                cdata[rc].is_contracting() = false;
                cdata[rc].relationship = 0;
                txt(lang(
                    cdatan(0, rc) + u8"との契約期間が切れた。"s,
                    u8"The period of contract with "s + cdatan(0, rc)
                        + u8" has been expired."s));
            }
        }
        if (cdata[rc].current_map == gdata_current_map)
        {
            continue;
        }
        if (cdata[rc].state == 5)
        {
            create_adventurer();
            continue;
        }
        if (cdata[rc].state == 4)
        {
            if (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                    + gdata_year * 24 * 30 * 12
                >= cdata[rc].time_to_revive)
            {
                if (rnd(3) == 0)
                {
                    addnews(5, rc);
                    cdata[rc].state = 0;
                    create_adventurer();
                }
                else
                {
                    addnews(3, rc);
                    cdata[rc].state = 3;
                }
                continue;
            }
        }
        if (rnd(60) == 0)
        {
            for (int cnt = 0; cnt < 10; ++cnt)
            {
                if (rnd(4) == 0)
                {
                    p = rnd(50) + 450;
                }
                else
                {
                    p = rnd(300);
                }
                if (adata(16, p) == 0 || p == 7 || adata(0, p) == 7 || p == 9)
                {
                    p = 4;
                }
                if (cnt < 5)
                {
                    if (adata(0, p) != 3)
                    {
                        continue;
                    }
                }
                break;
            }
            cdata[rc].current_map = p;
            cdata[rc].current_dungeon_level = 1;
        }
        if (rnd(200) == 0)
        {
            if (adata(0, cdata[rc].current_map) != 3)
            {
                label_2664();
            }
        }
        if (rnd(10) == 0)
        {
            cdata[rc].experience += cdata[rc].level * cdata[rc].level * 2;
        }
        if (rnd(20) == 0)
        {
            cdata[rc].fame += rnd(cdata[rc].level * cdata[rc].level / 40 + 5)
                - rnd((cdata[rc].level * cdata[rc].level / 50 + 5));
        }
        if (rnd(2000) == 0)
        {
            cdata[rc].experience +=
                cdata[rc].level * cdata[rc].level * cdata[rc].level * 5;
            int fame = rnd(cdata[rc].level * cdata[rc].level / 20 + 10) + 10;
            cdata[rc].fame += fame;
            addnews(4, rc, fame);
            label_2664();
        }
        if (cdata[rc].experience >= cdata[rc].required_experience)
        {
            r2 = 0;
            gain_level(rc);
        }
    }
    notesel(newsbuff);
    if (noteinfo() > 195)
    {
        for (int cnt = 0, cnt_end = (noteinfo() - 195); cnt < cnt_end; ++cnt)
        {
            notedel(0);
        }
    }
    return;
}



void set_item_which_will_be_used()
{
    int category = the_item_db[inv[ci].id]->category;
    if (category == 57000 || category == 52000 || category == 53000)
    {
        cdata[rc].item_which_will_be_used = ci;
    }
    return;
}



int label_2664()
{
    f = 0;
    for (int cnt = 0; cnt < 10; ++cnt)
    {
        ci = get_random_inv(rc);
        if (inv[ci].number == 0)
        {
            f = 1;
            break;
        }
        if (inv[ci].body_part != 0)
        {
            continue;
        }
        if (inv[ci].number != 0)
        {
            if (cdata[rc].item_which_will_be_used == ci)
            {
                cdata[rc].item_which_will_be_used = 0;
            }
            inv[ci].number = 0;
            f = 1;
            break;
        }
    }
    if (f == 0)
    {
        return 0;
    }
    flt(cdata[rc].level, 4);
    if (rnd(3) == 0)
    {
        flttypemajor = fsetwear(rnd(length(fsetwear)));
    }
    else
    {
        flttypemajor = fsetitem(rnd(length(fsetitem)));
    }
    int stat = itemcreate(rc, 0, -1, -1, 0);
    if (stat == 0)
    {
        return 0;
    }
    inv[ci].identification_state =
        identification_state_t::completely_identified;
    if (inv[ci].quality >= 4)
    {
        if (the_item_db[inv[ci].id]->category < 50000)
        {
            addnews(1, rc, 0, itemname(ci));
        }
    }
    wear_most_valuable_equipment();
    return 0;
}



int inv_getfreeid_force()
{
    p = inv_getfreeid(tc);
    if (p != -1)
    {
        return p;
    }
    for (int cnt = 0; cnt < 100; ++cnt)
    {
        p = rnd(invrange) + invhead;
        if (inv[p].body_part == 0)
        {
            inv[p].number = 0;
            if (cdata[tc].item_which_will_be_used == p)
            {
                cdata[tc].item_which_will_be_used = 0;
            }
            break;
        }
    }
    return p;
}



void wear_most_valuable_equipment_for_all_body_parts()
{
    for (const auto& cnt : items(rc))
    {
        ci = cnt;
        if (inv[cnt].number == 0 || inv[cnt].body_part != 0)
        {
            continue;
        }
        wear_most_valuable_equipment();
    }
    return;
}



void wear_most_valuable_equipment()
{
    int eqdup = 0;
    elona_vector1<int> bodylist;
    i = iequiploc(ci);
    if (i != 0)
    {
        eqdup = 0;
        for (int j = 0; j < 30; ++j)
        {
            if (cdata_body_part(rc, j) / 10000 == i)
            {
                bodylist(eqdup) = j + 100;
                ++eqdup;
            }
        }
        if (eqdup == 0)
        {
            return;
        }
        for (int cnt = 0, cnt_end = (eqdup); cnt < cnt_end; ++cnt)
        {
            body = bodylist(cnt);
            i = cdata_body_part(rc, body) % 10000;
            if (i == 0)
            {
                equip_item(rc);
                break;
            }
            --i;
            f = 0;
            if (inv[ci].value >= inv[i].value)
            {
                f = 1;
            }
            if (eqdup > cnt + 1)
            {
                if (cdata_body_part(rc, bodylist(cnt + 1)) % 10000 == 0)
                {
                    f = 0;
                }
                else if (
                    inv[i].value
                    >= inv[cdata_body_part(rc, bodylist(cnt + 1)) % 10000 - 1]
                           .value)
                {
                    f = 0;
                }
            }
            if (f == 1)
            {
                cibk = ci;
                unequip_item(rc);
                ci = cibk;
                equip_item(rc);
                break;
            }
        }
    }
    return;
}



void supply_new_equipment()
{
    int haveweapon = 0;
    int mustequip = 0;
    haveweapon = 0;
    for (int cnt = 0; cnt < 100; ++cnt)
    {
        f = 0;
        for (int cnt = 0; cnt < 4; ++cnt)
        {
            ci = get_random_inv(rc);
            if (inv[ci].number == 0)
            {
                f = 1;
                break;
            }
            if (inv[ci].body_part != 0)
            {
                continue;
            }
            if (ibit(12, ci))
            {
                continue;
            }
            if (inv[ci].number != 0)
            {
                inv[ci].number = 0;
                f = 1;
                break;
            }
        }
        if (f == 0)
        {
            ci = invhead + invrange - 1;
        }
        if (cdata[rc].character_role == 13)
        {
            flt(cdata[rc].level, 3);
        }
        else
        {
            flt(cdata[rc].level, calcfixlv(2));
        }
        mustequip = 0;
        for (int cnt = 100; cnt < 130; ++cnt)
        {
            p = cdata_body_part(rc, cnt) / 10000;
            if (p == 0)
            {
                break;
            }
            if (cdata_body_part(rc, cnt) % 10000 != 0)
            {
                if (p == 5)
                {
                    if (haveweapon == 0)
                    {
                        if (the_item_db
                                [inv[cdata_body_part(rc, cnt) % 10000 - 1].id]
                                    ->category
                            == 10000)
                        {
                            haveweapon = 1;
                        }
                    }
                }
                continue;
            }
            if (p == 5)
            {
                if (haveweapon == 0)
                {
                    flttypemajor = 10000;
                    mustequip = 1;
                    break;
                }
            }
            if (p == 1)
            {
                flttypemajor = 12000;
                mustequip = 1;
                break;
            }
            if (p == 4)
            {
                flttypemajor = 16000;
                mustequip = 1;
                break;
            }
            if (p == 10)
            {
                flttypeminor = 24001;
                mustequip = 1;
                break;
            }
            if (p == 11)
            {
                flttypeminor = 25001;
                mustequip = 1;
                break;
            }
        }
        if (mustequip == 0)
        {
            break;
        }
        int stat = itemcreate(rc, 0, -1, -1, 0);
        if (stat == 0)
        {
            break;
        }
        inv[ci].identification_state =
            identification_state_t::completely_identified;
        if (inv[ci].quality >= 4)
        {
            if (the_item_db[inv[ci].id]->category < 50000)
            {
                if (cdata[rc].character_role == 13)
                {
                    addnews(1, rc, 0, itemname(ci));
                }
            }
        }
        wear_most_valuable_equipment();
        if (cdata[rc].character_role != 13)
        {
            if (rnd(3))
            {
                break;
            }
        }
    }
    return;
}



void label_2669()
{
    for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < ELONA_MAX_CHARACTERS;
         ++cnt)
    {
        if (cdata[cnt].state == 0)
        {
            continue;
        }
        if (cdata[cnt].character_role == 0)
        {
            continue;
        }
        if (cdata[cnt].quality == 6)
        {
            continue;
        }
        if (cdata[cnt].character_role == 3)
        {
            continue;
        }
        i = -1;
        for (int cnt = 0; cnt < 500; ++cnt)
        {
            if (qdata(0, cnt) == 0)
            {
                i = cnt;
                break;
            }
        }
        int cnt2 = cnt;
        for (int cnt = 0; cnt < 500; ++cnt)
        {
            if (qdata(0, cnt) == cnt2)
            {
                if (qdata(1, cnt) == gdata_current_map)
                {
                    i = -1;
                    break;
                }
            }
        }
        if (i == -1)
        {
            break;
        }
        qdata(0, i) = cnt;
        qdata(1, i) = gdata_current_map;
        qname(i) = cdatan(0, cnt);
        cdata[cnt].related_quest_id = i + 1;
        gdata_number_of_existing_quests = i + 1;
    }
    return;
}



void label_2670()
{
    qdata(6, rq) =
        ((qdata(5, rq) + 3) * 100 + rnd((qdata(5, rq) * 30 + 200)) + 400)
        * rewardfix / 100;
    qdata(6, rq) = qdata(6, rq) * 100 / (100 + qdata(5, rq) * 2 / 3);
    if (qdata(14, rq) == 3 || qdata(14, rq) == 2)
    {
        return;
    }
    if (cdata[0].level >= qdata(5, rq))
    {
        qdata(6, rq) =
            qdata(6, rq) * 100 / (100 + (cdata[0].level - qdata(5, rq)) * 10);
    }
    else
    {
        qdata(6, rq) = qdata(6, rq)
            * (100 + clamp((qdata(5, rq) - cdata[0].level) / 5 * 25, 0, 200))
            / 100;
    }
    return;
}



void label_2671()
{
    for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
         cnt < cnt_end;
         ++cnt)
    {
        if (qdata(0, cnt) == 0)
        {
            continue;
        }
        if (qdata(1, cnt) != gdata_current_map)
        {
            continue;
        }
        rc = qdata(0, cnt);
        if (qdata(8, cnt) == 0)
        {
            if (qdata(2, cnt) < gdata_hour + gdata_day * 24
                    + gdata_month * 24 * 30 + gdata_year * 24 * 30 * 12)
            {
                rq = cnt;
                label_2672();
                label_2670();
            }
        }
    }
}



int label_2672()
{
    qdata(3, rq) = 0;
    qdata(14, rq) = 0;
    qdata(8, rq) = 0;
    qdata(2, rq) = (rnd(3) + 1) * 24
        + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
           + gdata_year * 24 * 30 * 12);
    qdata(7, rq) = 0;
    if (rnd(3) == 0)
    {
        return 0;
    }
    if (rnd(14) == 0)
    {
        i = -1;
        for (int cnt = 0; cnt < 300; ++cnt)
        {
            int n =
                rnd(ELONA_MAX_OTHER_CHARACTERS) + ELONA_MAX_PARTY_CHARACTERS;
            if (n == qdata(0, rq))
            {
                continue;
            }
            if (cdata[n].state != 1)
            {
                continue;
            }
            if (cdata[n].relationship != 0
                || (cdata[n].character_role != 4
                    && cdata[n].character_role != 14))
            {
                continue;
            }
            flt(40, 2);
            flttypemajor = fsetcollect(rnd(length(fsetcollect)));
            int stat = itemcreate(n, 0, -1, -1, 0);
            if (stat != 0)
            {
                inv[ci].count = rq;
                i(0) = n;
                i(1) = inv[ci].id;
                ibitmod(12, ci, 1);
                break;
            }
            else
            {
                i = -1;
                break;
            }
        }
        if (i != -1)
        {
            qdata(10, rq) = i;
            qdata(11, rq) = i(1);
            qdata(1, rq) = gdata_current_map;
            rewardfix = 60;
            qdata(7, rq) = 5;
            qdata(3, rq) = 1011;
            qdata(14, rq) = 3;
            qdata(4, rq) = 0;
            qdata(9, rq) = rnd(3) + 2;
            qdata(5, rq) = cdata[i].level / 3;
        }
        return 0;
    }
    if (cdata[0].fame >= 30000)
    {
        if (rnd(13) == 0)
        {
            qdata(5, rq) =
                rnd(cdata[0].level + 10) + rnd((cdata[0].fame / 2500 + 1));
            qdata(5, rq) = roundmargin(qdata(5, rq), cdata[0].level);
            minlevel = clamp(qdata(5, rq) / 7, 5, 30);
            for (int cnt = 0; cnt < 50; ++cnt)
            {
                flt(qdata(5, rq), 2);
                characreate(56, 0, -3, 0);
                if (cmshade)
                {
                    continue;
                }
                if (cdata[rc].level < minlevel)
                {
                    continue;
                }
                break;
            }
            qdata(12, rq) = cdata[56].id;
            qdata(2, rq) = (rnd(6) + 2) * 24
                + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                   + gdata_year * 24 * 30 * 12);
            qdata(7, rq) = 0;
            qdata(3, rq) = 1010;
            qdata(14, rq) = 1;
            qdata(4, rq) = 0;
            qdata(7, rq) = 5;
            qdata(9, rq) = -1;
            rewardfix = 140;
            return 0;
        }
    }
    if (cdata[0].fame >= 50000)
    {
        if (rnd(20) == 0)
        {
            qdata(5, rq) =
                rnd(cdata[0].level + 10) + rnd((cdata[0].fame / 2500 + 1));
            qdata(5, rq) = roundmargin(qdata(5, rq), cdata[0].level);
            minlevel = clamp(qdata(5, rq) / 4, 5, 30);
            for (int cnt = 0; cnt < 50; ++cnt)
            {
                flt(qdata(5, rq), 2);
                characreate(56, 0, -3, 0);
                if (cmshade)
                {
                    continue;
                }
                if (cdata[rc].level < minlevel)
                {
                    continue;
                }
                break;
            }
            qdata(12, rq) = cdata[56].id;
            qdata(2, rq) = (rnd(6) + 2) * 24
                + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
                   + gdata_year * 24 * 30 * 12);
            qdata(7, rq) = 0;
            qdata(3, rq) = 1008;
            qdata(14, rq) = 8;
            qdata(4, rq) = 0;
            qdata(7, rq) = 1;
            qdata(9, rq) = -1;
            rewardfix = 175;
            return 0;
        }
    }
    if (rnd(11) == 0)
    {
        qdata(2, rq) = (rnd(6) + 2) * 24
            + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
               + gdata_year * 24 * 30 * 12);
        qdata(3, rq) = 1007;
        qdata(14, rq) = 6;
        qdata(4, rq) = rnd(3);
        qdata(10, rq) = 0;
        qdata(7, rq) = 5;
        while (1)
        {
            qdata(12, rq) = asettown(rnd(length(asettown)));
            if (qdata(12, rq) != gdata_current_map)
            {
                break;
            }
        }
        p = qdata(1, qdata(12, rq));
        if (qdata(4, rq) == 0)
        {
            rewardfix = 140
                + dist(
                      adata(1, gdata_current_map),
                      adata(2, gdata_current_map),
                      adata(1, p),
                      adata(2, p))
                    * 2;
            qdata(9, rq) = rnd(8) + 6;
            qdata(5, rq) = clamp(
                rnd(cdata[0].level + 10) + rnd((cdata[0].fame / 500 + 1)) + 1,
                1,
                80);
        }
        if (qdata(4, rq) == 1)
        {
            rewardfix = 130
                + dist(
                      adata(1, gdata_current_map),
                      adata(2, gdata_current_map),
                      adata(1, p),
                      adata(2, p))
                    * 2;
            qdata(9, rq) = rnd(5) + 2;
            qdata(5, rq) = clamp(rewardfix / 10 + 1, 1, 40);
        }
        if (qdata(4, rq) == 2)
        {
            rewardfix = 80
                + dist(
                      adata(1, gdata_current_map),
                      adata(2, gdata_current_map),
                      adata(1, p),
                      adata(2, p))
                    * 2;
            qdata(9, rq) = rnd(8) + 6;
            qdata(5, rq) = clamp(rewardfix / 20 + 1, 1, 40);
        }
        if (qdata(12, rq) == 33 || gdata_current_map == 33)
        {
            rewardfix = rewardfix * 180 / 100;
        }
        return 0;
    }
    if (rnd(23) == 0 || (gdata_current_map == 15 && rnd(8) == 0))
    {
        qdata(5, rq) = clamp(
            rnd(sdata(183, 0) + 10),
            int(1.5 * std::sqrt(sdata(183, 0))) + 1,
            cdata[0].fame / 1000 + 10);
        qdata(2, rq) = (rnd(6) + 2) * 24
            + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
               + gdata_year * 24 * 30 * 12);
        qdata(7, rq) = 0;
        qdata(3, rq) = 1009;
        qdata(14, rq) = 7;
        qdata(4, rq) = 0;
        qdata(7, rq) = 0;
        qdata(12, rq) = qdata(5, rq) * 10 + rnd(50);
        qdata(13, rq) = 0;
        qdata(9, rq) = -1;
        rewardfix = 0;
        return 0;
    }
    if (rnd(30) == 0 || (gdata_current_map == 12 && rnd(2) == 0))
    {
        qdata(5, rq) = clamp(
            rnd(cdata[0].level + 5) + rnd((cdata[0].fame / 800 + 1)) + 1,
            1,
            50);
        qdata(2, rq) = (rnd(6) + 2) * 24
            + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
               + gdata_year * 24 * 30 * 12);
        qdata(3, rq) = 1006;
        qdata(14, rq) = 5;
        qdata(4, rq) = 0;
        qdata(7, rq) = 5;
        qdata(9, rq) = -1;
        qdata(12, rq) = 15000 + qdata(5, rq) * 2500;
        qdata(13, rq) = 0;
        rewardfix = 60 + qdata(5, rq) * 2;
        return 0;
    }
    if (rnd(8) == 0)
    {
        qdata(5, rq) = clamp(
            rnd(cdata[0].level + 10) + rnd((cdata[0].fame / 500 + 1)) + 1,
            1,
            80);
        qdata(5, rq) = roundmargin(qdata(5, rq), cdata[0].level);
        qdata(2, rq) = (rnd(6) + 2) * 24
            + (gdata_hour + gdata_day * 24 + gdata_month * 24 * 30
               + gdata_year * 24 * 30 * 12);
        qdata(7, rq) = 0;
        qdata(3, rq) = 1001;
        qdata(14, rq) = 1;
        qdata(4, rq) = 0;
        qdata(7, rq) = 1;
        qdata(9, rq) = -1;
        rewardfix = 135;
        return 0;
    }
    if (rnd(6) == 0)
    {
        i = -1;
        for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
             cnt < cnt_end;
             ++cnt)
        {
            p = rnd(gdata_number_of_existing_quests);
            for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
                 cnt < cnt_end;
                 ++cnt)
            {
                if (qdata(3, cnt) == 1002)
                {
                    if (qdata(10, cnt) == p)
                    {
                        p = -1;
                        break;
                    }
                }
            }
            if (p == -1)
            {
                continue;
            }
            if (qdata(0, p) != 0)
            {
                if (qdata(1, p) != gdata_current_map || 0)
                {
                    i = p;
                    break;
                }
            }
        }
        if (i != -1)
        {
            p = qdata(1, i);
            rewardfix = 70
                + dist(
                      adata(1, gdata_current_map),
                      adata(2, gdata_current_map),
                      adata(1, p),
                      adata(2, p))
                    * 2;
            if (p == 33 || gdata_current_map == 33)
            {
                rewardfix = rewardfix * 175 / 100;
            }
            qdata(10, rq) = i;
            flt();
            dbmode = 1;
            flttypemajor = fsetdeliver(rnd(length(fsetdeliver)));
            get_random_item_id();
            qdata(12, rq) = flttypemajor;
            qdata(7, rq) = 5;
            if (flttypemajor == 54000)
            {
                qdata(7, rq) = 2;
            }
            if (flttypemajor == 77000)
            {
                qdata(7, rq) = 3;
            }
            if (flttypemajor == 64000)
            {
                qdata(7, rq) = 77000;
            }
            if (flttypemajor == 60000)
            {
                qdata(7, rq) = 60000;
            }
            qdata(11, rq) = dbid;
            qdata(3, rq) = 1002;
            qdata(14, rq) = 2;
            qdata(4, rq) = 0;
            qdata(9, rq) = rnd(12) + 3;
            qdata(5, rq) = clamp(rewardfix / 20 + 1, 1, 25);
        }
        return 0;
    }
    if (rnd(6) == 0)
    {
        qdata(3, rq) = 1003;
        qdata(14, rq) = 3;
        qdata(9, rq) = rnd(6) + 2;
        qdata(7, rq) = 5;
        qdata(12, rq) = rnd(8) + 1;
        if (qdata(12, rq) == 4)
        {
            qdata(7, rq) = 52000;
        }
        if (qdata(12, rq) == 6)
        {
            qdata(7, rq) = 25000;
        }
        if (qdata(12, rq) == 1)
        {
            qdata(7, rq) = 25000;
        }
        if (qdata(12, rq) == 5)
        {
            qdata(7, rq) = 52000;
        }
        if (qdata(12, rq) == 7)
        {
            qdata(7, rq) = 77000;
        }
        if (qdata(12, rq) == 2)
        {
            qdata(7, rq) = 56000;
        }
        if (qdata(12, rq) == 3)
        {
            qdata(7, rq) = 53000;
        }
        qdata(13, rq) = rnd(7) + 3;
        qdata(5, rq) = qdata(13, rq) * 3;
        rewardfix = 60 + qdata(5, rq);
        return 0;
    }
    if (rnd(5) == 0)
    {
        qdata(3, rq) = 1004;
        qdata(14, rq) = 3;
        qdata(9, rq) = rnd(6) + 2;
        flt();
        dbmode = 1;
        flttypemajor = fsetsupply(rnd(length(fsetsupply)));
        get_random_item_id();
        qdata(7, rq) = 5;
        qdata(11, rq) = dbid;
        qdata(5, rq) = clamp(rnd(cdata[0].level + 5) + 1, 1, 30);
        rewardfix = 65 + qdata(5, rq);
        return 0;
    }
    return 1;
}



void label_2673()
{
    for (int cnt = 0, cnt_end = (gdata_number_of_existing_quests);
         cnt < cnt_end;
         ++cnt)
    {
        if (qdata(3, cnt) == 0)
        {
            continue;
        }
        if (qdata(8, cnt) != 1)
        {
            continue;
        }
        if (qdata(9, cnt) < 0)
        {
            continue;
        }
        rq = cnt;
        --qdata(9, rq);
        if (qdata(9, rq) == 0)
        {
            failed_quest(qdata(3, rq));
        }
    }
    return;
}



void label_2674()
{
    if (gdata_executing_immediate_quest_type == 1006)
    {
        for (const auto& cnt : items(0))
        {
            if (inv[cnt].own_state == 4)
            {
                inv[cnt].number = 0;
            }
        }
        refresh_burden_state();
    }
    if (gdata(73) != 3)
    {
        if (gdata_executing_immediate_quest_type >= 1000)
        {
            rq = gdata_executing_immediate_quest;
        }
        if (gdata_executing_immediate_quest_type == 1007)
        {
            if (qdata(8, rq) == 0)
            {
                gdata_executing_immediate_quest_type = 0;
                gdata(71) = 0;
                gdata_executing_immediate_quest = 0;
                gdata(73) = 0;
                return;
            }
            else
            {
                txt(lang(
                    u8"あなたはクライアントを置き去りにした。"s,
                    u8"You left your client."s));
            }
        }
        failed_quest(gdata_executing_immediate_quest_type);
        msg_halt();
    }
    gdata_executing_immediate_quest_type = 0;
    gdata(71) = 0;
    gdata_executing_immediate_quest = 0;
    gdata(73) = 0;
    return;
}



turn_result_t pc_died_during_immediate_quest()
{
    rc = 0;
    label_1540();
    skillexp(17, 0, -500);
    skillexp(15, 0, -500);
    levelexitby = 4;
    gdata_current_dungeon_level = 0;
    return turn_result_t::exit_map;
}



void failed_quest(int val0)
{
    if (val0 == 1)
    {
        adata(22, gdata_previous_map2) = 0;
        txt(lang(u8"あなたは敗北した。"s, u8"You were defeated."s));
        modrank(0, -100);
    }
    if (val0 >= 1000)
    {
        txt(lang(
            qname(rq) + u8"から受けた依頼は失敗に終わった。"s,
            u8"You have failed the quest taken from "s + qname(rq) + u8"."s));
        if (qdata(3, rq) == 1002)
        {
            --qdata(15, qdata(10, rq));
            txtef(8);
            txt(lang(
                u8"あなたは重大な罪を犯した!"s,
                u8"You commit a serious crime!"s));
            modify_karma(0, -20);
        }
        if (qdata(3, rq) == 1007)
        {
            txtef(8);
            txt(lang(
                u8"あなたは護衛の任務を果たせなかった。"s,
                u8"You have failed to protect the client."s));
            for (int cnt = 0; cnt < 16; ++cnt)
            {
                if (cnt != 0)
                {
                    if (cdata[cnt].is_escorted() == 1)
                    {
                        if (qdata(13, rq) == cdata[cnt].id)
                        {
                            tc = cnt;
                            cdata[cnt].is_escorted() = false;
                            if (cdata[tc].state == 1)
                            {
                                if (qdata(4, rq) == 0)
                                {
                                    s = lang(
                                        u8"「おい、暗殺者が私の後ろにいるぞ」"s,
                                        u8"\"Hey, the assassins are killing me.\""s);
                                    p = -11;
                                }
                                if (qdata(4, rq) == 1)
                                {
                                    s = lang(
                                        u8"「毒が、毒がー！」"s,
                                        u8"\"Poison! P-P-Poison in my vein!!\""s);
                                    p = -4;
                                }
                                if (qdata(4, rq) == 2)
                                {
                                    s = lang(
                                        u8"「時間切れだ。こうなったら…」"s +
                                            name(tc) +
                                            u8"は火をかぶった。"s,
                                            u8"\"I missed the deadline. I don't have a right to live anymore.\""s +
                                            u8" "s + name(tc) +
                                            u8" pours a bottole of molotov cocktail over "s +
                                            him(tc) + u8"self."s);
                                    addmef(
                                        cdata[0].position.x,
                                        cdata[0].position.y,
                                        5,
                                        24,
                                        rnd(15) + 25,
                                        efp,
                                        0);
                                    mapitem_fire(
                                        cdata[tc].position.x,
                                        cdata[tc].position.y);
                                    p = -9;
                                }
                                txtef(9);
                                txt(s);
                                dmghp(tc, 999999, p);
                            }
                            cdata[tc].state = 0;
                            break;
                        }
                    }
                }
            }
            modify_karma(0, -10);
        }
        qdata(3, rq) = 0;
        qdata(8, rq) = 0;
    }
    int stat = decfame(0, 40);
    p = stat;
    txtef(3);
    txt(lang(
        u8"名声値を"s + p + u8"失った。"s, u8"You lose "s + p + u8" fame."s));
    return;
}



void label_2677()
{
    for (int cnt = 0; cnt < 16; ++cnt)
    {
        if (followerin(cnt) == 0)
        {
            continue;
        }
        if (cdata[cnt].hp < cdata[cnt].max_hp / 2)
        {
            cdata[cnt].hp = cdata[cnt].max_hp / 2;
        }
    }
    snd(69);
    if (petarenawin == 1)
    {
        txtef(2);
        txt(lang(
            u8"あなたのチームは勝利した！"s, u8"Your team is victorious!"s));
        txtef(2);
        txt(lang(
            ""s + gdata(74) + u8"の名声値を手に入れた。"s,
            u8"You gain "s + gdata(74) + u8" fame."s));
        cdata[0].fame += gdata(74);
        modrank(1, 100, 2);
        ++adata(23, gdata_previous_map2);
        if (adata(23, gdata_previous_map2) % 20 == 0)
        {
            matgetmain(41, 1);
        }
        else if (adata(23, gdata_previous_map2) % 5 == 0)
        {
            matgetmain(40, 1);
        }
    }
    else
    {
        txtef(8);
        txt(lang(u8"あなたのチームは敗北した。"s, u8"Your team is defeated."s));
        adata(23, gdata_previous_map2) = 0;
        modrank(1, -100);
        int stat = decfame(0, 60);
        p = stat;
        if (arenaop == 0)
        {
            txtef(3);
            txt(lang(
                u8"名声値を"s + p + u8"失った。"s,
                u8"You lose "s + p + u8" fame."s));
        }
    }
    return;
}



void hunt_all_targets()
{
    musicloop = 1;
    play_music(74);
    gdata(73) = 3;
    if (gdata_executing_immediate_quest_type == 1)
    {
        snd(69);
        txtef(2);
        txt(lang(u8"あなたは勝利した！"s, u8"You are victorious!"s));
        txtef(2);
        txt(lang(
            ""s + gdata(74) + u8"の名声値を手に入れた。"s,
            u8"You gain "s + gdata(74) + u8" fame."s));
        modrank(0, 100, 2);
        cdata[0].fame += gdata(74);
        txt(lang(u8"外への階段が現れた。"s, u8"Stairs appear."s));
        map_placeupstairs(mdata(0) / 2, mdata(1) / 2);
        ++adata(22, gdata_previous_map2);
        if (adata(22, gdata_previous_map2) % 20 == 0)
        {
            matgetmain(41, 1);
        }
        else if (adata(22, gdata_previous_map2) % 5 == 0)
        {
            matgetmain(40, 1);
        }
    }
    if (gdata_executing_immediate_quest_type == 1001
        || gdata_executing_immediate_quest_type == 1010)
    {
        qdata(8, gdata_executing_immediate_quest) = 3;
        txtef(2);
        txt(lang(u8"エリアを制圧した！"s, u8"The area is secured!"s));
    }
    if (gdata_executing_immediate_quest_type == 1007)
    {
        txtef(2);
        txt(lang(u8"エリアを制圧した！"s, u8"The area is secured!"s));
    }
    if (gdata_executing_immediate_quest_type == 1008)
    {
        gdata_left_minutes_of_executing_quest = 0;
        qdata(8, gdata_executing_immediate_quest) = 3;
        txtef(2);
        txt(lang(
            u8"討伐に成功した！"s, u8"You successfully slay the target."s));
    }
    return;
}



void complete_quest()
{
    snd(51);
    p = qdata(6, rq);
    if (qdata(3, rq) == 1006)
    {
        if (qdata(12, rq) != 0)
        {
            if (qdata(12, rq) * 125 / 100 < qdata(13, rq))
            {
                p = clamp(p * qdata(13, rq) / qdata(12, rq), p(0), p * 3);
            }
        }
    }
    if (p != 0)
    {
        flt();
        itemcreate(-1, 54, cdata[0].position.x, cdata[0].position.y, p);
    }
    if (qdata(3, rq) == 1002)
    {
        p = rnd(2) + 1;
    }
    else
    {
        p = 1;
    }
    if (qdata(3, rq) == 1008 || qdata(3, rq) == 1010)
    {
        p = 2 + (rnd(100) < rnd(cdata[0].fame / 5000 + 1));
    }
    flt();
    itemcreate(-1, 55, cdata[0].position.x, cdata[0].position.y, p);
    if (qdata(3, rq) == 1009)
    {
        if (qdata(12, rq) * 150 / 100 < qdata(13, rq))
        {
            flt();
            itemcreate(
                -1,
                724,
                cdata[0].position.x,
                cdata[0].position.y,
                1 + qdata(13, rq) / 10);
        }
    }
    if (qdata(7, rq) != 0)
    {
        p = rnd(rnd(4) + 1) + 1;
        if (qdata(3, rq) == 1008 || qdata(3, rq) == 1010)
        {
            p += 2;
        }
        for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
        {
            fixlv = 2;
            if (rnd(2))
            {
                fixlv = 3;
                if (rnd(12) == 0)
                {
                    fixlv = 4;
                }
            }
            flt((qdata(5, rq) + cdata[0].level) / 2 + 1, calcfixlv(fixlv));
            if (qdata(7, rq) < 10000)
            {
                if (qdata(7, rq) == 1)
                {
                    flttypemajor = fsetwear(rnd(length(fsetwear)));
                }
                if (qdata(7, rq) == 2)
                {
                    flttypemajor = fsetmagic(rnd(length(fsetmagic)));
                }
                if (qdata(7, rq) == 3)
                {
                    flttypemajor = fsetarmor(rnd(length(fsetarmor)));
                }
                if (qdata(7, rq) == 4)
                {
                    flttypemajor = fsetweapon(rnd(length(fsetweapon)));
                }
                if (qdata(7, rq) == 5)
                {
                    flttypemajor =
                        fsetrewardsupply(rnd(length(fsetrewardsupply)));
                }
            }
            else
            {
                flttypemajor = qdata(7, rq);
            }
            itemcreate(-1, 0, cdata[0].position.x, cdata[0].position.y, 0);
        }
    }
    modify_karma(0, 1);
    gdata(74) = calcfame(0, qdata(5, rq) * 3 + 10);
    txtef(2);
    txt(lang(
        qname(rq) + u8"から受けた依頼を完了した。"s,
        u8"You have completed the quest taken from "s + qname(rq) + u8"."s));
    txtef(2);
    txt(lang(
        ""s + gdata(74) + u8"の名声値を手に入れた。"s,
        u8"You gain "s + gdata(74) + u8" fame."s));
    cdata[0].fame += gdata(74);
    txt(lang(
        u8"何かが足元に転がってきた。"s, u8"Something is put on the ground."s));
    if (qdata(3, rq) == 1002)
    {
        --qdata(15, qdata(10, rq));
    }
    qdata(3, rq) = 0;
    qdata(8, rq) = 0;
    autosave = 1 * (gdata_current_map != 35);
    return;
}



void do_play_scene()
{
    int scidx = 0;
    int scidxtop = 0;
    int val0{};
    if (gdata_played_scene < sceneid)
    {
        gdata_played_scene = sceneid;
    }
    if (config::instance().story == 0 || (en == 1 && sceneid != 0))
    {
        return;
    }
    scene_cut = 0;
    msgtempprev = msgtemp;
    scenemode = 1;
    SDIM4(actor, 20, 3, 10);
    std::string file = u8"void"s;
    y1 = 60;
    y2 = windowh - 60;
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{lang(u8"scene1.hsp"s, u8"scene2.hsp"s),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    s = u8"{"s + sceneid + u8"}"s;
    scidx = instr(buff, 0, s);
    if (scidx == -1)
    {
        label_2685();
        return;
    }
    scidx += s(0).size();
label_2681:
    await();
    int a{};
    stick(a, 128);
    if (a == 128)
    {
        scene_cut = 1;
    }
    if (scene_cut == 1)
    {
        label_2685();
        return;
    }
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{lang(u8"scene1.hsp"s, u8"scene2.hsp"s),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    cs = 0;
    key_list = key_enter;
    scidxtop = scidx;
    scidxtop = 0;
    val0 = 0;
label_2682_internal:
    p(1) = instr(buff, scidx, u8"{"s) + scidx;
    if (p(1) == -1)
    {
        label_2685();
        return;
    }
    p(2) = instr(buff, scidx, u8"}"s) + scidx + 1;
    if (p(2) == -1)
    {
        label_2685();
        return;
    }
    if (scidxtop != 0)
    {
        scidx = p(1);
        goto label_2684_internal;
        return;
    }
    s = strmid(buff, p(1), p(2) - p(1));
    scidx = p(2) + 1;
    if (s == u8"{txt}"s)
    {
        scidxtop = scidx;
        val0 = 0;
        goto label_2682_internal;
    }
    if (strutil::contains(s(0), u8"{chat_"))
    {
        rc = elona::stoi(strmid(s, 6, 1));
        scidxtop = scidx;
        val0 = 1;
        goto label_2682_internal;
    }
    if (s == u8"{fade}"s)
    {
        gsel(4);
        boxf();
        gsel(0);
        label_1443();
        goto label_2682_internal;
    }
    if (s == u8"{fadein}"s)
    {
        for (int cnt = 0; cnt < 25; ++cnt)
        {
            redraw();
            pos(0, 0);
            gmode(4, -1, -1, cnt * 15);
            pos(0, 0);
            gcopy(4, 0, 0, windoww, windowh);
            gmode(2);
            await(10);
        }
        goto label_2682_internal;
    }
    if (s == u8"{wait}"s)
    {
        scidxtop = scidx;
        val0 = 2;
        goto label_2682_internal;
    }
    if (s == u8"{end}"s)
    {
        await(1000);
        label_2685();
        return;
    }
    p(3) = instr(buff, scidx, u8"\""s) + scidx + 1;
    p(4) = instr(buff, p(3), u8"\""s) + p(3);
    s(1) = strmid(buff, p(3), p(4) - p(3));
    scidx = p(4) + 1;
    if (s == u8"{pic}"s)
    {
        file = s(1);
        goto label_2682_internal;
    }
    if (s == u8"{mc}"s)
    {
        auto music = -1;
        if (s(1) == u8"mcUnrest2"s)
        {
            music = 84;
        }
        if (s(1) == u8"mcTown1"s)
        {
            music = 51;
        }
        if (s(1) == u8"mcMemory"s)
        {
            music = 89;
        }
        if (s(1) == u8"mcIntro"s)
        {
            music = 90;
        }
        if (music == -1)
        {
            musicfile(91) = s(1);
            play_music(91);
        }
        else
        {
            play_music(music);
        }
        goto label_2682_internal;
    }
    if (s == u8"{se}"s)
    {
        sndload(filesystem::dir::sound() / s(1), 28);
        snd(28);
        goto label_2682_internal;
    }
    if (strutil::contains(s(0), u8"{actor_"))
    {
        rc = elona::stoi(strmid(s, 7, 1));
        csvsort(s, s(1), 44);
        actor(0, rc) = s;
        actor(1, rc) = s(1);
        actor(2, rc) = s(2);
    }
    goto label_2682_internal;
label_2684_internal:
    buff = strmid(buff, scidxtop, scidx - scidxtop);
    p = noteinfo();
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(s, p - cnt - 1);
        if (s == ""s)
        {
            notedel(p - cnt - 1);
        }
    }
    gsel(4);
    gmode(0);
    pos(0, 0);
    picload(filesystem::dir::graphic() / (u8""s + file + u8".bmp"), 1);
    pos(0, y1);
    gzoom(4, 0, 0, 640, 480, windoww, y2 - y1);
    gmode(2);
    boxf(0, 0, windoww, y1, {5, 5, 5});
    boxf(0, y2, windoww, windowh, {5, 5, 5});
    if (val0 == 1)
    {
        gsel(0);
        gmode(0);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh);
        gmode(2);
        tc = 0;
        speak_to_npc();
        goto label_2681;
    }
    if (val0 == 2)
    {
        gsel(0);
        gmode(0);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh);
        gmode(2);
        redraw();
        await(1000);
        goto label_2681;
    }
    font(16 - en * 2);
    x = 44;
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        y = y1 + 31 + (9 - noteinfo() / 2 + cnt) * 20;
        noteget(s, cnt);
        x = windoww / 2 - s(0).size() * 4;
        dx = 80 + s(0).size() * 8;
        if (dx < 180)
        {
            dx = 0;
        }
        pos(windoww / 2, y + 4);
        gmode(6, 344, 72, 70);
        grotate(3, 456, 144, 0, dx, 72);
    }
    x = 40;
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        y = y1 + 28 + (9 - noteinfo() / 2 + cnt) * 20;
        noteget(s, cnt);
        x = windoww / 2 - strlen_u(s(0)) * 4;
        color(10, 10, 10);
        pos(x, y);
        bmes(s, 240, 240, 240);
        color(0, 0, 0);
    }
    gsel(0);
    for (int cnt = 1; cnt < 16; ++cnt)
    {
        await(30);
        stick(a, 128);
        if (a == 128)
        {
            scene_cut = 1;
        }
        gmode(4, -1, -1, cnt * 16);
        pos(0, 0);
        gcopy(4, 0, 0, windoww, windowh);
        redraw();
    }
    gmode(2);
    gmode(0);
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh);
    gmode(2);
    x_at_txtfunc = windoww - 120;
    y_at_txtfunc = windowh - 60;
    anime_halt();
    boxf(0, 0, windoww, y1, {5, 5, 5});
    boxf(0, y2, windoww, windowh, {5, 5, 5});
    goto label_2681;
}



void label_2685()
{
    gsel(4);
    boxf();
    gsel(0);
    label_1443();
    scenemode = 0;
    msgtemp = msgtempprev;
    msgtempprev = "";
    return;
}



int ai_check()
{
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        if (dir == 2)
        {
            cdata[cc].next_position.x = cdata[cc].position.x + 1;
            cdata[cc].next_position.y = dirchk(cnt, p) + cdata[cc].position.y;
        }
        if (dir == 1)
        {
            cdata[cc].next_position.x = cdata[cc].position.x - 1;
            cdata[cc].next_position.y = dirchk(cnt, p) + cdata[cc].position.y;
        }
        if (dir == 3)
        {
            cdata[cc].next_position.y = cdata[cc].position.y - 1;
            cdata[cc].next_position.x = dirchk(cnt, p) + cdata[cc].position.x;
        }
        if (dir == 0)
        {
            cdata[cc].next_position.y = cdata[cc].position.y + 1;
            cdata[cc].next_position.x = dirchk(cnt, p) + cdata[cc].position.x;
        }
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            break;
        }
        if (cellchara != -1)
        {
            if (cdata[cc].relationship == 10)
            {
                if (cdata[cellchara].relationship == -3)
                {
                    cdata[cc].enemy_id = cellchara;
                }
                else
                {
                    blockedbychara = 1;
                }
            }
            if (cdata[cc].relationship == -3)
            {
                if (cdata[cellchara].relationship == 10)
                {
                    cdata[cc].enemy_id = cellchara;
                }
                else
                {
                    blockedbychara = 1;
                }
            }
        }
        if (cellfeat != -1)
        {
            if (cellfeat == 21)
            {
                cellaccess = 1;
                break;
            }
        }
    }
    if (cellaccess == 1)
    {
        return 1;
    }
    return 0;
}



turn_result_t npc_turn()
{
    int searchfov = 0;
    if (cdata[cc].is_hung_on_sand_bag())
    {
        if (is_in_fov(cc))
        {
            if (rnd(30) == 0)
            {
                tc = cc;
                txt(lang(
                        u8"「もっとぶって"s + _yo(2) + u8"」"s,
                        u8"\"Release me now.\""s),
                    lang(
                        u8"「こんなことして、許さない"s + _yo() + u8"」"s,
                        u8"\"I won't forget this.\""s),
                    lang(
                        u8"「何をする"s + _nda(2) + u8"」"s, u8"\"Hit me!\""s));
            }
        }
        cdata[cc].hate = 0;
        return turn_result_t::turn_end;
    }
    if (is_in_fov(cc) == 0)
    {
        if (cdata[0].blind == 0)
        {
            if (rnd(4) == 0)
            {
                if (mdata(6) != 1)
                {
                    if (cdata[cc].is_leashed())
                    {
                        if (gdata_current_map != 40)
                        {
                            if (cc < 16)
                            {
                                cdata[cc].hate = 0;
                                cdata[cc].enemy_id = 0;
                            }
                            else
                            {
                                if (rnd(2))
                                {
                                    txt(lang(u8"「痛っ！」"s, u8"\"Ouch!\""s),
                                        lang(
                                            u8"「やめて！」"s,
                                            u8"\"Stop it!\""s));
                                    hostileaction(0, cc);
                                }
                                if (rnd(4) == 0)
                                {
                                    cdata[cc].is_leashed() = false;
                                    txtef(9);
                                    txt(lang(
                                        name(cc)
                                            + u8"は巻きついていた紐をほどいた。"s,
                                        name(cc) + u8" untangle"s + _s(cc)
                                            + u8" the leash."s));
                                }
                            }
                            tc = 0;
                            efid = 619;
                            magic();
                            return turn_result_t::turn_end;
                        }
                    }
                }
            }
        }
    }
    if (cdata[cc].will_explode_soon())
    {
        tlocx = cdata[cc].position.x;
        tlocy = cdata[cc].position.y;
        efid = 644;
        magic();
        return turn_result_t::turn_end;
    }
    if (cdata[cc].relationship >= 10)
    {
        --cdata[cc].hate;
        if (cdata[cc].enemy_id == 0 || cdata[cc].hate <= 0
            || (cdata[cdata[cc].enemy_id].relationship >= -2
                && cdata[cdata[cc].enemy_id].enemy_id != cc))
        {
            cdata[cc].enemy_id = 0;
            if (pcattacker != 0)
            {
                if (cdata[pcattacker].relationship <= -3)
                {
                    if (cdata[pcattacker].state == 1)
                    {
                        if (fov_los(
                                cdata[cc].position.x,
                                cdata[cc].position.y,
                                cdata[pcattacker].position.x,
                                cdata[pcattacker].position.y))
                        {
                            cdata[cc].hate = 5;
                            cdata[cc].enemy_id = pcattacker;
                        }
                    }
                }
            }
            if (cdata[cc].enemy_id == 0)
            {
                if (cdata[0].enemy_id != 0
                    && cdata[cdata[0].enemy_id].relationship <= -3)
                {
                    if (cdata[cdata[0].enemy_id].state == 1)
                    {
                        if (fov_los(
                                cdata[cc].position.x,
                                cdata[cc].position.y,
                                cdata[cdata[0].enemy_id].position.x,
                                cdata[cdata[0].enemy_id].position.y))
                        {
                            cdata[cc].hate = 5;
                            cdata[cc].enemy_id = cdata[0].enemy_id;
                        }
                    }
                }
            }
        }
        if (cdata[cdata[cc].enemy_id].is_invisible() == 1)
        {
            if (cdata[cc].can_see_invisible() == 0)
            {
                if (cdata[cdata[cc].enemy_id].wet == 0)
                {
                    if (rnd(5))
                    {
                        cdata[cc].enemy_id = 0;
                    }
                }
            }
        }
    }
    if (cdata[cc].enemy_id != 0)
    {
        if (cdata[cdata[cc].enemy_id].state != 1)
        {
            cdata[cc].enemy_id = 0;
            cdata[cc].hate = 0;
        }
    }
    if (gdata_current_map == 40)
    {
        if (cdata[cc].relationship != -3)
        {
            if (cdata[cc].relationship != 10)
            {
                if (rnd(40) == 0)
                {
                    txtef(4);
                    txt(lang(u8"「いいぞ！」"s, u8"\"Come on!\""s),
                        lang(u8"「もっとやれー」"s, u8"\"More blood!\""s),
                        lang(u8"「血をみせろー」"s, u8"\"Beat'em!\""s),
                        lang(u8"「頑張って！」"s, u8"\"Use your brain!\""s),
                        lang(u8"「うぉぉぉぉ！」"s, u8"\"Wooooo!\""s),
                        lang(u8"「行けぇ！」"s, u8"\"Go go!\""s),
                        lang(u8"「頭を使えよ」"s, u8"\"Good fighting.\""s),
                        lang(u8"「きゃー」"s, u8"\"Yeeee!\""s));
                }
                return proc_misc_npc_map_events();
            }
        }
        cdata[cc].hate = 100;
        if (cdata[cc].relationship == 10)
        {
            p(0) = -3;
            p(1) = enemyteam;
            p(2) = 15;
        }
        else
        {
            p(0) = 10;
            p(1) = 1;
            p(2) = 16;
        }
        i = cdata[cc].enemy_id;
        if (cdata[i].relationship == p && cdata[i].state == 1 && i >= p(1)
            && i < p(1) + p(2))
        {
            if (rnd(10) != 0)
            {
                tc = i;
                goto label_2689_internal;
            }
        }
        cdata[cc].enemy_id = p(1);
        for (int cnt = 0; cnt < 100; ++cnt)
        {
            i = rnd(p(2)) + p(1);
            if (cdata[i].state == 1)
            {
                if (cdata[i].relationship == p)
                {
                    cdata[cc].enemy_id = i;
                    break;
                }
            }
        }
        if (cdata[cdata[cc].enemy_id].relationship != p
            || cdata[cdata[cc].enemy_id].state != 1)
        {
            f = 0;
            for (int cnt = p(1), cnt_end = cnt + (p(2)); cnt < cnt_end; ++cnt)
            {
                if (cdata[cnt].state == 1)
                {
                    if (cdata[cnt].relationship == p)
                    {
                        cdata[cc].enemy_id = cnt;
                        f = 1;
                        break;
                    }
                }
            }
            if (f == 0)
            {
                if (cdata[cc].relationship == 10)
                {
                    petarenawin = 1;
                }
                else
                {
                    petarenawin = 2;
                }
                return turn_result_t::turn_end;
            }
        }
    }
    if (gdata_current_map == 33)
    {
        if (cc != gdata_fire_giant)
        {
            if (cc > 16)
            {
                if (gdata_released_fire_giant != 0)
                {
                    if (cdata[gdata_fire_giant].state == 1)
                    {
                        cdata[cc].enemy_id = gdata_fire_giant;
                        cdata[cc].hate = 500;
                    }
                }
            }
        }
    }
    if (gdata_mount != 0)
    {
        if (cdata[cc].enemy_id == gdata_mount)
        {
            if (rnd(3))
            {
                cdata[cc].enemy_id = 0;
            }
        }
        if (cdata[cc].enemy_id == 0)
        {
            if (cdata[cc].relationship <= -2)
            {
                if (rnd(3) == 0)
                {
                    cdata[cc].enemy_id = gdata_mount;
                }
            }
        }
    }
    tc = cdata[cc].enemy_id;
    if (cdatan(4, cc) != ""s)
    {
        if (cdata[cc].has_custom_talk() == 0)
        {
            if (rnd(30) == 0)
            {
                txtef(9);
                txt(""s + cdatan(4, cc));
            }
        }
    }
    else if (cdata[cc].can_talk != 0 || cdata[cc].has_custom_talk())
    {
        if (cdata[cc].is_silent() == 0)
        {
            if (cdata[cc].turn % 5 == 0)
            {
                if (rnd(4) == 0)
                {
                    if (cdata[0].position.x > cdata[cc].position.x - 10
                        && cdata[0].position.x < cdata[cc].position.x + 10)
                    {
                        if (cdata[0].position.y > cdata[cc].position.y - 10
                            && cdata[0].position.y < cdata[cc].position.y + 10)
                        {
                            if (cdata[0].continuous_action_id != 6)
                            {
                                if (cdata[cc].hate <= 0)
                                {
                                    customtalk(cc, 100);
                                }
                                if (cdata[cc].hate > 0)
                                {
                                    customtalk(cc, 101);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (cdata[cc].relationship >= 0)
    {
        if (cdata[0].choked)
        {
            if (dist(
                    cdata[0].position.x,
                    cdata[0].position.y,
                    cdata[cc].position.x,
                    cdata[cc].position.y)
                == 1)
            {
                x = cdata[0].position.x;
                y = cdata[0].position.y;
                return do_bash();
            }
        }
    }
    if (cdata[cc].ai_heal != 0)
    {
        if (cdata[cc].hp < cdata[cc].max_hp / 4)
        {
            if (cdata[cc].mp > 0 || rnd(5) == 0)
            {
                efid = cdata[cc].ai_heal;
                if (efid >= 400 && efid < 467)
                {
                    npccostmp = 1;
                    int stat = label_2167();
                    if (stat == 1)
                    {
                        return turn_result_t::turn_end;
                    }
                }
                else if (efid >= 600)
                {
                    int stat = label_2174();
                    if (stat == 1)
                    {
                        return turn_result_t::turn_end;
                    }
                }
            }
        }
    }
    if (cdata[cc].item_which_will_be_used == 0)
    {
        goto label_2689_internal;
    }
    ci = cdata[cc].item_which_will_be_used;
    if (inv[ci].number == 0)
    {
        cdata[cc].item_which_will_be_used = 0;
        goto label_2689_internal;
    }
    if (cdata[cc].relationship != 0)
    {
        cdata[cc].item_which_will_be_used = 0;
    }
    {
        int category = the_item_db[inv[ci].id]->category;
        if (category == 57000)
        {
            if (cdata[cc].relationship != 10 || cdata[cc].nutrition <= 6000)
            {
                return do_eat_command();
            }
        }
        if (category == 52000)
        {
            return do_drink_command();
        }
        if (category == 53000)
        {
            return do_read_command();
        }
    }
    cdata[cc].item_which_will_be_used = 0;
label_2689_internal:
    if (cdata[cc].hate > 0 || cdata[cc].relationship == 10)
    {
        distance = dist(
            cdata[tc].position.x,
            cdata[tc].position.y,
            cdata[cc].position.x,
            cdata[cc].position.y);
        if (cdata[cc].blind != 0)
        {
            if (rnd(10) > 2)
            {
                return proc_misc_npc_map_events();
            }
        }
        if (cdata[cc].confused != 0)
        {
            if (rnd(10) > 3)
            {
                return proc_misc_npc_map_events();
            }
        }
        if (cdata[cc].relationship == 10)
        {
            if (tc == 0)
            {
                if (map(cdata[cc].position.x, cdata[cc].position.y, 4) != 0)
                {
                    const auto item_info = cell_itemoncell(cdata[cc].position);
                    const auto number = item_info.first;
                    const auto item = item_info.second;
                    if (number == 1)
                    {
                        ci = item;
                        p = the_item_db[inv[ci].id]->category;
                        if (cdata[cc].nutrition <= 6000)
                        {
                            if (p == 57000)
                            {
                                if (inv[ci].own_state <= 0)
                                {
                                    if (!is_cursed(inv[ci].curse_state))
                                    {
                                        return do_eat_command();
                                    }
                                }
                            }
                            if (p == 60001)
                            {
                                if (inv[ci].own_state <= 1)
                                {
                                    if (inv[ci].param1 >= -5)
                                    {
                                        if (inv[ci].param3 < 20)
                                        {
                                            if (inv[ci].id != 602)
                                            {
                                                return do_drink_command();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (p == 68000 || p == 77000)
                        {
                            if (inv[ci].own_state <= 0)
                            {
                                if (ibit(5, ci) == 0)
                                {
                                    if (mdata(6) != 5)
                                    {
                                        in = inv[ci].number;
                                        if (gdata_mount != cc)
                                        {
                                            int stat = pick_up_item();
                                            if (stat == 1)
                                            {
                                                return turn_result_t::turn_end;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (cdata[cc].current_map == gdata_current_map)
                {
                    if (cdata[cc].is_contracting() == 0)
                    {
                        return proc_misc_npc_map_events();
                    }
                }
                if (distance > 2 || rnd(3))
                {
                    return proc_ally_town_training();
                }
                else
                {
                    return proc_misc_npc_map_events();
                }
            }
        }
        if (cdata[cc].fear != 0)
        {
            return proc_ally_town_training(true);
        }
        if (cdata[cc].blind != 0)
        {
            if (rnd(3))
            {
                return proc_misc_npc_map_events();
            }
        }
        if (distance != cdata[cc].ai_dist)
        {
            if (rnd(100) < cdata[cc].ai_move)
            {
                return proc_ally_town_training();
            }
        }
        return proc_ai_basic();
    }
    if (cdata[cc].turn % 10 == 1)
    {
        searchfov = 5;
        f = 0;
        for (int cnt = 0, cnt_end = (searchfov); cnt < cnt_end; ++cnt)
        {
            y = cdata[cc].position.y - 2 + cnt;
            if (y < 0 || y >= mdata(1))
            {
                continue;
            }
            int c{};
            for (int cnt = 0, cnt_end = (searchfov); cnt < cnt_end; ++cnt)
            {
                x = cdata[cc].position.x - 2 + cnt;
                if (x < 0 || x >= mdata(0))
                {
                    continue;
                }
                c = map(x, y, 1) - 1;
                if (c <= 0)
                {
                    continue;
                }
                if (cdata[cc].original_relationship <= -3)
                {
                    if (cdata[c].relationship > -3)
                    {
                        if (cdata[c].does_not_search_enemy() == 0)
                        {
                            f = 1;
                            break;
                        }
                    }
                }
                else if (c >= 57)
                {
                    if (cdata[c].original_relationship <= -3)
                    {
                        if (cdata[c].does_not_search_enemy() == 0)
                        {
                            f = 1;
                            break;
                        }
                    }
                }
            }
            if (f)
            {
                if (cdata[cc].does_not_search_enemy() == 0)
                {
                    cdata[cc].enemy_id = c;
                    cdata[cc].hate = 30;
                    cdata[cc].emotion_icon = 218;
                    break;
                }
            }
        }
    }
    if (tc == 0)
    {
        r2 = cc;
        int stat = try_to_perceive_npc(tc);
        if (stat == 1)
        {
            if (cdata[cc].relationship == -3)
            {
                cdata[cc].hate = 30;
            }
        }
    }
    return proc_misc_npc_map_events();
}



turn_result_t proc_misc_npc_map_events()
{
    if (cdata[cc].ai_calm == 4)
    {
        tc = 0;
        distance = dist(
            cdata[tc].position.x,
            cdata[tc].position.y,
            cdata[cc].position.x,
            cdata[cc].position.y);
        return proc_ally_town_training();
    }
    if (rnd(5) != 0)
    {
        return turn_result_t::turn_end;
    }
    if (cdata[cc].drunk != 0)
    {
        if (is_in_fov(cc))
        {
            if (cdatan(2, cc) == u8"cat"s)
            {
                if (cdata[cc].drunk < 5)
                {
                    cdata[cc].drunk += 40;
                }
            label_2691_internal:
                if (jp)
                {
                    if (rnd(3) == 0)
                    {
                        txt(u8"「米さ米種だろ♪」"s,
                            u8"「飲ま飲まイェイ！！」"s,
                            u8"「飲ま飲ま飲まイェイ！！」"s);
                        goto label_2692_internal;
                    }
                    if (rnd(4) == 0)
                    {
                        txt(u8"「字ベロ♪指♪ラマ♪ｸﾏｰ!!して♪パンチラ♪」"s,
                            u8"「アロー♪アーロン♪スゲェ♪ピカソ♪算段ビーフ♪」"s,
                            u8"「キスすごい肉♪脱線してんの♪さらに肉♪」"s);
                        goto label_2692_internal;
                    }
                    if (rnd(4) == 0)
                    {
                        txt(u8"「キープダルシム♪アゴスタディーイェイ♪並フェイスで大きい筆入れ♪」"s,
                            u8"「ハロー♪猿ー♪すげー♪うん入る♪」"s);
                        goto label_2692_internal;
                    }
                    if (rnd(4) == 0)
                    {
                        txtef(4);
                        txt(u8" *ﾋﾟﾛﾘ〜ﾋﾟﾛﾘ〜* "s);
                        goto label_2692_internal;
                    }
                    txt(u8"「マイアヒー♪」"s,
                        u8"「マイアフゥー♪」"s,
                        u8"「マイアホー♪」"s);
                    goto label_2692_internal;
                }
                else
                {
                    if (rnd(2) == 0)
                    {
                        txt(u8"\"Vrei sa pleci dar♪\""s,
                            u8"\"Numa numa yay!!\""s,
                            u8"\"Numa numa numa yay!!\""s);
                        goto label_2692_internal;
                    }
                    txt(u8"\"Mai-Ya-Hi♪\""s,
                        u8"\"Mai-Ya-Hoo♪\""s,
                        u8"\"Mai-Ya-Ha Ma Mi A♪\""s);
                    goto label_2692_internal;
                }
                goto label_2691_internal;
            }
        }
    }
label_2692_internal:
    if (cc > 16)
    {
        if (mdata(6) == 3 || mdata(6) == 2)
        {
            if (gdata_hour >= 22 || gdata_hour < 7)
            {
                if (cdata[cc].continuous_action_id == 0)
                {
                    if (rnd(100) == 0)
                    {
                        dmgcon(cc, 2, 4000);
                    }
                }
            }
        }
    }
    if (cdata[cc].item_which_will_be_used == 0)
    {
        if (cdata[cc].relationship != 10)
        {
            if (gdata_current_map == 13)
            {
                if (gdata_executing_immediate_quest_type == 1009)
                {
                    if (rnd(30) == 0)
                    {
                        flt(20);
                        if (rnd(4) == 0)
                        {
                            flttypemajor = 57000;
                        }
                        else
                        {
                            flttypemajor = 52000;
                            if (rnd(8))
                            {
                                flttypeminor = 52002;
                            }
                        }
                        int stat = itemcreate(cc, 0, -1, -1, 0);
                        if (stat == 1)
                        {
                            cdata[cc].item_which_will_be_used = ci;
                        }
                    }
                }
            }
            if (gdata_current_map == 33 || gdata_current_map == 29)
            {
                if (cdata[cc].id == 35 || cdata[cc].id == 211)
                {
                    if (is_in_fov(cc))
                    {
                        if (chipm(
                                0,
                                map(cdata[cc].position.x,
                                    cdata[cc].position.y,
                                    0))
                            == 4)
                        {
                            if (rnd(4) == 0)
                            {
                                if (cdata[gdata_fire_giant].state == 1)
                                {
                                    if (is_in_fov(gdata_fire_giant))
                                    {
                                        flt();
                                        int stat =
                                            itemcreate(cc, 587, -1, -1, 0);
                                        if (stat == 1)
                                        {
                                            tlocx = cdata[gdata_fire_giant]
                                                        .position.x;
                                            tlocy = cdata[gdata_fire_giant]
                                                        .position.y;
                                            txtef(9);
                                            txt(lang(
                                                    u8"「化け物め！」"s,
                                                    u8"\"Filthy monster!\""s),
                                                lang(
                                                    u8"「くたばれっ」"s,
                                                    u8"\"Go to hell!\""s),
                                                lang(
                                                    u8"「退治してやるぅ！」"s,
                                                    u8"\"I'll get rid of you.\""s),
                                                lang(
                                                    u8"「くらえー！」"s,
                                                    u8"\"Eat this!\""s));
                                            return do_throw_command();
                                        }
                                    }
                                }
                            }
                            if (rnd(12) == 0)
                            {
                                bool found_snowman{};
                                for (const auto& cnt : itemlist(-1, 541))
                                {
                                    ti = cnt;
                                    if (inv[ti].position.x >= scx
                                        && inv[ti].position.x
                                            < scx + inf_screenw
                                        && inv[ti].position.y >= scy
                                        && inv[ti].position.y
                                            < scy + inf_screenh)
                                    {
                                        found_snowman = true;
                                        break;
                                    }
                                }
                                if (found_snowman)
                                {
                                    flt();
                                    int stat = itemcreate(cc, 587, -1, -1, 0);
                                    if (stat == 1)
                                    {
                                        tlocx = inv[ti].position.x;
                                        tlocy = inv[ti].position.y;
                                        return do_throw_command();
                                    }
                                }
                            }
                            if (rnd(10) == 0)
                            {
                                if (map(cdata[cc].position.x,
                                        cdata[cc].position.y,
                                        4)
                                    == 0)
                                {
                                    flt();
                                    int stat = itemcreate(
                                        -1,
                                        541,
                                        cdata[cc].position.x,
                                        cdata[cc].position.y,
                                        0);
                                    if (stat == 1)
                                    {
                                        snd(86);
                                        txt(lang(
                                            name(cc) + u8"は"s + itemname(ci)
                                                + u8"を作った！"s,
                                            name(cc) + u8" make"s + _s(cc)
                                                + u8" "s + itemname(ci)
                                                + u8"!"s));
                                        return turn_result_t::turn_end;
                                    }
                                }
                            }
                            if (rnd(12) == 0)
                            {
                                flt();
                                int stat = itemcreate(cc, 587, -1, -1, 0);
                                if (stat == 1)
                                {
                                    tlocx = cdata[0].position.x;
                                    tlocy = cdata[0].position.y;
                                    txtef(9);
                                    txt(lang(u8" *クスクス* "s, u8"*grin*"s),
                                        lang(
                                            u8"「えいっ」"s,
                                            u8"\"Fire in the hole!\""s),
                                        lang(
                                            u8"「うりゃ」"s,
                                            u8"\"Tee-hee-hee!\""s),
                                        lang(
                                            u8"「くらえー！」"s,
                                            u8"\"Eat this!\""s),
                                        lang(
                                            u8"「危ないっ！」"s,
                                            u8"\"Watch out!\""s),
                                        lang(
                                            u8"「避けてー」"s, u8"\"Scut!\""s));
                                    return do_throw_command();
                                }
                            }
                        }
                    }
                }
            }
            if (cdata[cc].nutrition <= 6000)
            {
                if (cdata[cc].vision_flag != msync || rnd(5))
                {
                    if (cdata[cc].has_anorexia() == 0)
                    {
                        cdata[cc].nutrition += 5000;
                    }
                    else
                    {
                        cdata[cc].nutrition -= 3000;
                    }
                }
                else
                {
                    flt(20);
                    p(0) = rnd(4);
                    p(1) = 0;
                    if (p == 0 || cdata[cc].has_anorexia())
                    {
                        flttypemajor = 57000;
                    }
                    if (p == 1)
                    {
                        flttypemajor = 52000;
                    }
                    if (p == 2 || p == 3)
                    {
                        flttypeminor = 52002;
                    }
                    int stat = itemcreate(cc, p(1), -1, -1, 0);
                    if (stat == 1)
                    {
                        if (inv[ci].id == 577)
                        {
                            if (rnd(5) == 0)
                            {
                                inv[ci].number = 0;
                            }
                        }
                        else
                        {
                            cdata[cc].item_which_will_be_used = ci;
                            if (cdata[cc].has_anorexia() == 0)
                            {
                                cdata[cc].nutrition += 5000;
                            }
                            else
                            {
                                cdata[cc].nutrition -= 3000;
                            }
                        }
                    }
                }
            }
        }
    }
    if (cdata[cc].ai_calm == 5)
    {
        if (cdata[cc].id == 326)
        {
            if (rnd(5) == 0)
            {
                efid = 183;
                magic();
                return turn_result_t::turn_end;
            }
        }
        if (cdata[cc].id == 320 || cdata[cc].id == 280)
        {
            if (is_in_fov(cc))
            {
                tc = 0;
                distance = dist(
                    cdata[tc].position.x,
                    cdata[tc].position.y,
                    cdata[cc].position.x,
                    cdata[cc].position.y);
                if (distance < 8)
                {
                    if (cdatan(2, 0) == u8"snail"s)
                    {
                        tlocx = cdata[0].position.x;
                        tlocy = cdata[0].position.y;
                        flt();
                        int stat = itemcreate(cc, 698, -1, -1, 0);
                        if (stat == 1)
                        {
                            if (is_in_fov(cc))
                            {
                                txtef(9);
                                txt(lang(
                                        u8"「なめくじだ！」"s, u8"\"Snail!\""s),
                                    lang(u8"「殺す！」"s, u8"\"Kill!\""s));
                            }
                            return do_throw_command();
                        }
                    }
                }
            }
        }
        if (cdata[cc].id == 335 || cdata[cc].id == 352)
        {
            if (rnd(10) == 0)
            {
                for (int cnt = ELONA_MAX_PARTY_CHARACTERS; cnt < 97; ++cnt)
                {
                    if (cdata[cnt].state != 1)
                    {
                        continue;
                    }
                    if (rnd(3) == 0)
                    {
                        continue;
                    }
                    if (dist(
                            cdata[cc].position.x,
                            cdata[cc].position.y,
                            cdata[cnt].position.x,
                            cdata[cnt].position.y)
                        < 6)
                    {
                        if (fov_los(
                                cdata[cc].position.x,
                                cdata[cc].position.y,
                                cdata[cnt].position.x,
                                cdata[cnt].position.y))
                        {
                            cdata[cc].enemy_id = cnt;
                            tc = cnt;
                            break;
                        }
                    }
                }
            }
            distance = dist(
                cdata[tc].position.x,
                cdata[tc].position.y,
                cdata[cc].position.x,
                cdata[cc].position.y);
            if (tc != 0)
            {
                if (distance == 1)
                {
                    if (cdata[tc].continuous_action_id == 0)
                    {
                        cdata[cc].enemy_id = 0;
                        label_2147();
                        return turn_result_t::turn_end;
                    }
                }
                if (distance < 6)
                {
                    return proc_ally_town_training();
                }
            }
        }
        cdata[cc].next_position.x = rnd(3) - 1 + cdata[cc].position.x;
        cdata[cc].next_position.y = rnd(3) - 1 + cdata[cc].position.y;
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            return proc_movement_event();
        }
    }
    if (cdata[cc].ai_calm == 1)
    {
        cdata[cc].next_position.x = rnd(3) - 1 + cdata[cc].position.x;
        cdata[cc].next_position.y = rnd(3) - 1 + cdata[cc].position.y;
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            return proc_movement_event();
        }
    }
    if (cdata[cc].ai_calm == 2)
    {
        if (mdata(8) == 1
            && dist(
                   cdata[cc].position.x,
                   cdata[cc].position.y,
                   cdata[cc].initial_position.x,
                   cdata[cc].initial_position.y)
                > 2)
        {
            cdata[cc].next_position.x = cdata[cc].position.x
                + rnd(2)
                    * ((cdata[cc].position.x > cdata[cc].initial_position.x)
                           * -1
                       + (cdata[cc].position.x < cdata[cc].initial_position.x));
            cdata[cc].next_position.y = cdata[cc].position.y
                + rnd(2)
                    * ((cdata[cc].position.y > cdata[cc].initial_position.y)
                           * -1
                       + (cdata[cc].position.y < cdata[cc].initial_position.y));
        }
        else
        {
            cdata[cc].next_position.x = rnd(3) - 1 + cdata[cc].position.x;
            cdata[cc].next_position.y = rnd(3) - 1 + cdata[cc].position.y;
        }
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            return proc_movement_event();
        }
    }
    return turn_result_t::turn_end;
}



turn_result_t proc_ally_town_training(bool retreat)
{
    if (mdata(6) == 3)
    {
        if (cc < 16)
        {
            if (rnd(100) == 0)
            {
                sell(0) = 0;
                sell(1) = 0;
                for (const auto& cnt : items(cc))
                {
                    if (inv[cnt].number == 0)
                    {
                        continue;
                    }
                    int category = the_item_db[inv[cnt].id]->category;
                    if (category == 77000)
                    {
                        p = inv[cnt].value * inv[cnt].number;
                        sell += inv[cnt].number;
                        sell(1) += p;
                        inv[cnt].number = 0;
                        cdata[cc].gold += p;
                    }
                }
                if (sell != 0)
                {
                    txtef(9);
                    txt(lang(
                        name(cc) + u8"は"s + sell
                            + u8"個のアイテムを売りさばき"s + sell(1)
                            + u8"goldを稼いだ。"s,
                        name(cc) + u8" sells "s + sell + u8" items and earns "s
                            + sell(1) + u8" gold pieces."s));
                }
            }
            if (rnd(100) == 0)
            {
                if (cdata[cc].gold >= cdata[cc].level * 500)
                {
                    cdata[cc].gold -= cdata[cc].level * 500;
                    snd(61);
                    txtef(9);
                    txt(lang(
                        cdatan(0, cc) + u8"は訓練所に通い潜在能力を伸ばした！"s,
                        cdatan(0, cc) + u8" visits a trainer and develops "s
                            + his(cc) + u8" potential!"s));
                    for (int cnt = 0; cnt < 4; ++cnt)
                    {
                        while (1)
                        {
                            if (rnd(4) == 0)
                            {
                                p = rnd(8) + 10;
                            }
                            else
                            {
                                p = rnd(300) + 100;
                            }
                            if (sdata.get(p, cc).original_level == 0)
                            {
                                continue;
                            }
                            modify_potential(cc, p, 4);
                            break;
                        }
                    }
                    refresh_character(cc);
                }
            }
        }
    }
    if (tc == cc)
    {
        cdata[cc].enemy_id = 0;
        return turn_result_t::turn_end;
    }
    if (cdata[cc]._203 <= 0)
    {
        cdata[cc]._205 = cdata[tc].position.x;
        cdata[cc]._206 = cdata[tc].position.y;
        if (retreat || cdata[cc].ai_dist > distance)
        {
            cdata[cc]._205 = cdata[cc].position.x
                + (cdata[cc].position.x - cdata[tc].position.x);
            cdata[cc]._206 = cdata[cc].position.y
                + (cdata[cc].position.y - cdata[tc].position.y);
        }
    }
    else
    {
        --cdata[cc]._203;
    }
    blockedbychara = 0;
    cdata[cc].next_position.x = (cdata[cc]._205 > cdata[cc].position.x)
        - (cdata[cc]._205 < cdata[cc].position.x) + cdata[cc].position.x;
    cdata[cc].next_position.y = (cdata[cc]._206 > cdata[cc].position.y)
        - (cdata[cc]._206 < cdata[cc].position.y) + cdata[cc].position.y;
    x = cdata[cc].next_position.x;
    y = cdata[cc].next_position.y;
    cell_check(x, y);
    if (cellaccess == 1)
    {
        return proc_movement_event();
    }
    if (cellchara != -1)
    {
        tc = cellchara;
        if (relationbetween(cc, tc) == -3)
        {
            cdata[cc].enemy_id = tc;
            cdata[cc].hate += 4;
            return proc_ai_basic();
        }
        else if (
            (cdata[cc].quality > 3 && cdata[cc].level > cdata[tc].level)
            || cdata[tc].is_hung_on_sand_bag())
        {
            if (cdata[cc].enemy_id != tc)
            {
                cell_swap(cc, tc);
                if (is_in_fov(cc))
                {
                    txt(lang(
                        name(cc) + u8"は"s + name(tc) + u8"を押しのけた。"s,
                        name(cc) + u8" displace"s + _s(cc) + u8" "s + name(tc)
                            + u8"."s));
                }
                if (cdata[tc].continuous_action_id == 1)
                {
                    if (cdata[tc].continuous_action_turn > 0)
                    {
                        if (is_in_fov(cc))
                        {
                            txt(lang(
                                name(tc) + u8"は"s + name(cc)
                                    + u8"を睨み付けた。"s,
                                name(tc) + u8" glare"s + _s(tc) + u8" "s
                                    + name(cc) + u8"."s));
                        }
                        rowactend(tc);
                    }
                }
                return turn_result_t::turn_end;
            }
        }
    }
    if (cc > 16)
    {
        if (cdata[cc].quality > 3)
        {
            if (cdata[cc].relationship <= -2)
            {
                if (x >= 0)
                {
                    if (x < mdata(0))
                    {
                        if (y >= 0)
                        {
                            if (y < mdata(1))
                            {
                                if (chipm(7, map(x, y, 0)) & 4)
                                {
                                    if (rnd(4) == 0)
                                    {
                                        map(x, y, 0) = tile_tunnel;
                                        snd(45);
                                        play_animation(14);
                                        spillfrag(x, y, 2);
                                        if (is_in_fov(cc))
                                        {
                                            txt(lang(
                                                name(cc)
                                                    + u8"は壁を破壊した！"s,
                                                name(cc) + u8" crush"s + _s(cc)
                                                    + u8" the wall!"s));
                                        }
                                        return turn_result_t::turn_end;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (std::abs(cdata[cc]._205 - cdata[cc].position.x)
        >= std::abs(cdata[cc]._206 - cdata[cc].position.y))
    {
        {
            int stat = label_2694();
            if (stat == 1)
            {
                return proc_movement_event();
            }
        }
        {
            int stat = label_2695();
            if (stat == 1)
            {
                return proc_movement_event();
            }
        }
    }
    else
    {
        {
            int stat = label_2695();
            if (stat == 1)
            {
                return proc_movement_event();
            }
        }
        {
            int stat = label_2694();
            if (stat == 1)
            {
                return proc_movement_event();
            }
        }
    }
    if (cdata[cc]._203 > 0)
    {
        cdata[cc].next_position.x = rnd(3) - 1 + cdata[cc].position.x;
        cdata[cc].next_position.y = rnd(3) - 1 + cdata[cc].position.y;
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            return proc_movement_event();
        }
    }
    else
    {
        if (blockedbychara == 1)
        {
            cdata[cc]._203 = 3;
        }
        else
        {
            cdata[cc]._203 = 6;
        }
        dir = dir(1 + rnd(2));
        if (dir == 1)
        {
            cdata[cc]._205 = cdata[cc].position.x - 6;
            cdata[cc]._206 = cdata[tc].position.y;
        }
        if (dir == 2)
        {
            cdata[cc]._205 = cdata[cc].position.x + 6;
            cdata[cc]._206 = cdata[tc].position.y;
        }
        if (dir == 3)
        {
            cdata[cc]._206 = cdata[cc].position.y - 6;
            cdata[cc]._205 = cdata[tc].position.x;
        }
        if (dir == 0)
        {
            cdata[cc]._206 = cdata[cc].position.y + 6;
            cdata[cc]._205 = cdata[tc].position.x;
        }
    }
    return turn_result_t::turn_end;
}



int label_2694()
{
    if (cdata[cc]._205 > cdata[cc].position.x)
    {
        if (cdata[cc]._206 > cdata[cc].position.y)
        {
            p = 1;
        }
        else
        {
            p = 0;
        }
        dir(0) = 2;
        dir(1) = 0;
        dir(2) = 3;
        int stat = ai_check();
        if (stat == 1)
        {
            return 1;
        }
    }
    if (cdata[cc]._205 < cdata[cc].position.x)
    {
        if (cdata[cc]._206 < cdata[cc].position.y)
        {
            p = 0;
        }
        else
        {
            p = 1;
        }
        dir(0) = 1;
        dir(1) = 0;
        dir(2) = 3;
        int stat = ai_check();
        if (stat == 1)
        {
            return 1;
        }
    }
    return 0;
}



int label_2695()
{
    if (cdata[cc]._206 > cdata[cc].position.y)
    {
        if (cdata[cc]._205 > cdata[cc].position.x)
        {
            p = 1;
        }
        else
        {
            p = 0;
        }
        dir(0) = 0;
        dir(1) = 1;
        dir(2) = 2;
        int stat = ai_check();
        if (stat == 1)
        {
            return 1;
        }
    }
    if (cdata[cc]._206 < cdata[cc].position.y)
    {
        if (cdata[cc]._205 > cdata[cc].position.x)
        {
            p = 0;
        }
        else
        {
            p = 1;
        }
        dir(0) = 3;
        dir(1) = 1;
        dir(2) = 2;
        int stat = ai_check();
        if (stat == 1)
        {
            return 1;
        }
    }
    return 0;
}



turn_result_t proc_ai_basic()
{
    if (tc == 0)
    {
        pcattacker = cc;
    }
    int act = choice(cdata[cc].normal_actions);
    if (cdata[cc].ai_act_sub_freq != 0)
    {
        if (cdata[cc].ai_act_sub_freq > rnd(100))
        {
            if (!cdata[cc].special_actions.empty())
            {
                act = choice(cdata[cc].special_actions);
            }
            if (act >= -10000 && act < -9995)
            {
                if (distance < 8)
                {
                    if (fov_los(
                            cdata[cc].position.x,
                            cdata[cc].position.y,
                            cdata[tc].position.x,
                            cdata[tc].position.y))
                    {
                        tlocx = cdata[tc].position.x;
                        tlocy = cdata[tc].position.y;
                        int stat = 0;
                        if (act == -9999)
                        {
                            flt();
                            flttypemajor = 52000;
                            stat = itemcreate(
                                cc,
                                isetthrowpotionminor(
                                    rnd(length(isetthrowpotionminor))),
                                -1,
                                -1,
                                0);
                        }
                        if (act == -9998)
                        {
                            flt();
                            flttypemajor = 52000;
                            stat = itemcreate(
                                cc,
                                isetthrowpotionmajor(
                                    rnd(length(isetthrowpotionmajor))),
                                -1,
                                -1,
                                0);
                        }
                        if (act == -9997)
                        {
                            flt();
                            flttypemajor = 52000;
                            stat = itemcreate(
                                cc,
                                isetthrowpotiongreater(
                                    rnd(length(isetthrowpotiongreater))),
                                -1,
                                -1,
                                0);
                        }
                        if (act == -9996)
                        {
                            flt();
                            stat = itemcreate(cc, 698, -1, -1, 0);
                        }
                        if (stat == 1)
                        {
                            return do_throw_command();
                        }
                        return turn_result_t::turn_end;
                    }
                }
            }
        }
    }
    if (act == -4)
    {
        cdata[cc].next_position.x = rnd(3) - 1 + cdata[cc].position.x;
        cdata[cc].next_position.y = rnd(3) - 1 + cdata[cc].position.y;
        cell_check(cdata[cc].next_position.x, cdata[cc].next_position.y);
        if (cellaccess == 1)
        {
            return proc_movement_event();
        }
        else
        {
            return turn_result_t::turn_end;
        }
    }
    if (act == -2)
    {
        if (distance < 6)
        {
            if (fov_los(
                    cdata[cc].position.x,
                    cdata[cc].position.y,
                    cdata[tc].position.x,
                    cdata[tc].position.y))
            {
                int stat = can_do_ranged_attack();
                if (stat == 1)
                {
                    label_2217();
                    return turn_result_t::turn_end;
                }
            }
        }
    }
    if (act >= 400)
    {
        if (act < 467)
        {
            efid = act;
            if (cdata[cc].mp < cdata[cc].max_mp / 7)
            {
                if (rnd(3) || cc < 16 || cdata[cc].quality >= 4
                    || cdata[cc].cures_mp_frequently())
                {
                    cdata[cc].mp += cdata[cc].level / 4 + 5;
                    return turn_result_t::turn_end;
                }
            }
            npccostmp = 1;
            int stat = label_2167();
            if (stat == 1)
            {
                return turn_result_t::turn_end;
            }
        }
    }
    if (act >= 600)
    {
        efid = act;
        int stat = label_2174();
        if (stat == 1)
        {
            return turn_result_t::turn_end;
        }
    }
    if (act == -3)
    {
        if (distance == 1)
        {
            try_to_melee_attack();
        }
        else if (rnd(3) == 0 || cc < 16)
        {
            if (distance < 6)
            {
                if (fov_los(
                        cdata[cc].position.x,
                        cdata[cc].position.y,
                        cdata[tc].position.x,
                        cdata[tc].position.y))
                {
                    int stat = can_do_ranged_attack();
                    if (stat == 1)
                    {
                        label_2217();
                        return turn_result_t::turn_end;
                    }
                }
            }
        }
        return turn_result_t::turn_end;
    }
    if (distance == 1)
    {
        try_to_melee_attack();
        return turn_result_t::turn_end;
    }
    if (distance < 6)
    {
        if (fov_los(
                cdata[cc].position.x,
                cdata[cc].position.y,
                cdata[tc].position.x,
                cdata[tc].position.y))
        {
            int stat = can_do_ranged_attack();
            if (stat == 1)
            {
                label_2217();
                return turn_result_t::turn_end;
            }
        }
    }
    if (cdata[cc].ai_dist <= distance)
    {
        if (rnd(3) == 0)
        {
            return turn_result_t::turn_end;
        }
    }
    if (rnd(5) == 0)
    {
        --cdata[cc].hate;
    }
    if (rnd(100) < cdata[cc].ai_move)
    {
        return proc_ally_town_training();
    }
    else
    {
        return turn_result_t::turn_end;
    }
}



void show_quick_menu()
{
    page = quickpage;
    listmax = 0;
    snd(5);
    cs = -1;
label_2698:
    listmax = 0;
    if (page == 3)
    {
        page = 2;
    }
    if (page == -1)
    {
        page = 0;
    }
    if (page == 0)
    {
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"ヘルプ"s, u8"Help"s);
        listn(1, listmax) = key_help;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"ログ"s, u8"Log"s);
        listn(1, listmax) = key_msglog;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"シート"s, u8"Chara"s);
        listn(1, listmax) = key_charainfo;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"日誌"s, u8"Journal"s);
        listn(1, listmax) = key_journal;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
    }
    if (page == 1)
    {
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"装備"s, u8"Wear"s);
        listn(1, listmax) = key_wear;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"休息"s, u8"Rest"s);
        listn(1, listmax) = key_rest;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"魔法"s, u8"Spell"s);
        listn(1, listmax) = key_cast;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"技能"s, u8"Skill"s);
        listn(1, listmax) = key_skill;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"射撃"s, u8"Fire"s);
        listn(1, listmax) = key_fire;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"掘る"s, u8"Dig"s);
        listn(1, listmax) = key_dig;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
    }
    if (page == 2)
    {
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"祈る"s, u8"Pray"s);
        listn(1, listmax) = key_pray;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"装填"s, u8"Ammo"s);
        listn(1, listmax) = key_ammo;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"干渉"s, u8"Interact"s);
        listn(1, listmax) = key_interact;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = lang(u8"体当り"s, u8"Bash"s);
        listn(1, listmax) = key_bash;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
        list(0, listmax) = listmax;
        listn(0, listmax) = "";
        listn(1, listmax) = u8"aaa"s;
        ++listmax;
    }
    s(0) = lang(u8"情報"s, u8"Info"s);
    s(1) = lang(u8"行動"s, u8"Action"s);
    s(2) = lang(u8"特殊"s, u8"Etc"s);
    s(3) = u8"null"s;
    p = page - 1;
    if (p == -1)
    {
        p = 3;
    }
    listn(0, 0) = s(p);
    listn(0, 4) = s(page);
    p = page + 1;
    if (p == 3)
    {
        p = 3;
    }
    listn(0, 8) = s(p);
    t = 0;
label_2699_internal:
    font(12 + sizefix - en * 2);
    tx = 50;
    ty = windowh - 255;
    x(0) = 25;
    x(1) = 50;
    x(2) = 50;
    x(3) = 100;
    x(4) = 100;
    x(5) = 100;
    x(6) = 150;
    x(7) = 150;
    x(8) = 175;
    y(0) = 50;
    y(1) = 15;
    y(2) = 85;
    y(3) = 0;
    y(4) = 50;
    y(5) = 100;
    y(6) = 15;
    y(7) = 85;
    y(8) = 50;
    s = u8"○コマンド"s;
    gmode(2);
    for (int cnt = 0; cnt < 9; ++cnt)
    {
        p = cnt;
        if (listn(0, p) == u8"null"s)
        {
            continue;
        }
        pos(x(cnt) + tx, y(cnt) + ty);
        if (cnt == 0 || cnt == 4 || cnt == 8)
        {
            gcopy(3, 360, 192, 48, 48);
        }
        else
        {
            gcopy(3, 360, 144, 48, 48);
        }
        gmode(
            5 - 1,
            -1,
            (t + cnt) % 10 * (t + cnt) % 10 * 12 * ((t + cnt) % 50 < 10));
        if (cs == cnt)
        {
            gmode(5, -1, -1, 140);
        }
        pos(x(cnt) + tx, y(cnt) + ty);
        if (cnt == 0 || cnt == 4 || cnt == 8)
        {
            gcopy(3, 360, 192, 48, 48);
        }
        else
        {
            gcopy(3, 360, 144, 48, 48);
        }
        gmode(2);
        s = listn(0, p);
        pos(x(cnt) + tx + 25 - strlen_u(s) * 3, y(cnt) + ty + 19);
        bmes(s, 255, 255, 255);
    }
    ++t;
    redraw();
    await(config::instance().wait1);
    key_check(2);
    if (key == key_north)
    {
        key = listn(1, 3);
        cs = 3;
    }
    if (key == key_south)
    {
        key = listn(1, 5);
        cs = 5;
    }
    if (key == key_west)
    {
        cs = 0;
    }
    if (key == key_east)
    {
        cs = 8;
    }
    if (key == key_northwest)
    {
        key = listn(1, 1);
        cs = 1;
    }
    if (key == key_northeast)
    {
        key = listn(1, 6);
        cs = 6;
    }
    if (key == key_southwest)
    {
        key = listn(1, 2);
        cs = 2;
    }
    if (key == key_southeast)
    {
        key = listn(1, 7);
        cs = 7;
    }
    if (key == key_cancel)
    {
        cs = -1;
        snd(5);
        key = "";
        goto label_2700_internal;
        return;
    }
    if (key != ""s)
    {
        if (cs == -1)
        {
            snd(5);
            key = "";
            goto label_2700_internal;
            return;
        }
        if (key == key_enter)
        {
            key = listn(1, cs);
            goto label_2700_internal;
            return;
        }
    }
    if (key == ""s || cs == 1 || cs == 6 || cs == 2 || cs == 7)
    {
        if (cs != -1)
        {
            key = listn(1, cs);
            goto label_2700_internal;
            return;
        }
    }
    goto label_2699_internal;
label_2700_internal:
    if (cs == 0 || key == key_northeast)
    {
        cs = -1;
        snd(5);
        --page;
        screenupdate = -1;
        update_screen();
        goto label_2698;
    }
    if (cs == 8 || key == key_northwest)
    {
        cs = -1;
        snd(5);
        ++page;
        screenupdate = -1;
        update_screen();
        goto label_2698;
    }
    quickpage = page;
    cs = 0;
    update_screen();
    quickkeywait = 1;
    return;
}



void show_ex_help()
{
    gsel(3);
    pos(960, 96);
    picload(filesystem::dir::graphic() / u8"deco_help.bmp", 1);
    gsel(0);
    page = 0;
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{(filesystem::dir::data() / u8"exhelp.txt").native(),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    p = instr(buff, 0, u8"%"s + ghelp + u8","s + lang(u8"JP"s, u8"EN"s));
    if (p == -1)
    {
        dialog(
            u8"help index not found %"s + ghelp + u8","s
            + lang(u8"JP"s, u8"EN"s));
        return;
    }
    buff = strmid(buff, p, instr(buff, p, u8"%END"s));
    notedel(0);
    if (noteinfo() == 0)
    {
        return;
    }
    snd(53);
    while (1)
    {
        gmode(2);
        dx = 480;
        dy = 175;
        window2((windoww - dx) / 2 + inf_screenx, winposy(dy), dx, dy, 4, 0);
        wx = (windoww - dx) / 2 + inf_screenx;
        wy = winposy(dy);
        window2(
            (windoww - 325) / 2 + inf_screenx, winposy(dy) + 6, 325, 32, 0, 1);
        pos(wx + 5, wy + 4);
        gcopy(3, 960, 96, 48, 48);
        pos(wx + dx - 55, wy + 4);
        gcopy(3, 960, 96, 48, 48);
        pos(wx + 10, wy + 42);
        gcopy(3, 960, 144, 96, 120);
        font(16 - en * 2, snail::font_t::style_t::bold);
        pos(wx + 142, wy + 13);
        color(80, 60, 50);
        bmes(
            lang(u8"- ノルンの冒険ガイド -"s, u8"- Norne's travel guide -"s),
            255,
            245,
            235);
        color(0, 0, 0);
        tx = wx + 120;
        ty = wy + 55;
        font(15 - en * 2);
        {
            int y = ty;
            int cnt = 0;
            for (int cnt_end = cnt + (10); cnt < cnt_end; ++cnt)
            {
                noteget(s, page);
                ++page;
                if (page > noteinfo() || s == ""s)
                {
                    break;
                }
                color(30, 30, 30);
                const auto ny = gmes(s, tx, y, 330, {30, 30, 30}, true).y;
                color(0, 0, 0);
                y = ny;
            }
        }
        gmode(2);
        redraw();
        help_halt();
        if (page >= noteinfo())
        {
            break;
        }
    }
    return;
}



void label_2702()
{
    if (jp)
    {
        return;
    }
    for (int cnt = 0; cnt < 24; ++cnt)
    {
        if (!strutil::contains(s(cnt), u8"("))
        {
            continue;
        }
        s(cnt) = cnven(strmid(
            s(cnt),
            instr(s(cnt), 0, u8"("s) + 1,
            instr(s(cnt), 0, u8")"s) - instr(s(cnt), 0, u8"("s) - 1));
    }
    return;
}



void show_game_help()
{
    snd(26);
    listmax = 0;
    page = 0;
    pagesize = 18;
    cs = 0;
    cc = 0;
    cs_bk = -1;
    page_bk = 0;
    cs_bk2 = 0;
    if (mode != 1)
    {
        gsel(4);
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            pos(cnt % 4 * 180, cnt / 4 * 300);
            picload(
                filesystem::dir::graphic() / (u8"g"s + (cnt + 1) + u8".bmp"),
                1);
        }
        gsel(0);
    }
    else
    {
        cs = 3;
        cs_bk2 = cs;
    }
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{(filesystem::dir::data()
                          / lang(u8"manual_JP.txt", u8"manual_ENG.txt"))
                             .native(),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    list(0, 0) = 0;
    listn(0, 0) = lang(u8"キーの一覧"s, u8"Key List"s);
    ++listmax;
    for (int cnt = 0, cnt_end = (noteinfo()); cnt < cnt_end; ++cnt)
    {
        noteget(q, cnt);
        p = instr(q, 0, u8"{}"s);
        if (p != -1)
        {
            list(0, listmax) = cnt + 1;
            listn(0, listmax) = strmid(q, instr(q, 0, u8"}"s) + 2, 999);
            ++listmax;
        }
    }
    windowshadow = 1;
label_2704_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
label_2705_internal:
    s(0) = u8"Elona In-Game Help"s;
    s(1) = strhint2 + strhint3b;
    if (mode == 1)
    {
        display_window(
            (windoww - 780) / 2 + inf_screenx, winposy(496, 1), 780, 496);
    }
    else
    {
        display_window(
            (windoww - 780) / 2 + inf_screenx, winposy(496) - 24, 780, 496);
    }
    display_topic(lang(u8"項目"s, u8"Topic"s), wx + 34, wy + 36);
    if (mode == 1)
    {
        p = 2;
    }
    else
    {
        p = 4;
    }
    cmbg = page % 5;
    x = ww / 5 * 2;
    y = wh - 80;
    gmode(4, 180, 300, 50);
    pos(wx + ww / 4, wy + wh / 2);
    grotate(p, cmbg % 4 * 180, cmbg / 4 % 2 * 300, 0, x, y);
    gmode(2);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        display_key(wx + 38, wy + 66 + cnt * 19 - 2, cnt);
    }
    if (cs_bk2 == 0 && page_bk == 0)
    {
        x = wx + 188;
        y = wy + 6;
        display_topic(
            lang(u8"アイテムに関するキー"s, u8"Item Keys"s), x + 18, y + 30);
        display_topic(
            lang(u8"行動に関するキー"s, u8"Action Keys"s), x + 18, y + 142);
        display_topic(
            lang(u8"情報に関するキー"s, u8"Information Keys"s),
            x + 18,
            y + 256);
        display_topic(
            lang(u8"その他のキー"s, u8"Other Keys"s), x + 18, y + 328);
        s(0) = u8"アイテムを取る(get)"s;
        s(1) = key_get;
        s(2) = u8"アイテムを置く(drop)"s;
        s(3) = key_drop;
        s(4) = u8"アイテムを調べる(examine)"s;
        s(5) = key_inventory;
        s(6) = u8"装備する(wear,wield)"s;
        s(7) = key_wear;
        s(8) = u8"食べる(eat)"s;
        s(9) = key_eat;
        s(10) = u8"飲む(quaff)"s;
        s(11) = key_drink;
        s(12) = u8"読む(read)"s;
        s(13) = key_read;
        s(14) = u8"振る(zap)"s;
        s(15) = key_zap;
        s(16) = u8"道具を使う(tool)"s;
        s(17) = key_use;
        s(18) = u8"調合(blend)"s;
        s(19) = key_dip;
        s(20) = u8"投げる(throw)"s;
        s(21) = key_throw;
        s(22) = u8"装填(ammo)"s;
        s(23) = key_ammo;
        label_2702();
        for (int cnt = 0; cnt < 12; ++cnt)
        {
            font(13 - en * 2);
            pos(x + 38 + cnt / 6 * 290, y + 58 + cnt % 6 * 14);
            mes(s(cnt * 2));
            font(15 - en * 2);
            pos(x + 248 + cnt / 6 * 290, y + 57 + cnt % 6 * 14);
            mes(s(cnt * 2 + 1));
        }
        s(0) = u8"周囲を調べる(search)"s;
        s(1) = key_search;
        s(2) = u8"魔法を唱える(cast)"s;
        s(3) = key_cast;
        s(4) = u8"干渉する(interact)"s;
        s(5) = key_interact;
        s(6) = u8"階段を降りる,入る(go down)"s;
        s(7) = key_godown;
        s(8) = u8"階段を昇る(go up)"s;
        s(9) = key_goup;
        s(10) = u8"その場で待機(wait)"s;
        s(11) = key_wait;
        s(12) = u8"ターゲットを指定(target)"s;
        s(13) = key_target;
        s(14) = u8"射撃する(fire)"s;
        s(15) = key_fire;
        s(16) = u8"能力を使う(apply)"s;
        s(17) = key_skill;
        s(18) = u8"体当たりする(bash)"s;
        s(19) = key_bash;
        s(20) = u8"穴を掘る(dig)"s;
        s(21) = key_dig;
        s(22) = u8"鍵を開ける(open)"s;
        s(23) = key_open;
        s(24) = "";
        s(25) = "";
        label_2702();
        for (int cnt = 0; cnt < 12; ++cnt)
        {
            font(13 - en * 2);
            pos(x + 38 + cnt / 6 * 290, y + 170 + cnt % 6 * 14);
            mes(s(cnt * 2));
            font(15 - en * 2);
            pos(x + 248 + cnt / 6 * 290, y + 169 + cnt % 6 * 14);
            mes(s(cnt * 2 + 1));
        }
        s(0) = u8"能力・スキル情報(chara)"s;
        s(1) = key_charainfo;
        s(2) = u8"冒険日誌を表示(journal)"s;
        s(3) = key_journal;
        s(4) = u8"ヘルプを表示(help)"s;
        s(5) = key_help;
        s(6) = u8"メッセージログを表示(log)"s;
        s(7) = key_msglog;
        s(8) = u8"マテリアル表示(material)"s;
        s(9) = key_material;
        s(10) = u8"特徴の表示(feat)"s;
        s(11) = key_trait;
        label_2702();
        for (int cnt = 0; cnt < 6; ++cnt)
        {
            font(13 - en * 2);
            pos(x + 38 + cnt / 3 * 290, y + 284 + cnt % 3 * 14);
            mes(s(cnt * 2));
            font(15 - en * 2);
            pos(x + 248 + cnt / 3 * 290, y + 283 + cnt % 3 * 14);
            mes(s(cnt * 2 + 1));
        }
        s(0) = u8"セーブして終了(save)"s;
        s(1) = key_save;
        s(2) = u8"神に祈る(pray)"s;
        s(3) = key_pray;
        s(4) = u8"神に捧げる(offer)"s;
        s(5) = key_offer;
        s(6) = u8"ドアを閉める(close)"s;
        s(7) = key_close;
        s(8) = u8"与える(give)"s;
        s(9) = key_give;
        s(10) = "";
        s(11) = "";
        s(12) = "";
        label_2702();
        for (int cnt = 0; cnt < 6; ++cnt)
        {
            font(13 - en * 2);
            pos(x + 38 + cnt / 3 * 290, y + 356 + cnt % 3 * 14);
            mes(s(cnt * 2));
            font(15 - en * 2);
            pos(x + 248 + cnt / 3 * 290, y + 355 + cnt % 3 * 14);
            mes(s(cnt * 2 + 1));
        }
        font(13 - en * 2);
        pos(x + 38, y + 408);
        mes(lang(
            u8"F9 インタフェース非表示  F11 キャラ情報の出力  F12 コンソールの表示"s,
            u8"F9 Hide interface  F11 Export chara sheet  F12 Console"s));
    }
    else
    {
        s(1) = listn(0, pagesize * page_bk + cs_bk2);
        display_topic(s(1), wx + 206, wy + 36);
        font(14 - en * 2);
        p = list(0, pagesize * page_bk + cs_bk2);
        {
            int y = wy + 60;
            int cnt = p;
            for (int cnt_end = cnt + (noteinfo() - p); cnt < cnt_end; ++cnt)
            {
                noteget(s1, cnt);
                i = instr(s1, 0, u8"{"s);
                if (i != -1)
                {
                    break;
                }
                const auto ny =
                    gmes(s1, wx + 216, y, 510, {30, 30, 30}, false).y;
                y = ny;
            }
        }
    }
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        s = listn(0, p);
        cs_list(cs == cnt, s, wx + 66, wy + 66 + cnt * 19 - 1, 0);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, cs = i);
    if (p != -1)
    {
        snd(20);
        page_bk = page;
        cs_bk2 = cs;
        goto label_2704_internal;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(1);
            ++page;
            goto label_2704_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(1);
            --page;
            goto label_2704_internal;
        }
    }
    if (key == key_cancel)
    {
        return;
    }
    goto label_2705_internal;
}



turn_result_t show_chat_history()
{
    curmenu = 2;
    key_list(0) = key_enter;
    keyrange = 0;
    pagesize = 0;
    gsel(7);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"ie_scroll.bmp");
    gsel(0);
    windowshadow = 1;
    snd(92);
    drawmenu(2);
    ww = clamp(windoww - 90, windoww - 90, 720);
    wh = 440;
    wx = (windoww - ww) / 2 + inf_screenx;
    wy = winposy(wh);
    windowanime(wx, wy, ww, wh, 10, 4);
    s = lang(u8"何かキーを押すと閉じる"s, u8"Hit any key to close"s);
    showscroll(s, wx, wy, ww, wh);
    net_read();
    buff = "";
    notesel(buff);
    header = instr(netbuf, 0, u8"<!--START-->"s) + 13;
    while (1)
    {
        s = "";
        tail = instr(netbuf, header, u8"%"s);
        if (tail == -1)
        {
            break;
        }
        header += tail + 1;
        tail = instr(netbuf, header, u8"%"s);
        s += strmid(netbuf, header, tail) + u8"  "s;
        header += tail + 1;
        tail = instr(netbuf, header, u8"%"s);
        s += strmid(netbuf, header + 4, tail - 4);
        header += tail + 1;
        tail = instr(netbuf, header, u8"%"s);
        header += tail + 2;
        s += u8"\n"s;
        buff += ""s + s;
    }
    font(13 - en * 2);
    i = 0;
    for (int cnt = 0; cnt < 20; ++cnt)
    {
        if (i >= 20)
        {
            break;
        }
        noteget(s, cnt);
        if (en)
        {
            cnv_str(s, u8"&quot;"s, u8"\""s);
        }
        if (s == ""s)
        {
            if (cnt == 0)
            {
                s = u8"No new messages received."s;
            }
            break;
        }
        i += talk_conv(s, (ww - 110 - en * 50) / 7);
        pos(wx + 48, (19 - i) * 16 + wy + 48);
        color(30, 20, 10);
        mes(s);
        color(0, 0, 0);
        ++i;
    }
    redraw();
label_2708_internal:
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    return turn_result_t::show_message_log;
                }
                if (curmenu == 1)
                {
                    return turn_result_t::menu_journal;
                }
                if (curmenu == 2)
                {
                    return turn_result_t::show_chat_history;
                }
            }
        }
    }
    if (key != ""s)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_2708_internal;
}



turn_result_t show_message_log()
{
    curmenu = 0;
    windowshadow = 1;
    key_list(0) = key_enter;
    keyrange = 0;
    pagesize = 0;
    wx = inf_msgx - 2;
    wy = inf_msgy - (inf_maxlog - 3) * inf_msgspace - 1;
    ww = windoww - inf_msgx + 6;
    wh(0) = (inf_maxlog - 3) * inf_msgspace;
    wh(1) = 1;
    wh(2) = -1;
    snd(93);
    showtitle(
        lang(u8"過去のメッセージ"s, u8"Log"s),
        lang(u8"何かキーを押すと閉じる"s, u8"Hit any key to close"s),
        236,
        1);
    drawmenu(2);
    windowanimecorner(wx, wy, ww, wh, 8, 4);

    p = (windoww - inf_msgx) / 192;
    window2(wx, wy, ww, wh, 1, -1);
    for (int cnt = 0, cnt_end = (inf_maxlog - 3); cnt < cnt_end; ++cnt)
    {
        int cnt2 = cnt;
        pos(cnt);
        for (int cnt = 0, cnt_end = (p + 1); cnt < cnt_end; ++cnt)
        {
            if (cnt == p)
            {
                x = (windoww - inf_msgx) % 192;
            }
            else
            {
                x = 192;
            }
            pos(cnt * 192 + inf_msgx, inf_msgy - (cnt2 + 1) * inf_msgspace);
            gcopy(3, 496, 536 + cnt2 % 4 * inf_msgspace, x, inf_msgspace);
        }
    }
    for (int cnt = 0, cnt_end = (p + 1); cnt < cnt_end; ++cnt)
    {
        if (cnt == p)
        {
            sx = (windoww - inf_msgx) % 192;
        }
        else
        {
            sx = 192;
        }
        pos(cnt * 192 + inf_msgx, inf_msgy);
        gcopy(3, 496, 528, sx, 6);
    }
    gsel(4);
    gmode(0);
    boxf();
    for (int cnt = 0, cnt_end = (inf_maxlog - 3); cnt < cnt_end; ++cnt)
    {
        p = msgline - cnt - 3;
        if (p < 0)
        {
            p += inf_maxlog;
        }
        else if (p >= inf_maxlog)
        {
            p -= inf_maxlog;
        }
        if (p < 0)
        {
            continue;
        }
        pos(inf_msgx, inf_msgy - cnt * inf_msgspace);
        gcopy(8, 0, p * inf_msgspace, windoww - inf_msgx, inf_msgspace);
    }
    gsel(0);
    gmode(2);
    pos(0, -3);
    gcopy(4, 0, 0, windoww, inf_msgy);

    redraw();
label_2711_internal:
    await(config::instance().wait1);
    key_check();
    cursor_check();
    if (menucycle == 1)
    {
        if (key == key_next || key == key_prev)
        {
            p = curmenu;
            if (key == key_next)
            {
                ++curmenu;
                if (curmenu > 2)
                {
                    curmenu = 0;
                }
            }
            if (key == key_prev)
            {
                --curmenu;
                if (curmenu < 0)
                {
                    curmenu = 2;
                }
            }
            key = "";
            if (p != curmenu)
            {
                screenupdate = -1;
                update_screen();
                if (curmenu == 0)
                {
                    return turn_result_t::show_message_log;
                }
                if (curmenu == 1)
                {
                    return turn_result_t::menu_journal;
                }
                if (curmenu == 2)
                {
                    return turn_result_t::show_chat_history;
                }
            }
        }
    }
    if (key != ""s)
    {
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_2711_internal;
}



void initialize_jkey()
{
    SDIM3(jkey, 2, 12);
    return;
}



void label_2720()
{
    notesel(headtemp);
    noteget(s, 1);
    username = ""s + s;
    noteget(s, 5);
    usermsg = ""s + s;
    noteget(s, 6);
    userrelation = elona::stoi(s(0));
    return;
}



int cnvjkey(const std::string& prm_1092)
{
    int p_at_m198 = 0;
    p_at_m198 = -2;
    for (int cnt = 0; cnt < 12; ++cnt)
    {
        if (prm_1092 == jkey(cnt))
        {
            p_at_m198 = cnt;
            break;
        }
    }
    return p_at_m198 + 1;
}



turn_result_t play_scene()
{
    snd(59);
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"book.bmp", 1);
    gsel(7);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"g1.bmp", 0);
    gsel(0);
    listmax = 0;
    page = 0;
    pagesize = 12;
    cs = 0;
    cc = 0;
    notesel(buff);
    {
        buff(0).clear();
        std::ifstream in{lang(u8"scene1.hsp"s, u8"scene2.hsp"s),
                         std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    p = 0;
    for (int cnt = 0; cnt < 200; ++cnt)
    {
        s = u8"{"s + cnt + u8"}"s;
        p = instr(buff, 0, s);
        if (p != -1)
        {
            if (cnt <= gdata_played_scene)
            {
                list(0, listmax) = cnt;
                list(1, listmax) = p;
                ++listmax;
            }
        }
    }
    txt(lang(
        u8"どのシーンを再生する？"s, u8"Which scene do you want to replay?"s));
label_2728_internal:
    cs_bk = -1;
    pagemax = (listmax - 1) / pagesize;
    if (page < 0)
    {
        page = pagemax;
    }
    else if (page > pagemax)
    {
        page = 0;
    }
    wx = (windoww - 720) / 2 + inf_screenx;
    wy = winposy(468);
label_2729_internal:
    pos(wx, wy);
    gcopy(4, 0, 0, 736, 448);
    x = 240;
    y = 320;
    gmode(4, 180, 300, 100);
    pos(wx + 190, wy + 220);
    grotate(7, 0, 0, 0, x, y);
    gmode(2);
    keyrange = 0;
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        key_list(cnt) = key_select(cnt);
        ++keyrange;
        display_key(wx + 394, wy + 91 + cnt * 22 - 2, cnt);
    }
    font(
        12 - en * 2,
        snail::font_t::style_t::italic | snail::font_t::style_t::underline);
    pos(wx + 90, wy + 50);
    mes(u8"Elona - Scene playback"s);
    font(12 - en * 2);
    pos(wx + 390, wy + 50);
    mes(lang(
        u8"アンロックされたシーンを再生できます。\nシーンNoは連続していません。"s,
        u8"You can play the unlocked scenes."s));
    font(14 - en * 2);
    cs_listbk();
    for (int cnt = 0, cnt_end = (pagesize); cnt < cnt_end; ++cnt)
    {
        p = pagesize * page + cnt;
        if (p >= listmax)
        {
            break;
        }
        i = list(0, p);
        cs_list(
            cs == cnt,
            lang(u8"シーン No."s, u8"Scene No. "s) + i,
            wx + 424,
            wy + 91 + cnt * 22 - 1);
    }
    font(12 - en * 2, snail::font_t::style_t::bold);
    pos(wx + 500, wy + 375);
    mes(u8"- "s + (page + 1) + u8" -"s);
    if (page < pagemax)
    {
        pos(wx + 590, wy + 375);
        mes(u8"(more)"s);
    }
    if (keyrange != 0)
    {
        cs_bk = cs;
    }
    redraw();
    await(config::instance().wait1);
    key_check();
    cursor_check();
    ELONA_GET_SELECTED_ITEM(p, 0);
    if (p != -1)
    {
        sceneid = p;
        do_play_scene();
        screenupdate = -1;
        update_entire_screen();
        txtnew();
        txt(lang(u8"シーンの再生を終えた。"s, u8"The scene has been played."s));
        return turn_result_t::play_scene;
    }
    if (key == key_pageup)
    {
        if (pagemax != 0)
        {
            snd(71);
            ++page;
            goto label_2728_internal;
        }
    }
    if (key == key_pagedown)
    {
        if (pagemax != 0)
        {
            snd(71);
            --page;
            goto label_2728_internal;
        }
    }
    if (key == key_cancel || key == key_enter)
    {
        play_music();
        update_screen();
        return turn_result_t::pc_turn_user_error;
    }
    goto label_2729_internal;
}


bool turn_wrapper()
{
    bool finished = false;
    turn_result_t result = turn_begin();
    while (!finished)
    {
        switch (result)
        {
            // Turn lifecycle

        case turn_result_t::turn_begin:
            result = turn_begin();
            break;
        case turn_result_t::turn_end:
            result = turn_end();
            break;
        case turn_result_t::pass_one_turn:
            result = pass_turns(true);
            break;
        case turn_result_t::pass_one_turn_freeze_time:
            result = pass_turns(false);
            break;
        case turn_result_t::pc_turn:
            result = pc_turn();
            break;
        case turn_result_t::npc_turn:
            result = npc_turn();
            break;
        case turn_result_t::pc_turn_user_error:
            result = pc_turn(false);
            break;
        case turn_result_t::pc_died:
            result = pc_died();
            break;
        case turn_result_t::initialize_map:
            result = initialize_map();
            break;
        case turn_result_t::exit_map:
            result = exit_map();
            break;
        case turn_result_t::play_scene:
            result = play_scene();
            break;
        case turn_result_t::finish_elona:
            finish_elona();
            finished = true;
            break;

            // Menus that don't return success status

        case turn_result_t::show_chat_history:
            result = show_chat_history();
            break;
        case turn_result_t::show_message_log:
            result = show_message_log();
            break;
        case turn_result_t::show_house_board:
            result = show_house_board();
            break;
        case turn_result_t::show_quest_board:
            result = show_quest_board();
            break;
        case turn_result_t::show_skill_list:
            result = show_skill_list();
            break;
        case turn_result_t::show_spell_list:
            result = show_spell_list();
            break;

            // Menus with a success status

        case turn_result_t::menu_journal:
            result = menu_journal().turn_result;
            break;
        case turn_result_t::menu_materials:
            result = menu_materials().turn_result;
            break;
        case turn_result_t::menu_character_sheet:
            result = menu_character_sheet().turn_result;
            break;
        case turn_result_t::menu_equipment:
            result = menu_equipment().turn_result;
            break;
        case turn_result_t::menu_feats:
            result = menu_feats().turn_result;
            break;
        case turn_result_t::ctrl_inventory:
            result = ctrl_inventory().turn_result;
            break;

        case turn_result_t::all_turns_finished:
            result = turn_result_t::turn_begin;
            break;
        case turn_result_t::none:
        default:
            assert(0);
            break;
        }
    }
    return finished;
}

turn_result_t pass_turns(bool time)
{
    bool finished = false;
    turn_result_t result = pass_one_turn(time);
    while (!finished)
    {
        switch (result)
        {
            case turn_result_t::all_turns_finished:
                finished = true;
                break;
            case turn_result_t::pass_one_turn:
                time = true;
                break;
            case turn_result_t::pass_one_turn_freeze_time:
                time = false;
                break;
            default:
                return result;
        }
        result = pass_one_turn(time);
    }
    return turn_result_t::all_turns_finished;
}

turn_result_t turn_begin()
{
    int turncost = 0;
    int spd = 0;
    sound = 0;
    ct = 0;
    for (int cnt = 0; cnt < 200; ++cnt)
    {
        if (mef(0, cnt) == 0)
        {
            break;
        }
        if (mef(0, cnt) == 5)
        {
            if (mdata(14) == 2)
            {
                if (mdata(6) != 1)
                {
                    if (gdata_weather == 3 || gdata_weather == 4)
                    {
                        delmef(cnt);
                        continue;
                    }
                    dx = mef(2, cnt);
                    dy = mef(3, cnt);
                    i = mef(6, cnt);
                    p = 0;
                    if (rnd(35) == 0)
                    {
                        p = 3;
                        if (dist(
                                dx,
                                dy,
                                cdata[0].position.x,
                                cdata[0].position.y)
                            < 6)
                        {
                            sound = 6;
                        }
                    }
                    for (int cnt = 0, cnt_end = (p); cnt < cnt_end; ++cnt)
                    {
                        x = rnd(2) + dx - rnd(2);
                        y = rnd(2) + dy - rnd(2);
                        if (x < 0 || y < 0 || x >= mdata(0) || y >= mdata(1))
                        {
                            f = 0;
                            continue;
                        }
                        if (chipm(7, map(x, y, 0)) & 4)
                        {
                            map(x, y, 0) = 37;
                            cnt = 0 - 1;
                            continue;
                        }
                        addmef(x, y, 5, 24, rnd(15) + 20, 50, i);
                        mapitem_fire(x, y);
                    }
                }
            }
        }
        if (mef(0, cnt) == 7)
        {
            txtef(3);
            txt(lang(u8" *"s, u8"*"s) + mef(4, cnt) + lang(u8"* "s, u8"*"s));
        }
        if (mef(4, cnt) != -1)
        {
            --mef(4, cnt);
            if (mef(4, cnt) == 0)
            {
                delmef(cnt);
            }
        }
    }
    if (sound != 0)
    {
        snd(sound);
    }
    gspd = cdata[0].current_speed * (100 + cdata[0].speed_percentage) / 100;
    if (gspd < 10)
    {
        gspd = 10;
    }
    turncost = (mdata(9) - cdata[0].turn_cost) / gspd + 1;
    if (evnum != 0)
    {
        evproc = 1;
        proc_event();
        evproc = 0;
        --evnum;
        evlist(evnum) = 0;
        if (chatteleport == 1)
        {
            chatteleport = 0;
            return turn_result_t::exit_map;
        }
        return turn_result_t::turn_begin;
    }
    if (cdata[0].state != 1)
    {
        return turn_result_t::pc_died;
    }

    bool update_turn_cost = true;
    if (mdata(6) == 1)
    {
        if (cdata[0].continuous_action_turn > 2)
        {
            cdata[0].turn_cost = mdata(9);
            update_turn_cost = false;
        }
    }
    if (update_turn_cost)
    {
        for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
        {
            if (cdata[cnt].state != 1)
            {
                continue;
            }
            spd = cdata[cnt].current_speed * (100 + cdata[cnt].speed_percentage)
                / 100;
            if (spd < 10)
            {
                spd = 10;
            }
            cdata[cnt].turn_cost += spd * turncost;
        }
    }

    gdata_second += turncost / 5 + 1;
    if (gdata_second >= 60)
    {
        ++gdata_play_turns;
        cc = 0;
        if (gdata_play_turns % 20 == 0)
        {
            monster_respawn();
        }
        if (gdata_play_turns % 10 == 1)
        {
            label_1580();
        }
        gdata_minute += gdata_second / 60;
        if (gdata_left_minutes_of_executing_quest > 0)
        {
            gdata_left_minutes_of_executing_quest -= gdata_second / 60;
            if (gdata(87) > gdata_left_minutes_of_executing_quest / 10)
            {
                txtef(9);
                txt(lang(
                    u8"クエスト[残り"s
                        + (gdata_left_minutes_of_executing_quest + 1)
                        + u8"分]"s,
                    ""s + (gdata_left_minutes_of_executing_quest + 1)
                        + u8" min left for the quest."s));
                gdata(87) = gdata_left_minutes_of_executing_quest / 10;
            }
            if (gdata_left_minutes_of_executing_quest <= 0)
            {
                gdata_left_minutes_of_executing_quest = 0;
                evadd(14);
            }
        }
        gdata_second = gdata_second % 60;
        if (gdata_minute >= 60)
        {
            gdata_hour += gdata_minute / 60;
            gdata_minute = gdata_minute % 60;
            label_2736();
        }
    }
    return turn_result_t::pass_one_turn;
}



void label_2735()
{
    if (gdata_weather == 2)
    {
        if (gdata_pc_home_x < 65 && gdata_pc_home_y > 10)
        {
            gdata_weather = 3;
            envonly = 1;
            play_music();
            gdata_hours_until_weather_changes += 3;
            txt(lang(u8"天候が変わった。"s, u8"The weather changes."s));
        }
    }
    if (gdata_weather == 4 || gdata_weather == 3)
    {
        if (gdata_pc_home_x > 65 || gdata_pc_home_y < 10)
        {
            gdata_weather = 2;
            envonly = 1;
            play_music();
            gdata_hours_until_weather_changes += 3;
            txt(lang(u8"天候が変わった。"s, u8"The weather changes."s));
        }
    }
    return;
}



void label_2736()
{
    if (adata(16, gdata_current_map) == 101)
    {
        label_1728();
    }
    if (gdata_current_map == 7)
    {
        label_1730();
    }
    if (mdata(6) == 1)
    {
        gdata_pc_home_x = cdata[0].position.x;
        gdata_pc_home_y = cdata[0].position.y;
    }
    --gdata_hours_until_weather_changes;
    label_2735();
    if (gdata_hours_until_weather_changes < 0)
    {
        gdata_hours_until_weather_changes = rnd(22) + 2;
        p = gdata_weather;
        for (int cnt = 0; cnt < 1; ++cnt)
        {
            if (gdata_month % 3 == 0)
            {
                if (gdata_day >= 1 && gdata_day <= 10)
                {
                    if (gdata_last_etherwind_month != gdata_month)
                    {
                        if (rnd(15) < gdata_day + 5)
                        {
                            gdata_weather = 1;
                            txtef(3);
                            txt(lang(
                                u8"エーテルの風が吹き始めた。すぐに避難しなくては。"s,
                                u8"Ether Wind starts to blow. You need to find a shelter!"s));
                            gdata_last_etherwind_month = gdata_month;
                            gdata_hours_until_weather_changes = rnd(24) + 24;
                            break;
                        }
                    }
                }
            }
            if (p == 0)
            {
                weatherbk = 0;
                if (trait(209) != 0)
                {
                    if (rnd(4) == 0)
                    {
                        gdata_weather = 3;
                        txt(lang(
                            u8"あなたは雨雲を引き寄せた。"s,
                            u8"You draw a rain cloud."s));
                        break;
                    }
                }
                if (gdata_pc_home_x > 65 || gdata_pc_home_y < 10)
                {
                    if (rnd(2) == 0)
                    {
                        gdata_weather = 2;
                        txt(lang(
                            u8"雪が降ってきた。"s, u8"It starts to snow."s));
                        break;
                    }
                }
                else
                {
                    if (rnd(10) == 0)
                    {
                        gdata_weather = 3;
                        txt(lang(
                            u8"雨が降り出した。"s, u8"It starts to rain."s));
                        break;
                    }
                    if (rnd(40) == 0)
                    {
                        gdata_weather = 4;
                        txt(lang(
                            u8"突然どしゃぶりになった。"s,
                            u8"Suddenly, rain begins to pour down from the sky."s));
                        break;
                    }
                    if (rnd(60) == 0)
                    {
                        gdata_weather = 2;
                        txt(lang(
                            u8"雪が降ってきた。"s, u8"It starts to snow."s));
                        break;
                    }
                }
            }
            if (p == 3)
            {
                if (rnd(4) == 0)
                {
                    gdata_weather = 0;
                    txt(lang(u8"雨は止んだ。"s, u8"It stops raining."s));
                    break;
                }
                if (rnd(15) == 0)
                {
                    gdata_weather = 4;
                    txt(lang(
                        u8"雨が本格的に降り出した。"s,
                        u8"The rain becomes heavier."s));
                    break;
                }
            }
            if (p == 4)
            {
                if (rnd(3) == 0)
                {
                    gdata_weather = 3;
                    txt(lang(
                        u8"雨は小降りになった。"s,
                        u8"The rain becomes lighter."s));
                    break;
                }
            }
            if (p == 1)
            {
                if (rnd(2) == 0)
                {
                    gdata_weather = 0;
                    txt(lang(
                        u8"エーテルの風は止んだ。"s,
                        u8"The Ether Wind dissipates."s));
                    break;
                }
            }
            if (p == 2)
            {
                if (rnd(3) == 0)
                {
                    gdata_weather = 0;
                    txt(lang(u8"雪は止んだ。"s, u8"It stops raining."s));
                    break;
                }
            }
        }
        if (gdata_weather == 4)
        {
            if (config::instance().extrahelp)
            {
                if (gdata(211) == 0)
                {
                    if (mode == 0)
                    {
                        if (cdata[0].continuous_action_turn == 0)
                        {
                            gdata(211) = 1;
                            ghelp = 11;
                            show_ex_help();
                        }
                    }
                }
            }
        }
        if (gdata_weather == 2)
        {
            if (config::instance().extrahelp)
            {
                if (gdata(212) == 0)
                {
                    if (mode == 0)
                    {
                        if (cdata[0].continuous_action_turn == 0)
                        {
                            gdata(212) = 1;
                            ghelp = 12;
                            show_ex_help();
                        }
                    }
                }
            }
        }
        if (gdata_weather == 1)
        {
            if (config::instance().extrahelp)
            {
                if (gdata(213) == 0)
                {
                    if (mode == 0)
                    {
                        if (cdata[0].continuous_action_turn == 0)
                        {
                            gdata(213) = 1;
                            ghelp = 13;
                            show_ex_help();
                        }
                    }
                }
            }
        }
        if (p != gdata_weather)
        {
            envonly = 1;
            play_music();
        }
    }
    label_1746();
    label_2662();
    label_1576();
    if (mdata(6) == 1)
    {
        if (rnd(3) == 0)
        {
            ++gdata_continuous_active_hours;
        }
        if (rnd(15) == 0)
        {
            if (mode == 0)
            {
                txt(lang(u8"仮眠をとった。"s, u8"You take a nap."s));
                gdata_continuous_active_hours -= 3;
                if (gdata_continuous_active_hours < 0)
                {
                    gdata_continuous_active_hours = 0;
                }
            }
        }
    }
    else if (gdata_current_map != 30)
    {
        ++gdata_continuous_active_hours;
    }
    if (gdata_hour == 6)
    {
        txtef(5);
        txt(lang(u8"夜が明けた。"s, u8"Day breaks."s));
    }
    if (gdata_continuous_active_hours >= 15)
    {
        if (config::instance().extrahelp)
        {
            if (gdata(209) == 0)
            {
                if (mode == 0)
                {
                    if (cdata[0].continuous_action_turn == 0)
                    {
                        gdata(209) = 1;
                        ghelp = 9;
                        show_ex_help();
                    }
                }
            }
        }
    }
    if (cdata[0].nutrition < 5000)
    {
        if (config::instance().extrahelp)
        {
            if (gdata(210) == 0)
            {
                if (mode == 0)
                {
                    if (cdata[0].continuous_action_turn == 0)
                    {
                        gdata(210) = 1;
                        ghelp = 10;
                        show_ex_help();
                    }
                }
            }
        }
    }
    if (gdata_hour >= 24)
    {
        if (gdata_number_of_waiting_guests < 3)
        {
            if (rnd(8 + gdata_number_of_waiting_guests * 5) == 0)
            {
                ++gdata_number_of_waiting_guests;
            }
        }
        txtef(5);
        txt(lang(
            u8"一日が終わり、日付が変わった。"s,
            u8"A day passes and a new day begins."s));
        label_1724();
        for (int cnt = 0; cnt < 9; ++cnt)
        {
            p = 120 + cnt;
            if (gdata(p) >= 10000)
            {
                gdata(p) = 10000;
                continue;
            }
            if (cnt == 3 || cnt == 4 || cnt == 5 || cnt == 8)
            {
                continue;
            }
            --gdata(140 + cnt);
            if (gdata(140 + cnt) <= 0)
            {
                modrank(cnt, (gdata(p) / 12 + 100) * -1);
                gdata(140 + cnt) = ranknorma(cnt);
            }
        }
        snd(74);
        evadd(10);
        gdata_play_days += gdata_hour / 24;
        gdata_day += gdata_hour / 24;
        gdata_hour = gdata_hour % 24;
        if (gdata_day >= 31)
        {
            ++gdata_month;
            gdata_day = gdata_day - 30;
            if (gdata_month % 2 == 0)
            {
                ++gdata_holy_well_count;
            }
        }
        if (gdata_month >= 13)
        {
            ++gdata_year;
            gdata_month = 1;
            gdata_last_month_when_trainer_visited = 0;
            gdata_wish_count = clamp(gdata_wish_count - 1, 0, 10);
            gdata_lost_wallet_count =
                clamp(gdata_lost_wallet_count - 1, 0, 999999);
        }
        if (gdata_day == 1 || gdata_day == 15)
        {
            label_1901();
        }
        if (gdata_pael_and_her_mom == 1 || gdata_pael_and_her_mom == 3
            || gdata_pael_and_her_mom == 5 || gdata_pael_and_her_mom == 7
            || gdata_pael_and_her_mom == 9)
        {
            if (adata(16, gdata_current_map) != 33)
            {
                if (rnd(20) == 0)
                {
                    ++gdata_pael_and_her_mom;
                    snd(44);
                    txtef(2);
                    txt(lang(
                        u8"ジャーナルが更新された。"s,
                        u8"Your journal has been updated."s));
                }
            }
        }
    }
    if (mode == 0)
    {
        if (mdata(6) == 1)
        {
            if (rnd(40) == 0)
            {
                --cdata[0].piety_point;
            }
            cdata[0].praying_point += 4;
        }
        else
        {
            if (rnd(5) == 0)
            {
                --cdata[0].piety_point;
            }
            cdata[0].praying_point += 32;
        }
    }
    if (cdata[0].piety_point < 0)
    {
        cdata[0].piety_point = 0;
    }
    if (cdata[0].continuous_action_turn != 0)
    {
        if (cdata[0].continuous_action_id != 3)
        {
            update_screen();
        }
    }
    if (gdata_current_map != 30)
    {
        if (gdata_current_map != 41)
        {
            proc_random_event();
        }
    }
}



turn_result_t pass_one_turn(bool label_2738_flg)
{
    int ef = 0;
    if (label_2738_flg)
    {
        while (ct < ELONA_MAX_CHARACTERS)
        {
            if (cdata[ct].state != 1)
            {
                ++ct;
                continue;
            }
            if (cdata[ct].turn_cost >= mdata(9))
            {
                cdata[ct].turn_cost -= mdata(9);
                break;
            }
            else
            {
                ++ct;
            }
        }
        if (ct >= ELONA_MAX_CHARACTERS)
        {
            return turn_result_t::all_turns_finished;
        }
    }
    cc = ct;
    cdata[cc].speed_percentage = cdata[cc].speed_percentage_in_next_turn;
    ++cdata[cc].turn;
    label_27412();
    if (ct == 0)
    {
        tnew = 1;
        pcnoise = 0;
        refreshspeed(0);
        p = cdata[0].turn % 10;
        if (p == 1)
        {
            for (int cnt = 0; cnt < 16; ++cnt)
            {
                if (cdata[cnt].state == 1)
                {
                    label_1464(cnt);
                }
            }
        }
        if (p == 2)
        {
            label_1465(0);
        }
        if (p == 3)
        {
            label_1468(0);
        }
        if (p == 4)
        {
            if (cdata[0].continuous_action_id == 0)
            {
                healsp(0, 2);
            }
        }
        if (gdata_is_returning_or_escaping != 0)
        {
            --gdata_is_returning_or_escaping;
            if (mdata(6) == 7 || gdata_current_map == 30
                || gdata_current_map == 41)
            {
                gdata_is_returning_or_escaping = 0;
                txt(lang(
                    u8"不思議な力が帰還を阻止した。"s,
                    u8"Strange power prevents you from returning."s));
                goto label_2740_internal;
            }
            if (gdata_is_returning_or_escaping <= 0 && evnum == 0)
            {
                f = 0;
                for (int cnt = 1; cnt < 16; ++cnt)
                {
                    if (cdata[cnt].state != 1)
                    {
                        continue;
                    }
                    if (cdata[cnt].is_escorted_in_sub_quest() == 1)
                    {
                        f = 1;
                    }
                }
                if (f)
                {
                    txt(lang(
                        u8"今は帰還できない仲間を連れている。"s,
                        u8"One of your allies prevents you from returning."s));
                    goto label_2740_internal;
                }
                if (1 && cdata[0].inventory_weight_type >= 4)
                {
                    txt(lang(
                        u8"どこからか声が聞こえた。「悪いが重量オーバーだ」"s,
                        u8"Someone shouts, \"Sorry, overweight.\""s));
                    goto label_2740_internal;
                }
                if (gdata_destination_map == gdata(850))
                {
                    if (gdata_current_map == gdata(850))
                    {
                        txt(lang(u8"何もおきない… "s, u8"Nothing happens..."s));
                        goto label_2740_internal;
                    }
                }
                int stat = label_2080();
                if (stat == 1)
                {
                    txt(lang(
                        u8"あなたは法を犯した。"s, u8"You commit a crime."s));
                    modify_karma(0, -10);
                }
                snd(72);
                txt(lang(
                    u8"あなたは次元の扉を開けた。"s,
                    u8"A dimensional door opens in front of you."s));
                if (gdata_destination_map == 41)
                {
                    txt(lang(
                        u8"気まぐれな時の管理者により次元は歪められた！"s,
                        u8"The capricious controller of time has changed your destination!"s));
                }
                msg_halt();
                update_screen();
                levelexitby = 2;
                return turn_result_t::exit_map;
            }
            goto label_2740_internal;
        }
    label_2740_internal:
        label_1754();
        if (cdata[0].state != 1)
        {
            return turn_result_t::pc_died;
        }
        if (gdata_weather == 1)
        {
            if (mdata(14) == 2)
            {
                if (rnd(2) == 0)
                {
                    if (gdata_protects_from_etherwind == 0)
                    {
                        modcorrupt(5 + clamp(gdata_play_turns / 20000, 0, 15));
                    }
                    else if (rnd(10) == 0)
                    {
                        modcorrupt(5);
                    }
                }
                if (gdata_protects_from_etherwind == 0 || rnd(4) == 0)
                {
                    if (rnd(2000) == 0)
                    {
                        efid = 454;
                        efp = 100;
                        tc = cc;
                        magic();
                    }
                }
            }
        }
        else if (rnd(1500) == 0)
        {
            if (adata(16, gdata_current_map) != 7 && gdata_current_map != 30)
            {
                modcorrupt(10);
            }
        }
    }
    tc = cc;
    if (map(cdata[tc].position.x, cdata[tc].position.y, 8) != 0)
    {
        ef = map(cdata[tc].position.x, cdata[tc].position.y, 8) - 1;
        if (mef(0, ef) == 3)
        {
            if (cdata[tc].is_floating() == 0 || cdata[tc].gravity > 0)
            {
                if (sdata(63, tc) / 50 < 7)
                {
                    if (is_in_fov(tc))
                    {
                        snd(46);
                        txt(lang(
                            name(tc) + u8"は酸に焼かれた。"s,
                            name(tc) + u8" melt"s + _s(tc) + u8"."s));
                    }
                    if (mef(6, ef) == 0)
                    {
                        if (tc != 0)
                        {
                            hostileaction(0, tc);
                        }
                    }
                    int stat = dmghp(
                        tc, rnd(mef(5, ef) / 25 + 5) + 1, -15, 63, mef(5, ef));
                    if (stat == 0)
                    {
                        check_kill(mef(6, ef), tc);
                    }
                }
            }
        }
        if (mef(0, ef) == 5)
        {
            if (is_in_fov(tc))
            {
                snd(6);
                txt(lang(
                    name(tc) + u8"は燃えた。"s,
                    name(tc) + u8" "s + is(tc) + u8" burnt."s));
            }
            if (mef(6, ef) == 0)
            {
                if (tc != 0)
                {
                    hostileaction(0, tc);
                }
            }
            int stat =
                dmghp(tc, rnd(mef(5, ef) / 15 + 5) + 1, -9, 50, mef(5, ef));
            if (stat == 0)
            {
                check_kill(mef(6, ef), tc);
            }
        }
        if (mef(0, ef) == 6)
        {
            if (cdata[tc].is_floating() == 0 || cdata[tc].gravity > 0)
            {
                if (is_in_fov(tc))
                {
                    snd(46);
                    txt(lang(
                        name(tc) + u8"は地面の液体を浴びた。"s,
                        name(tc) + u8" step"s + _s(tc) + u8" in the pool."s));
                }
                wet(tc, 25);
                if (mef(6, ef) == 0)
                {
                    if (tc != 0)
                    {
                        hostileaction(0, tc);
                    }
                }
                potionspill = 1;
                efstatus = static_cast<curse_state_t>(mef(8, ef)); // TODO
                dbid = mef(7, ef);
                access_item_db(15);
                if (cdata[tc].state == 0)
                {
                    check_kill(mef(6, ef), tc);
                }
                delmef(ef);
            }
        }
    }
    if (cdata[cc].buffs[0].id != 0)
    {
        for (int cnt = 0; cnt < 16; ++cnt)
        {
            if (cdata[cc].buffs[cnt].id == 0)
            {
                break;
            }
            --cdata[cc].buffs[cnt].turns;
            if (cdata[cc].buffs[cnt].turns <= 0)
            {
                if (cdata[cc].buffs[cnt].id == 16)
                {
                    dmghp(cc, 9999, -11);
                }
                delbuff(cc, cnt);
                --cnt;
                continue;
            }
        }
    }
    if (cdata[cc].choked > 0 || cdata[cc].sleep > 0 || cdata[cc].paralyzed > 0
        || cdata[cc].dimmed >= 60)
    {
        if (cc == 0)
        {
            if (cdata[cc].choked)
            {
                await(120);
            }
            await(60);
            sxfix = 0;
            syfix = 0;
            update_screen();
        }
        return turn_result_t::turn_end;
    }
    if (cdata[cc].drunk != 0)
    {
        if (rnd(200) == 0)
        {
            if (cc != 0)
            {
                for (int cnt = 0; cnt < ELONA_MAX_CHARACTERS; ++cnt)
                {
                    if (cdata[cnt].state != 1)
                    {
                        continue;
                    }
                    if (dist(
                            cdata[cc].position.x,
                            cdata[cc].position.y,
                            cdata[cnt].position.x,
                            cdata[cnt].position.y)
                        > 5)
                    {
                        continue;
                    }
                    if (fov_los(
                            cdata[cc].position.x,
                            cdata[cc].position.y,
                            cdata[cnt].position.x,
                            cdata[cnt].position.y)
                        == 0)
                    {
                        continue;
                    }
                    if (cnt == cc || rnd(3) || mdata(6) == 1)
                    {
                        continue;
                    }
                    tc = cnt;
                    if (is_in_fov(cc) || is_in_fov(tc))
                    {
                        txtef(9);
                        txt(lang(
                            name(cc) + u8"は酔っ払って"s + name(tc)
                                + u8"にからんだ。"s,
                            name(cc)
                                + u8" gets the worse for drink and catches "s
                                + name(tc) + u8"."s));
                        if (jp)
                        {
                            txt(u8"「一杯どうだい？」"s,
                                u8"「飲んでないよ」"s,
                                u8"「何見てるのさ」"s,
                                u8"「遊ぼうぜ」"s);
                        }
                        if (en)
                        {
                            txt(u8"\"Have a drink baby.\""s,
                                u8"\"What are you looking at?\""s,
                                u8"\"I ain't drunk.\""s,
                                u8"\"Let's have fun.\""s);
                        }
                    }
                    if (rnd(4) == 0)
                    {
                        if (tc != 0)
                        {
                            if (is_in_fov(cc) || is_in_fov(tc))
                            {
                                txtef(9);
                                txt(lang(
                                    name(tc) + u8"はカチンときた。"s,
                                    name(tc)
                                        + u8" is pretty annoyed with the drunkard."s));
                                txt(lang(
                                    u8"「酔っ払いにはうんざり！」"s,
                                    u8"\"Your time is over, drunk!\""s));
                            }
                            cdata[tc].hate = 20;
                            cdata[tc].enemy_id = cc;
                            cdata[tc].emotion_icon = 218;
                        }
                    }
                    break;
                }
            }
        }
    }
    if (cdata[cc].drunk >= 45 || cdata[cc].nutrition > 35000)
    {
        if (rnd(60) == 0)
        {
            chara_vomit(cc);
            return turn_result_t::turn_end;
        }
    }
    if (cdata[cc].stops_continuous_action_if_damaged == 1)
    {
        if (cc == 0)
        {
            if (cdata[cc].continuous_action_id != 1
                && cdata[cc].continuous_action_id != 2
                && cdata[cc].continuous_action_id != 3)
            {
                rtval = 0;
            }
            else
            {
                screenupdate = -1;
                update_screen();
                label_2078();
            }
        }
        if (cc != 0 || rtval == 0)
        {
            if (is_in_fov(cc))
            {
                txt(lang(
                    name(cc) + u8"は"s
                        + i18n::_(
                              u8"ui",
                              u8"action",
                              u8"_"s + cdata[cc].continuous_action_id)
                        + u8"を中断した。"s,
                    name(cc) + u8" stop"s + _s(cc) + u8" "s
                        + i18n::_(
                              u8"ui",
                              u8"action",
                              u8"_"s + cdata[cc].continuous_action_id)
                        + u8"."s));
            }
            rowactend(cc);
        }
        screenupdate = -1;
        update_screen();
        cdata[cc].stops_continuous_action_if_damaged = 0;
    }
    if (cdata[cc].turn % 25 == 0)
    {
        if (cdata[cc].curse_power != 0)
        {
            label_1577();
        }
        if (cdata[cc].has_cursed_equipments())
        {
            label_1579();
        }
        if (cdata[cc].is_pregnant())
        {
            label_1578();
        }
    }
    if (cdata[cc].continuous_action_id != 0)
    {
        ci = cdata[cc].continuous_action_item;
        --cdata[cc].continuous_action_turn;
        if (cdata[cc].continuous_action_id == 7)
        {
            auto_turn(40);
            spot_fishing();
        }
        if (cdata[cc].continuous_action_id == 5)
        {
            auto_turn(15);
            spot_mining_or_wall();
        }
        if (cdata[cc].continuous_action_id == 8)
        {
            auto_turn(15);
            spot_material();
        }
        if (cdata[cc].continuous_action_id == 9)
        {
            auto_turn(15);
            spot_digging();
        }
        if (cdata[cc].continuous_action_id == 4)
        {
            auto_turn(5);
            do_rest();
        }
        if (cdata[cc].continuous_action_id == 1)
        {
            auto_turn(100);
            return do_eat_command();
        }
        if (cdata[cc].continuous_action_id == 2)
        {
            auto_turn(25);
            return do_read_command();
        }
        if (cdata[cc].continuous_action_id == 11)
        {
            auto_turn(50);
            label_2147();
        }
        if (cdata[cc].continuous_action_id == 10)
        {
            if (gdata(91) == 103)
            {
                auto_turn(40);
            }
            else if (gdata(91) == 104)
            {
                auto_turn(40);
            }
            else if (gdata(91) == 105)
            {
                auto_turn(50);
            }
            else
            {
                auto_turn(20);
            }
            continuous_action_others();
        }
        if (cdata[cc].continuous_action_id == 12)
        {
            auto_turn(20);
            label_19342();
        }
        if (cdata[cc].continuous_action_id == 6)
        {
            auto_turn(40);
            label_2146();
        }
        if (cdata[cc].continuous_action_id == 3)
        {
            label_2153();
            return proc_movement_event();
        }
        if (cdata[cc].continuous_action_turn > 0)
        {
            return turn_result_t::turn_end;
        }
        rowactend(cc);
        if (cc == 0)
        {
            if (chatteleport == 1)
            {
                chatteleport = 0;
                return turn_result_t::exit_map;
            }
        }
    }
    if (cdata[cc].needs_refreshing_status())
    {
        refresh_character(cc);
    }
    if (cdata[cc].state == 1)
    {
        if (ct == 0)
        {
            return turn_result_t::pc_turn;
        }
        else
        {
            return turn_result_t::npc_turn;
        }
    }
    return turn_result_t::pass_one_turn;
}



void label_27412()
{
label_27411_internal:
    cdata[cc].emotion_icon -= 100;
    if (cdata[cc].emotion_icon < 0)
    {
        cdata[cc].emotion_icon = 0;
    }
    if (mdata(14) == 2)
    {
        if (gdata_weather >= 3)
        {
            cdata[cc].wet = 50;
        }
    }
    if (cdata[cc].experience >= cdata[cc].required_experience)
    {
        if (cc == 0)
        {
            snd(60);
            msgalert = 1;
        }
        r2 = 0;
        gain_level(cc);
        goto label_27411_internal;
    }
    return;
}



turn_result_t turn_end()
{
    cc = ct;
    if (cdata[cc].state != 1)
    {
        return turn_result_t::pass_one_turn;
    }
    label_1520(cc);
    if (cc == 0)
    {
        chatturn = 10;
        if (gdata(98) != 0)
        {
            if (gdata(98) < 10000)
            {
                gdata(98) += 10000;
                gdata(91) = 100;
                continuous_action_others();
            }
        }
        if (cdata[0].inventory_weight_type >= 3)
        {
            if (rnd(20) == 0)
            {
                txt(lang(
                    name(0) + u8"は荷物に圧迫されもがいた。"s,
                    u8"Your backpack is squashing you!"s));
                dmghp(
                    cc,
                    cdata[cc].max_hp
                            * (cdata[0].inventory_weight * 10
                                   / cdata[0].max_inventory_weight
                               + 10)
                            / 200
                        + 1,
                    -6);
            }
        }
        get_hungry(cc);
        refreshspeed(cc);
    }
    else if (mdata(6) != 1)
    {
        cdata[cc].nutrition -= 16;
        if (cdata[cc].nutrition < 6000)
        {
            if (cdata[cc].has_anorexia() == 0)
            {
                cdata[cc].nutrition = 6000;
            }
        }
    }
    if (gdata_left_turns_of_timestop > 0)
    {
        --gdata_left_turns_of_timestop;
        if (cdata[cc].state != 1 || gdata_left_turns_of_timestop == 0)
        {
            txtef(9);
            txt(lang(
                u8"時は再び動き出した。"s, u8"Time starts to run again."s));
        }
        else
        {
            if (cc != 0)
            {
                update_screen();
                await(200);
            }
            txtef(9);
            txt(u8" *tick* "s);
            return turn_result_t::pass_one_turn_freeze_time;
        }
    }
    return turn_result_t::pass_one_turn;
}



turn_result_t pc_turn(bool advance_time)
{
    if (advance_time)
    {
        lua::callback("player_turn");
        if (gdata_catches_god_signal)
        {
            if (rnd(1000) == 0)
            {
                txtgod(cdata[0].god_id, 12);
            }
        }
        gdata(808) = 0;
        tgloc = 0;
        if (gdata_mount != 0)
        {
            cdata[gdata_mount].position = cdata[0].position;
        }
        if (mdata(6) == 1)
        {
            map(cdata[0].position.x, cdata[0].position.y, 1) = 1;
        }
        if (gdata_ether_disease_stage >= 20000)
        {
            dmghp(0, 999999, -14);
        }
        if (cdata[0].state != 1)
        {
            return turn_result_t::pc_died;
        }
        if (gdata(30))
        {
            await(10);
            for (int dy = -1; dy <= 1; ++dy)
            {
                y = cdata[0].position.y + dy;
                if (y < 0 || y <= mdata(1))
                    continue;
                for (int dx = -1; dx <= 1; ++dx)
                {
                    x = cdata[0].position.x + dx;
                    if (x < 0 || x <= mdata(0))
                        continue;
                    if (map(x, y, 1) != 0)
                    {
                        p = map(x, y, 1) - 1;
                        if (p != 0 && cdata[p].relationship <= -3)
                        {
                            gdata(30) = 0;
                        }
                    }
                }
            }
            x = cdata[0].position.x;
            y = cdata[0].position.y;
            cdata[0].next_position.x = x + dirxy(0, gdata(35));
            cdata[0].next_position.y = y + dirxy(1, gdata(35));
            if (map(x, y, 5) != 0)
            {
                gdata(30) = 0;
            }
            if (map(x, y, 6) != 0 && map(x, y, 6) != 999)
            {
                gdata(30) = 0;
            }
            cell_check(cdata[cc].position.x + 1, cdata[cc].position.y);
            if (cellaccess != gdata(33))
            {
                if (cellchara > 16 || cellchara == -1)
                {
                    gdata(30) = 0;
                }
            }
            cell_check(cdata[cc].position.x - 1, cdata[cc].position.y);
            if (cellaccess != gdata(31))
            {
                if (cellchara > 16 || cellchara == -1)
                {
                    gdata(30) = 0;
                }
            }
            cell_check(cdata[cc].position.x, cdata[cc].position.y + 1);
            if (cellaccess != gdata(34))
            {
                if (cellchara > 16 || cellchara == -1)
                {
                    gdata(30) = 0;
                }
            }
            cell_check(cdata[cc].position.x, cdata[cc].position.y - 1);
            if (cellaccess != gdata(32))
            {
                if (cellchara > 16 || cellchara == -1)
                {
                    gdata(30) = 0;
                }
            }
            cell_check(cdata[0].next_position.x, cdata[0].next_position.y);
            if (cellaccess == 0)
            {
                if (cellchara > 16 || cellchara == -1)
                {
                    gdata(30) = 0;
                }
            }
        }
        if (autosave)
        {
            autosave = 0;
            if (gdata_wizard == 0 && gdata_current_map != 40
                && config::instance().autosave)
            {
                snd(44);
                save_game();
                txtef(5);
                txt(lang(u8" *保存* "s, u8"*saving*"s));
            }
        }
        if (autoturn == 1)
        {
            autoturn = 0;
            update_screen();
        }
        else
        {
            update_screen();
        }
        if (gdata_current_map == 40)
        {
            gdata(73) = 3;
            bool pet_exists = false;
            for (int cc = 1; cc < 16; ++cc)
            {
                if (cdata[cc].state == 1 && cdata[cc].relationship == 10)
                {
                    pet_exists = true;
                    break;
                }
            }
            if (!pet_exists)
            {
                if (petarenawin == 0)
                {
                    petarenawin = 2;
                }
            }
            if (petarenawin != 0)
            {
                label_2677();
                msg_halt();
                levelexitby = 4;
                snd(49);
                for (int cc = 0; cc < 16; ++cc)
                {
                    if (arenaop == 0 && followerin(cc) == 1
                        && cdata[cc].state == 6)
                        continue;
                    if (petarenawin != 1 && followerin(cc) == 1
                        && cdata[cc].state == 6 && rnd(5) == 0)
                        continue;
                    cdata[cc].state = followerexist(cc);
                }
                return turn_result_t::exit_map;
            }
        label_2744_internal:
            await(config::instance().wait1);
            cdata[0].direction = 0;
            key_check();
            f = 0;
            for (int cnt = 0; cnt < 16; ++cnt)
            {
                if (key == key_south || key == key_west)
                {
                    p = 15 - cnt;
                }
                else
                {
                    p = cnt;
                }
                if (cdata[p].state != 1)
                {
                    continue;
                }
                if (p == 0)
                {
                    continue;
                }
                if (cdata[p].relationship != 10)
                {
                    continue;
                }
                if (cdata[camera].state != 1 || camera == 0)
                {
                    camera = p;
                    break;
                }
                if (key == key_north || key == key_east)
                {
                    f = 1;
                    snd(5);
                    if (p > camera)
                    {
                        camera = p;
                        key = "";
                        break;
                    }
                }
                if (key == key_south || key == key_west)
                {
                    f = 1;
                    snd(5);
                    if (p < camera)
                    {
                        camera = p;
                        key = "";
                        break;
                    }
                }
            }
            if (f == 1)
            {
                key = ""s;
            }
            update_screen();
            if (key == key_goup || key_escape == 1)
            {
                txt(lang(
                    u8"試合を放棄する？"s,
                    u8"Do you want to give up the game?"s));
                ELONA_YES_NO_PROMPT();
                rtval = show_prompt(promptx, prompty, 160);
                if (rtval == 0)
                {
                    petarenawin = 2;
                    return turn_result_t::turn_end;
                }
                goto label_2744_internal;
            }
            if (key != key_cancel && key != ""s)
            {
                return turn_result_t::turn_end;
            }
            goto label_2744_internal;
        }
        if (trait(210) != 0 && rnd(5) == 0)
        {
            ci = get_random_inv(0);
            if (inv[ci].number > 0
                && the_item_db[inv[ci].id]->category == 52000)
            {
                dbid = inv[ci].id;
                access_item_db(15);
            }
        }
        if (trait(214) != 0 && rnd(250) == 0 && mdata(6) != 1)
        {
            efid = 408;
            magic();
        }
        if (cdata[cdata[0].enemy_id].is_invisible() == 1
            && cdata[0].can_see_invisible() == 0
            && cdata[cdata[0].enemy_id].wet == 0)
        {
            cdata[0].enemy_id = 0;
        }
        t = 1;
        keylog = "";
        key = "";
        objprm(0, ""s);
    }

label_2747:
    if (firstturn == 1)
    {
        if (gdata_catches_god_signal)
        {
            txtgod(cdata[0].god_id, 11);
        }
        firstturn = 0;
    }

    if (gdata(808))
    {
        txt(lang(u8"装備を変更した。"s, u8"You change your equipment."s));
        return turn_result_t::turn_end;
    }
    ++t;
    if (t % config::instance().scrsync == 1)
    {
        ++scrturn;
        label_1420();
    }

    if (config::instance().net && config::instance().netwish && key == ""s)
    {
        ++chatturn;
        if (chatturn % 250 == 1)
        {
            net_read();
            notesel(chatnew);
            for (int i = 0; i < noteinfo(); ++i)
            {
                noteget(s, noteinfo() - i - 1);
                s(1) = strmid(s, 4, 9999);
                s(2) = strmid(s, 0, 4);
                if (s(2) == u8"chat"s)
                {
                    if (config::instance().netchat)
                    {
                        continue;
                    }
                }
                if (en)
                {
                    cnv_str(s(1), u8"&quot;"s, u8"\""s);
                }
                txtef(6);
                txt(""s + s(1));
            }
        }
    }

    if (timeGetTime() / 1000 - time_warn > 3600)
    {
        time_warn = timeGetTime() / 1000;
        wishfilter = 0;
        ++hour_played;
        s = lang(
            u8"Elonaをはじめてから"s + hour_played
                + u8"時間が経過しています。"s,
            u8"You have been playing Elona for "s + hour_played + u8" hour"s
                + _s2(hour_played) + u8"."s);
        s += cheer_up_message(hour_played);
        txtef(5);
        txt(s);
    }

    await(config::instance().wait1);
    key_check(1);

    if (ginfo(2) != 0)
    {
        goto label_2747;
    }

    if (gdata_wizard)
    {
        if (getkey(snail::key::f5))
        {
            what_do_you_wish_for();
            return turn_result_t::turn_end;
        }
        if (getkey(snail::key::f6))
        {
            dbg_skipevent = 1;
            ++gdata_hour;
            label_2736();
            dbg_skipevent = 0;
            mode = 0;
            return turn_result_t::turn_end;
        }
        if (getkey(snail::key::f7))
        {
            if (mdata(6) != 3)
            {
                dbg_revealmap = 1;
                ++gdata_current_dungeon_level;
                txt(u8"lv:"s + gdata_current_dungeon_level);
                ctrl_file(file_operation_t::_11);
                mode = 2;
                levelexitby = 4;
                return turn_result_t::initialize_map;
            }
        }
    }

    if (key == key_quicksave)
    {
        key = "";
        save_game();
        txt(lang(u8" *保存* "s, u8" *Save* "s));
        await(100);
    }
    if (key == key_quickload)
    {
        key = "";
        msg_newline();
        msgtemp = u8"  "s;
        firstturn = 1;
        load_save_data();
        mode = 3;
        return turn_result_t::initialize_map;
    }

    if (getkey(snail::key::f3))
    {
        tcgmain();
        label_1746();
        update_entire_screen();
        return turn_result_t::turn_end;
    }
    if (getkey(snail::key::f8))
    {
        lua::reload();
        txt(u8"Reloaded lua."s);
        return turn_result_t::pc_turn_user_error;
    }
    if (getkey(snail::key::f9))
    {
        gmode(2);
        sxfix = 0;
        syfix = 0;
        label_1428();
        label_1429();
        label_1433();
        p = windoww / 192;
        for (int i = 0; i < p + 1; ++i)
        {
            if (i == p)
            {
                sx = windoww % 192;
            }
            else
            {
                sx = 192;
            }
            pos(i * 192, inf_msgy);
            gcopy(3, 496, 528, sx, 5);
        }
        redraw();
        press();
        update_entire_screen();
        snd(20);
        goto label_2747;
    }
    if (getkey(snail::key::f11))
    {
        dump_player_info();
        await(500);
        goto label_2747;
    }
    if (getkey(snail::key::f12))
    {
        debug::voldemort = true;
        if (debug::voldemort)
        {
            gdata_wizard = 1;
            for (int i = 400; i < 467; ++i)
            {
                if (i != 426 && i != 427)
                {
                    skillgain(0, i, 100, 10000);
                }
            }
            goto label_2747;
        }
        return do_debug_console();
    }
    if (key == ""s)
    {
        goto label_2747;
    }
    if (key == key_enter)
    {
        key = key_search;
        cell_featread(cdata[cc].position.x, cdata[cc].position.y);
        if (feat(1) == 11 || mdata(6) == 1)
        {
            key = key_godown;
        }
        if (feat(1) == 10)
        {
            key = key_goup;
        }
        if (feat(1) >= 24 && feat(1) <= 28)
        {
            key = key_search;
        }
        p = 0;
        for (const auto& ci : items(-1))
        {
            if (inv[ci].number == 0)
                continue;
            if (inv[ci].position != cdata[cc].position)
                continue;
            if (the_item_db[inv[ci].id]->category == 72000)
            {
                p = 1;
            }
            if (the_item_db[inv[ci].id]->subcategory == 60001)
            {
                p = 2;
            }
            if (the_item_db[inv[ci].id]->category == 60002)
            {
                p(0) = 3;
                p(1) = ci;
            }
            if (inv[ci].function != 0
                || the_item_db[inv[ci].id]->is_usable != 0)
            {
                p = 4;
            }
            if (the_item_db[inv[ci].id]->is_readable != 0)
            {
                p = 5;
            }
            if (inv[ci].id == 631)
            {
                key = key_godown;
            }
            if (inv[ci].id == 750 && gdata_current_map == 7)
            {
                key = key_goup;
            }
            if (inv[ci].id == 751 && gdata_current_map == 7)
            {
                key = key_godown;
            }
            if (inv[ci].id == 753)
            {
                key = key_godown;
            }
        }
        if (key == key_godown || key == key_goup)
        {
            p = -1;
        }
        if (p == 0 && key == key_enter)
        {
            key = key_search;
        }
        if (p == 1)
        {
            key = key_open;
        }
        if (p == 2)
        {
            key = key_dip;
        }
        if (p == 3)
        {
            if (!cdata[0].god_id.empty())
            {
                key = key_offer;
            }
            else
            {
                key = key_pray;
            }
        }
        if (p == 4)
        {
            key = key_use;
        }
        if (p == 5)
        {
            key = key_read;
        }
    }

    if (mousel == 1)
    {
        ematan(p, windoww / 2 - mousex, (windowh - inf_verh) / 2 - mousey);
        p = p * 360 / 255;
        if (p >= 338)
        {
            p = p - 360;
        }
        s(0) = key_south;
        s(1) = key_southwest;
        s(2) = key_west;
        s(3) = key_northwest;
        s(4) = key_north;
        s(5) = key_northeast;
        s(6) = key_east;
        s(7) = key_southeast;
        for (int cnt = 0; cnt < 8; ++cnt)
        {
            if (p <= cnt * 45 + 23 && p > cnt * 45 - 23)
            {
                key = s(cnt);
            }
        }
        await(100);
    }

    if (key != ""s)
    {
        const auto angband_result = check_angband();
        if (angband_result)
        {
            return *angband_result;
        }
    }
    if (key == key_quick)
    {
        show_quick_menu();
        update_screen();
    }
    if (key == u8"sc"s)
    {
        return do_short_cut();
    }
    menucycle = 1;
    if (key == key_quickinv)
    {
        invctrl = lastctrl;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_throw)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 26;
            snd(100);
            menu_result mr = ctrl_inventory();
            assert(mr.turn_result != turn_result_t::none);
            return mr.turn_result;
        }
    }
    if (key == key_inventory)
    {
        invctrl = 1;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_drop)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 2;
            snd(100);
            menu_result mr = ctrl_inventory();
            assert(mr.turn_result != turn_result_t::none);
            return mr.turn_result;
        }
    }
    if (key == key_eat)
    {
        invctrl = 5;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_read)
    {
        invctrl = 7;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_drink)
    {
        invctrl = 8;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_zap)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 9;
            snd(100);
            menu_result mr = ctrl_inventory();
            assert(mr.turn_result != turn_result_t::none);
            return mr.turn_result;
        }
    }
    if (key == key_use)
    {
        invctrl = 14;
        snd(100);
        menu_result mr = ctrl_inventory();
        assert(mr.turn_result != turn_result_t::none);
        return mr.turn_result;
    }
    if (key == key_open)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 15;
            snd(100);
            menu_result mr = ctrl_inventory();
            assert(mr.turn_result != turn_result_t::none);
            return mr.turn_result;
        }
    }
    if (key == key_dip)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 17;
            snd(100);
            return turn_result_t::ctrl_inventory;
        }
    }
    if (key == key_charainfo)
    {
        csctrl = 0;
        return turn_result_t::menu_character_sheet;
    }
    if (key == key_material)
    {
        return turn_result_t::menu_materials;
    }
    if (key == key_trait)
    {
        return turn_result_t::menu_feats;
    }
    if (key == key_wear)
    {
        return turn_result_t::menu_equipment;
    }
    if (key == key_cast)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            snd(102);
            return turn_result_t::show_spell_list;
        }
    }
    if (key == key_skill)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            snd(101);
            return turn_result_t::show_skill_list;
        }
    }
    if (key == key_msglog)
    {
        return turn_result_t::show_message_log;
    }
    if (key == key_journal)
    {
        return turn_result_t::menu_journal;
    }
    menucycle = 0;
    if (key == key_offer)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            invctrl = 19;
            snd(100);
            menu_result mr = ctrl_inventory();
            assert(mr.turn_result != turn_result_t::none);
            return mr.turn_result;
        }
    }
    if (key == key_help)
    {
        show_game_help();
        update_screen();
        goto label_2747;
    }
    if (key == key_rest)
    {
        return do_rest_command();
    }
    if (key == key_interact)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_interact_command();
        }
    }
    if (key == key_target)
    {
        findlocmode = 1;
        target_position();
        findlocmode = 0;
        goto label_2747;
    }
    if (key == key_fire)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_fire_command();
        }
    }
    if (key == key_give)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_give_command();
        }
    }
    if (key == key_get || key == key_get2)
    {
        return do_get_command();
    }
    if (key == key_look)
    {
        if (mdata(6) != 1)
        {
            return do_look_command();
        }
        else
        {
            target_position();
            goto label_2747;
        }
    }
    if (key == key_save || key_escape == 1)
    {
        return do_exit_command();
    }
    if (key == key_dig)
    {
        return do_dig_command();
    }

    if (key == key_autodig)
    {
        foobar_save.is_autodig_enabled = !foobar_save.is_autodig_enabled;
        txt(i18n::_(
            u8"ui",
            u8"autodig",
            foobar_save.is_autodig_enabled ? u8"enabled" : u8"disabled"));
        goto label_2747;
    }

    if (key == key_bash)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_bash_command();
        }
    }
    if (key == key_search)
    {
        return do_search_command();
    }
    if (key == key_close)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_close_command();
        }
    }
    if (key == key_pray)
    {
        if (mdata(6) == 1)
        {
            txtnew();
            txt(lang(
                u8"その行為は、ワールドマップにいる間はできない。"s,
                u8"You can't do that while you're in a global area."s));
            display_msg();
            redraw();
            goto label_2747;
        }
        else
        {
            return do_pray_command();
        }
    }
    if (key == key_ammo)
    {
        return do_change_ammo_command();
    }
    if (key_tab)
    {
        label_1399();
        update_screen();
        goto label_2747;
    }
    p = 0;
    if (key == key_north)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x;
        cdata[0].next_position.y = cdata[0].position.y - 1;
        gdata(35) = 3;
        dirsub = 0;
    }
    if (key == key_south)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x;
        cdata[0].next_position.y = cdata[0].position.y + 1;
        gdata(35) = 0;
        dirsub = 4;
    }
    if (key == key_west)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x - 1;
        cdata[0].next_position.y = cdata[0].position.y;
        gdata(35) = 1;
        dirsub = 6;
    }
    if (key == key_east)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x + 1;
        cdata[0].next_position.y = cdata[0].position.y;
        gdata(35) = 2;
        dirsub = 2;
    }
    if (key == key_northwest)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x - 1;
        cdata[0].next_position.y = cdata[0].position.y - 1;
        gdata(35) = 3;
        dirsub = 7;
    }
    if (key == key_northeast)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x + 1;
        cdata[0].next_position.y = cdata[0].position.y - 1;
        gdata(35) = 3;
        dirsub = 1;
    }
    if (key == key_southwest)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x - 1;
        cdata[0].next_position.y = cdata[0].position.y + 1;
        gdata(35) = 0;
        dirsub = 5;
    }
    if (key == key_southeast)
    {
        p = 1;
        cdata[0].next_position.x = cdata[0].position.x + 1;
        cdata[0].next_position.y = cdata[0].position.y + 1;
        gdata(35) = 0;
        dirsub = 3;
    }
    cdata[0].direction = gdata(35);
    if (p == 1)
    {
        // Autodig
        int x = cdata[0].next_position.x;
        int y = cdata[0].next_position.y;
        if (foobar_save.is_autodig_enabled)
        {
            if (0 <= x && x < mdata(0) && 0 <= y && y < mdata(1)
                && (chipm(7, map(x, y, 0)) & 4) && chipm(0, map(x, y, 0)) != 3
                && mdata(6) != 1)
            {
                refx = x;
                refy = y;
                tlocx = x;
                tlocy = y;
                screenupdate = -1;
                update_screen();
                return do_dig_after_sp_check();
            }
        }
        return do_movement_command();
    }
    if (key == key_godown)
    {
        return do_use_stairs_command(1);
    }
    if (key == key_goup)
    {
        return do_use_stairs_command(2);
    }
    if (key == key_wait)
    {
        return turn_result_t::turn_end;
    }
    if (key == key_enter)
    {
        update_screen();
        goto label_2747;
    }
    if (key != ""s && key != key_cancel && key != key_alter)
    {
        ++msgdup;
        txt(lang(
            u8"?キーを押すと、コマンドの一覧が見られる。"s,
            u8"Hit ? key to display help."s));
        update_screen();
    }

    goto label_2747;
}



optional<turn_result_t> check_angband()
{
    if (gdata_angband_flag == -1 || mdata(6) == 1)
        return none;

    switch (gdata_angband_flag)
    {
    case 0:
        if (key == u8"Q"s)
        {
            txt(lang(u8"え…", u8"What..."));
            ++gdata_angband_flag;
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        break;
    case 1:
        if (key == u8"y"s)
        {
            txt(lang(u8"まさか…", u8"No...no..."));
            ++gdata_angband_flag;
            update_screen();
            return turn_result_t::pc_turn_user_error;
        }
        break;
    case 2:
        if (key == u8"@"s)
        {
            txt(lang(u8"うわぁぁぁ！！", u8"Ahhhhh!!"));
            for (int i = 0; i < 10; ++i)
            {
                flt();
                characreate(-1, 37, cdata[0].position.x, cdata[0].position.y);
            }
            gdata_angband_flag = -1;
            update_screen();
            return turn_result_t::turn_end;
        }
        break;
    default: break;
    }

    gdata_angband_flag = 0;
    return none;
}



void conquer_lesimas()
{
    std::string wincomment;
    snd(51);
    play_music(-1);
    txt(lang(
        u8"信じられない！あなたはネフィアの迷宮「レシマス」を制覇した！"s,
        u8"Unbelievable! You conquered Lesimas!"s));
    update_screen();
    const auto win_words = txtsetwinword(3);
    for (int cnt = 0; cnt < 3; ++cnt)
    {
        ELONA_APPEND_PROMPT(win_words[cnt], key_select(cnt), ""s + promptmax);
    }
    rtval = show_prompt(promptx, prompty, 310, show_prompt_type::cannot_cancel);
    wincomment = ""s + promptl(0, rtval);
    mode = 7;
    screenupdate = -1;
    update_screen();
    if (jp)
    {
        msg_clear();
        txt(u8"「お前がここに辿り着くことは」台座から、何かの声が聞こえる。"s);
        flt();
        characreate(-1, 23, cdata[0].position.x, cdata[0].position.y);
        play_music(69);
        msg_halt();
        msg_clear();
        txt(u8"「決まっていたことなのだ…遅かれ早かれな」"s);
        txt(u8"部屋の空気が突然緊張し、あなたの前に端麗な青年が現れた。"s);
        txt(u8"「我々からすれば、複雑性の一面に過ぎないが、人間は運命とでも呼ぶのだろう？」"s);
        msg_halt();
        msg_clear();
        txt(u8"あなたは懸命に脚の震えを抑えようとしたが、難しかった。"s);
        txt(u8"華奢に見える幼顔の男の影は、人のものではない。"s);
        txt(u8"あどけない瞳の奥に、あなたは底知れない力と闇を感じた。"s);
        msg_halt();
        msg_clear();
        txt(u8"「ネフィアの永遠の盟約に基づき」青年は台座の横の死体を指し、皮肉な微笑を送った。"s);
        txt(u8"「この哀れな老人が守っていたものは、今からお前のものだ」"s);
        msg_halt();
        msg_clear();
        txt(u8"あなたは、台座の上に置かれている絢爛な装飾の本を、いぶかしげに眺めた。"s);
        msg_halt();
        tc = findchara(23);
        speak_to_npc();
        msg_clear();
        txt(u8"青年は悪戯っぽくニヤリと笑い、壁に寄りかかった。"s);
        msg_halt();
        msg_clear();
        chara_vanquish(findchara(23));
        screenupdate = -1;
        update_screen();
        txt(u8"…どれくらい時間がたっただろう。氷の瞳の男は、いつの間にか姿を消していた。あなたは不安を振り払い、ゆっくりと本に手を伸ばした…"s);
        msg_halt();
    }
    mode = 0;
    play_music(71);
    label_1442();
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"void.bmp", 1);
    pos(0, 0);
    gzoom(4, 0, 0, 640, 480, windoww, windowh);
    gsel(0);
    label_1443();
    pos(0, 0);
    gcopy(4, 0, 0, windoww, windowh);
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"g1.bmp", 1);
    gsel(0);
    s = lang(
        ""s + cdatan(1, 0) + cdatan(0, 0)
            + u8"に祝福あれ！あなたは遂にレシマスの秘宝を手にいれた！"s,
        u8"Blessing to "s + cdatan(0, 0) + u8", "s + cdatan(1, 0)
            + u8"! You've finally acquired the codex!"s);
    draw_caption();
    s(0) = lang(u8"*勝利*"s, u8"*Win*"s);
    s(1) = ""s + strhint3;
    windowshadow = 1;
    ww = 680;
    wh = 488;
    pagesize = 0;
    display_window(windoww / 2 - ww / 2, windowh / 2 - wh / 2, ww, wh);
    cmbg = 0;
    x = ww / 3 - 20;
    y = wh - 140;
    gmode(4, 180, 300, 250);
    pos(wx + ww - 120, wy + wh / 2);
    grotate(4, cmbg / 4 % 4 * 180, cmbg / 4 / 4 % 2 * 300, 0, x, y);
    gmode(2);
    display_topic(lang(u8"制覇までの軌跡"s, u8"Trace"s), wx + 28, wy + 40);
    font(14 - en * 2);
    pos(wx + 40, wy + 76);
    mes(lang(
        ""s + 517 + u8"年"s + 8 + u8"月"s + 12
            + u8"日に、あなたはノースティリスに到着した。"s,
        u8"In the year "s + 517 + u8", "s + 12 + u8"/"s + 8
            + u8", you arrived at North Tyris."s));
    pos(wx + 40, wy + 116);
    mes(lang(
        u8"最深で"s + gdata_deepest_dungeon_level + u8"階相当まで到達し、"s
            + gdata_kill_count + u8"匹の敵を殺して、"s,
        u8"You've killed "s + gdata_kill_count
            + u8" creatures and reached\nmaximum of "s
            + cnvrank(gdata_deepest_dungeon_level) + u8" level of dungeons."s));
    pos(wx + 40, wy + 146);
    mes(lang(
        u8"現在"s + calcscore() + u8"点のスコアを叩き出している。"s,
        u8"Your score is "s + calcscore() + u8" points now."s));
    pos(wx + 40, wy + 186);
    mes(lang(
        ""s + gdata_year + u8"年"s + gdata_month + u8"月"s + gdata_day
            + u8"日にレシマスを制覇して、"s,
        u8"In the year "s + gdata_year + u8", "s + gdata_day + u8"/"s
            + gdata_month + u8", you conquered Lesimas."s));
    pos(wx + 40, wy + 206);
    mes(lang(
        u8"あなたは「"s + wincomment + u8"」とコメントした。"s,
        u8"Upon killing Zeome, you said, \""s + wincomment + u8"\""));
    pos(wx + 40, wy + 246);
    mes(lang(
        u8"…あなたの旅はまだ終わらない。"s, u8"Your journey continues..."s));
    redraw();
    key_list = key_enter;
    keyrange = 0;

    while (1)
    {
        await(config::instance().wait1);
        key_check();
        cursor_check();
        if (key == key_cancel)
        {
            play_the_last_scene_again();
            return;
        }
    }
}



void play_the_last_scene_again()
{
    update_entire_screen();
    txt(lang(
        u8"達成のシーンをもう一度再現する？"s,
        u8"You want to watch this event again?"s));
    ELONA_YES_NO_PROMPT();
    rtval = show_prompt(promptx, prompty, 160);
    if (rtval == 0)
    {
        conquer_lesimas();
        return;
    }
    gdata_main_quest_flag = 180;
    update_screen();
    return;
}



turn_result_t pc_died()
{
    cc = 0;
    snd(50);
    screenupdate = -1;
    update_screen();
    if (gdata_executing_immediate_quest_type)
    {
        return pc_died_during_immediate_quest();
    }
    txt(lang(u8"さようなら… "s, u8"Good bye... "s));
    txt(lang(u8"遺言は？"s, u8"You leave a dying message."s));
    inputlog = "";
    input_text_dialog((windoww - 310) / 2 + inf_screenx, winposy(90), 16);
    if (inputlog == ""s)
    {
        txtsetlastword();
    }
    else
    {
        lastword = lang(u8"「"s, u8"\""s) + inputlog + lang(u8"」"s, u8"\""s);
    }
    buff = "";
    notesel(buff);
    const auto bone_filepath = filesystem::dir::save() / u8"bone.txt";
    if (fs::exists(bone_filepath))
    {
        std::ifstream in{bone_filepath.native(), std::ios::binary};
        std::string tmp;
        while (std::getline(in, tmp))
        {
            buff(0) += tmp + '\n';
        }
    }
    s = cdatan(1, cc) + u8" "s + cdatan(0, cc) + lang(""s, u8" "s) + lastword;
    lenfix(s, 60);
    s += lang(
        ""s + gdata_year + u8"年"s + gdata_month + u8"月"s + gdata_day
            + u8"日"s,
        ""s + gdata_year + u8"/"s + gdata_month + u8"/"s + gdata_day);
    noteadd(""s, 0);
    noteadd(s, 1);
    s = lang(
        mdatan(0) + u8"で"s + ndeathcause,
        cnven(ndeathcause) + u8" in "s + mdatan(0) + u8"."s);
    noteadd(s, 2);
    s = ""s + calcscore() + u8","s + cdata[cc].image;
    noteadd(s, 3);
    if (noteinfo() >= 320)
        for (int cnt = 320, cnt_end = cnt + (noteinfo() - 320); cnt < cnt_end;
             ++cnt)
        {
            notedel(320);
        }
    page = 0;
    while (1)
    {
        p(1) = 0;
        for (int cnt = 0; cnt < 79; ++cnt)
        {
            p = cnt * 4;
            noteget(s(10), p + 3);
            csvsort(s, s(10), 44);
            p(2) = elona::stoi(s(0));
            noteget(s(10), p + 7);
            csvsort(s, s(10), 44);
            p(3) = elona::stoi(s(0));
            if (p(3) > p(2))
            {
                if (cnt == page)
                {
                    page = cnt + 1;
                }
                else if (cnt + 1 == page)
                {
                    page = cnt;
                }
                for (int cnt = 1; cnt < 4; ++cnt)
                {
                    noteget(s, p + cnt);
                    noteget(s(1), p + 4 + cnt);
                    noteadd(s, p + 4 + cnt, 1);
                    noteadd(s(1), p + cnt, 1);
                }
                p(1) = 1;
            }
        }
        if (p(1) == 0)
        {
            break;
        }
    }
    for (int cnt = 0, cnt_end = (noteinfo() / 4); cnt < cnt_end; ++cnt)
    {
        noteadd(""s + cnvrank((cnt + 1)) + lang(u8"位"s, ""s), cnt * 4, 1);
    }
    {
        std::ofstream out{bone_filepath.native(), std::ios::binary};
        out << buff(0) << std::endl;
    }
    gsel(4);
    pos(0, 0);
    picload(filesystem::dir::graphic() / u8"void.bmp", 1);
    gsel(0);
    show_game_score_ranking();
    s = lang(
        u8"あともう少しで埋葬される…"s, u8"You are about to be buried..."s);
    draw_caption();
    ELONA_APPEND_PROMPT(
        lang(u8"這い上がる"s, u8"Crawl up"s), u8"a"s, ""s + promptmax);
    ELONA_APPEND_PROMPT(
        lang(u8"埋まる"s, u8"Lie on your back"s), u8"b"s, ""s + promptmax);
    rtval = show_prompt(promptx, 100, 240);
    if (rtval == 1)
    {
        show_game_score_ranking();
        s = lang(
            u8"あなたは埋められた。さようなら…（キーを押すと終了します）"s,
            u8"You have been buried. Bye...(Hit any key to exit)"s);
        draw_caption();
        redraw();
        press();
        return turn_result_t::finish_elona;
    }
    s = u8"dead"s
        + lang(
              (cdatan(1, 0) + cdatan(0, 0) + u8"は"s + mdatan(0) + u8"で"s
               + ndeathcause + lastword),
              (cdatan(1, 0) + u8" "s + cdatan(0, 0) + u8" "s + ndeathcause
               + u8" in "s + mdatan(0) + u8" "s + lastword));
    if (gdata_wizard == 0)
    {
        net_send(s);
    }
    screenupdate = -1;
    update_entire_screen();
    levelexitby = 3;
    return turn_result_t::exit_map;
}



void show_game_score_ranking()
{
    notesel(buff);
    gmode(0);
    pos(0, 0);
    gzoom(4, 0, 0, 800, 600, windoww, windowh);
    gmode(2);
    x = 135;
    y = 134;
    font(14 - en * 2);
    p = page - 4;
    if (p >= 80)
    {
        p = 72;
    }
    if (p < 0)
    {
        p = 0;
    }
    color(138, 131, 100);
    for (int cnt = p, cnt_end = cnt + (8); cnt < cnt_end; ++cnt)
    {
        p = cnt * 4;
        y += 46;
        if (cnt == page)
        {
            s = u8"New!"s;
        }
        else
        {
            s = u8" "s + cnvrank((cnt + 1)) + lang(u8"位"s, ""s);
        }
        pos(x - 80, y + 10);
        color(10, 10, 10);
        mes(s);
        color(0, 0, 0);
        bool no_entry = false;
        if (p >= noteinfo())
        {
            no_entry = true;
        }
        else
        {
            noteget(s, p + 1);
            if (s(0).empty())
            {
                no_entry = true;
            }
        }
        pos(x, y);
        color(10, 10, 10);
        if (no_entry)
        {
            mes(u8"no entry");
            color(0, 0, 0);
            continue;
        }
        mes(s);
        noteget(s, p + 2);
        pos(x, y + 20);
        mes(s);
        noteget(s(10), p + 3);
        csvsort(s, s(10), 44);
        pos(x + 480, y + 20);
        mes(""s + s + lang(u8"点"s, ""s));
        p = elona::stoi(s(1)) % 1000;
        chara_preparepic(p);
        pos(x - 22, y + 12);
        gmode(2, chipc(2, p), chipc(3, p));
        grotate(
            5,
            0,
            960,
            0,
            chipc(2, p) / (1 + (chipc(3, p) > inf_tiles)),
            inf_tiles);
        color(0, 0, 0);
    }
    color(0, 0, 0);
    return;
}



std::string refchara_str(int prm_0258, int prm_0259)
{
    dbmode = 16;
    dbid = prm_0258;
    dbspec = prm_0259;
    access_character_info();
    return refstr;
}



} // namespace elona
